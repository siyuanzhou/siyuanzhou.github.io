<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雾林鹿</title>
  <icon>https://www.gravatar.com/avatar/c005b7f5a80293cee96ee1b202d71eda</icon>
  <subtitle>常思己过，莫论人非</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-01-14T04:03:16.000Z</updated>
  <id>/</id>
  
  <author>
    <name>雾林鹿</name>
    <email>siyuanzhou@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于我和这个博客</title>
    <link href="/2099/l_2099-12-12-%E5%85%B3%E4%BA%8E%E6%88%91%E5%92%8C%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>/2099/l_2099-12-12-关于我和这个博客/</id>
    <published>2099-12-12T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>周思远，大工软院19届，目前华科计院研究生在读。主要研究文本数据处理，会点Java，会点Python，会的不深，项目不强，写写博客，记录生活。</p><p>博客地址：<a href="http://blog.newvalue.site/" target="_blank" rel="noopener">http://blog.newvalue.site/</a></p><p>(部分博客和学习汇总有待搬运，垃圾七牛云，让我的图片全炸了，以后还是自己建图床靠谱，而且重新排版很烦! 等有空再慢慢完成吧)<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周思远，大工软院19届，目前华科计院研究生在读。主要研究文本数据处理，会点Java，会点Python，会的不深，项目不强，写写博客，记录生活。&lt;/p&gt;
&lt;p&gt;博客地址：&lt;a href=&quot;http://blog.newvalue.site/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.newvalue.site/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(部分博客和学习汇总有待搬运，垃圾七牛云，让我的图片全炸了，以后还是自己建图床靠谱，而且重新排版很烦! 等有空再慢慢完成吧)&lt;br&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="随笔" scheme="/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>生活琐碎与叨叨</title>
    <link href="/2099/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/"/>
    <id>/2099/l_2099-01-01-生活琐碎与叨叨/</id>
    <published>2099-01-01T02:36:00.000Z</published>
    <updated>2020-09-28T08:51:59.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言——记录的意义"><a href="#前言——记录的意义" class="headerlink" title="前言——记录的意义"></a>前言——记录的意义</h4><p>敢于审视内心的人，是值得尊敬的；善于思考人性的人，是充满智慧的</p><p>我不是，但需要变得是</p><p>懦弱的人总习惯把内心小人藏得很深，深到不敢触及，以至于淹没了曾经，尘封了经历与过往</p><p>虚假的人更会藏住内心的真实，表现出自己想成为的模样，最终也活不成别人眼中的自己</p><p>可如果与内心的小人说话，都是谎话，那记录，又有何意义？</p><a id="more"></a><p>越长大，日记越是件难事</p><p>因为生活琐碎，因为压力繁杂，因为心智成熟，也因为伪装久了，便下意识不去触及心中的小人了</p><p>慢慢地我们漠然，啥也不问，啥也不想，啥也不恋，凡是过往，终将在生活的琐碎中忘却</p><p>可我始终认为，我需要记录，需要记录真实的自己，记录自己生命中的成长与感悟，在记录过程中，督促自己思考与总结。人总是逃避思考，逃避与自己对话。孤独才是人生永恒的状态，而与自己和解，与自己相处，正是孤独成长中的不可或缺。</p><p>也许多年以后，回顾自己写的东西，或许会觉得幼稚，或许会觉得不值一提，但这正是我自己亲身经历过的，它汇聚了我青春的成长与感悟，纵使凌乱繁杂，幼稚单调，但自有它存在的尊严与价值</p><p>=======================================================================================</p><p>此篇记录生活中的琐碎与叨叨，人生如逆旅，我亦是行人，在社会夹缝中求存的我们，历经苦难、艰辛与复杂。</p><p>票圈繁杂，顾忌太多，博客少有关注，以此为树洞，记录自己的平凡，也见证自己的成长。</p><p>=======================================================================================</p><hr><p>2020.02.11<br>我相信互联网上有很多和我一样正处于大学阶段的伙伴。我们初生牛犊不怕虎，我们在社会的边缘徘徊观望。我们拼命的试探着去融入这个社会，我们力量很薄弱，我们去搜寻了解各种各样的信息以求为未来铺路。正义的,我们欢呼高歌！邪恶的，我们信心大失，痛恨着自己无能为力。<br>我们深知我们唯一能做的就是不断的捧出那一次次的邪恶，想着他能够引起所有人的重视，从而解决。待到尘埃落佛，我们可以自豪的说，哈哈，我也出了分力！可当捧出的一次次不管用时，当我们越发地发现自己的力量多么卑微时，我们害怕啊！害怕终有一天我们也会成为受害者！害怕！终有一天我们也会融于邪恶。</p><hr><p>2020.02.07——父母的艰辛一生</p><p>疫情日益严重，也有时间陪陪父母，和爸妈聊聊天，今天聊到了他们的一生，大起大落，兜兜转转，生活不易，且行且珍惜。<br>想我爸这些年，当过兵，掌过勺，开过厂，做过保安队长，搞过小餐饮，也出国包过工，最后安安稳稳，静待退休，兜兜转转，起起落落，虽不大富大贵，但勤劳善良，让我让家，能小富即安，能吃穿不愁，能安安稳稳，从一穷二白到四层楼房，从农村到城市，从一无所有到富足有余，这些年，让我从没为钱发过愁，时有余钱接济亲友，家庭亲友和睦，对我关爱有加。<br>回顾父母一生，回顾那个年代，赚钱养家真不易，改革，税款，国家粮，房子，户口，下岗潮，多不易，多艰难。<br>生活不易且珍惜，勤劳致富莫怠惰</p><hr><p>2019.06.23——毕业随笔</p><p>四年尘埃落定，手握四菜一汤，顺利毕业～<br>大工软院，1503，江湖路远，道一声珍重，愿前程似锦，未来可期<br>这几天，重走了辅修路，逛遍了大连景，拍遍了软院楼，离别了旧时友</p><p>望了最后一眼大连海，吃了最后一顿东北饭<br>大学四年，我经历，我见证，我成长</p><p>在我一生的黄金时代，没有伤感，也少有遗憾，独少一张连理，久萦于心头，求之不得，得之不欢</p><p>再见大工，再见软院，再见大连 </p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/IMG_20180904_113513.jpg" alt="IMG_20180904_113513"></p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/D3193A927A4099856506419D9ED0F6D9.jpg" alt="img"></p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/image-20200428220345142.png" alt="image-20200428220345142"></p><hr><p>2019-06.16——双学位有感</p><p>毕业季临近，回顾总结了本科四年</p><p>关于工商管理双学位，我经常自问，从中得到了什么</p><p>为什么舍弃了三年的周末，早上5点多起床，坐三个小时校车去听课</p><p>双学位有点苦，也少见成效</p><p>我基本不可能靠双学位去成为一名高级经理，毕竟代码才是混生活的伎俩，码农搬砖才是生活基调<br>今天去本部拿学位证，与这群小伙伴聚了聚，聊了聊，发现坚持过后，都有所得</p><p>其中有跨保清华经管者，有以此跨考成功者，有以此找上工作当上经理者，餐上所言，无不有所得<br>正如全明大哥说的<br>愿回首辅修岁月，道一声无怨无尤<br>致谢大家，致谢这群让我坚持下来的队友和老师!<br>江湖路远，相见亦难，愿前程似锦，未来可期～</p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/TIM%E5%9B%BE%E7%89%8720190907225825.jpg" alt="TIM图片20190907225825"></p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/TIM%E5%9B%BE%E7%89%8720200428205153.jpg" alt="TIM图片20200428205153"></p><hr><p>2019.04.18——生日叨叨</p><p>又是一年生日，平凡而过，除了父母，也少有祝福。</p><p>平静的实验室搬砖，平静的吃饭追番，连今晚校园醉晚亭的晚会，也未能惊起心底一丝波澜。</p><p>平凡的生活一如往常，没有了往日的礼物，也没有祝福的大蛋糕。</p><p>近些年，早已逃离朋友圈，少有知晓，少有打扰，也少有惦念!</p><p>大学这两年，发现自己过的越来越孤独，习惯了一个人生活，习惯了一个人办事，习惯了处理身边的各种关系。</p><p>往日里一起和尿捏泥的小伙伴，也都默默为着自己的前途奔波，渐渐害怕打扰，少了联系，也淡了想念。</p><p>身边的关系都处的平淡，却也少了真真的知心人。</p><p>这两年生日，皆是如此，平淡而平凡；今后的生活，或亦将如此，孤独平淡，无人打扰，少有挂念。</p><p>孤独是一种与自己相处后的态度，是人生必须面对的精神依赖，愿我能在孤独中成长，在孤独中变强。</p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/image-20200428210356049.png" alt="image-20200428210356049"></p><hr><p>2018.12.10——偶遇交通事故</p><p>打车回学校，在路上三车追尾相撞</p><p>车速挺快，副驾驶大哥没系安全带，头撞碎了前玻璃，虽没流血，但起码也脑震荡</p><p>我身体没事，只一点小插伤，劫后余生，跟司机说了声，就另外打了个车，回学校了</p><p>整个事情，没和父母说，没和朋友提，怕他们担心，默默回学校，一如生活的往常</p><p>这些年的报喜不报忧，这些年的苦难挫折，这些年了解的生活艰辛，这些年学会的沉默与包容，或许这就是成长吧</p><hr><p>2018.11.18——初探武汉生活</p><p>四年飞逝，独自离家生活与求学，打卡了大连景色各地，却未曾领悟这座小城的唯美与适逸，也遗憾少了张连理；</p><p>离开近一月，领略了武汉的喧嚣与地气，才发现，大学偏安处的闲适，小城里透过的那份安逸，也弥足珍惜。</p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/image-20200428210605883.png" alt="image-20200428210605883"></p><hr><p>2018.10.03——长山群岛游</p><p>保研结束，忙里偷得一丝闲，便有了登群岛赶海，吃遍渔家的想法。说干就干，背上包，就来到了这块尚未完全旅游化的群岛，是群岛也是小镇，各岛养鱼为生，旅游为辅， 岛上随处海景房，出门就是沙滩，面朝大海，天清海阔。虽然国庆假期，这里却避开了人山人海，旅人稀少，悠闲自在，清爽惬意。</p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/7b70d554bc1b25c6.jpg" alt="7b70d554bc1b25c6"></p><p>大学来，很久没有这么放松，大抵一个阶段结束，抛却一众烦恼，难得清闲，心情亦舒畅不少。</p><p>出来玩，总会有些意外事件，但那又何妨？纵使乘车过站，亦可横跨大海，纵横两岛之间；纵使错过出港，亦能纵情山间，享受滨海风光；纵使深秋水冷，也敢下海博浪，感受海味咸凉；纵使海鲜闭市，也能啤酒下肚，豪取其中肥鲜。</p><p>意外过后，总有惊喜，保研也是如此。跑遍了全国，历经了风浪，一次次意外，一次次心凉，想过逃避，也想过放弃，准备过工作，也决心过考研，好歹结局还行，是惊喜，终没让我失望。</p><p>大学这几年，去过不少地方，但始终来去匆匆，匆匆打卡，又慌慌而归，没时间停留，缺少驻足，也少了细细的聆听。那一个个景点，似一个老态龙钟的老者，迎来了一批批前来换心情的游客，让他们带着相同的心情而归，只留下一张张打卡照和一如往常。</p><p>这些年，我亦从未曾读懂过一个城市，包括承载了我四年青春的大连，也是如此匆匆而过，即将毕业，或许终将没有机会来驻足体会。</p><p>但在这里，这个下午，我躺在岛边，听着澎湃的浪，吹着细徐的风，任思绪回荡，什么都去想，又什么都放，渐渐有所感，有了记录的欲望。</p><p>当船收锚前行，是离港，也是起航，纵历经风浪，终到远方，那是岛与梦想。</p><hr><p>2018.07.11——毕业方向抉择与思考</p><p>步入大三下学期，未褪去那份初入大学时的天真，保研就业考研等各种选择却接踵而至。面对各路神仙的嘲讽与吊打，面对各种牛逼院校与工作岗位的狂轰乱炸，从未好好抉择的我，难免动心，也难免迷茫。</p><p>怕自己没能进入大佬的牛逼圈子，也怕自己做出后悔的选择。开学第一天，夜谈到了深夜两三点，也没能给出明确的选择。选择终究要自己做，我终究得对自己负责。</p><p>以前中学时打架犯了大错，还记得老师问我为什么要努力学习？我楞然。</p><p>她说，努力，是为了有更多的选择。现在，当面临着各种选择时，又茫然又退缩。</p><p>我十分讨厌这种压在保研线上的感觉，这种薛定谔的状态，让我畏手畏脚</p><p>找实习对我而言，说是为了多一种选择，其实是一种退路，我真的想工作吗？我真的能胜任工作吗？我真的有为实习准备过吗？</p><p>现在才发现，其实老师那句话挺对的，努力，是为了有更多的选择。现在才后悔当初没能把成绩提上去，那些名列前茅的人，才是多了一种选择，那种Offer收割机，才有更多的选择。而我多的，只是那种不自信的不安全感，那种害怕失败状态下的无路可退。而我，只是为了在这种不安全感中，找到那种我还在努力的精神慰藉。</p><p>台湾清华大学彭明辉教授的写过的一段话：“生命是一种长期而持续的累积过程，绝不会因为单一的事件而毁了一个人的一生，也不会因为单一的事件而救了一个人的一生。属于我们该得的，迟早会得到；属于我们不该得的，即使侥幸巧取也不可能长久保有。”</p><p>选择不重要，重要的是那份选择过后的坚持，以及自身不断努力后能力的提升，而我能做的，就是远离投机，做好当下。</p><hr><p>2018.03.03——自律得自由</p><p>以为自由就是想做啥做啥，后来才发现自律者才会有自由。当一个人缺乏自律的时候，他做的事情总是在受习惯和即时诱惑的影响，要么就是被他人思想观念所扰，要么就是无限的虚度空虚与无聊，几乎永远不可能去做内心真正渴望的事，一段时间后回首，发现所得寥寥，又陷入深深的自责与反省中，如此循环。</p><p>自律并不是让一大堆规章制度来层层地束缚自己，而是用自律的行动创造一种井然的秩序来为我们的学习生活争取更大的自由。亦如康德所言：所谓自由，不是随心所欲，而是自我主宰。</p><p>身边我认为比较强的人，都是比较自律的人，他们能很好的规划自己的生活，能做好自己的事，甚至不喜欢的事。所以他们有更多时间做他们喜欢的事，来获得满足感和成就感，而满足感和成就感，又能反过来推着他们自律。</p><p>所以，才有了有些人每门课90+甚至95+，我自认为90+没什么，喜欢一门课，努力去学，认真对待也能拿到，但那些自律的人，门门课程95+，连军训体育亦不例外，这就不是单纯的喜欢了，而是源于他们的自律。同样也有这样一句话：身处清华北大，你会发现，总有那么一些人，把他们的兴趣，发展的比你的主业更好，这些人都是自律者，他们能很好的规划自己的生活，让自己有更多的选择，也得到了自律后的自由。</p><p>正如有人说的：真正内心强大的人，能把不喜欢的事，做到极致。</p><p>我不是一个自律的人，更不是一个自由的人，自律得自由，自由沁人心。</p><hr><p>2017.08.13——鞍山补课经历</p><p>回顾这16天的生活，确实很辛苦很累，体味了一次人生的不易，生活的艰难，也真正意义上赚得了人生第一桶金，朝着人格独立的第一步——经济独立踏出了较为关键的一步。</p><p>也是我第一次离开故乡，并非旅游的独自生活，也可以说是生存</p><p>巨大的压力，艰苦的环境，加上备课的负担，还有学校项目的步步紧逼，各种DDL，让我差点没坚持下来。</p><p>睡眠不足，上课辛苦，回想起来，整天除了上课，备课，就是找机会睡觉。这段经历，收获颇丰，感受了现行教育体制的不公及资源的严重不平衡，体会到了身处教育薄弱地区学生的奋进与无奈，回顾自己求学之路，感慨万分。</p><p>但我感怀于学生们的努力</p><p>感怀与他们对于高考的美好憧憬，感怀于他们12点依然不愿走的那份纯真，感怀于那份备战高考的艰辛岁月</p><p>也让我体会到了另一种生活</p><p>让我完成教师与学生的转换，让我肚中的墨汁没能烂在肚子里，也让我忆起了自己的高中，那份些少有的努力时光</p><p>我也尽我所能，教出了自己的全部经验，问心无愧</p><p>相信命运的天平会倾向努力的人，相信他们能担得起那份努力，受得住这份责任，扛得住这份孤独与黑暗</p><p>让自己有一份更好的选择，有一片更好的天空。</p><p>这16天，很苦，也很充实</p><p>我深受他们的尊重，也深受你们的照顾，与你们一起，我看到了当初那个不服输的自己</p><p>这段经历，充实感慨而快乐！</p><hr><p>2017.06.24——湖北高考作文有感</p><p>以前我十分钦佩高考满分作文，钦佩那些考生们在有限的考试时间内充分展示出的哲思与文采，总会在紧张的考前细细品味，找出其中感人之处。</p><p>至今任然记得那”思方行圆 止于至善”的哲辩；感慨那”左手烈酒 右手清茶”的洒脱；回味那”心有猛虎 细嗅蔷薇”的豪迈；欣赏那”上善若水任方圆”的怡然。</p><p>然而，当湖北卷被全国卷取代，当湖北考生为了适应全国统考的安排，渐渐褪去了那份湖北特有的人文气息，失掉了荆楚少年那份朝气洒脱，少掉了那份对人情对乡土对真善美的思考，转向追求高而大、形而上、那份华而不实，不禁哗然。</p><p>回顾备考时光，我总吐槽湖北卷的变态，吐槽那用乡土错字来折磨我们的字音字形；吐槽那直接放弃的数学压轴；吐槽那难到爆炸做不完的理综试卷；吐槽那九磅十五便士的英语听力。</p><p>但年岁增长，经历了几年的大学时光，渐渐有了自己的思考，我开始感谢我的高考，感谢当年折磨我到死的湖北卷。感谢那些开放自由的阅读理解，让我冲破题目的限制，学会带着思考去阅读；感谢那些变态难懂的数学题，让我静下心去论证解答，给我打下了坚实基础；感谢那晦涩难懂的理综，让我体会到了争分夺秒的可贵；感谢那老师不交全靠刷题的英语，让我接触到了自学魅力，受用至今，成就了我知识的巅峰。</p><hr><p>2017.05.06——海贝晚霞</p><p>我喜欢独自去傍晚的海边，享受那海风徐徐，望着那抹残红没入远方的海港，任思绪回荡，什么都想，又什么都放，与孤岛对望，渐渐同海天和渔舟笼上一抹淡淡的黑，插上耳机，坐在车边，看路边繁华点点，霓虹现现。</p><p><img src="/../assets/pic/l_2099-01-01-%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E%E4%B8%8E%E5%8F%A8%E5%8F%A8/image-20200428215237823.png" alt="image-20200428215237823"></p><hr><p>2016.01.01——大一元旦</p><p>经历了高考的迷茫，熬过了等成绩的紧张，混过了那个疯狂的暑假，度过了离别的惆怅，迎来了初入大学的向往。</p><p>2015是注定不平凡的一年，这一年，我成年，这是一份责任，也包含自己成长的担当，我将独自收拾好行囊，远走他乡。这一年，有苦有累，有舍有得，注定是生命中最精彩的一年，从此高考就是那年，从此，我们就是那年，从此，故乡只有冬夏，再无春秋。</p><p>2016新的一年，新的起点，新的希望，愿我担负起成年的责任，走在新的路上。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言——记录的意义&quot;&gt;&lt;a href=&quot;#前言——记录的意义&quot; class=&quot;headerlink&quot; title=&quot;前言——记录的意义&quot;&gt;&lt;/a&gt;前言——记录的意义&lt;/h4&gt;&lt;p&gt;敢于审视内心的人，是值得尊敬的；善于思考人性的人，是充满智慧的&lt;/p&gt;
&lt;p&gt;我不是，但需要变得是&lt;/p&gt;
&lt;p&gt;懦弱的人总习惯把内心小人藏得很深，深到不敢触及，以至于淹没了曾经，尘封了经历与过往&lt;/p&gt;
&lt;p&gt;虚假的人更会藏住内心的真实，表现出自己想成为的模样，最终也活不成别人眼中的自己&lt;/p&gt;
&lt;p&gt;可如果与内心的小人说话，都是谎话，那记录，又有何意义？&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="随笔" scheme="/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>网络上有趣观点记录</title>
    <link href="/2020/l_2020-02-11-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%A7%82%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>/2020/l_2020-02-11-网络相关观点记录/</id>
    <published>2020-02-11T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a>P2P</h5><p>P2P：俗称网贷。（peer to peer 个人对个人借贷）</p><a id="more"></a><p>10~16年蛮荒时期<br>2013年 500~800家 10亿级别平台<br>2014年 1800~2000家 100亿级别平台<br>2015年 3000 家<br>2015年 e租宝爆雷 ，融资700亿（实际500亿），宣发费用5亿元<br>16年~现在<br>平台层和监管层的博弈</p><p> 总结：P2P在中国发展快的原因：<br>• 后发优势。因为中国传统行业很弱，所以互联网行业才更快。<br>○ 中国互联网崛起和消费崛起的新趋势重合。<br>○ 改革开放在80年代，大多数细分领域产品质量不够高，所以互联网行业摧枯拉朽<br>• 三方投机心态助推。三方包括创业者、资本市场、普通理财者。<br>• 传统行业和互联网企业把金融业务当作增值点。（比如做市值，资金池，管理资金量）<br>• 监管红利。（法不禁止即自由）</p><p>①P2P行业乱象：假标，资金池，套路贷，线下理财等<br>②监管基本思路：设定准入门槛，制定行业规则标准，强制信息暴露公开，设定惩罚措施和退出机制<br>③监管步骤：暗中观察调研，舆论先行，闭门约谈开会，出台政策文件，运动式监管，如有必要国资入场<br>④国内金融监管进程，还未完成。（1+3，穿透式监管，三降，化解存量）<br>⑤预测P2P会维持在一个小规模状态</p><h5 id="游戏设计思路"><a href="#游戏设计思路" class="headerlink" title="游戏设计思路"></a>游戏设计思路</h5><p><img src="/../assets/pic/l_2020-02-11-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%A7%82%E7%82%B9%E8%AE%B0%E5%BD%95/image-20200312160315789.png" alt="image-20200312160315789"></p><h5 id="自媒体"><a href="#自媒体" class="headerlink" title="自媒体"></a>自媒体</h5><p>一、长期来看自媒体最重要的成功前提：<br>1、内容能力（短时间难提高）。<br>2、一个清晰合适的定位。<br>二、定位用处：<br>1、降低竞争力。<br>2、增大被特定群体关注的可能性。<br>三、定位包括：<br>1、垂直领域定位。<br>2、风格定位。<br>3、内容类型定位。<br>四、三种寻找定位的基本思路：<br>1、根据“你擅长什么”去找。即能力、积累、资源或稀缺身 份。<br>2、根据“你喜欢什么”去找。<br>3、根据“哪里有红利”去找（竞品查漏方法论）。</p><p>涨粉步骤：<br>发视频→被看到→被打开→被认可→被关注<br>步骤拆解<br>1.被看到途径：<br>A、粉丝推送【被粉丝量决定】<br>B、搜索（关键词等）【被选题范围、标题、标签决定】<br>C、推荐①首页②跳转③资源位【被综合数据（三连完播互动等）决定】<br>D、内容板块①热门②频道③排行榜【视频有比较高的影响后才可能做到】<br>E、站外分享【观看视频后产生认同感或者震撼被分享到社交平台】<br>普通视频播放量来源：A&amp;C＞B&amp;E<br>爆款视频播放量来源：D<br>结论：普通UP流量主要通过C【推荐】获得<br>2、被打开的两种情况：<br>A、陌生流量打开率：封面、标题、选题范围决定<br>B、粉丝打开率：封面、标题、选题范围以及粉丝粘性决定<br>3、被认可的情况：<br>A、感性方式触动受众。（有趣、震撼、感动）<br>B、内容有用。（干货）<br>C、用心（用大量时间、精力、金钱完成视频）<br>D、被赞同（老蒋同类视频，有分析，有道理等）<br>4、被关注的逻辑：<br>A、粉丝相信UP的长期输出能力<br>B、UP的个人魅力<br>B站推荐流程：UP主发视频→①动态推送给粉丝②抓取关键词算法特征匹配给【流量池A】→反馈数据计算权重分（点赞、投币、收藏、完播、弹幕、分享）→【流量池B】→反馈数据→【流量池C】→ … … →上热门、排行榜、资源位等（视频流量分界点，流量池进一步扩大，被B站运营注意获得更多流量资源））→爆款</p><p>自媒体打法：<br>• 流量型<br>○ 打法<br>§ 社会新闻、鸡汤…<br>§ 矩阵型打法（很多号）<br>§ 早期平台流量红利<br>○ 优势<br>§ 获客快<br>○ 劣势<br>§ 获客成本高（广点通：5-6块获客成本；抽奖：需备案成本+ 3-7块获客成本）<br>§ 粉丝没有忠诚度和黏性，不会消费，文章打开率低<br>§ 维护成本高，百万粉丝维护成本1-2万/日<br>○ 变现方式<br>§ 品牌广告<br>§ 带货• IP 型<br>○ 打法<br>§ 定位，想清楚干什么 + 变现模式<br>□ 美妆、硬件测评 容易变现<br>□ 鬼畜 不容易变现<br>□ lifestyle 变现渠道广<br>□ 奢侈品 变现价值高<br>§ 发布文章的目的性要明确<br>□ 部分文章用于维持 b格（人设）<br>□ 部分文章用于让看的人多（做10w+）<br>○ 优势<br>§ 量更真实，广告价值 2~3 倍<br>§ 维护成本低<br>○ 劣势<br>§ 更难做：需要厉害的人在前端输出文章<br>○ 变现方式<br>§ （高端的）品牌联名广告<br>§ 卖货<br>§ 知识付费<br>§ IP 授权 （eg. 吾皇万睡，授权头像年盈利 8000万）<br>§ 灰色玩法（eg. 线下组团带队变现，比如去越南娶老婆、极限运动等）</p><p>• MCN（Multi-Channel Network）运营的渠道方：<br>即 传统行业中的 4A 公司（利用信息不对称，做低买高卖）<br>Wiki 解释：<br>是一种与视频平台配合使用的组织，可为区域内的频道所有者提供帮助，例如“产品，编程，资金，交叉推广，合作伙伴管理，数字版权管理，货币化/销售和/或受众发展”，以换取渠道广告收入的一定百分比。</p><p>• MCN 三种操作方式：<br>\1. 和大 KOL（Key Opinion Leader 指网红、流量明星、有影响力的人）合作，对接商家，压低进货价格，提高运营效率。<br>\2. 和小 KOL 合作，对 MCN 而言，小 KOL 有粉丝上涨空间； 对 KOL 而言，MCN 会指导如何涨粉、接广告、卖货。<br>\3. MCN 自己培养素人。</p><p>• MCN 核心能力：规模效应。要有足够多的 KOL ，渠道议价能力强。</p><p>• 自媒体平台的选择（用户价值）：<br>微信 &gt; 微博 &gt; 抖音<br>\1. 微信<br>\2. 微博<br>\3. 抖音：<br>a. 需要专门生产内容。<br>b. 不适合做长视频。适合做小话题，观点深刻透彻快速（短平快）。<br>c. 算法厉害（前三条视频的完播率、点赞率、吸粉率）会进行分级。<br>d. 风格统一。<br>• 任何平台都需要追热点。<br>• 最好全平台覆盖。<br>• 自媒体平台中，自己选择B站的原因：略。</p><p>• 自媒体平台 工作人员是否有用。<br>见(fei)仁(chang)见(you)智(yong)（有用）<br>比如B站，优点：会有及时的扶持和指点帮助；缺点：会有人情、腐败；<br>比如快手，严禁工作人员和播客接触，说明用处更大。</p><p>• 自媒体平台 私域流量和公域流量：<br>公域流量：信息流、微博热门、淘宝京东百度 等平台赋予你的曝光的流量。<br>私域流量：指自己的流量，比如微信公众号，朋友圈这种你可以基本完全把控、<br>自由反复利用，无需付费，又能随时触达的流量。</p><h5 id="电商直播"><a href="#电商直播" class="headerlink" title="电商直播"></a>电商直播</h5><p>总结一下李佳琦的优点<br>1.能拿到全网最低价的商品<br>2.选品99%是一线品牌<br>3.直播具有一定的娱乐效果。<br>4.能够站在目标消费者角度推销产品。</p><h5 id="面对流氓HR"><a href="#面对流氓HR" class="headerlink" title="面对流氓HR"></a>面对流氓HR</h5><p>社会水太深，不要太天真<br>上班防一手，被裁不用愁<br>欲加之罪不要怕，有理有据行天下<br>害人之心不可有，防人之心不可无<br>和老板对话留录音，心里舆论都站理<br>工作失误不轻认，新手上班需紧记<br>任何文件需慎签，到时被坑塌了天<br>N+1时需博弈，权衡利弊三思行！<br>除了邮件和OA，口头承若都是灰<br>套路口中有年假，先礼后兵才不假<br>年轻被坑不要莽，冷静处理不法盲<br>时刻关注劳动法，到时维权有国家<br>持料很黑要慎报，玉石俱焚没好报<br>劳动人民不弱小，劳动合同瞧一瞧<br>劳三 二五不要怂，上班打卡才有用<br>劳动仲裁是核武，不到绝路不要用<br>遇事不要怕，我们有国家</p><h5 id="中国互联网"><a href="#中国互联网" class="headerlink" title="中国互联网"></a>中国互联网</h5><p>对从业者 : 近几年国内互联网行业的红利期差不多结束了,行业发展速度放缓,对互联网从业人员的技术要求越来越高,相对的薪资也高,总之,高技术人才一直都是香饽饽,跟不上知识的进步就会被淘汰<br>对互联网公司 : 用户规模增长到顶了,没有新用户的涌入,公司的发展方向 1. 从现有用户身上赚钱: 提高服务质量和价格,增值服务; 2. 下沉策略 我国各个地区发展不平衡,服务从一二线城市扩展到三四线城市,农村; 3. 出海战略: 东南亚,印度,非洲,欧洲; 4. 转型为面向企业或政府服务<br>1 寒冬期会结束吗,春天什么时候到来<br>答: 美国经济爆发式增长了,在1970年开始放缓,直到90年代电脑普及,才开始新一轮的经济增长, 而中国在几十年时间的超高速发展,让我们以为世界的变化就应该是这么快,实际上我们只是在追赶他们的脚步,现在我们追上了,就要习惯增长放缓,等待量子计算等下一轮技术革命带来的红利,可能还有10年,20年<br>2 寒冬期怎么办?<br>答 创业公司做到被BAT并购或者稳扎稳打,一步一个脚印的走<br>3 寒冬期有哪些希望?<br>答 新的消费领域:品牌化观念增强,整体消费升级; 新技术:人工智能,5G,量子计算,物联网; 内容消费: 刷抖音,看视频,直播; 产业互联网: 产业链末端</p><h5 id="B站发展"><a href="#B站发展" class="headerlink" title="B站发展"></a>B站发展</h5><p>一、回顾上期：B站现阶段情况及发展方向<br>1、视频内容：二次元聚集地到UGC视频集散地<br>2、用户数量：1.1亿到2.2亿<br>3、发展策略：稳健型到激进型<br>二、B站发展扩张、投放渠道-是否需要下沉<br>态度：不下沉也能达到扩张的目标且对社区氛围影响较小，所以不下沉是较为明智的策略<br>原因：<br>1、不下沉能够达到目标。通过人口普查等数据，中国一二线城市中35岁以下人群达到1.8-2.0亿左右，B站抓住这部分人群是可以达到三年内客户增长至2.2亿的目标的。<br>2、下沉对社区氛围影响较大，现在B站内容调性较精致，不适合发展下沉策略。以剧本类短视频为例，比较了B站的朱一旦和快手的浇头哥等人。<br>3、推广广告建议：一二线城市楼宇广告、公交站牌广告，不建议走电视广告（以知乎哉世界杯的刘昊然广告为例），目标群体不同。<br>三、B站发展问题<br>1、老up主圈地自萌、不再交流：在资本和商业逻辑上问题不大，B站在现阶段没有替代品，老up主没地儿去<br>2、新up主遭遇冷遇：建议新人进来后不要一开始就引导其创造视频，而是应该先引导其了解B站，了解后再通过“萌新报道”“九月打卡”等计划引导其制作与B站相契合的视频，减少遇冷的情况<br>3、流量中心化、内容媒体化：即同质化严重、实质内容减少；类似于微博受到朋友圈冲击后，内容由记录生活的社区转变成了具有社区功能的媒体平台的一个存在，老蒋在这里表示不希望B站微博化，希望其走出自己的道路<br>四、B站发展工作重心<br>1、提升B站算法：内容分发&amp;个性化推荐。通过算法解决三个问题：一提升观众兴趣、二解决流量过度中心化、三过滤不良信息。<br>2、平衡社区氛围和客户数量之间的矛盾：市场和运营部门相互合作，实时监控，将B站社区氛围指标化，以此为基础实时调控市场广告投放速度及拉新速度。<br>3、提升商业变现速度：一要提升自身网站商业化变现速度；二是提升up主变现速度，让up主由“用爱发电”的心理激励转变成商业激励，减少社区氛围下降对其视频创作的影响力</p><p>b站趋势预测总结:<br>1.B站营收结构发生改变。<br>2.B站未来会上UGC的贴片广告。<br>3.B站up主收益提升。<br>4.成熟媒体开辟B站战场。up主群体重构。<br>5.新型恰饭方式。<br>6.频道分区改变，爆发流量处理能力提升。<br>7.MCN机构进驻。<br>8.B站土著水土不服出走。</p><h5 id="饭圈"><a href="#饭圈" class="headerlink" title="饭圈"></a>饭圈</h5><p>1、明星和爱豆的不同：核心商业逻辑不同。品牌方找明星代言：明星是靠社会影响力和公信力（霸王洗发水找成龙代言）吃公共空间影响力；针对流量明星的核心狂热粉丝，主要吃私域空间影响力。<br>2、爱豆空间在私域，顶流爱豆粉丝膨胀，造成战无不胜的错觉。然而事实上，再大的私域在和公共空间起冲突时都是私域一碰就碎（坤伦大战、227事件）<br>3、高度的侵略性和攻击性是粉丝属性的固有属性，会不断对别的组织进行施压产生冲突，会不断和公共空间产生冲突。<br>4、混饭圈有些类似于工作职场，像一种事业，层次分明，高度分工。<br>站姐、打头组、反黑控评组、网宣组、线下应援组、财务组、管理层。<br>饭圈会带来兴奋感也会产生厌恶感。<br>5、diss vb。vb最大的私域流量聚集地，16年以后推出超话和明星势力榜催助粉丝群体演化，vb太注重短期利益，忽视价值观考量，忽视用户体验。<br>6、227事件社会层面点：互联网兴起早期产品设计有一人一票制，让每个用户有发声的机会，每个人心中有公平的概念。</p><h5 id="互联网在线教育"><a href="#互联网在线教育" class="headerlink" title="互联网在线教育"></a>互联网在线教育</h5><p>千团，网约车，共享单车，在线教育大战<br>为什么互联网颠覆行业？因为互联网成本低，获客成本低，天生有吸流量的能力，规模效应<br>在线教育获客成本太高了，转化过程，正规渠道投放（注册，电话营销中心）成本太高了，灰色渠道tmk，洗好的号码贵（200到500），还有接通率50%，预约率30%，上体验课成本1300多了，首单成本3k已经很不错了，平均5k到7k，起码1w多的课才是现金流正常的，复购率低。这还没算老师成本（底薪<em>抽成</em>课题）standby成本（待命状态），运营成本<br>线上最高不到一百一节，一般七八十元，老师工资不好降低，高也不算高，补贴还不如网约车，能让提供服务者高兴，导致平台亏钱补贴，老师也没觉得赚，客户上万课程也没觉得赚<br>互联网优势发挥不出了<br>大班课毛利可以达到50%到70%，但不是所以模式都可以（一对一不合适）而且本身竞争就很激烈，还有拼效率高，拼质量好，拼储备足<br>慢行业，互联网人问题：求速度，不适合教育、农业等慢行业；追求模式上创新，但不是最主要因素，教育的质量口碑重要<br>拼钱和网约车差不多<br>线下可以把客单价格做高的<br>看好在线教育，但是时机不好，面临着洗盘<br>教育背景的搞 这是一个血海<br>创业关键不是钱，不是能力，关键在于在正确时间做正确的事，不能逆势而为，选方向要慎重一点</p><p>互联网为什么能颠覆很多行业：<br>• 成本低，很低价格获得用户<br>• 规模效应</p><p>在线教育问题：<br>• 综合获客成本太高 平均5000~7000一个用户<br>○ 正规渠道广告投放：行业内每天一两千万广告费<br>○ 灰色渠道 TMK：电话号码 200~500<br>○ 体验课 1300<br>○ 老师成本（授课50~80一节 + standy）<br>• 复购率极低<br>• 传统的线下模式，成本反而更低</p><p>大班课模式：<br>• 利润高：毛利能到 50%~70%：<br>• 适用性：K12教育可以，英语&amp;音乐&amp;绘画 不可以<br>• 人员配置：低配班主任负责管理、辅导；高配主讲老师研发、教学<br>• 竞争点：流量效率、转化成功率、内功、弹药充足</p><p>内功：<br>• 教育质量<br>• 互联网人的弊病：<br>○ 追求快（大干快上）<br>○ 太讲究模式上的创新</p><p>创业成功的点：钱 &lt; 能力 &lt; 时间点<br>• 钱：有能力自然有钱<br>• 能力：最顶级的赛道大家能力都差不多<br>• 时间点重要</p><h5 id="Libra"><a href="#Libra" class="headerlink" title="Libra"></a>Libra</h5><p>• 想建立一种简单的无国界的货币和金融基础设施<br>• 三个特点<br>○ 本质是超主权货币。由Facebook发起，背后有一个以美国大企业为主的联盟<br>○ 区块链技术。虚拟，不通过银行。<br>○ 货币价值稳定。发行多少需要抵押多少美元。<br>• Facebook 野心是什么？<br>1  开展全球支付业务。赚钱以摆脱目前的困境。且支付市场大。<br>2  替代弱势法币。<br>    a. 国家信用可以的，没有发达的支付方式的。<br>    b. 国家货币不太行。<br>3 成为全世界的中央银行。（把SDR开放给每个人）<br>• FaceBook 的优势<br>    1 用户多 27亿 &gt; 微信 11亿<br>    2 业界影响力大，团结行业力量创造丰富应用场景<br>    3 行业联盟，多方协同<br>• Libra 技术 没有推动区块链技术。</p><ol><li>BFT（拜占庭容错共识机制）<br>a. 缺点：无法发币<br>b. 优点：性能好（支持高并发），较安全（2/3的节点不出错即可）</li><li>非去中心化，多中心制。</li></ol><h5 id="期货"><a href="#期货" class="headerlink" title="期货"></a>期货</h5><p><img src="/../assets/pic/l_2020-02-11-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%A7%82%E7%82%B9%E8%AE%B0%E5%BD%95/image-20200502121141048.png" alt="image-20200502121141048"></p><h5 id="VIE架构"><a href="#VIE架构" class="headerlink" title="VIE架构"></a>VIE架构</h5><p><img src="/../assets/pic/l_2020-02-11-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%A7%82%E7%82%B9%E8%AE%B0%E5%BD%95/image-20200530192903666.png" alt="image-20200530192903666"></p><h5 id="怎么写BP商业计划书"><a href="#怎么写BP商业计划书" class="headerlink" title="怎么写BP商业计划书"></a>怎么写BP商业计划书</h5><p>实际业务质量计划书拉融资都重要<br>很多人没写写的人很多却也写不好<br>不论公司还是个体都建议准备BP<br>现在不用将来用而且需要多次打磨<br>不仅用于融资寻找合伙人时也使用<br>输出能够帮助自己去理解商业思路</p><p>格式建议：<br>格式通常选择PDF或PPT推荐前者<br>压缩至2M字体考虑到移动阅读调大<br>内容控制在20页内用于演讲30分内</p><p>大纲建议：<br>1、团队，什么人在操盘这个项目；<br>2、项目内容，做什么事解决什么需求；<br>3、市场规模，究竟有多大；<br>4、商业模式，收入构成收入预测情况；<br>5、核心优势，为什么这个项目能成；<br>6、相关数据，用户留存等关键数据；<br>7、竞争对手，主要对手关系如何；<br>8、财务情况，怎么花钱财务预算；<br>9、路线图，过去现在未来做什么时间点；<br>10、融资，融多少估值多少股权结构；</p><p>BP必须由创始人准备还要准备演讲稿<br>推荐逐字稿精炼内容话术加现场发挥<br>不同时长15m3m等版本需要提前准备<br>可以找朋友练习或者是录音回放优化</p><p>易错点：<br>1、内容过多，不是方案是敲门砖引起兴趣；<br>2、字数多，演讲要发挥不能照着念；<br>3、套话多，说简洁的人话有洞察；</p><p>亮点：<br>1、突出增长，这是本质上最吸引人的地方，投资人怕错过高增长项目，用可视化突出展现；<br>2、突出盈利，大环境好聊增长不那么好可以聊盈利；<br>3、团队执行能力，投资主要投人BP后面都可能会变不变的是牛人，首先突出CEO，第二说为什呢是最合适的团队，最后说团队过去实战情况经历。</p><h5 id="李自然现场写BP"><a href="#李自然现场写BP" class="headerlink" title="李自然现场写BP"></a>李自然现场写BP</h5><p>- 李自然习惯通过写作软件编写好内容再制作成幻灯片</p><p>前提思路：<br>1.项目是什么？<br>2.核心数据和发展情况<br>3.创始人是谁？</p><p>一个好的写作工具很重要。</p><p>思维方式&gt;写作形式&gt;实际内容。</p><p>​    </p><p>从idea到计划：</p><ol><li>机会和切入点（是一个什么样的机会，能不能找到一个非常具体的切入点，擅长的事或者最容易进入市场的方式是什么）</li><li>未来会做什么（业务将来会发展成什么样子）</li><li>创业的动机和打法风格（为了赚钱，为了成就感，单纯喜欢这件事情，创始人的追求会影响到项目未来的走向；保守打法：稳稳当当保证现金流，激进打法：尽快上规模，融资，牺牲利润换市场占有率）</li><li>团队是否擅长（团队是否对行业有足够的了解，机会摆在这里凭什么是你们几个能成事，团队有没有明显的短板。经验不足的情况下，建议只赚自己看得懂的钱，只做自己擅长的事，只做那些属于自己的机会。）</li></ol><p>创业idea（MCN为例）：</p><ul><li><p>机会</p></li><li><ul><li>资深业内人士的内容价值</li><li>长视频学习的潮流</li></ul></li><li><p>切入点</p></li><li><ul><li>互联网产品</li><li>商业案例分析</li><li>低成本创业</li><li>怎么做业务</li></ul></li><li><p>未来</p></li><li><ul><li>每个行业都有一个头部KOL的空间</li><li>帮助普通人获得有趣的行业知识</li></ul></li><li><p>打法</p></li><li><ul><li>自己孵化，精品路线，规模其次</li></ul></li><li><p>动机</p></li><li><ul><li>想成为中国行业竞品视频的教父</li></ul></li><li><p>团队</p></li><li><ul><li>还行</li></ul></li></ul><p>​    </p><p>MCN BP：</p><p>​    亮点（在第一页展示最核心，对方最感兴趣的东西）</p><ol><li>项目是什么</li><li>核心数据和发展情况</li><li>创始人</li></ol><p>​    </p><p>​    项目名称：MindHub</p><p>​    一句话说清楚项目的方法：特点描述+成功项目</p><p>​    </p><p>​    中国的/东南亚的/年轻人的/更便宜的</p><p>​    YouTube/抖音/微信/AirPods（对标产品需要成功）</p><p>​    </p><p>​    举例：</p><p>​    正确：我是做的是中国的Youtube / 东南亚的抖音</p><p>​    错误：我是做一个UGC的视频创作平台 / 分享生活的短视频平台</p><p>​    大众认为的成功（规模大）和投资人认为的成功（赚到钱）是不一样的。</p><p>​    </p><ul><li><p>摘要</p></li><li><ul><li><p>项目</p></li><li><ul><li>MindHub：左右去的行业视频，普通人的慕课</li></ul></li><li><p>数据</p></li><li><ul><li>全网粉丝80万，总播放量3000万</li><li>覆盖高净值人群：海外企业家，创业者，互联网从业者</li></ul></li><li><p>创始人 &amp; CEO</p></li><li><ul><li>连续创业者，有经验，赚过钱，拿过投资</li><li>现在想成为内容行业教父</li></ul></li></ul></li><li><p>团队（一定要说真话）</p></li><li><ul><li><p>李自然 联合创始人&amp;CEO</p></li><li><ul><li>前xxx CEO，海外第一xx项目，MAU xxx</li><li>前xxx CEO，某北美项目，年营收xxxx</li><li>前xxx CEO，东南亚xx项目，获得xx资本投资</li><li>《李自然说》主讲人，创投圈第一的长视频自媒体</li></ul></li><li><p>有经验，赚过钱，擅长流量运营、有做内容的激情、想赢</p></li></ul></li></ul><p>一级经历：赚过钱的连续创业者，创业成功的经历（做过知名产品，赚钱产品），相关的成功经历，大公司高管，拿过知名机构的投资（最好是帮投资人赚过钱）</p><p>二级经历：相关从业经历（行业专家），失败的创业经历（交过学费的），名牌学校毕业</p><p>三级经历：相关从业年限（某行业做了10年，至少是富有经验的人），电竞冠军可以写在BP（成功的人总有成功的方法，受到相关历练）</p><h5 id="心灵鸡汤"><a href="#心灵鸡汤" class="headerlink" title="心灵鸡汤"></a>心灵鸡汤</h5><p>一、心理建设前言<br>  1.位置稀缺 资源有限<br>  2.人各有志:人生不是只有争第一挣大钱这一种选择<br>  3.价值观（三问）:你想要什么 现在有什么 愿意放弃什么<br>  4.奋斗与佛系（的利弊）<br>二、给折腾者的心理建设<br>1.接受现实<br>2.改变命运<br>3.他刀不如自刀<br>4.命运青睐勇者<br>5.需要下长功夫<br>6.大都是普通人<br>7.学习是反人性的<br>8.世界是不确定的<br>9.我们接受不公平</p><p>方法论：<br>1.做增加实现目标概率的事<br>思维上做生产者而不是消费者(琢磨产业、上下游、靠什么赚钱、成本、哪里有利润)比如买鞋AJ(想想品牌方传播策略，IP如何赚钱，谁是消费群体，了解下球鞋的生产)，多去琢磨生产创造的事，把视角从消费者切到产品服务提供商。</p><p>2.二八定律<br>不要把时间放在实现目标概率不大的事上，专注最能给自己带来收益的，其他的不妨先放放</p><p>3.旗鼓相当的对手<br>身边的，水平相近的人，要选择适合的对手，比如游戏匹配，控制好学习区和恐慌区的度</p><p>4.量化舒适区，建立正反馈<br>神经网络算法：85%旧知识➕15%新知识</p><p>5.及时反馈<br>例如马拉松提示牌，考试目标给自己进度条</p><p>6.根据期望做选择<br>选择大于努力，成功概率✖️收益＝期望<br>例如彩票✖️后期望很低，也别占小便宜，像集五福转发浪费自己的时间</p><p>7.时刻准备着避险➕变通<br>五百强平均寿命三四十年，中小企业三年左右，准备好时刻跳槽，IT行业特别明显，30岁敲响警钟，35岁两手空空。提前谋算那些准备时间长，门槛高的工作。<br>30年前信奉国企的都下岗了，15年信奉线下的没人看得上阿里巴巴，信体制的，国企所有制改了，事业编竞聘上岗，世界在变，曾经的可靠，现在并没有那么靠得住，不必及早求安稳，能不能做事才是硬道理</p><p>8.做长线有复利的事<br>把健身，英语，教育等变成习惯</p><p>9.常常复盘<br>定期回顾总结，根据实操的结果增加你概率估算的准确性，然后调整策略，弥补不足，推荐：统计每天的时间消耗，看完就知道时间去哪了</p><p>10.希望<br>乐观相信未来，才有动力有干劲。<br>大脑，免疫系统都不喜欢情绪低落，如果真想做事就少说点丧气话，别给自己加个多余buff</p><p>抱怨时的心理建设：抱怨也是会消耗能量的，我们要把有限的能量去实现目标<br>发现自己出身差，起点低，没能站在巨人肩膀上的时候，就少说丧气话，把目光投向自身，让自己试着成为巨人！</p><h5 id="左与右"><a href="#左与右" class="headerlink" title="左与右"></a>左与右</h5><p><img src="/../assets/pic/l_2020-02-11-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%A7%82%E7%82%B9%E8%AE%B0%E5%BD%95/1c950a7b02087bf40564648cfcd3572c10dfcfce.jpg" alt="img"></p><p><img src="/../assets/pic/l_2020-02-11-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E8%A7%82%E7%82%B9%E8%AE%B0%E5%BD%95/v2-c5f1b3a364d4e8010fede0da6bbb8de8_1440w.jpg" alt="img"></p><p>左为追求平等，是以精神、思想力量集结同伴的一类人，也就是社会主义无产阶级，他们只有追求平等才能从富人手里分一杯羹，获得更好的生活。<br>右为追求自由，是以金钱、血缘力量集结同伴的一类人，也就是资本主义资产阶级，他们追求自由，不用顾忌他人，才能将自己的资本最大化。</p><p>左派通常主张积极改革，主张把旧的意识形态和制度革除，从而建立新的意识形态和制度，反对派一般自认为左派；右派一般较为保守，主张稳妥、秩序、渐进、缓慢的改革方式，强调维护旧有传统，保皇党一般自认为右派。</p><p>而所谓保守派和激进派的左或右，都是相对于本国现状而言的。所以中国与西方国家得出的结论是不同的。<br>先说中国，中华人民共和国是以社会主义为基础的，所以最根本是左的。而改革开放所引进的市场经济，则是以物质、金钱为价值体系的，这种思想在最开始左的基础上是偏右的，认同这种思想的人们认为个人财产国家无权掠夺，更愿意向西方发达国家学习，他们就是中国的右派，相对于之前的左发生变化，所以是激进派。而中国的左派则追求完全的平等民主，抵制西方思想的融入，支持个人利益要服从于国家利益，相对于之前的左没有变化，所以是保守派。</p><p>“左”倾错误（必须带引号）：在社会主义当中，左是正确的，而“左”倾则是指政治思想上超越客观，脱离社会现实条件，陷入空想、盲动和冒险的倾向，就是激进主义。所以,为了表示贬义，特在左字上添加了引号，即“左”倾,以区别于真正的左。<br>右倾错误：右倾则是指政治思想上，认识落后于实际，不能随变化了的客观情况变化、前进，甚至违背客观发展规律的倾向，具体表现为在革命斗争中过高估计敌人力量，过低估计革命力量，不敢积极发动和组织群众进行斗争，坐失有利时机，甚至悲观失望，退却逃跑，所以称为机会主义或投降主义。</p><p>美利坚合众国是以资本主义为基础，在根本上是右的。而一些统治者为了政权稳定，需要在一定范围内维持人们工作、生活的平稳，所以提出了民主平等思想，这在之前右的基础上是偏左的，也就是美国的左派，以民主党为代表，他们相对于之前的右发生变化，所以是激进派。而美国的右派则以共和党为代表，他们更乐意保障大资本家们的利益，这相对于之前的右没有变化，所以是保守派。极端的右是追求极端自由，极端民族主义，就是所谓的纳粹了</p><h5 id="杂糅观点汇总"><a href="#杂糅观点汇总" class="headerlink" title="杂糅观点汇总"></a>杂糅观点汇总</h5><p>时至今日，各种互联网开发技术已经非常成熟，99％以上功能性的东西，在技术上都可以被复刻，真正让产品独一无二的，不是硬的东西，是软的东西，产品也是有资产的，社交产品的资产是关系链，社区产品的资产是内容。</p><p>用力的啃好书，专心的做好项目，剩下的，时间会帮你搞定。</p><p>我的父母在他们年轻的时候，把我从农村带到了县城，我也希望把我的孩子，从小县城带到大城市</p><p>我告诉我喜欢你，并不是一定要和你在一起，只是希望今后的你，在遭遇人生低谷的时候，不要灰心，至少曾经有人被你的魅力所吸引，曾经是，以后也会是。</p><p>男人的极大幸运在于，他，不论在成年还是在小时候，必须踏上一条极为艰苦的道路，不过这是一条最可靠的道路</p><p>看到胖虎欺负大雄，你有两种选择<br>1.帮大雄<br>2.帮胖虎<br>3.假装没看到<br>4.说一个巴掌拍不响，双方都有错<br>为什么说两种选择，因为后三种都是在帮胖虎</p><p>喜欢不一定要擅长，一个是感觉的事，一个是时间的事。</p><p>在热点中找盲点，在大众中找小众</p><p>沾酒不醉是因为喝得少，见色不迷是因为摸不着，以德服人是因为打不过，淡泊名利是因为实在没招。</p><p>相关性里永远会有个例，而个例永远无法反驳比例</p><p>在钢铁洪流的城市里，几乎绝迹的人情。人情啊，人情又温暖，人情又恶心，既想人心里面多点人情，又不愿人情世故冷了人心。</p><p>几千年前人们坚信的某些神圣的坚守，在今日科学之神的冲击下变成了封建遗留，但这些文字游戏或者谐音禁忌，却由一代一代的口传心授，又一代一代的耳濡目染，一把一把地接力了千年，深深地烙进了我们的骨髓</p><p>资本原始积累的每一个毛孔里都渗透这肮脏和血</p><p>笨方法永远是最好的方法，你所走过的所有捷径，都会成为你构建系统的知识隐患</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;P2P&quot;&gt;&lt;a href=&quot;#P2P&quot; class=&quot;headerlink&quot; title=&quot;P2P&quot;&gt;&lt;/a&gt;P2P&lt;/h5&gt;&lt;p&gt;P2P：俗称网贷。（peer to peer 个人对个人借贷）&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="观点" scheme="/tags/%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>现代数据工程复习</title>
    <link href="/2019/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
    <id>/2019/2019-10-29-现代数据工程复习/</id>
    <published>2019-10-29T02:36:00.000Z</published>
    <updated>2020-08-27T06:53:14.911Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="现代数据管理的需求"><a href="#现代数据管理的需求" class="headerlink" title="现代数据管理的需求"></a>现代数据管理的需求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">High performance高性能——对数据库高并发读写的需求</span><br><span class="line">Huge Storage海量存储——对海量数据的高效率存储和访问的需求</span><br><span class="line">High Scalability高可扩展性&amp;&amp; High Availability高可用性的需求</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="现代数据管理特点"><a href="#现代数据管理特点" class="headerlink" title="现代数据管理特点"></a>现代数据管理特点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1）数据的形式多样</span><br><span class="line">    ——结构化、半结构化、非结构化</span><br><span class="line">    ——文本、图像、视频、音频</span><br><span class="line">    ——单模态、多模态</span><br><span class="line">2）查询的需求</span><br><span class="line">    ——文字匹配</span><br><span class="line">    ——基于语义</span><br><span class="line">    ——相似性匹配、排序</span><br><span class="line">    ——聚类、分类、去冗余</span><br><span class="line">3）应用和运行环境</span><br><span class="line">    和网络（尤其是语义网）结合更加密切、更加直接:</span><br><span class="line">    ——大量的数据直接来自网络，包括用于机器学习的训练数据和用于检索的数据。</span><br><span class="line">    ——可能需要从网络中获取知识。</span><br><span class="line">    ——与web应用集成（电子商务、搜索引擎、内容检索、情报分析）</span><br><span class="line">    ——网络后台数据 、爬虫</span><br><span class="line">4）处理的业务需求</span><br><span class="line">    ——面向海量数据，TB、PB级别</span><br><span class="line">    ——查询为主、更新为辅（日志更新例外）</span><br><span class="line">    ——数据一致性可弱化</span><br><span class="line">5）关键技术</span><br><span class="line">    ——海量数据的分布存储、分布式并行处理</span><br><span class="line">    ——相似性度量</span><br><span class="line">    ——高维数据处理</span><br><span class="line">    ——语义特征的获取</span><br><span class="line">    ——语义知识的组织与映射</span><br><span class="line">    ——模型的提出与训练</span><br><span class="line">    ——查询扩展与反馈</span><br><span class="line">    ——可视化</span><br><span class="line">6）系统开放性</span><br><span class="line">    ——分布式、易于扩充、低成本</span><br><span class="line">    ——新的编程模型</span><br></pre></td></tr></table></figure><h5 id="大数据特点（4V）"><a href="#大数据特点（4V）" class="headerlink" title="大数据特点（4V）"></a>大数据特点（4V）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Volume：数据体量巨大（从TB级别，跃升到PB级别）；</span><br><span class="line">Variety：数据类型繁多（网络日志、视频、图片、地理位置信息等等）；</span><br><span class="line">Velocity：处理速度快（1秒定律，有别于传统的数据挖掘技术）；</span><br><span class="line">Value：价值密度低。</span><br><span class="line">Veracity：真实性——IBM。</span><br><span class="line">Variability：易变性</span><br></pre></td></tr></table></figure><h5 id="12306关键技术"><a href="#12306关键技术" class="headerlink" title="12306关键技术"></a>12306关键技术</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）“双活数据中心”，由中国铁路总公司和中国铁道科学研究院两个双活数据中心同时工作和承担网站任务。</span><br><span class="line">（2）“异步交易排队”，大家同时买票不可避免，‘异步交易排队’会建立一个有序排队形式，使网站承载压力可控。</span><br><span class="line">（3）“分布式内存计算”，提高车票查询速度，该技术使得“不管是北京到太原30多趟车，还是北京到上海70多趟车，基本一两秒都可以出来”。</span><br><span class="line">（4）“混合云计算”。除了12306自己建立的云计算平台，还会在业务高峰期，将查询业务推到云端</span><br></pre></td></tr></table></figure><h4 id="多结构化数据存储与组织"><a href="#多结构化数据存储与组织" class="headerlink" title="多结构化数据存储与组织"></a>多结构化数据存储与组织</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Memcached(缓存系统、chunk块/slab块集、client实现分布式、一致性hash+虚拟结点、无冗余、处理“键值”集合)</span><br><span class="line"></span><br><span class="line">DynamoDB(一致性hash+虚拟结点+固定、NWR读写协议、Vector Clock、Merkel Tree、Gossip协议)</span><br><span class="line"></span><br><span class="line">Redis（缓存系统、持久化、node/client、slot槽、client缓存、多副本、P2P去中心化、无proxy、Gossip协议MEET/PING/PONG消息、ASKED/MOVED异常处理，处理五类Redisobject的键值集合）</span><br><span class="line"></span><br><span class="line">Trinity（slave/proxy/client、slot槽、槽key向量、全局寻址表（slot数组）、slot内部hash表、2/8原理，图分割，restrictive模型，异步消息，TFS分布式文件系统，leader节点一致性广播，处理图数据）</span><br><span class="line"></span><br><span class="line">Kad（ P2P覆盖网络、逻辑距离、近邻列表、查询即迭代和传播，处理文件）</span><br></pre></td></tr></table></figure><h4 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。更好的分配资源，更快速访问。</span><br><span class="line">在内存中缓存数据和对象，为动态、数据库驱动网站提供更快的运行速度。LRU替换策略</span><br><span class="line">减少读取数据库的次数，避免使用数据库应对高并发访问时磁盘开销和阻塞的发生。</span><br><span class="line">分布式缓存，不同主机上的多个用户可同时访问， 解决了单机应用的局限。</span><br></pre></td></tr></table></figure><h5 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用自己的页块分配器</span><br><span class="line">使用基于存储“键-值”对的hashmap哈希表。通过在内存里维护一个统一的巨大的hash表，Memcached能够用来存储各种格式（图像、视频、文件）</span><br><span class="line">虚拟内存不会产生碎片，虚拟内存分配的时间复杂度可以保证为O(1)。</span><br><span class="line">使用非阻塞的网络I/O，对内部对象实现引用计数。</span><br><span class="line">不提供冗余（如复制hashmap条目），当某个服务器S停止运行或崩溃了，所有存放在S上的键-值对都将丢失。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319111903166.png" alt="image-20200319111903166"></p><h5 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319112319008.png" alt="image-20200319112319008"></p><h5 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">早期的Memcached内存分配通过对所有记录进行malloc和free来进行。</span><br><span class="line">    （1）容易产生内存碎片；</span><br><span class="line">    （2）加重操作系统内存管理器的负担。 </span><br><span class="line">改进措施：默认采用Slab Allocator机制分配、管理内存。</span><br><span class="line"></span><br><span class="line">Slab Allocator基本原理：</span><br><span class="line">    Chunk——按照预先规定的大小，将分配的内存分割成各种特定长度的块。</span><br><span class="line">    slab class——尺寸相同的块分成组（chunk的集合）。</span><br><span class="line">    分配到的内存不会释放，重复使用已分配的内存</span><br><span class="line">    </span><br><span class="line">空闲chunk的列表：memcached根据该列表选择chunk，选择最适合数据大小的slab。</span><br><span class="line">比如将100字节数据缓存到128字节chunk中，但Slab Allocator机制问题，浪费剩余28字节。</span><br><span class="line"></span><br><span class="line">Lazy（惰性） Expiration</span><br><span class="line">      记录超时不会释放已分配的内存，只是客户端无法再看见该记录， 其存储空间此时可重复使用。</span><br><span class="line">      内部不实时监视记录是否过期，而是在get时查看记录的时间戳是否过期。</span><br><span class="line">      不在过期监视上耗费CPU时间。</span><br><span class="line">替换策略</span><br><span class="line">    1）优先使用已超时的记录的空间。</span><br><span class="line">    2）如果还存在追加新记录时空间不足的情况， 使用最近最少使用（LRU）机制替换已有缓存内容 （引用计数非零则不替换）。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319112901409.png" alt="image-20200319112901409"></p><h5 id="分布式策略"><a href="#分布式策略" class="headerlink" title="分布式策略"></a>分布式策略</h5><p>Memcached通过将不同的键保存到不同的服务器上实现了分布式。服务器增多后键会分散，即使一台memcached服务器发生故障，也不影响其他缓存节点，系统依然能继续运行。</p><p>主要采用一致性hash+冗余节点+虚拟节点。</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319112157743.png" alt="image-20200319112157743"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Memcached的标准的分布式方法（对键的存储根据服务器台数的余数进行分散）：</span><br><span class="line">1）求得键的整数哈希值；</span><br><span class="line">2）除以服务器台数，根据其余数来选择服务器。</span><br><span class="line">3）当选择的服务器无法连接时，rehash——将连接次数添加到键之后再次计算哈希值并尝试连接。</span><br><span class="line"></span><br><span class="line">优点：方法简单，数据的分散性一般较好。</span><br><span class="line">缺点：当添加或移除服务器时，缓存重组的代价大。</span><br></pre></td></tr></table></figure><h5 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一致性hash——改进的分布式方法</span><br><span class="line">1）求出服务器节点的哈希值， 将其配置到0～2^32的圆上；</span><br><span class="line">2）用同样的方法求出存储数据的键的哈希值并映射到圆上；</span><br><span class="line">3）从数据映射到的位置开始顺时针查找，将数据保存到找到的第一台服务器上；</span><br><span class="line">4）如果超过2^32仍然找不到服务器，就保存到第一台服务器上。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319113623625.png" alt="image-20200319113623625"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加一台服务器？</span><br><span class="line">只有在环上增加服务器位置的逆时针方向第一台服务器之间的键会受到影响。有效地抑制了键的重新分布。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319114123274.png" alt="image-20200319114123274"></p><h5 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用一般的hash函数，服务器的映射地点的分布可能出现不均匀的情况。</span><br><span class="line">为每个物理节点（服务器）在圆环上分配100～200个点，如节点A有A1和A2两个虚拟节点</span><br><span class="line">抑制分布不均匀，最大限度地减小服务器增减时的缓存重新分布。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319113809765.png" alt="image-20200319113809765"></p><h5 id="Memcached架构"><a href="#Memcached架构" class="headerlink" title="Memcached架构"></a>Memcached架构</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319120212639.png" alt="image-20200319120212639"></p><h4 id="DynamoDB"><a href="#DynamoDB" class="headerlink" title="DynamoDB"></a>DynamoDB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DynamoDB是Amazon（亚马逊）的key-value模式的存储平台，基本设计思想：</span><br><span class="line">    为了达到高可用，牺牲一致性；</span><br><span class="line">    在读数据的时候处理数据不一致的冲突；</span><br><span class="line">    根据应用层的不同需求，指定不同的NRW值，协调可用性和一致性；</span><br><span class="line">    去中心化的维护整个集群的成员及故障信息，采用Gossip同步。</span><br><span class="line">    </span><br><span class="line">DynamoDB技术特征：</span><br><span class="line">（1）数据分布</span><br><span class="line">    一致性hash+虚拟节点</span><br><span class="line">    （2）支持数据的多副本写操作</span><br><span class="line">    节点临时性失效处理技术（sloppy Quorum &amp; hinted handoff，一些副本不可用时，提供高可用和持久性的保证）；</span><br><span class="line">    节点永久性失效恢复技术（反熵 &amp; Merkle trees，实现后台副本恢复）。</span><br><span class="line">    （3）节点成员关系和失效检测</span><br><span class="line">    基于Gossip的成员协议和失效检测，避免用中心节点管理节点成员关系。</span><br></pre></td></tr></table></figure><h5 id="改进一致性hash"><a href="#改进一致性hash" class="headerlink" title="改进一致性hash"></a>改进一致性hash</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319114842551.png" alt="image-20200319114842551"></p><h5 id="时钟向量"><a href="#时钟向量" class="headerlink" title="时钟向量"></a>时钟向量</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319120404641.png" alt="image-20200319120404641"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">通过比较这些向量的大小，来确定事件发生的顺序：假如一个向量的所有分享量的count值都小于或等于另一个向量，可以认为后者并前者更“新”；否则，存在冲突。</span><br><span class="line"></span><br><span class="line">Vector Clock实例：</span><br><span class="line">设有3个节点，NRW协议中W=1,则R=N=3。</span><br><span class="line">    假设一个写请求，第一次被节点A处理了。节点A会增加一个版本信息(A，1)，把这个时候的数据记做D1(A，1)。然后另外一个对同样key的请求又被A处理了，于是有D2(A，2)。</span><br><span class="line">    此时D2是可以覆盖 D1的，没有冲突产生。现在假设D2传播到了所有节点(B和C)，所以B和C都持有数据D2(A，2)。</span><br><span class="line">    接下来又一个请求被B处理了，生成数据D3(A，2;B，1) 。（因为这是一个新版本的数据，被B 处理，所以要增加B的版本信息）</span><br><span class="line">    假设D3还未传播到C时，又一个请求被C处理记做，产生D4(A，2;C，1)。</span><br><span class="line">    如果在这些版本没有传播开以前，发生读取操作，因为R=3，所以R会从所有三个节点上读，读到三个版本。A上的D2(A，2)、B上的D3(A，2;B，1)、C上的D4(A，2; C，1)。依据Vector Clock算法，D2已经是旧版本（其B、C分量均为0），可以舍弃，但是D3和D4都是新版本，需要应用自己去合并。</span><br></pre></td></tr></table></figure><p><strong>Vector Clock的无限增长问题：</strong></p><p>现实生活中，如果有很多的决策者，相当于有很多的客户端，整个向量时钟的长度就无限制增长了，这对于存储系统来说，需要想办法解决。主要方法有服务器向量和向量时钟剪枝。</p><p><strong>（1）服务器向量</strong></p><p>不要用client来标识向量空间，用server来标识向量空间。因为server的数量是可控的，向量标签不再是客户端，而是用server标识。</p><p>问题：会因为网络传输延时而丢失数据。如下图：</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319121017894.png" alt="image-20200319121017894"></p><p><strong>（2）时钟向量剪枝</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Riak系统用四个参数来避免向量时钟空间的无限增长：</span><br><span class="line">small_vclock和big_vclock参数标识向量时钟的长度，如果长度小于small_vclock就不会被剪枝掉，如果长度大于big_vclock就会被剪枝掉。</span><br><span class="line">young_vclock和old_vclock参数标识存储这个向量时钟时的时间戳，剪枝策略同理，大于old_vclock的才会被剪枝掉。</span><br><span class="line"></span><br><span class="line">向量剪枝尽量只丢掉一些向量时钟的信息，而不是丢掉实实在在的数据。</span><br><span class="line">    但是有一种情况会有问题：一个客户端保持了一个很久之前的向量时钟，然后继承这个向量时钟并提交了一个数据，此时会产生冲突（因为服务器已经没有这个很久之前的向量时钟信息了，可能已经被剪枝掉了），所以客户端提交的此次数据，在服务端无法找到一个祖先。此时Riak会创建一个sibling。</span><br><span class="line">    所以，剪枝策略是一个tradeoff权衡，一方面是无限增长的向量时钟的空间，另一方面是偶尔的会有“false merge”，产生兄弟数据，但不会丢失数据。</span><br><span class="line">    从这个意义上看，防止向量时钟空间的无限增长，剪枝策略优于用server标识向量时钟的策略。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319121054927.png" alt="image-20200319121054927"></p><h5 id="节点临时性失效——Sloppy-quarum"><a href="#节点临时性失效——Sloppy-quarum" class="headerlink" title="节点临时性失效——Sloppy quarum"></a>节点临时性失效——Sloppy quarum</h5><p>Sloppy quarum（草率仲裁，草率的法定人数）：</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319115015235.png" alt="image-20200319115015235"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hinted Handoff技术：为了保证每次都能写到W个副本，读到R个副本，我们每次读和写都是发送给N个节点。如果这N个节点有节点失效，那么往后继续找一个不同的节点，暂时的代替失效的节点，当该后续节点定期监测到故障节点恢复，则将暂时代为保管的数据写回复活节点。</span><br><span class="line">例：N=3，某数据的preference list是节点A、B、C。若A节点失效，则对该数据的写请求将发送到节点B、C、D上。D暂时取代A的角色，那些原本应该写到A上的数据存放在D中的一个特定的文件夹中（意味着这些数据不是D本该拥有的，而是别的节点的）。D上会启动一个线程定期检查A的状态，当发现A恢复后，就将D上存放的这些A的数据写回到A。</span><br><span class="line">该策略保证了节点失效时系统的高可用和数据持久性。</span><br></pre></td></tr></table></figure><h5 id="节点永久性失效——Merkle-tree"><a href="#节点永久性失效——Merkle-tree" class="headerlink" title="节点永久性失效——Merkle tree"></a>节点永久性失效——Merkle tree</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Dynamo实现了反熵协议(anti-entropy，基于Gossip的一致同步) 来保持副本同步。</span><br><span class="line">    当故障发生或者有节点加入、离开集群时，都涉及分片的拷贝和传输，因此希望能够快速检查分片中内容是否相同，并通过仅发送不同的部分来减少数据传输量。</span><br><span class="line">    为了更快地检测副本之间的不一致性，并且减少传输的数据量和反熵过程中磁盘读取的次数，Dynamo采用 Merkle Tree技术。</span><br><span class="line">    </span><br><span class="line">Merkle tree： </span><br><span class="line">    每个叶子节点对应一个数据项，并记录其hash值 ；</span><br><span class="line">    每个非叶子节点记录其所有子节点的hash值。 </span><br><span class="line">Dynamo为每一个分片维护一个Merkle Tree，需要比较分片是否相同时，自根向下的比较两个Merkle Tree的对应节点，可以快速发现并定位差异所在。</span><br><span class="line">主要用于：文件校验（BitCommit，BitTorrent种子）；副本同步（DynamoDB）；可信计算；区块链</span><br><span class="line"></span><br><span class="line">Merkle Tree的主要优点是树的每个分支可以独立地检查，而不需要下载整个树或整个数据集。此外，MerkleTree有助于减少为检查副本间不一致而传输的数据的大小。</span><br><span class="line">例：如果两树的根哈希值相等，且树的叶节点值也相等，那么节点不需要同步。如果不相等，则意味着一些副本的值不同。在这种情况下，节点可以交换子节点的哈希值，该处理一直进行到树的叶子，此时主机可以识别出“不同步”的 key。</span><br></pre></td></tr></table></figure><h5 id="成员信息及故障检测——Gossip"><a href="#成员信息及故障检测——Gossip" class="headerlink" title="成员信息及故障检测——Gossip"></a>成员信息及故障检测——Gossip</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gossip协议传播成员变动</span><br><span class="line">    Dynamo集群中的每个节点都会维护当前集群的成员及节点不可达等信息，这些信息通过Gossip协议传播到整个集群；客户端可以通过任意一个节点获得并维护这些成员信息，从而找到自己要访问的数据。</span><br><span class="line">Dynamo使用一个基于Gossip的协议传播成员变动，并维持成员的最终一致性：每个节点每隔一秒随机选择另一个节点，两个节点协调他们保存的成员变动历史。</span><br><span class="line">    新节点加入时选择自己负责的虚拟节点，并将其虚拟节点表保存到磁盘，之后与其他的节点通过Gossip协议交换协调他们的虚拟节点表。这样，每个节点都知道全局的虚拟节点表。</span><br></pre></td></tr></table></figure><h5 id="读写流程"><a href="#读写流程" class="headerlink" title="读写流程"></a>读写流程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">客户端请求最终交给preference list中的一个节点处理，该节点称为coodinator 。Dynamo采用类似Quarum的方式保证数据正确，即W+R&gt;N。 </span><br><span class="line">Put流程： </span><br><span class="line">（1）coodinator生成新的数据版本，及vector clock分量 ；</span><br><span class="line">（2）本地保存新数据 ；</span><br><span class="line">（3）向preference list中的所有节点发送写入请求 ；</span><br><span class="line">（4）收到W-1个确认后向用户返回成功 。</span><br><span class="line">Get流程 ：</span><br><span class="line">（1）coodinator向preference list中所有节点请求数据版本 ；</span><br><span class="line">（2）等到R-1个答复 </span><br><span class="line">（3）coodinator通过vector clock处理有因果关系的数据版本 ；</span><br><span class="line">（4）将不相容的所有数据版本返回用户。</span><br></pre></td></tr></table></figure><h5 id="NWR理论"><a href="#NWR理论" class="headerlink" title="NWR理论"></a>NWR理论</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NWR理论（WernerVogels在讲“EventuallyConsistent”时提出）。设一个存储系统有如下属性：</span><br><span class="line">N=每个数据的副本数</span><br><span class="line">W=每次写操作时，必须同步确认写成功的副本数</span><br><span class="line">R=每次读操作时，需要读取的副本数</span><br><span class="line">则当W+R&gt;N时，该存储系统可以提供强一致性。</span><br><span class="line">强一致性等价于R中至少包含一个最新的副本，即(R-(N-W))&gt;0，即W+R&gt;N。</span><br></pre></td></tr></table></figure><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis是一个开源的key-value存储系统，将大部分数据存储在内存中</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319132526526.png" alt="image-20200319132526526"></p><h5 id="Redis内存管理"><a href="#Redis内存管理" class="headerlink" title="Redis内存管理"></a>Redis内存管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Redis为了方便内存的管理，在分配一块内存之后，会将这块内存的大小存入内存块的头部。</span><br><span class="line">real_ptr是调用malloc后返回的指针，内存块的大小size存入头部（占据为 size_t类型的内存），然后返回ret_ptr。</span><br><span class="line">当需要释放内存时，ret_ptr被传给内存管理程序，算出 real_ptr的值，然后将real_ptr传给free释放内存。</span><br><span class="line"></span><br><span class="line">Redis通过定义一个数组zmalloc_allocations[]来记录所有的内存分配情况。</span><br><span class="line">这个数组的长度为ZMALLOC_MAX_ALLOC_STAT。数组的每一个元素代表相应大小内存块被分配的个数（内存块的大小为该元素的下标）</span><br><span class="line">例如：zmalloc_allocations[16]代表已经分配的长度为16bytes的内存块的个数。</span><br><span class="line"></span><br><span class="line">有一个静态变量 used_memory记录当前分配内存的总和。</span><br><span class="line">总体上看，Redis采用的是包装的malloc/free。</span><br><span class="line">调用malloc时，malloc并不是严格按照参数的值来分配内存。</span><br><span class="line">例如基于内存对齐等方面的考虑，程序只请求一个byte时malloc可能会分配4个byte。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319133105440.png" alt="image-20200319133105440"></p><h5 id="Redis的持久化机制"><a href="#Redis的持久化机制" class="headerlink" title="Redis的持久化机制"></a>Redis的持久化机制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Redis虽然是基于内存的存储系统，同时也提供内存数据持久化的机制，有两种持久化策略：</span><br><span class="line">      RDB快照、</span><br><span class="line">      AOF日志。</span><br><span class="line">1）RDB快照：将当前数据的快照存成一个数据文件，从而持久化。</span><br><span class="line">      RDB的实现借助了fork命令的copy on write机制。在生成快照时，将当前进程fork出一个子进程，然后在子进程中循环所有的数据，将数据写成为RDB文件。</span><br><span class="line">      可靠性：当生成一个新的RDB文件时，Redis生成的子进程先将数据写到一个临时文件中，然后通过原子性系统调用rename将临时文件重命名为RDB文件，这样在任何时候出现故障，RDB快照文件总是可用的。</span><br><span class="line">  生成时机：可以通过save指令配置RDB快照生成的时机（例如当10分钟以内有100次写入就生成快照，或者1小时内有1000次写入就生成快照，或者多个规则一起实施）。</span><br><span class="line">      可用性：开启RDB的代价不高，但是RDB文件中的数据并不是全新的，从上次RDB文件生成到Redis停机这段时间的数据将丢失。</span><br><span class="line">      </span><br><span class="line">2）AOF日志（Append Only File）：一个追加写入的日志文件，与一般数据库的bin log不同，AOF文件是可识别的纯文本，内容是一个个导致数据变化的Redis标准命令。</span><br><span class="line"></span><br><span class="line">优化策略：AOF文件会越来越大，所以Redis提供了AOF rewrite功能，就是重新生成一份AOF文件，文件中一条记录的操作只会有一次，去掉之前叠加的操作。</span><br><span class="line"></span><br><span class="line">Rewrite的AOF文件的生成过程类似于RDB：</span><br><span class="line">    ①fork一个进程，遍历数据，写入新的AOF临时文件。在写入新文件的过程中，所有的写操作日志还是会写到原来老的AOF文件中，同时还会记录在内存缓冲区中。</span><br><span class="line">    ②当重完操作完成后，还要将所有缓冲区中的日志一次性写入临时文件。</span><br><span class="line">    ③调用原子性的rename命令用新的AOF文件取代老的AOF文件。</span><br></pre></td></tr></table></figure><h5 id="Redis-Cluster分布式存储"><a href="#Redis-Cluster分布式存储" class="headerlink" title="Redis Cluster分布式存储"></a>Redis Cluster分布式存储</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Redis Cluster采用了P2P机制，没有Proxy层，客户端将key的请求转发给合适的nodes。</span><br><span class="line">Client保存集群中nodes与keys的映射关系（slots），并保持此数据的更新，所以通常Client能将请求直接发送给正确的nodes。</span><br><span class="line">Clients与每个nodes保持链接，所以请求延迟等同于单个节点，不会因为Cluster的规模增大而受到影响。</span><br><span class="line">由于没有Proxy层，Client请求的数据无法在nodes间merge。</span><br><span class="line">Redis核心面向K-V数据存储，没有scan类型（sort，limit，group by）的操作。</span><br><span class="line"></span><br><span class="line">Redis槽（slot）：集群将key分成16384个slots（hash 槽），slot作为数据映射的单位。</span><br><span class="line">Keys到slot的映射：</span><br><span class="line">    HASH_SLOT = CRC16(key) mod 16384。其中CRC16是一种冗余码校验和，将字符串转换成16位的数字。</span><br><span class="line"></span><br><span class="line">每个节点持有16384个slots中的一部分。</span><br><span class="line">      ↓</span><br><span class="line">Redis Cluster最多支持16384个nodes（每个nodes持有一个slot）。</span><br><span class="line"></span><br><span class="line">Redis集群中的各个节点通过Gossip协议来交换各自关于不同节点的状态信息，协议由三种消息实现：</span><br><span class="line">每次发送MEET、PING、PONG消息时，发送者都从自己的已知节点列表中随机选出两个节点的信息(可以是主节点或者从节点) 保存到两个clusterMsgDataGossip结构中</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319133411353.png" alt="image-20200319133411353"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319154231111.png" alt="image-20200319154231111"></p><h5 id="Redis-Cluster的复制机制"><a href="#Redis-Cluster的复制机制" class="headerlink" title="Redis Cluster的复制机制"></a>Redis Cluster的复制机制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了保证单点故障下的数据可用性，Redis Cluster引入了Master节点和Slave节点</span><br><span class="line">每个Master节点有两个用于冗余的Slave节点。 </span><br><span class="line">集群中任意两个节点宕机都不会导致数据不可用。若Master节点退出，集群会自动选择一个Slave节点成为新的Master节点。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319154101670.png" alt="image-20200319154101670"></p><h5 id="Redis-Cluster的核心数据结构"><a href="#Redis-Cluster的核心数据结构" class="headerlink" title="Redis Cluster的核心数据结构"></a>Redis Cluster的核心数据结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clusterState：集群状态，每个节点都保存着这样一个状态，记录它们眼中集群的状态，里面含有一个slot数组，其中myself指针变量指向本节点的clusterNode。</span><br><span class="line"></span><br><span class="line">clusterNode：记录节点的角色（主节点或从节点）、状态（是否在线）、slot属性（二进制位数组）。</span><br><span class="line">    slot属性是数组长度为16384/8=2048个字节，包含16384个二进制位。</span><br><span class="line">    Master节点用bit来标识自己是否拥有某个槽。</span><br><span class="line">    所有槽的指派信息保存在clusterState.slots数组内。</span><br><span class="line">    程序要检查槽i是否已经被指派，或者要取得负责处理槽i的节点，只需要访问clusterState.slots[i]的值，复杂度仅为O（1）。</span><br><span class="line"></span><br><span class="line">clusterLink：包含与其他节点通讯所需的全部信息。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319154634313.png" alt="image-20200319154634313"></p><h5 id="Redis-Cluster数据请求流程"><a href="#Redis-Cluster数据请求流程" class="headerlink" title="Redis Cluster数据请求流程"></a>Redis Cluster数据请求流程</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319154947549.png" alt="image-20200319154947549"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319155008420.png" alt="image-20200319155008420"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319155028477.png" alt="image-20200319155028477"></p><h5 id="Multi-key和hash-tags"><a href="#Multi-key和hash-tags" class="headerlink" title="Multi-key和hash tags"></a>Multi-key和hash tags</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Multi-key操作（一次RPC调用中需要进行多个key的操作，如Set类型的交集、并集等）</span><br><span class="line">    ↓</span><br><span class="line">这些key必须属于同一个node。</span><br><span class="line"></span><br><span class="line">“hash tags”机制：每个key都可以包含一个自定义的“tag”，存储时根据tag计算该key应分布在哪个node上（不是使用key计算，但是存储层面仍然是key）。</span><br><span class="line">该机制可强制某些keys被保存在同一个节点上，以便于进行“multi-key”操作，</span><br></pre></td></tr></table></figure><h4 id="Trinity"><a href="#Trinity" class="headerlink" title="Trinity"></a>Trinity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">微软的图处理引擎，基于分布式内存的云系统，能够有效支持针对web规模图数据的在线和离线处理任务。</span><br><span class="line">在分布式缓存的基础上实现了对图数据的全局寻址，可有效支持随机存取。</span><br><span class="line">默认前提条件：内存成本足够低、网络速度足够高。</span><br><span class="line"></span><br><span class="line">简单任务：pageRank、shortest path发现（基于LandMark节点）…</span><br><span class="line">复杂任务：多层次图分割…</span><br><span class="line"></span><br><span class="line">Trinity本身不带有复杂的图计算模型，只是一个分布式的key-value系统，但是提供灵活的数据定义和处理建模能力</span><br><span class="line">     ↓</span><br><span class="line">有利于和图计算应用系统相集成。</span><br><span class="line"></span><br><span class="line">Trinity系统由三类节点构成：slave、proxy和client。</span><br><span class="line">    Slave节点：存储一部分图数据，执行图计算任务。图计算任务包括向其他各类节点收发消息。</span><br><span class="line">    Proxy节点：系统中的可选节点，不包含数据，只处理消息。作为client和slave节点的中间层，也用作消息聚集节点，可汇总来自多个slave的消息。</span><br><span class="line">    Client节点：用户接口层，通过API和slave以及proxy节点通讯。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319155658445.png" alt="image-20200319155658445"></p><h4 id="Kad"><a href="#Kad" class="headerlink" title="Kad"></a>Kad</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Kademlia(简称Kad)，一种典型的结构化P2P覆盖网络(应用层网络）。</span><br><span class="line">信息的存储：以哈希表条目形式分散存储在各节点上。</span><br><span class="line">    ↓</span><br><span class="line">全网构成一张巨大的分布式哈希表</span><br><span class="line"></span><br><span class="line">检索：通过Kademlia协议查询key值对应的value（不必关心value所在节点位置）。</span><br><span class="line">应用：eMule、BitTorrent等P2P文件交换系统的检索协议。</span><br><span class="line"></span><br><span class="line">网络集群存储、维护两张分布式哈希表：关键词字典、文件索引字典。</span><br><span class="line">关键词字典：关键词→其所对应的文件名称及相关信息，key=关键词字符串的160比特SHA1散列，value为一个三元组列表 (文件名，文件长度，文件的SHA1校验值) 。</span><br><span class="line">文件索引字典：文件信息→文件的拥有者(下载服务提供者)，key=文件的SHA1校验值，value也是一个三元组列表 (拥有者IP，下载侦听端口，拥有者节点ID)。</span><br><span class="line"></span><br><span class="line">字典条目均分布式存储于参与Kad网络的各节点中，其存储和交换无需集中索引服务器的参与。</span><br><span class="line">     ↓</span><br><span class="line">    1）提高了查询效率</span><br><span class="line">    2）提高了文件交换系统的可靠性。</span><br><span class="line"></span><br><span class="line">每一个节点有一个专属ID（一个160bit的整数），由节点自己随机生成（可以认为ID具有唯一性）。</span><br><span class="line">距离为两个ID的二进制异或值。</span><br><span class="line">    两个节点的ID分别为a与b，则有：</span><br><span class="line">    distance=a XOR b。</span><br><span class="line"></span><br><span class="line">Kad网络规定：条目依据其key值被复制到目标节点ID距离最近的k个节点中。</span><br><span class="line">k取值准则——任意选择至少k个节点， k的典型取值为20，它们在任意时刻同时不在线的几率几乎为0。</span><br><span class="line"></span><br><span class="line">为了实现较短的查询响应延迟，在条目查询的过程中，任一条目可被cache到任意节点之上。</span><br><span class="line">时效性：考虑条目在节点上存储的时效性，越接近目标结点保存的时间将越长。</span><br><span class="line"></span><br><span class="line">节点之间的距离取异或值</span><br><span class="line">     ↓</span><br><span class="line">对于同一个key值的所有查询都会逐步收敛到同一个路径上，而不管查询的起始节点位置如何。</span><br><span class="line">     ↓</span><br><span class="line">沿着查询路径上的节点都缓存相应的&lt;key，value&gt;对，可以有效减轻存放热门key值节点的压力，加快查询相应速度。</span><br><span class="line"></span><br><span class="line">kad节点维护</span><br><span class="line">每一个节点均维护160个list，每个list称为一个k-桶(k-bucket) 。</span><br><span class="line">    第i个k-桶的内容：记录当前节点已知的与自身距离为2^i~2^(i+1)的其他节点的网络信息(NodeID，IP地址，UDP端口)。</span><br><span class="line">    一个k-桶最多存放k个对端节点信息，桶中节点信息按访问时间排序（最早访问的在头部）。</span><br><span class="line"></span><br><span class="line">List（k-桶）的更新原则：</span><br><span class="line">    1）目标节点信息已经在list中，将其移至队尾；</span><br><span class="line">    2）list未满，且目标节点不在其中，其信息将直接添入list队尾；</span><br><span class="line">    3）list已满，先检查队首节点是否仍有响应，如果有，则队首节点被移至队尾，目标节点被抛弃；如果没有，则抛弃队首节点，将最新访问的节点信息插入队尾。</span><br><span class="line"></span><br><span class="line">每个k桶覆盖距离的范围成指数关系增长</span><br><span class="line">     ↓</span><br><span class="line">离自己近的节点的信息多，离自己远的节点的信息少</span><br><span class="line">     ↓</span><br><span class="line">路由查询过程是收敛的。</span><br><span class="line">    由于采用指数方式划分区间，有关研究证明：对于一个有N个节点的Kad网络，最多只需要经过logN步查询就可以准确定位到目标节点。</span><br><span class="line">K桶的设计初衷：维护最近最新见到的节点信息更新，对于某个需要查找的特定ID节点N，可以从当前节点的k桶中迅速的查出距离N最近的若干已知节点。</span><br><span class="line"></span><br><span class="line">Kad寻找节点</span><br><span class="line">查找与目标节点网络距离最近的k个节点所对应的网络信息(NodeID，IP地址，UDP端口)。</span><br><span class="line">1）发起者从自己的k-桶中选出若干距离目标ID最近的节点，并向它们同时发送异步查询请求；</span><br><span class="line">2）被查询节点收到请求后，从自己的k-桶中找出自己所知的目标ID的若干近邻返回给发起者；</span><br><span class="line">3）发起者收到返回信息后，再次从当前已知的近邻节点中选出若干未被请求的，并重复步骤1。</span><br><span class="line">重复上述过程2）~3）直至无法获得k近邻的更新时停止。</span><br><span class="line">在查询过程中没有及时响应的节点将立即被排除。</span><br><span class="line"></span><br><span class="line">Kad条目搜索</span><br><span class="line">搜索发起方以迭代方式不断查询距离key较近的节点</span><br><span class="line">↓ </span><br><span class="line">直至查询路径中的任一节点返回所需查找的value。</span><br><span class="line">系统优化：</span><br><span class="line">搜索成功后发起方可选择将条目作为cache存储到查询路径的多个节点中，条目cache的超时时间与节点的距离呈指数反比关系。</span><br><span class="line"></span><br><span class="line">Kad新节点加入</span><br><span class="line">1）获知一个已经加入Kad网络的节点信息(记为节点I)，并将其加入自己的k-buckets；</span><br><span class="line">2）向I节点发起一次针对自己ID的节点查询请求，从而通过节点I获取一系列与自己邻近的其他节点信息；</span><br><span class="line">3）刷新所有的k-bucket，保证自己获得最新的节点信息。（自身信息通过查询被传播出去）</span><br></pre></td></tr></table></figure><h4 id="实际案例解读（淘宝）"><a href="#实际案例解读（淘宝）" class="headerlink" title="实际案例解读（淘宝）"></a>实际案例解读（淘宝）</h4><h5 id="个人网站LAMP"><a href="#个人网站LAMP" class="headerlink" title="个人网站LAMP"></a>个人网站LAMP</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LAMP(Linux+Apache+MySQL+PHP)</span><br><span class="line">    一个数据库进行所有的读写操作</span><br><span class="line">         ↓</span><br><span class="line">    拆分成一个主库、两个从库，读写分离。</span><br><span class="line"></span><br><span class="line">    好处：1）存储容量增加；</span><br><span class="line">             2）有了备份；</span><br><span class="line">             3）安全性增强；</span><br><span class="line">             4）读写分离使读写效率提升。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319134140600.png" alt="image-20200319134140600"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    上述方案随着访问量和数据量的飞速上涨，问题很快出现。</span><br><span class="line">1）数据库锁表，MySQL当时是第4版的，使用默认的存储引擎MyISAM   →  读数据时会锁表。</span><br><span class="line">    主库往从库写数据时会对主库产生大量的读操作，使主库性能急剧下降。</span><br><span class="line">    高访问量时，数据库支撑不住。 (Oracle在写数据时会有行锁，读数据时没有)</span><br><span class="line">2）数据容量和安全性问题，MySQL当时不稳定。</span><br></pre></td></tr></table></figure><h5 id="ORACLE本地后台DB-连接池"><a href="#ORACLE本地后台DB-连接池" class="headerlink" title="ORACLE本地后台DB+连接池"></a>ORACLE本地后台DB+连接池</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">更换后台数据库</span><br><span class="line">          ↓</span><br><span class="line">    Oracle 的连接池可有效增强数据库的并发访问能力，但 PHP pearDB是放在Apache上的，没有连接池功能，因此每一个请求都会对数据库产生一个连接。 (Java 语言有 Servlet 容器，可以存放连接池)</span><br><span class="line">          ↓</span><br><span class="line">    eBay 在 PHP 下面采用了一个从BEA购买的连接池的工具，较贵。采用替代方案，一个开源的连接池代理服务 SQLRelay(http://sourceforge.jp/projects/freshmeat_sqlrelay ) 提供连接池功能。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319161038183.png" alt="image-20200319161038183"></p><h5 id="ORACLE-NAS-RAC-连接池"><a href="#ORACLE-NAS-RAC-连接池" class="headerlink" title="ORACLE+NAS+RAC+连接池"></a>ORACLE+NAS+RAC+连接池</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">上述方案中数据是本地的，优化工作包括DBA对 Oracle进行性能调优和SQL语句优化。</span><br><span class="line">↓</span><br><span class="line">数据量继续增大，本地存储难以支撑。</span><br><span class="line">↓</span><br><span class="line">采用NetApp 的 NAS(NetworkAttached Storage：网络附属存储) 存储作为数据库的存储设备，加上 Oracle实时应用集群 (RAC，Real Application Clusters，)来实现负载均衡。</span><br><span class="line">↓</span><br><span class="line">隐患：1）NAS的NFS(Network File System)协议传输的延迟很严重；</span><br><span class="line">2）RAC的稳定性；</span><br><span class="line">3）SQLRelay容易死锁。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NAS(网络附属存储)</span><br><span class="line">NAS的典型组成是使用TCP/IP协议的以太网文件服务器，数据处理是“文件级”（file level），可以把NAS存储设备附加在已经存在的太网上。</span><br><span class="line">NAS主要应用于文件共享任务。</span><br><span class="line">在数据库应用中应谨慎使用 NAS 解决方案，通常限于以下条件：</span><br><span class="line">    大多数数据存取为只读方式、</span><br><span class="line">    数据库小、</span><br><span class="line">    存取量低、</span><br><span class="line">    不指定预期性能</span><br><span class="line">在这种情况下，NAS解决方案减少用户整体存储成本较有效。</span><br><span class="line"></span><br><span class="line">SAN（Storage Area Network，存储区域网）</span><br><span class="line">SAN是一个高速的子网，子网中的设备可以从主网卸载流量。通常SAN由RAID阵列连接光纤通道组成，SAN和服务器和客户机的数据通信通过SCSI命令而非TCP/IP，数据处理是“块级”（block level）。</span><br><span class="line">SAN利用光纤通道协议（FCP，Fibre Channel Protocol ）上加载SCSI协议来达到可靠的块级数据传输。</span><br><span class="line">    ↓</span><br><span class="line">高性能的光纤通道交换机和光纤通道网络协议是SAN的关键。</span><br><span class="line">在一些关键应用中（尤其是多个服务器共同读取大型存储设备），传输块级数据要求必须使用SAN。</span><br><span class="line"></span><br><span class="line">NAS vs. SAN</span><br><span class="line">1）NAS是一台特殊的含有大硬盘空间的计算机，连接在以太网上，其它计算机通过网络映射硬盘使用该空间。</span><br><span class="line">    SAN是一种容易扩容的光纤通讯的磁盘阵列机，是多台服务器共享使用多台阵列机，可以安装各种软件，可跨平台。</span><br><span class="line">2）SAN是光纤协议，NAS是TCP/IP协议。NAS是利用现有网络，SAN是在sever端再架设一个网络。</span><br><span class="line">3）NAS以文件方式访问数据，而SAN以sectors方式访问数据。</span><br><span class="line">    SAN对于高容量块级数据传输有明显的优势，易扩展且管理高效，可运行关键应用（如数据库、备份等）。</span><br><span class="line">    NAS更加适合文件级别的数据处理。可作为日常办公中需要经常交换小文件的存储配置（如存储网页）。</span><br><span class="line">4）SAN更多的是强调：范围+高效。</span><br><span class="line">NAS主要强调：共享。</span><br></pre></td></tr></table></figure><h5 id="ORACLE-SAN-RAC-连接池"><a href="#ORACLE-SAN-RAC-连接池" class="headerlink" title="ORACLE+SAN+RAC+连接池"></a>ORACLE+SAN+RAC+连接池</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ORACLE+NAS+RAC+连接池：NAS的文件级I/O协议及传输的延时，影响甚至限制了系统的读写性能优化。</span><br><span class="line">    数据容量的持续增加。</span><br><span class="line">          ↓</span><br><span class="line">ORACLE+SAN+RAC+连接池</span><br></pre></td></tr></table></figure><h5 id="ORACLE-SAN-小型机-连接池-人工维护"><a href="#ORACLE-SAN-小型机-连接池-人工维护" class="headerlink" title="ORACLE+SAN+小型机+连接池+人工维护"></a>ORACLE+SAN+小型机+连接池+人工维护</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RAC 出问题</span><br><span class="line">↓</span><br><span class="line">更换为小型机。</span><br><span class="line"></span><br><span class="line">SQLRelay版本内部处理逻辑不合适，数据库连接的代理服务经常死锁。</span><br><span class="line">↓</span><br><span class="line">人工kill进程再重启服务（“后来干脆每天睡觉之前先重启一下”）。</span><br></pre></td></tr></table></figure><h5 id="SUN-JAVA-Weblogic-EJB"><a href="#SUN-JAVA-Weblogic-EJB" class="headerlink" title="SUN JAVA(Weblogic+EJB)"></a>SUN JAVA(Weblogic+EJB)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了缓解数据库的压力，商品查询和店铺查询放在搜索引擎上。</span><br><span class="line">DBMS稳定——ORACLE，小型机</span><br><span class="line">存储扩容——SAN</span><br><span class="line">程序框架优化——MVC</span><br><span class="line">连接池稳定——Weblogic</span><br><span class="line">数据访问负载拆分——查询引擎</span><br><span class="line">系统负载分割——控制层EJB、持久层iBATIS的OR-Mapping</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319162319255.png" alt="image-20200319162319255"></p><h5 id="Weblogic-EJB-DBRoute"><a href="#Weblogic-EJB-DBRoute" class="headerlink" title="(Weblogic+EJB)+DBRoute"></a>(Weblogic+EJB)+DBRoute</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一台Oracle处理能力有限：连接池有数量限制，查询速度跟容量成反比。数据量上亿、查询量上亿时，到达极限。</span><br><span class="line">          ↓</span><br><span class="line">    多用几个Oracle 数据库，即”分库分表“。</span><br><span class="line">          ↓</span><br><span class="line">    用户信息按ID分到两个数据库中 (DB1/DB2)，商品信息和卖家也分到两个对应的数据库中，商品类目等通用信息放在第三个库中 (DBcommon)。</span><br><span class="line">          </span><br><span class="line">    买家的操作（关键字查询、分页、按时间排序）？</span><br><span class="line">              ↓</span><br><span class="line">   数据库路由程序框架DBRoute（自行开发）。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319162628467.png" alt="image-20200319162628467"></p><h5 id="Jboss-Spring-cache-分库分表"><a href="#Jboss-Spring-cache-分库分表" class="headerlink" title="Jboss+Spring+cache+分库分表"></a>Jboss+Spring+cache+分库分表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">随着数据量的继续增长，到了2005年，商品数有 1663 万，PV(page view)有8931万，注册会员有1390万，庞大的访问量和数据量继续给数据和存储带来压力。</span><br><span class="line">      ↓</span><br><span class="line">通过缓存（一个基于 Berkeley DB 的开源的缓存系统，用于缓存变化较少的只读信息）和 CDN(内容分发网络)提升性能。</span><br><span class="line">      ↓</span><br><span class="line">到2007年，应用服务器达到几百台（运行Java的 WebLogic），而WebLogic成本较高，甚至比应用服务器还贵。</span><br><span class="line">      ↓</span><br><span class="line">替换掉WebLogic，采用开源的JBoss，降低成本。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319162944577.png" alt="image-20200319162944577"></p><h5 id="TFS-OceanBase"><a href="#TFS-OceanBase" class="headerlink" title="TFS+OceanBase"></a>TFS+OceanBase</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">考虑两点原因：查询的负载；存储有限。不能让所有的商品一直存放在主库中。</span><br><span class="line">   ↓</span><br><span class="line">商品由卖家选择7天或14天有效期，到期之后就下架，须重新发布上架，之后变成新的商品(ID改变)。</span><br><span class="line">   ↓ </span><br><span class="line">商品之前的好评没有和新商品ID关联。</span><br><span class="line"></span><br><span class="line">拆分商品和交易：一个商家的一种商品有唯一的ID（不论上下架与否）。</span><br><span class="line">↓</span><br><span class="line">卖家改价格、库存，已成交的信息怎么处理?</span><br><span class="line">↓</span><br><span class="line">快照文件：买家每交易一次都记录下商品的快照信息。</span><br><span class="line">↓</span><br><span class="line">内容增多，存储成本增加。</span><br><span class="line">后期开发了海量文件系统TFS和海量数据库OceanBase。</span><br><span class="line"></span><br><span class="line">淘宝网要存储很多文件：一个商品几张图片，每一张图片要生成几张规格不同的缩略图，商品有描述信息，还有交易快照。</span><br><span class="line">    2010年，淘宝网有286亿个图片文件，图片的访问流量占整体流量的90%以上。图片平均大小为17.45KB，小于8K的图片占图片总数61%，占系统容量的11%。</span><br><span class="line">↓</span><br><span class="line">    对于大量高并发访问的系统，困难在于大规模的小文件存储与读取（磁头要频繁的寻道和换道，容易导致较长的读取延时）。</span><br><span class="line"></span><br><span class="line">2007年之前淘宝的文件存储一直采用商用系统（NetApp公司的文件存储系统）。</span><br><span class="line">图片文件数量以每年3倍的速度增长</span><br><span class="line">      ↓ </span><br><span class="line">后端商用存储系统从低端到高端不断迁移</span><br><span class="line">      ↓ </span><br><span class="line">2006年，NetApp公司最高端的产品也不能满足需求。</span><br><span class="line">      ↓</span><br><span class="line">自行开发一套针对海量小文件存储的文件系统TFS。</span><br><span class="line"></span><br><span class="line">2007年google公布了GFS( google file system )的设计论文</span><br><span class="line">    ↓ </span><br><span class="line">淘宝开发了自己的图片存储系统TFS( taobao file system )。</span><br><span class="line">2007年6月上线运营，集群规模达到了200台PC Server，文件数量上亿。</span><br><span class="line">系统部署存储容量140TB，实际使用50TB;单台支持随机IOPS(Input/Output Operations Per Second)200+，流量3MBps。</span><br><span class="line"></span><br><span class="line">TFS</span><br><span class="line">集群组成：</span><br><span class="line">  两台Name Server，作文件系统管理结点，互为双机备份。</span><br><span class="line">  多台Data Server。</span><br><span class="line">数据组织：以block文件(一般64M一个block)的形式存放数据文件，block有多个副本。</span><br><span class="line">元数据：文件名内置元数据信息（如图片大小、时间、访问频次、所在的逻辑块号等），元数据信息很少，仅仅需要一个fileID从而定位文件。</span><br><span class="line">用户自己保存TFS文件名与实际文件的对照关系——减少元数据量。</span><br><span class="line">1）一些文件信息都隐藏在文件名中；</span><br><span class="line">2）目录树开销很大。</span><br><span class="line">          ↓</span><br><span class="line">放弃了传统的目录树结构</span><br><span class="line">          ↓</span><br><span class="line">放弃目录树结构使整个集群的可扩展性极大提高，和目前业界的“对象存储”类似。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OceanBase(海量数据库)</span><br><span class="line">虽然数据库系统数据量十分庞大（可能几十亿、几百亿条甚至更多），但一段时间(例如一天)的修改量并不大（通常不超过几千万条到几亿条）</span><br><span class="line">          ↓</span><br><span class="line">增量数据(UpdateServer) + 基线数据(ChunkServer)</span><br><span class="line">          ↓</span><br><span class="line">增量数据： OceanBase使用单台服务器(UpdateServer)记录一段时间的修改增量，其存储以内存表(memtable)为主，SSD(固态盘)为辅。</span><br><span class="line">基线数据：在增量数据时间段内保持不变的数据称为基线数据，存储于多台服务器(ChunkServer)，类似于分布式文件系统。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319171720471.png" alt="image-20200319171720471"></p><h4 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h4><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571990774449.png" alt="1571990774449"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">设计思想与基本概念</span><br><span class="line">    机群容错、chunk、namespace</span><br><span class="line">体系架构</span><br><span class="line">    chunkserver/master/client，控制流/数据流，心跳信号/轮询</span><br><span class="line">    元数据操作日志/checkpoint，master复制/影子</span><br><span class="line">数据访问</span><br><span class="line">    读/写流程（租约），记录追加（原子操作），一致性模型</span><br><span class="line">    记录标识符，版本（租约），版本及checksum校验，快照</span><br><span class="line">空间管理</span><br><span class="line">    Namespace锁，chunk创建/移动/回收</span><br></pre></td></tr></table></figure><h5 id="GFS设计思想与基本概念"><a href="#GFS设计思想与基本概念" class="headerlink" title="GFS设计思想与基本概念"></a>GFS设计思想与基本概念</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">组件失效被认为是常态事件，而不是意外事件。任何时间都可能有某些组件无法工作、无法从目前的失效状态中恢复</span><br><span class="line">以通常的标准衡量，我们的文件非常巨大。</span><br><span class="line">绝大部分文件的修改是采用在文件尾部追加数据，而不是覆盖原有数据的方式。</span><br><span class="line">应用程序和文件系统 API 的协同设计提高了整个系统的灵活性.</span><br><span class="line">放松了对一致性模型的要求，引入了原子性的记录追加操作，从而保证多个客户端能同时进行追加操作，不需要额外的同步操作来保证数据的一致性。</span><br></pre></td></tr></table></figure><h5 id="GFS架构"><a href="#GFS架构" class="headerlink" title="GFS架构"></a>GFS架构</h5><p>一个 GFS 集群包含一个单独的 Master 节点、多台 Chunk 服务器，并且同时被多个客户端访问.</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571972900106.png" alt="1571972900106"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">GFS 存储的文件都被分割成固定大小的 Chunk。在 Chunk 创建的时候，Master 服务器会给每个 Chunk 分配一个不变的、全球唯一的 64 位的 Chunk 标识。</span><br><span class="line"></span><br><span class="line">Namespace(名称空间)：GFS提供了一套类似传统文件系统API的接口函数（没有严格按照POSIX等标准API的形式实现），文件以分层目录的形式组织，用路径名来标识。 在逻辑上，GFS的名称空间就是一个全路径和元数据映射关系的查找表。</span><br><span class="line">利用前缀压缩，namespace表高效的存储在内存中。</span><br><span class="line">在存储名称空间的树型结构上，每个节点（绝对路径的文件名或绝对路径的目录名）都有一个关联的读写锁。</span><br><span class="line"></span><br><span class="line">Chunkserver：Chunk服务器把Chunk以linux文件的形式保存在本地硬盘上，根据指定的Chunk标识和字节范围来读写块数据。</span><br><span class="line">可靠性→ 每个块会复制到多个chunkserver上（缺省3个存储复制节点）。</span><br><span class="line">复制级别：用户可以为不同的文件命名空间区域设定不同的复制级别。</span><br><span class="line"></span><br><span class="line">Master节点：GFS分布式文件系统中的总控节点，管理所有的文件系统元数据</span><br><span class="line">Master节点使用心跳信息周期地和每个Chunk服务器通讯：</span><br><span class="line">（1）发送指令到各个Chunk服务器；</span><br><span class="line">    （2）接收Chunk服务器的状态信息。</span><br><span class="line">执行所有的namespace操作。</span><br><span class="line">管理整个系统里所有Chunk的副本</span><br><span class="line">    创建新Chunk和它的副本</span><br><span class="line">    决定Chunk的存储位置</span><br><span class="line">    在所有的Chunk服务器之间进行负载均衡</span><br><span class="line">    协调各种系统活动以保证Chunk被完全复制</span><br><span class="line">    回收不再使用的存储空间</span><br><span class="line">Master管理的内容</span><br><span class="line">    所有的文件系统元数据：</span><br><span class="line">        Namespace(文件和Chunk的命名空间)</span><br><span class="line">        文件和Chunk的映射信息</span><br><span class="line">        Chunk当前的位置信息</span><br><span class="line">        访问控制信息</span><br><span class="line">    系统范围内的活动：</span><br><span class="line">        Chunk租约管理</span><br><span class="line">        孤儿Chunk(orphaned chunks)的回收</span><br><span class="line">        Chunk在Chunk服务器之间的迁移</span><br><span class="line">Master不持久保存Chunk位置信息(因为在一个有数百台服务器的集群中，这类事件会频繁的发生：有Chunk服务器加入/离开集群、更名、失效、重启。只有Chunk服务器才能最终确定某个Chunk是否在它的硬盘上)</span><br><span class="line">     ↓</span><br><span class="line">在启动或者有新的Chunk服务器加入时，向各个Chunk服务器轮询它们所存储的Chunk信息，并通过周期性的心跳信息监控Chunk服务器的状态。</span><br><span class="line"></span><br><span class="line">Client：GFS客户端实现了GFS文件系统的API接口函数、应用程序与 Master 节点和 Chunk 服务器通讯、以及对数据进行读写操作。代码以库的形式被链接到客户程序里。</span><br><span class="line">Client应用程序同时与Master节点和Chunk服务器通讯，对数据进行读写操作。</span><br><span class="line">         ↓</span><br><span class="line">    客户端和Master节点的通信只获取元数据；</span><br><span class="line">    所有的数据操作都是由客户端直接和Chunk服务器进行交互的。</span><br></pre></td></tr></table></figure><h5 id="日志与灾难恢复"><a href="#日志与灾难恢复" class="headerlink" title="日志与灾难恢复"></a>日志与灾难恢复</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">Master持久化的内容——操作日志</span><br><span class="line">操作日志登录两种类型的元数据变化（命名空间、文件和Chunk的对应关系）：</span><br><span class="line">（1）同时会以操作日志的方式记录在操作系统的系统日志文件中（存储在本地磁盘）；</span><br><span class="line">（2）该日志同时被复制到其它的远程Master服务器上。</span><br><span class="line">     ↓</span><br><span class="line">    系统能简单可靠的更新Master服务器的状态，不用担心Master服务器崩溃导致数据不一致的风险。</span><br><span class="line"></span><br><span class="line">操作日志记录元数据变更历史的作用：</span><br><span class="line">    1）是元数据唯一的持久化存储记录；</span><br><span class="line">    2）是判断同步操作顺序的逻辑时间基线</span><br><span class="line">        （逻辑日志序号作为操作发生的逻辑时间，类似于事务系统中的LSN）。</span><br><span class="line">        文件和Chunk（及其版本）都由创建它们的逻辑时间唯一的、永久的标识。</span><br><span class="line"></span><br><span class="line">记录日志机制</span><br><span class="line">1）确保日志文件是完整的且元数据的变化被持久化后，日志才对客户端是可见的。否则，即使Chunk本身没有出现问题，仍有可能丢失整个文件系统（或者客户端最近的操作）。</span><br><span class="line">2）日志会复制到多台远程机器，只有相应的日志记录写入本地以及远程机器的硬盘后，才会响应客户端的操作请求。</span><br><span class="line">3）Master服务器会收集多个日志记录后批量处理，以减少写入磁盘和复制对系统整体性能的影响。</span><br><span class="line"></span><br><span class="line">灾难恢复时，Master通过重演操作日志把文件系统恢复到最近的状态。类似REDO</span><br><span class="line"></span><br><span class="line">日志的问题：从日志头开始恢复（日志过长）?</span><br><span class="line">解决方法：checkpoint，减少重演操作的日志量。</span><br><span class="line"></span><br><span class="line">日志增长到一定量   →   Master对系统状态进行一次Checkpoint，将所有的状态数据写入一个Checkpoint文件，并删除之前的日志文件。</span><br><span class="line"></span><br><span class="line">系统恢复：Master从磁盘上读取最新的Checkpoint文件，重演Checkpoint之后的有限个日志文件。</span><br><span class="line"></span><br><span class="line">Checkpoint文件存储：压缩B树形式。可直接映射到内存，在用于命名空间查询时无需额外的解析，从而大大提高恢复速度，增强可用性。</span><br><span class="line"></span><br><span class="line">checkpoint过程不阻塞正在进行的修改操作：</span><br><span class="line">    Master使用独立的线程切换到新的日志文件和创建新的Checkpoint文件。</span><br><span class="line">    新的Checkpoint文件包括切换前所有修改（一个包含数百万个文件集群创建Checkpoint文件需1分钟左右）。</span><br><span class="line">    创建完成后，Checkpoint文件被写入本地和远程硬盘。</span><br><span class="line">    旧的Checkpoint文件和日志文件可以被删除，但是为了应对灾难性的故障，通常会多保存一些历史文件。</span><br><span class="line"></span><br><span class="line">Master状态复制</span><br><span class="line">为保证Master服务器的可靠性，Master的状态（所有的操作日志和checkpoint文件）会被复制到多台机器上。</span><br><span class="line">    对Master状态的修改操作能够提交成功的前提：操作日志写入到Master的备份节点和本机的磁盘。</span><br><span class="line">    Master服务进程负责所有的系统状态修改操作（包括后台的服务，如垃圾回收等），当它失效时可以立刻切换并继续提供服务。</span><br><span class="line"></span><br><span class="line">Master切换机制：</span><br><span class="line">客户端使用类似DNS别名的规范名字访问Master（如gfs-test）节点。</span><br><span class="line">如果Master进程所在的机器或者磁盘失效</span><br><span class="line">       ↓</span><br><span class="line">处于GFS系统外部的监控进程在其它的存有完整操作日志的机器上启动新的Master进程，通过更改别名的实际指向，客户端访问新的Master节点。</span><br><span class="line"></span><br><span class="line">“影子”Master节点</span><br><span class="line">    GFS中还有若干 “影子”Master节点，在“主”Master服务器宕机时提供文件系统的只读访问。</span><br><span class="line">    影子的数据可能比“主”Master更新要慢（通常不到1秒）。</span><br><span class="line">    影子Master上可能过期的是文件的元数据</span><br><span class="line">    因为文件内容是从Chunk服务器上读取的，应用程序不会发现过期的文件内容。</span><br><span class="line">“影子”Master为保持自身状态是最新的</span><br><span class="line">    ↓</span><br><span class="line">读取当前正在进行的操作的日志副本，并依照和主Master相同的顺序来更改内部的数据。</span><br><span class="line"></span><br><span class="line">“影子”Master如何得到（位置、节点信息）</span><br><span class="line">主Master因创建和删除副本导致副本位置信息更新时，“影子”Master和主Master通信来更新自身状态。</span><br><span class="line">其余时间，和主Master一样，“影子”Master在启动时从Chunk服务器轮询数据（之后定期pull数据），包括Chunk副本的位置信息。</span><br><span class="line">“影子”Master也会定期和Chunk服务器“握手”来确定它们的状态。</span><br></pre></td></tr></table></figure><h5 id="快照机制"><a href="#快照机制" class="headerlink" title="快照机制"></a>快照机制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">快照机制（用途）</span><br><span class="line">应用请求：对一个文件或目录树做一个拷贝</span><br><span class="line">    ↓</span><br><span class="line">    快照操作</span><br><span class="line">    ↓   快</span><br><span class="line">    几乎瞬间完成，几乎不会对正在进行的其它操作造成任何干扰。</span><br><span class="line"></span><br><span class="line">    用户可使用快照迅速创建一个巨大数据集的分支拷贝，或使用快照操作备份当前状态，之后可以轻松的提交或回滚到备份时的状态。</span><br><span class="line"></span><br><span class="line">实现技术：copy-on-write。</span><br><span class="line">1）Master节点收到快照请求，取消做快照的文件的所有Chunk的租约（后续对这些Chunk的写操作都必须与Master交互以找到租约持有者，从而给Master一个率先创建Chunk的新拷贝的机会）。</span><br><span class="line">2）租约取消或过期之后，Master把操作以日志的方式记录到硬盘上，然后通过复制源文件或者目录的元数据的方式，把这条日志记录的变化反映到内存的状态中。新创建的快照文件和源文件指向完全相同的Chunk地址，Chunk引用计数变为1。</span><br><span class="line"></span><br><span class="line">快照操作后，当客户机第一次想写入数据到相关Chunk C时：</span><br><span class="line">1）它会先发送请求到Master查询当前的租约持有者。</span><br><span class="line">2）Master此时发现Chunk C的引用计数大于1，会选择一个新的Chunk句柄C’。</span><br><span class="line">3）Master要求每个拥有Chunk C当前副本的Chunk服务器在本地创建一个叫做C’的新Chunk。</span><br><span class="line">    本地复制使得写请求的处理方式和任何其它Chunk几乎没有区别。</span><br><span class="line">    Master节点确保新Chunk C’的一个副本拥有租约并回复客户机，客户机得到回复后就可以正常的写该Chunk C’。</span><br></pre></td></tr></table></figure><h5 id="GFS缓存"><a href="#GFS缓存" class="headerlink" title="GFS缓存"></a>GFS缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Master和客户端都会缓存元数据。</span><br><span class="line">客户端和Chunk服务器都不缓存文件数据</span><br><span class="line">大部分程序要么以流的方式读取一个巨大文件，要么工作集太大根本无法被缓存 → 客户端缓存文件数据意义不大。</span><br><span class="line">Chunk以本地文件的方式保存， Linux操作系统的文件系统缓存会把经常访问的数据缓存在内存中。Chunk服务器不必特别缓存文件数据。</span><br></pre></td></tr></table></figure><h5 id="GFS读取流程"><a href="#GFS读取流程" class="headerlink" title="GFS读取流程"></a>GFS读取流程</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571972900106.png" alt="1571972900106"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.客户端把需要读取的文件名和程序指定的字节偏移，根据固定的 Chunk 大小，转换成文件的 Chunk 索引。</span><br><span class="line">2.客户端把文件名和 Chunk 索引发送给 Master 节点。</span><br><span class="line">3.Master节点将相应的Chunk标识和副本的位置信息发还给客户端。</span><br><span class="line">4.客户端用文件名和 Chunk 索引作为 key 缓存这些信息。</span><br><span class="line">5.客户端发送请求（包含Chunk标识和字节范围）到其中的一个副本Chunkserver，一般会选择最近的。</span><br><span class="line">6.该Chunkserver读取chunk数据返回客户端</span><br><span class="line"></span><br><span class="line">在开始对Chunk的数据读取操作后，客户端不必再和Master节点通讯，除非缓存的元数据信息过期或者文件被重新打开。</span><br><span class="line"></span><br><span class="line">客户端通常会在一次请求中查询多个Chunk信息，Master节点的回应也可能包含了被请求Chunk的后续Chunk的信息——实际过程中，客户端通常会在一次请求中查询多个Chunk信息。</span><br><span class="line">    ↓</span><br><span class="line">    同样代价额外元数据，避免客户端和Master节点未来可能会发生的几次通讯。</span><br><span class="line"></span><br><span class="line">Master节点可通过全局的信息精确定位Chunk的位置并制定复制决策。</span><br><span class="line">单一Master节点的策略 → 简化了系统设计。</span><br><span class="line">↓</span><br><span class="line">为避免Master节点成为系统的瓶颈，必须减少对Master节点的读写：</span><br><span class="line">1）客户端不通过Master节点读写文件数据，仅向Master节点询问它应该联系的Chunk服务器；</span><br><span class="line">2）客户端将这些元数据信息（及相邻元数据）缓存一段时间；</span><br><span class="line">3）后续的数据读写操作直接对Chunk服务器进行。</span><br><span class="line"></span><br><span class="line">Chunk分配及其大小</span><br><span class="line">惰性分配策略：每个Chunk（副本）都以普通Linux文件的形式保存在Chunk服务器上，只在需要的时候才扩大。</span><br><span class="line">     ↓ </span><br><span class="line">避免因内部碎片造成的空间浪费。</span><br><span class="line">Chunk的大小是关键的设计参数之一（设置为64MB这个远远大于一般文件系统的块尺寸存在着争议）。</span><br><span class="line"></span><br><span class="line">Chunk过热问题</span><br><span class="line">存放某个可执行文件的几个Chunk服务器被数百个客户端的并发访问请求导致系统局部过载。</span><br><span class="line">解决方法：</span><br><span class="line">1）使用更大的复制参数来保存可执行文件；</span><br><span class="line">2）错开批处理队列系统程序的启动时间；</span><br><span class="line">3）允许客户端从其它客户端读取数据。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988382544.png" alt="1571988382544"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200228175956151.png" alt="image-20200228175956151"></p><h5 id="GFS写入流程"><a href="#GFS写入流程" class="headerlink" title="GFS写入流程"></a>GFS写入流程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GFS必须将对数据块的修改同步到每一个副本。</span><br><span class="line">多个应用可能同时修改同一数据块</span><br><span class="line">    ↓</span><br><span class="line">并发应用下为使多个副本之间保持一致，需要为修改操作定义统一的时序。</span><br><span class="line">问题：为减少master负担，系统采用了元数据缓存机制，client在获得并缓存副本位置后就不再和master交互，谁来定义时序</span><br><span class="line">↓   </span><br><span class="line">需要有人代替master的角色</span><br><span class="line">        ↓   </span><br><span class="line">选出一个master的代理来完成时序约定任务。</span><br><span class="line">        ↓</span><br><span class="line">租约（lease）机制</span><br><span class="line">master建立租约，并将其授权给某个副本，称其为primary，由它来确定数据修改的顺序，其它副本照做。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988973437.png" alt="1571988973437"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1)客户机向Master节点询问哪个Chunk服务器持有当前租约，以及其它副本的位置。如果没有Chunk持有租约，Master就选择其中一个副本建立一个租约。</span><br><span class="line"></span><br><span class="line">2)Master将主Chunk的标识符以及其它副本（secondary副本/二级副本）的位置返回给客户机。客户机缓存这些数据以便后续操作。此后只有在主Chunk不可用或主Chunk回复信息表明它已不再持有租约时，客户机才重新联系Master节点。</span><br><span class="line"></span><br><span class="line">3）客户机把数据推送到所有的副本上（可按任意的顺序推送）。Chunk服务器接收到数据并保存在它的内部LRU缓存中，直到数据被使用或过期交换出去。</span><br><span class="line"></span><br><span class="line">4）当所有的副本都确认收到了数据后，客户机发送写请求到主Chunk服务器。主Chunk为接收到的所有操作分配连续的序列号（这些操作可能来自不同的客户机，序列号保证了操作顺序执行），按序列号的顺序把操作应用到primary自己的本地状态中。</span><br><span class="line"></span><br><span class="line">5）主Chunk把写请求传递到所有的二级副本。每个二级副本依照主Chunk分配的序列号以相同的顺序执行这些操作。</span><br><span class="line"></span><br><span class="line">6）所有的二级副本回复主Chunk“它们已经完成了操作”。</span><br><span class="line"></span><br><span class="line">7）主Chunk服务器回复客户机（任何副本产生的任何错误都会返回给客户机）。出现错误时，写操作可能在主Chunk和一些二级副本执行成功。（如果主Chunk上操作失败，操作不会被分配序列号，也不会传递）客户端请求被确认为失败，被修改的region处于不一致状态。</span><br><span class="line">客户机代码通过重复执行失败的操作来处理这样的错误。在从头开始重复执行之前，客户机会先尝试几次步骤(3)~(7)。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">写数据分割</span><br><span class="line">应用程序一次写入的数据量较大，或者数据跨越了多个Chunk。</span><br><span class="line">         ↓</span><br><span class="line">客户机代码会把它们分成多个写操作。</span><br><span class="line">    这些操作都遵循上述控制流程，但可能会被其它客户机上同时进行的操作打断或者覆盖。</span><br><span class="line">         ↓</span><br><span class="line">    共享的文件region的尾部可能包含来自不同客户机的数据片段。</span><br><span class="line">    写操作的流程使得这些分解后的写操作在所有副本上都以相同的顺序执行完成，实现Chunk副本的一致性。</span><br><span class="line"></span><br><span class="line">记录追加（原子性操作）</span><br><span class="line">记录追加：GFS提供的特殊的修改操作，一种原子性的数据追加操作，除了在主Chunk有些额外的控制逻辑，遵循一般的写操作控制流程：</span><br><span class="line">1）客户机把数据推送给文件最后一个Chunk的所有副本。</span><br><span class="line">2）发送请求给主Chunk。</span><br><span class="line">3）主Chunk检查这次记录追加操作是否会使Chunk超过最大尺寸（64MB）。如果超过则主Chunk先将当前Chunk填充到最大尺寸，之后通知所有二级副本做同样的操作，然后回复客户机要求其对下一个Chunk重新进行记录追加操作。</span><br><span class="line"></span><br><span class="line">记录追加：客户机只需指定要写入的数据，GFS来实现至少有一次原子的写入操作成功执行（写入一个顺序的字节流），写入的数据追加到GFS指定的偏移位置上，之后GFS返回这个偏移量给客户机。</span><br><span class="line">如果记录追加操作在任何一个副本上失败了，客户端会重试追加操作。</span><br><span class="line">↓重新记录追加</span><br><span class="line">一个Chunk的不同副本可能包含不同的数据（重复包含一个记录全部或者部分的数据）。</span><br><span class="line">GFS并不保证Chunk的所有副本在字节级别是完全一致的，只保证数据作为一个整体原子的被至少写入一次。如图：</span><br><span class="line"></span><br><span class="line">记录追加原子性的技术保证</span><br><span class="line">      记录追加用O_APPEND打开文件，是一个原子操作：移动到末端，写数据。</span><br><span class="line">记录追加O_APPEND打开文件提供了无锁的文件追加方式，中间的插入是无效的。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319150108324.png" alt="image-20200319150108324"></p><h5 id="GFS一致性模型"><a href="#GFS一致性模型" class="headerlink" title="GFS一致性模型"></a>GFS一致性模型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GFS 支持一个宽松的一致性模型，这个模型能够很好的支撑我们的高度分布的应用，同时还保持了相对</span><br><span class="line">简单且容易实现的优点。</span><br><span class="line"></span><br><span class="line">文件命名空间的修改（如文件创建）是原子的</span><br><span class="line">    ↓（一致性保证机制）</span><br><span class="line">仅由Master节点控制，命名空间锁提供原子性和正确性，Master节点的操作日志定义写操作在全局的顺序。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319150741376.png" alt="image-20200319150741376"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">一致性保障——客户端Chunk位置缓存刷新</span><br><span class="line">缓存机制：Chunk位置信息会被客户端缓存</span><br><span class="line">    ↓</span><br><span class="line">失效窗口：在缓存的超时时间和文件下一次被打开的时间之间存在一个时间窗，在信息刷新前，客户端有可能从一个失效的副本读取了数据。   </span><br><span class="line">缓存更新：文件再次被打开后会清除缓存中与该文件有关的所有Chunk位置信息。</span><br><span class="line">    当一个Reader重新尝试并联络Master服务器时，它就会立刻得到最新的Chunk位置信息。</span><br><span class="line">缓存失效的影响：</span><br><span class="line">    文件大多数都只是进行追加操作</span><br><span class="line">        ↓</span><br><span class="line">    一个失效的副本通常返回一个早已结束的Chunk，而不是过期的数据。</span><br><span class="line"></span><br><span class="line">有效性校验checksum</span><br><span class="line">文件region的Checksum：Writers在每条写入的记录中都包含了额外的信息，如Checksum，用来验证它的有效性。</span><br><span class="line">Readers可以利用Checksum识别、抛弃偶然性的填充数据和重复内容。</span><br><span class="line"></span><br><span class="line">一致性保障——服务器检测与数据校验</span><br><span class="line">组件的失效可能损坏或者删除数据。</span><br><span class="line">数据损坏：通过Checksum校验数据是否损坏。</span><br><span class="line">    发现问题则尽快利用有效的副本恢复数据。只有当一个Chunk的所有副本在GFS检测到错误并采取应对措施之前全部丢失，该Chunk才会不可逆转的丢失。</span><br><span class="line">发现失效Chunk服务器：Master服务器通过和所有Chunk服务器的定期“握手”来找出失效的Chunk服务器。</span><br><span class="line"></span><br><span class="line">一致性保障机制-操作顺序、版本检测</span><br><span class="line">   经过了一系列成功修改操作后，GFS确保被修改的文件region已定义，并且包含最后一次修改操作写入的数据。</span><br><span class="line">GFS确保上述已定义效果的措施包括：</span><br><span class="line">（a）对Chunk的所有副本的修改操作顺序一致；</span><br><span class="line">（b）使用Chunk版本号来检测副本是否因为它所在的Chunk服务器宕机而错过了修改操作而导致其失效。</span><br><span class="line">失效副本处理：</span><br><span class="line">    （1）失效副本位置信息Master服务器将不再返回客户端；</span><br><span class="line">    （2）该副本不再进行任何修改操作；</span><br><span class="line">    （3）该副本会被垃圾收集系统尽快回收</span><br><span class="line">   </span><br><span class="line">Chunk版本号增加：</span><br><span class="line">    Master节点和Chunk签订一个新租约时</span><br><span class="line">     ↓</span><br><span class="line">    Master增加Chunk版本号，然后通知最新的副本。</span><br><span class="line">Master和这些副本都把新的版本号记录在它们持久化存储的状态信息中。</span><br><span class="line">该动作发生在任何客户机得到通知以前（也是对新版Chunk开始写之前）。</span><br><span class="line"></span><br><span class="line">Chunk版本（时效）检测-保护措施：（Master）</span><br><span class="line">1通知版本号）Master在通知客户机某个Chunk服务器持有租约、或者指示从哪个Chunk服务器进行克隆时，消息中都附带了Chunk的版本号。</span><br><span class="line">2过期不回复）Master在回复客户机的Chunk信息请求时会认为那些过期的Chunk不存在（即使过期副本还未被回收）。</span><br><span class="line">3例行清理）Master例行垃圾回收时移除所有的过期失效副本。</span><br><span class="line"></span><br><span class="line">Chunk时效检测-版本号验证</span><br><span class="line">Chunk服务器失效：Chunk副本可能因错失一些修改操作而过期失效。</span><br><span class="line">         ↓</span><br><span class="line">    Master保存每个Chunk的版本号以区分当前副本和过期副本。</span><br><span class="line">客户机或者Chunk服务器：在执行操作时都会验证版本号以确保总是访问当前版本的数据。</span><br><span class="line"></span><br><span class="line">Chunk版本变更异常情况</span><br><span class="line">如果某个副本所在的Chunk服务器处于失效状态，则该副本版本号不会增加。</span><br><span class="line">      ↓</span><br><span class="line">    该Chunk服务器重新启动并向Master报告其拥有的Chunk集合及版本号时， Master可检测出这些过期的Chunk。</span><br><span class="line"></span><br><span class="line">    如果Master看到一个比它记录的版本号更高的版本号，Master会认为它和Chunk服务器签订租约的操作失败了，此时会选择更高的版本号作为当前的版本号。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988445075.png" alt="1571988445075"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988523815.png" alt="1571988523815"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988580733.png" alt="1571988580733"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988633029.png" alt="1571988633029"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571988680596.png" alt="1571988680596"></p><h5 id="GFS锁机制"><a href="#GFS锁机制" class="headerlink" title="GFS锁机制"></a>GFS锁机制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">读锁和读写锁：Master节点的每个操作在开始之前都要获得一系列的锁。</span><br><span class="line">例：一个写操作涉及/d1/d2/…/dn/leaf，那么它首先要获得目录/d1，/d1/d2，…，/d1/d2/…/dn的读锁，以及/d1/d2/…/dn/leaf的读写锁。</span><br><span class="line">注：leaf可以是一个文件，也可以是一个目录。 </span><br><span class="line"></span><br><span class="line">锁的分配：</span><br><span class="line">    因为名称空间可能有很多节点，读写锁采用惰性分配策略，并且在不再使用时立刻删除。</span><br><span class="line">避免死锁：锁的获取依据一个全局一致的顺序，首先按名称空间的层次排序，在同一个层次内按字典顺序排序。</span><br><span class="line"></span><br><span class="line">读写锁支持对同一目录的并行操作，可以在同一个目录下同时创建多个文件（每一个操作都获取一个目录名的上的读锁和文件名上的写入锁）。</span><br><span class="line">目录名的读锁防止目录被删除、改名以及被快照。</span><br><span class="line">文件名的写入锁串行化文件创建操作，确保不会多次创建同名的文件。</span><br></pre></td></tr></table></figure><h5 id="chunk创建-移动-回收"><a href="#chunk创建-移动-回收" class="headerlink" title="chunk创建/移动/回收"></a>chunk创建/移动/回收</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Chunk在Writer真正写入数据时才被物理上创建。</span><br><span class="line">Master创建一个Chunk时，需要选择在哪里放置初始的空副本，考虑几个因素：</span><br><span class="line">平均硬盘使用率，Chunk副本分布在多个机架，每个Chunk服务器上创建次数</span><br><span class="line"></span><br><span class="line">Chunk的有效副本数量少于用户指定的复制因数时（某些副本坏了，或者Chunk副本的复制因数提高了）</span><br><span class="line">     ↓</span><br><span class="line">Master会重新复制它。</span><br><span class="line"></span><br><span class="line">Master选择优先级最高的Chunk，然后命令某个Chunk服务器直接从可用的副本”克隆”一个副本出来。</span><br><span class="line"></span><br><span class="line">Master周期性地对副本负载均衡：检查当前副本分布情况，移动副本以更好的利用硬盘空间、更有效的进行负载均衡。</span><br><span class="line"></span><br><span class="line">垃圾回收——惰性、日志、隐藏、孤立</span><br><span class="line">惰性：</span><br><span class="line">    GFS文件删除后不会立刻回收其物理空间，采用惰性回收策略，只在文件和Chunk级的常规垃圾收集时进行。</span><br><span class="line"></span><br><span class="line">日志、隐藏：</span><br><span class="line">    当文件被应用程序删除时，Master立刻把删除操作以日志的方式记录下来。但是，Master并不马上回收资源，而是把文件名改为一个包含删除时间戳的、隐藏的名字。</span><br><span class="line">    </span><br><span class="line">名称空间定期回收：</span><br><span class="line">    Master会对文件系统命名空间做常规扫描，此时它会删除所有三天前的隐藏文件（时间间隔可设置）。直到文件被真正删除，它们仍旧可以用新的特殊名字读取，也可通过把隐藏文件改名为正常显示文件名的方式“反删除”。</span><br><span class="line"></span><br><span class="line">孤立：</span><br><span class="line">    当隐藏文件被从名称空间中删除，Master内存中保存的这个文件的相关元数据才会被删除。这也有效的切断了文件和它包含的所有Chunk的连接。</span><br><span class="line"></span><br><span class="line">垃圾回收——删除孤儿Chunk</span><br><span class="line">Master会对Chunk名字空间做类似的常规回收扫描，此时会找到孤儿Chunk（不被任何文件包含）并删除它们的元数据。</span><br><span class="line">Chunk服务器在与Master交互的心跳信息中，报告它拥有的Chunk子集信息，Master节点回复这其中哪些Chunk在Master节点保存的元数据中已不存在。Chunk服务器可以任意删除这些Chunk的副本。</span><br></pre></td></tr></table></figure><h4 id="BigTable"><a href="#BigTable" class="headerlink" title="BigTable"></a>BigTable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Bigtable 是一个分布式结构化数据存储系统，用来处理海量数据：通常是分布在数千台普通服务器上PB级的数据。</span><br><span class="line">Bigtable 支持单行上事务处理，用户可以对存储在一个行关键字下的数据进行原子性的读-更新-写操作。</span><br><span class="line">设计思想</span><br><span class="line">    简单数据模型</span><br><span class="line">    稀疏、分布式、多维度排序Map（行关键字+列关键字+时间戳，不解析）</span><br><span class="line">    列族</span><br><span class="line">    Tablet、SStable、数据块</span><br><span class="line">    行关键字下的原子性操作</span><br><span class="line">体系架构</span><br><span class="line">    分布式锁服务组件Chubby（存储BigTable的模式信息、自引导指令）</span><br><span class="line">    Master（负载均衡、修改模式）</span><br><span class="line">运行管理</span><br><span class="line">    Root Tablet——METADATA——用户表Tablet（SSTable）</span><br><span class="line">    Tablet服务器←→独占锁</span><br><span class="line">Table服务</span><br><span class="line">    Tablet变更（分割由Tablet服务器启动）</span><br><span class="line">    更新操作的Redo日志，变更memtable</span><br><span class="line">    基于日志的恢复-热点-日志排序（master协调）</span><br><span class="line">    Minor Compaction（更新、Tablet迁移+2次）、</span><br><span class="line">    Merging Compaction、</span><br></pre></td></tr></table></figure><h5 id="BigTable数据模型"><a href="#BigTable数据模型" class="headerlink" title="BigTable数据模型"></a>BigTable数据模型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bigtable  是一个稀疏的、分布式的、持久化存储的多维度排序 Map </span><br><span class="line">Map的索引=行关键字+列关键字+时间戳。</span><br><span class="line">Map中的每个 value 都是一个未经解析的 byte 数组。</span><br><span class="line">(row:string, column:string,time:int64)-&gt;string</span><br><span class="line">存储的数据都视为字符串，Bigtable本身不去解析这些字符串。</span><br><span class="line">          ↓</span><br><span class="line">客户程序可以把各种结构化或者半结构化的数据串行化（序列化）到这些字符串里。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319172856638.png" alt="image-20200319172856638"></p><p><strong>行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">每一行可参与动态分区，一个分区叫做一个”Tablet”。</span><br><span class="line">Tablet是数据分布和负载均衡调整的最小单位。（SSTable是列存储的单位）</span><br><span class="line">这样做的结果是，当操作只读取行中很少几列的数据时效率很高，通常只需要很少几次机器间的通信即可完成。</span><br><span class="line">表中的行关键字可以是任意的字符串（目前支持最大 64KB 的字符串，但是对大多数用户，10-100 个字节就足够了）。</span><br><span class="line">对同一个行关键字的读或者写操作都是原子的（不管读或者写这一行里多少个不同列）</span><br><span class="line">Bigtable 通过行关键字的字典顺序来组织数据。</span><br></pre></td></tr></table></figure><p><strong>列族</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">列关键字组成的集合叫做“列族“，列族是访问控制的基本单位。</span><br><span class="line">存放在同一列族下的所有数据通常都属于同一个类型（可压缩列族）。</span><br><span class="line">列族在使用之前必须先创建，然后才能在列族中任何的列关键字下存放数据；</span><br><span class="line">一张表的列族不能太多（最多几百个），并且列族在运行期间很少改变。</span><br><span class="line">访问控制、磁盘和内存的使用统计都是在列族层面进行的。</span><br><span class="line">允许一些应用添加新基本数据、一些应用可以读取基本数据并创建继承的列族、一些应用则只允许浏览数据</span><br><span class="line">列关键字的命名语法如下：列族：限定词。 列族的名字必须是可打印的字符串，而限定词的名字可以是任意的字符串。</span><br><span class="line">    1）Webtable的language列族，存放撰写网页的语言，只有一个列关键字，用来存放网页的语言标识ID。</span><br><span class="line">    2）anchor列族，限定词是引用该网页的站点名，每个列关键字代表一个锚链接，每列的数据项存放链接文本。</span><br></pre></td></tr></table></figure><p><strong>时间戳</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">每个数据项可包含同一份数据的不同版本，通过时间戳（int64）来索引。</span><br><span class="line">时间戳赋值：</span><br><span class="line">    1）通过Bigtable（可表示精确到毫秒的“实时”时间）</span><br><span class="line">    2）由应用程序自己生成具有唯一性的时间戳。</span><br><span class="line">数据项中不同版本的数据按照时间戳倒序排序（最新的数据排在最前面）。</span><br></pre></td></tr></table></figure><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Bigtable提供的API函数，至少包括： </span><br><span class="line">1）建立和删除表；</span><br><span class="line">2）建立和删除列族。</span><br><span class="line"></span><br><span class="line">客户程序可以写入或者删除表中的值，如：</span><br><span class="line">1）增加、删除锚点（增加列）；</span><br><span class="line">2）从每个行中查找值；</span><br><span class="line">3）遍历表中的一个数据子集。</span><br><span class="line"></span><br><span class="line">Bigtable支持单行上的事务处理，用户可以对存储在一个行关键字下的数据进行原子性的读写操作。</span><br><span class="line"></span><br><span class="line">BigTable还提供修改集群、表和列族的元数据的API（如修改访问权限）。</span><br><span class="line"></span><br><span class="line">Bigtable可以和MapReduce（Google开发的大规模并行计算框架）一起使用：</span><br><span class="line">    已经开发了一些Wrapper类，Bigtable可以作为MapReduce框架的输入和输出。</span><br></pre></td></tr></table></figure><h5 id="体系架构"><a href="#体系架构" class="headerlink" title="体系架构"></a>体系架构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bigtable建立在其它几个Google基础构件上：</span><br><span class="line">1）使用Google的分布式文件系统(GFS)存储日志文件和数据文件；</span><br><span class="line">2）依赖高可用的、序列化的分布式锁服务组件Chubby</span><br><span class="line">3) BigTable 集群通常运行在一个共享的机器池中，池中的机器还会运行其它的各种各样的分布式应用程序</span><br><span class="line">4) BigTable 依赖集群管理系统来调度任务、管理共享的机器上的资源、处理机器的故障、以及监视机器的状态。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319174638888.png" alt="image-20200319174638888"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bigtable 包括了三个主要的组件：</span><br><span class="line">链接到客户程序中的库、一个 Master 服务器和多个 Tablet 服务器。</span><br><span class="line">针对系统工作负载的变化情况，BigTable 可以动态的向集群中添加（或者删除）Tablet 服务器。</span><br></pre></td></tr></table></figure><h5 id="Chubby"><a href="#Chubby" class="headerlink" title="Chubby"></a>Chubby</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Chubby：高可用的、序列化的分布式锁服务组件，一个Chubby服务包括了5个活动的副本，其中一个副本被选为Master并处理请求。</span><br><span class="line"></span><br><span class="line">Bigtable 使用 Chubby 完成以下的几个任务：</span><br><span class="line">如果Chubby长时间无法访问，BigTable就会失效。</span><br><span class="line">    确保在任何给定的时间内最多只有一个活动的 Master 副本；</span><br><span class="line">    存储 BigTable 数据的自引导指令的位置；</span><br><span class="line">    查找 Tablet 服务器，以及在 Tablet 服务器失效时进行善后；</span><br><span class="line">    存储 BigTable 的模式信息（每张表的列族信息）；</span><br><span class="line">    以及存储访问控制列表。</span><br><span class="line">    </span><br><span class="line">Chubby服务可用的前提：</span><br><span class="line">    1）大多数副本都正常运行；</span><br><span class="line">    2）彼此之间能够互相通信。</span><br><span class="line">当有副本失效的时候，Chubby使用算法来保证副本的一致性。</span><br><span class="line"></span><br><span class="line">Chubby有一个名字空间（内容包括目录和小文件）。</span><br><span class="line">    每个目录或文件可以看作一个锁，读写文件的操作都是原子性的。</span><br><span class="line"></span><br><span class="line">Chubby客户程序一致性缓存（客户端程序库提供）</span><br><span class="line">    每个Chubby客户程序都维护一个与Chubby服务的会话（session）并持有租约。</span><br><span class="line"></span><br><span class="line">会话失效（及时续签）：如果客户程序不能在租约到期的时间内重新签订会话的租约，则该会话过期失效。</span><br><span class="line">          ↓</span><br><span class="line">会话失效则客户程序拥有的相关信息失效：</span><br><span class="line">    锁、打开的文件句柄。</span><br><span class="line">    </span><br><span class="line">Chubby客户程序可以在文件和目录上注册回调函数。</span><br><span class="line">          ↓</span><br><span class="line">当文件或目录改变或者会话过期时，回调函数会通知客户程序。</span><br></pre></td></tr></table></figure><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Master服务器主要负责以下工作：实际Master服务器的负载是很轻的</span><br><span class="line">    1）为Tablet服务器分配Tablets</span><br><span class="line">    2）检测新加入的或者过期失效的Table服务器</span><br><span class="line">    3）对Tablet服务器进行负载均衡</span><br><span class="line">    4）对保存在GFS上的文件进行垃圾收集</span><br><span class="line">    5）处理对模式的相关修改操作（例如建立表和列族）</span><br></pre></td></tr></table></figure><h5 id="Tablet服务器"><a href="#Tablet服务器" class="headerlink" title="Tablet服务器"></a>Tablet服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">每个Tablet服务器都管理一个Tablet的集合（通常数十个至上千个Tablet）：</span><br><span class="line">    1）处理它加载的Tablet的读写操作；</span><br><span class="line">    2）在Tablet过大时对其分割。</span><br><span class="line"></span><br><span class="line">和很多Single-Master类型的分布式存储系统类似，</span><br><span class="line">  客户程序读取数据不经过Master，直接和Tablet服务器通信进行读写操作。</span><br><span class="line">          ↓</span><br><span class="line">  客户程序不必通过Master来获取Tablet的位置信息，大多数客户程序甚至完全不需要和Master服务器通信，导致了在实际应用中Master服务器的负载很轻。</span><br></pre></td></tr></table></figure><h5 id="Tablet"><a href="#Tablet" class="headerlink" title="Tablet"></a>Tablet</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一个BigTable集群存储了很多表，每个表包含一个Tablet的集合</span><br><span class="line">       每个Tablet包含某个范围内的行的所有相关数据。</span><br><span class="line">      （ → SSTable → 数据块）</span><br><span class="line"></span><br><span class="line">初始状态下，一个表只有一个Tablet，随着表中数据的增长，它被自动分割成多个Tablet。</span><br><span class="line">缺省情况下，每个Tablet的尺寸大约是100MB到200MB。</span><br></pre></td></tr></table></figure><h5 id="数据文件SSTable"><a href="#数据文件SSTable" class="headerlink" title="数据文件SSTable"></a>数据文件SSTable</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BigTable内部存储数据的文件：Google SSTable。</span><br><span class="line">    SSTable是一个持久化的、排序的、不可更改的Map结构（key-value映射），key和value的值都是任意的字节串。</span><br><span class="line"></span><br><span class="line">查询：可以对SSTable查询与一个key值相关的value，或者遍历某个key值范围内的所有的key-value对。</span><br><span class="line"></span><br><span class="line">从内部看，SSTable是一系列的数据块，通常每个块的大小是64KB（可以配置）。</span><br><span class="line"></span><br><span class="line">数据块的定位：使用块索引（通常存储在SSTable的末尾）定位数据块。</span><br><span class="line">块索引缓存：在打开SSTable时块索引被加载到内存。</span><br><span class="line">    也可以选择把整个SSTable都放在内存中。</span><br></pre></td></tr></table></figure><h5 id="Tablet三层寻址"><a href="#Tablet三层寻址" class="headerlink" title="Tablet三层寻址"></a>Tablet三层寻址</h5><p>Tablet的位置信息：使用一个三层的、类似Ｂ+树的结构存储。</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319181126350.png" alt="image-20200319181126350"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Tablet层次结构:</span><br><span class="line">Chubby file一个存储在Chubby中的文件，包含Root Tablet的位置信息。</span><br><span class="line">    第一层：Root Tablet，包含了一个特殊的METADATA表，记录METADATA里所有的Tablet的位置信息。</span><br><span class="line">    第二层：METADATA表，其中的每个Tablet包含了一个用户Tablet的集合。</span><br><span class="line">    第三层：用户表tablet。</span><br><span class="line">Root Tablet：</span><br><span class="line">    1）实际上是METADATA表的第一个Tablet；</span><br><span class="line">    2）永远不会被分割 ，从而保证Tablet的位置信息存储结构不会超过三层。</span><br><span class="line"></span><br><span class="line">METADATA表中，每个Tablet的位置信息都存放在一个行关键字下</span><br><span class="line">     行关键字=Tablet所在的表的标识符⊕Tablet的最后一行编码</span><br><span class="line">METADATA的每一行存储约1KB的内存数据。</span><br><span class="line">这种三层结构的存储模式下，容量为128MB的METADATA Tablet，对应2^17行，两层可标识2^34个Tablet的地址。如果每个Tablet存储128MB数据，那么一共可以存储2^61字节数据。</span><br><span class="line">METADATA表还存储次级信息(secondary information)</span><br><span class="line">主要包括每个Tablet的事件日志（例如一个服务器何时开始为该Tablet提供服务）。</span><br><span class="line">          ↓</span><br><span class="line">有助于排查错误和性能分析。</span><br><span class="line"></span><br><span class="line">SSTable注册信息:</span><br><span class="line">    SSTable注册：每个Tablet的SSTable都在METADATA表中注册。</span><br><span class="line">    SSTable删除：Master服务器采用“标记-删除”的垃圾回收方式删除废弃的SSTable。</span><br><span class="line">    Root SSTable集合的保存：METADATA表保存。</span><br></pre></td></tr></table></figure><p><strong>Tablet的客户端缓存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">客户程序使用的库：缓存Tablet的位置信息，Tablet 的地址信息是存放在内存里,对它的操作不必访问GFS文件系统。</span><br><span class="line"></span><br><span class="line">预取Tablet地址：每次需要从METADATA表中读取一个Tablet的元数据时，都会多读取几个Tablet的元数据。</span><br><span class="line">          ↓</span><br><span class="line">进一步的减少访问的开销。</span><br><span class="line"></span><br><span class="line">客户端可能未缓存某个Tablet的地址信息（例如缓存为空），或发现缓存的地址信息不正确（过期）。</span><br><span class="line">    ↓</span><br><span class="line">客户程序在树状的存储结构中递归的查询Tablet位置信息。</span><br></pre></td></tr></table></figure><h5 id="Tablet分配"><a href="#Tablet分配" class="headerlink" title="Tablet分配"></a>Tablet分配</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一个Tablet只能分配给一个Tablet服务器。</span><br><span class="line">活跃及分配情况：Master服务器记录当前有哪些活跃的Tablet服务器以及Tablet的已分配和未分配情况。</span><br><span class="line"></span><br><span class="line">某个Tablet没有被分配、并且有一个Tablet服务器有足够的空闲空间装载该Tablet</span><br><span class="line">          ↓</span><br><span class="line">Master向该Tablet服务器发送一个装载请求，把Tablet分配给该服务器。</span><br></pre></td></tr></table></figure><p><strong>Tablet服务器状态：独占锁监控</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用Chubby跟踪记录Tablet服务器的状态。</span><br><span class="line">    Tablet服务器启动时在Chubby的一个指定目录（服务器目录）下建立一个有唯一性名字的文件，并且获取该文件的独占锁。Master实时监控该目录，因此 Master 服务器能够知道有新的 Tablet 服务器加入</span><br><span class="line">Chubby提供的机制使Tablet服务器能够知道自己是否还持有锁</span><br><span class="line"></span><br><span class="line">Tablet服务器丢失了Chubby上的独占锁（比如网络断开导致Tablet服务器和Chubby的会话丢失）</span><br><span class="line">↓</span><br><span class="line">停止对Tablet提供服务</span><br><span class="line"></span><br><span class="line">Chubby文件还存在：Tablet服务器试图重新获得对该文件的独占锁。</span><br><span class="line">Chubby文件不存在：Tablet服务器就不能再提供服务，它自行退出（it kills itself）。</span><br><span class="line"></span><br><span class="line">Tablet服务器终止（例如运行该Tablet服务器的主机从集群中移除）</span><br><span class="line">        ↓ </span><br><span class="line">尝试释放它持有的文件锁，Master服务器会尽快把该节点的Tablet分配到其它Tablet服务器。</span><br></pre></td></tr></table></figure><p><strong>Tablet服务器状态检测</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Master服务器轮询Tablet服务器文件锁的状态</span><br><span class="line">——检测何时Tablet服务器不再为Tablet服务。</span><br><span class="line"></span><br><span class="line">某个Tablet服务器报告丢失了自己的文件锁，或者Master最近几次尝试和它通信都没有得到响应。</span><br><span class="line">        ↓</span><br><span class="line">Master尝试获取该Tablet服务器文件的独占锁。</span><br><span class="line">        ↓</span><br><span class="line">若Master服务器成功获取了独占锁</span><br><span class="line">        ↓</span><br><span class="line">Chubby运行正常。</span><br><span class="line">        ↓</span><br><span class="line">Tablet服务器宕机，或者不能和Chubby通信。</span><br><span class="line">        ↓</span><br><span class="line">1）Master删除该Tablet服务器在Chubby上的服务器文件，以确保它不再给Tablet提供服务；</span><br><span class="line">2）把之前分配给它的所有Tablet放入未分配的Tablet集合中。</span><br><span class="line"></span><br><span class="line">若Master故障</span><br><span class="line">Master的Chubby会话过期  → 主动退出。</span><br><span class="line">          ↓</span><br><span class="line">确保Bigtable集群在Master和Chubby之间网络故障时仍然可以使用。</span><br><span class="line">Master故障不会改变现有Tablet在Tablet服务器上的分配状态</span><br><span class="line">字典数据在Root Tablet上，通过Chubby获得</span><br><span class="line">如Chubby长时间无法访问，则BigTable失效。</span><br></pre></td></tr></table></figure><p>当集群管理系统启动了一个 Master 服务器之后，Master 服务器首先要了解当前 Tablet 的分配状态，之后才能够修改分配状态。Master 服务器在启动的时候执行以下步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）从Chubby获取一个唯一的Master锁，用来阻止创建其它的Master服务器实例；</span><br><span class="line">（2）扫描Chubby的服务器文件锁存储目录，获取当前正在运行的服务器列表；</span><br><span class="line">（3）和所有的正在运行的Tablet表服务器通信，获取每个Tablet服务器上Tablet的分配信息；</span><br><span class="line">（4）扫描METADATA表获取所有的Tablet的集合，在扫描过程中如果发现还没有分配的Tablet（节点退出、故障、Tablet分裂），就将其加入未分配的Tablet集合等待合适的时机分配。</span><br></pre></td></tr></table></figure><h5 id="Tablet集合变更"><a href="#Tablet集合变更" class="headerlink" title="Tablet集合变更"></a>Tablet集合变更</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Tablet集合的改变：</span><br><span class="line">    1）建立一个新表；</span><br><span class="line">    2）删除一个旧表；</span><br><span class="line">    3）两个Tablet合并；</span><br><span class="line">    4）一个Tablet被分割成两个小的Tablet。</span><br><span class="line">Master跟踪记录所有这些事件。</span><br><span class="line">1）~3）由master启动，4）由tablet服务器启动。</span><br><span class="line"></span><br><span class="line">Tablet服务器启动分割事件，完成后，需在METADATA表中记录新的Tablet的信息，以示提交该操作。</span><br><span class="line"> ↓</span><br><span class="line">分割操作提交后，Tablet服务器通知Master已提交信息。</span><br><span class="line"></span><br><span class="line">若信息没有通知到Master</span><br><span class="line">        ↓</span><br><span class="line">Master在要求Tablet服务器装载（已被分割的）子表时会发现一个新的Tablet。</span><br><span class="line">通过对比METADATA表中Tablet的信息，Tablet服务器会发现Master要求其装载的Tablet不完整，Tablet服务器重新向Master服务器发送通知信息。</span><br></pre></td></tr></table></figure><h5 id="Tablet服务：更新日志"><a href="#Tablet服务：更新日志" class="headerlink" title="Tablet服务：更新日志"></a>Tablet服务：更新日志</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tablet 的持久化状态信息保存在 GFS 上。更新操作提交到 REDO 日志中 。</span><br><span class="line">在更新操作中，最近提交那些存放在一个排序的缓存（memtable）；较早的更新存放在一系列SSTable 中。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571990342471.png" alt="1571990342471"></p><h5 id="Tablet服务：保存数据"><a href="#Tablet服务：保存数据" class="headerlink" title="Tablet服务：保存数据"></a>Tablet服务：保存数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BigTable 内部存储数据的文件是 Google SSTable 格式的。</span><br><span class="line">SSTable 是一个持久化的、排序的、不可更改的Map 结构，而 Map 是一个 key-value 映射的数据结构，key 和 value 的值都是任意的 Byte 串。</span><br><span class="line">可以对 SSTable进行如下的操作：查询与一个 key 值相关的 value，或者遍历某个 key 值范围内的所有的 key-value 对。</span><br><span class="line">从内部看SSTable 是一系列的数据块（通常每个块的大小是 64KB，这个大小是可以配置的）。</span><br><span class="line">SSTable 使用块索引（通常存储在SSTable 的最后）来定位数据块；在打开 SSTable 的时候，索引被加载到内存。每次查找都可以通过一次磁盘搜索完成：首先使用二分查找法在内存中的索引里找到数据块的位置，然后再从硬盘读取相应的数据块。</span><br><span class="line">也可以选择把整个 SSTable 都放在内存中，这样就不必访问硬盘了。读写示例如下图：</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989399915.png" alt="1571989399915"></p><h5 id="Tablet服务：恢复"><a href="#Tablet服务：恢复" class="headerlink" title="Tablet服务：恢复"></a>Tablet服务：恢复</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）Tablet服务器先从METADATA表中读取它的元数据（包含组成这个Tablet的SSTable列表以及一系列的Redo Point，这些Redo Point指向可能含有该Tablet数据的已提交的日志记录）。</span><br><span class="line">2）Tablet服务器把SSTable的索引读进内存。</span><br><span class="line">3）Tablet服务器通过重复Redo Point之后提交的更新来重建memtable。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989599804.png" alt="1571989599804"></p><h5 id="Tablet服务：写操作"><a href="#Tablet服务：写操作" class="headerlink" title="Tablet服务：写操作"></a>Tablet服务：写操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tablet服务器进行写操作时先检查：</span><br><span class="line">    操作格式是否正确、</span><br><span class="line">    操作发起者是否有执行权限（从一个Chubby文件中读取具有写权限的操作者列表（一般在Chubby客户缓存里），从而验证权限。）。</span><br><span class="line"></span><br><span class="line">当写操作提交后，写的内容插入memtable。成功的修改操作会记录在提交日志里。</span><br><span class="line"></span><br><span class="line">批量提交方式（group commit）：提高包含大量小的修改操作的应用程序吞吐量。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989498341.png" alt="1571989498341"></p><h5 id="Tablet服务：Minor-Compaction"><a href="#Tablet服务：Minor-Compaction" class="headerlink" title="Tablet服务：Minor Compaction"></a>Tablet服务：Minor Compaction</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">写操作使memtable大小不断增加</span><br><span class="line">          ↓</span><br><span class="line">memtable大小到达门限值</span><br><span class="line">          ↓</span><br><span class="line">Minor Compaction：该memtable被冻结，创建一个新的memtable。被冻结住memtable会被转换成SSTable，然后写入GFS。当进行 Tablet 的合并和分割时，正在进行的读写操作能够继续进行</span><br><span class="line"></span><br><span class="line">目的：</span><br><span class="line">1）收缩Tablet服务器使用的内存；</span><br><span class="line">2）在服务器灾难恢复过程中减少必须从提交日志里读取的数据量。</span><br><span class="line"></span><br><span class="line">定期在后台执行Merging Compaction：读取一些SSTable和memtable的内容，”合并“成一个新的SSTable ，限制这类文件的数量。</span><br><span class="line">    Merging Compaction过程完成后可删除输入的这些SSTable和memtable。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989538135.png" alt="1571989538135"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989599804.png" alt="1571989599804"></p><h5 id="Tablet服务：读操作"><a href="#Tablet服务：读操作" class="headerlink" title="Tablet服务：读操作"></a>Tablet服务：读操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tablet服务器进行读操作时会作类似的完整性和权限检查。</span><br><span class="line">读操作在一个由一系列SSTable和memtable合并的视图里执行</span><br><span class="line">    ↑</span><br><span class="line">    SSTable和memtable是按字典排序的数据结构，因此可高效生成合并视图。</span><br><span class="line"></span><br><span class="line">当进行Tablet的合并和分割时，正在进行的读写操作能够继续进行。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989688701.png" alt="1571989688701"></p><h5 id="读优化：局部性群组"><a href="#读优化：局部性群组" class="headerlink" title="读优化：局部性群组"></a>读优化：局部性群组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">客户程序可以将多个列族组合成一个局部性群组，对应一个单独的SSTable。</span><br><span class="line">将通常不会一起访问的列族分割成不同的局部性群组</span><br><span class="line">          ↓</span><br><span class="line">提高读操作的效率。</span><br><span class="line">    如，在 Webtable表中，网页的元数据（比如语言和 Checksum）可以在一个局部性群组中，网页的内容可以在另外一个群组：当一个应用程序要读取网页的元数据的时候，它没有必要去读取所有的页面内容。</span><br><span class="line">    </span><br><span class="line">可以以局部性群组为单位设定一些调试参数（例如设定一个局部性群组全部存储在内存中，从而优化需要频繁访问的小块数据。Bigtable内部利用这个特性提高METADATA表中具有位置相关性的列族的访问速度。）</span><br></pre></td></tr></table></figure><h5 id="读优化：Tablet服务器缓存"><a href="#读优化：Tablet服务器缓存" class="headerlink" title="读优化：Tablet服务器缓存"></a>读优化：Tablet服务器缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tablet服务器使用二级缓存策略：</span><br><span class="line">    第一级缓存——扫描缓存，主要缓存Tablet服务器通过SSTable接口获取的Key-Value对。</span><br><span class="line">    第二级缓存——Block缓存，缓存从GFS读取的SSTable的Block。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989767781.png" alt="1571989767781"></p><h5 id="读优化：Bloom过滤器"><a href="#读优化：Bloom过滤器" class="headerlink" title="读优化：Bloom过滤器"></a>读优化：Bloom过滤器</h5><p>客户程序可以对特定局部性群组的SSTable指定Bloom过滤器缓存来减少硬盘访问的次数：</p><p>使用Bloom过滤器查询一个SSTable是否包含了特定行和列的数据</p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571989858092.png" alt="1571989858092"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bloom filter（布隆过滤器）被用来检测一个元素是不是集合中的一个成员，它具有很好的空间和时间效率</span><br><span class="line">Bloom filter检测结果：有100%的召回率</span><br><span class="line">   是 → 该元素不一定在集合中；</span><br><span class="line">   否 → 该元素一定不在集合中。</span><br><span class="line">Bloom filter采用的是哈希函数的方法：将一个元素映射到一个m长度的阵列上的一个点，当这个点是 1 时，那么这个元素在集合内，反之则不在集合内。</span><br><span class="line">使用k个哈希函数对应k个点，如果所有点都是 1，则元素可能在集合中，如果有0，则元素不在集合中。</span><br><span class="line">y1不是集合中的元素，y2属于这个集合或者是一个false positive。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319212007212.png" alt="image-20200319212007212"></p><h5 id="Commit日志实现"><a href="#Commit日志实现" class="headerlink" title="Commit日志实现"></a>Commit日志实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果把对每个Tablet的操作的Commit日志都存一个文件，则会产生大量的日志文件及其并行写操作</span><br><span class="line">    ↓</span><br><span class="line">1）导致大量的磁盘Seek操作；</span><br><span class="line">2）影响批量提交的优化效果。</span><br><span class="line"></span><br><span class="line">设置每个Tablet服务器一个Commit日志文件，混合对多个Tablet的修改日志记录，以追加方式写入同一个日志文件。</span><br></pre></td></tr></table></figure><h5 id="TabletServer宕机恢复"><a href="#TabletServer宕机恢复" class="headerlink" title="TabletServer宕机恢复"></a>TabletServer宕机恢复</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Tablet服务器宕机</span><br><span class="line">        ↓</span><br><span class="line">它加载的Tablet将被移到很多其它的Tablet服务器上（每个Tablet服务器都装载很少的几个宕机服务器的Tablet）。</span><br><span class="line"></span><br><span class="line">要恢复一个Tablet的状态：新的Tablet服务器要从原Tablet服务器日志中提取记录并重新执行。</span><br><span class="line"></span><br><span class="line">假如有100台Tablet服务器，每台都加载了失效的Tablet服务器上的一个Tablet，那么，这个日志文件就要被读取100次（每个服务器读取一次）。</span><br><span class="line">一个批处理程序，被100个节点同时访问，产生系统的热点。</span><br><span class="line">        ↓</span><br><span class="line">把日志按照关键字（table，row name，Log Sequence Number）排序   →  对同一个Tablet的修改操作日志记录连续存放在一起</span><br><span class="line">        ↓</span><br><span class="line">恢复时只要一次磁盘Seek操作，之后只需顺序读取。</span><br><span class="line"></span><br><span class="line">并行排序：先将日志分割成64MB的段，之后在不同的Tablet服务器对段进行并行排序。</span><br><span class="line">Master服务器来协同处理该排序工作，在一个Tablet服务器表明自己需要从Commit日志文件恢复Tablet时开始执行。</span><br></pre></td></tr></table></figure><h5 id="Tablet迁移"><a href="#Tablet迁移" class="headerlink" title="Tablet迁移"></a>Tablet迁移</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Master将某个Tablet从一个Tablet服务器移到另外一个Tablet服务器时，源Tablet服务器会对这个Tablet做两次Minor Compaction：</span><br><span class="line">第一次，减少Tablet服务器的日志文件中没有归并的日志记录，从而减少恢复的时间。Compaction完成后，源服务器停止为该Tablet提供服务。</span><br><span class="line">第二次，在卸载Tablet之前，源Tablet服务器再做一次Minor Compaction，以消除刚才压缩过程中又产生的未归并的记录，在这之后Tablet就可以被装载到新的Tablet服务器上并且不需要从日志中进行恢复了。</span><br></pre></td></tr></table></figure><h4 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Paxos 算法：Lamport于1990年提出，是一种基于消息传递的一致性算法。</span><br><span class="line">Paxos算法运行在允许宕机故障的异步系统中，不要求可靠的消息传递，可容忍消息丢失、延迟、乱序以及重复。</span><br><span class="line">Paxos算法目的：解决分布式环境下一致性的问题。</span><br><span class="line">     多个节点并发操纵数据，如何保证在读写过程中数据的一致性，要求解决方案能适应分布式环境下的不可靠性 。</span><br><span class="line"></span><br><span class="line">Paxos算法通过多个监督者来增强可靠性，基本思想：</span><br><span class="line">    1）通过监督者们的投票来表决数据的状态变化，</span><br><span class="line">    2）保证所有对数据的访问都遵从这种表决。</span><br><span class="line">    </span><br><span class="line">算法变种：</span><br><span class="line">    Classic Paxos——1个实例写入(确定1个值) 需要2轮RPC。</span><br><span class="line">    Multi Paxos——约为1轮RPC，将多个paxos实例的第1轮合并，使得这些paxos只需运行第二轮RPC。</span><br><span class="line">    Fast Paxos——没冲突时1轮RPC确定一个值，有冲突时2轮RPC确定一个值。</span><br><span class="line"></span><br><span class="line">Paxos有效的基本保障：</span><br><span class="line">    法定集合：将一个超过半数的集合称之为法定集合</span><br><span class="line">    比如数字1、2、3、4、5，共5个元素，&#123;1,2,3&#125;有三个元素就是法定集合。</span><br><span class="line">    法定集合性质：任意两个法定集合，必定存在一个公共的成员。</span><br><span class="line"></span><br><span class="line">算法应用：</span><br><span class="line">    Google的Chubby（Multi Paxos算法）、</span><br><span class="line">    Hadoop中的ZooKeeper、</span><br><span class="line">    MegaStore、Spanner等系统。</span><br><span class="line"></span><br><span class="line">Paxos系统中的角色：</span><br><span class="line">    Proposer: 提出提案 (Proposal)。Proposal信息包括提案编号 (Proposal ID) 和提议的值 (Value)。</span><br><span class="line">    Acceptor：参与决策，回应Proposers的提案。收到Proposal后可以接受提案，若Proposal获得多数Acceptors的接受，则称该Proposal被批准。</span><br><span class="line">    Learner：不参与决策，从Proposers/Acceptors学习最新达成一致的提案（Value）</span><br><span class="line"></span><br><span class="line">其他概念：</span><br><span class="line">instance(实例)：一次Paxos算法执行。</span><br><span class="line">proposal（议案）：经发起而未经批准的提案。</span><br><span class="line">value（决议）：被最终批准通过的议案中的value称为决议。</span><br><span class="line"></span><br><span class="line">二段提交原则（2PC）：每个申请者在发送自己的提案之前，先检查有没有已经提议且被批准的值，如果有则放弃自己的提案，这样最终只有一个值被批准。</span><br><span class="line"></span><br><span class="line">Paxos算法通过一个决议分为两个阶段（Learn阶段之前决议已经形成）：</span><br><span class="line">    第一阶段：Prepare阶段。Proposer向Acceptors发出Prepare请求，Acceptors针对收到的Prepare请求进行Promise承诺。</span><br><span class="line">    第二阶段：Accept阶段。Proposer收到多数Acceptors承诺的Promise后，向Acceptors发出Propose请求，Acceptors针对收到的Propose请求进行Accept处理。</span><br><span class="line">    第三阶段：Learn阶段。Proposer在收到多数Acceptors的Accept之后，标志着本次Accept成功，决议形成，将形成的决议发送给所有Learners。</span><br><span class="line"></span><br><span class="line">算法约束条件：</span><br><span class="line">1）一个acceptor必须接受他收到的第一个提案。</span><br><span class="line">2）提出一个编号为n具有值c的提案的前提是</span><br><span class="line">        存在一个多数派，要么他们中没有人批准过编号小于n的任何提案，</span><br><span class="line">        要么他们批准的提案中编号小于n的最大编号的提案值是c。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319213608415.png" alt="image-20200319213608415"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/2019062011162729.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">整个paxos算法基本上就是围绕着proposal编号在进行，proposal的编号对算法至关重要：</span><br><span class="line">proposer忙于选择更大的编号提交proposal；    </span><br><span class="line">acceptor比较提交的proposal编号是否最大，只要编号确定了，所对应的value也就确定了。</span><br><span class="line"></span><br><span class="line">Paxos议案ID生成算法：</span><br><span class="line">Google的Chubby论文给出的解决方法：假设有n个proposer，每个节点编号为ir(0≤ir&lt;n)，proposal编号的任何值s都应该大于它已知的最大值，并且满足：</span><br><span class="line">      s %n = ir   （即s = m*n + ir）</span><br><span class="line">proposer已知的最大值来自两部分：</span><br><span class="line">   （1）proposer自己对编号自增后的值；</span><br><span class="line">   （2）接收到acceptor的拒绝后所得到的值。</span><br><span class="line">   </span><br><span class="line">    例：3个proposer P1、P2、P3，开始m=0，编号分别为0、1、2。</span><br><span class="line">    1）P1提交时发现P2已经提交，P2编号为1（&gt;P1的编号0），因此P1重新计算编号：new P1 = 1*3+0 = 3；</span><br><span class="line">    2）P3以编号2提交，发现小于P1的编号3，因此P3重新编号：new P3 = 1*3+2 = 5。</span><br><span class="line"></span><br><span class="line">Paxos编号的活锁问题：</span><br><span class="line">活锁：如果2个proposer都发现自己的编号过低转而提出更高编号的proposal，会导致死循环，这种情况也称为活锁。</span><br><span class="line">“你编号高，我再比你更高，反复如此，算法永远无法结束。“</span><br><span class="line"></span><br><span class="line">Leader选举</span><br><span class="line">Lamport给出的解决活锁的办法是选举出一个proposer作Leader，所有的proposal都通过Leader来提交，当Leader宕机时马上再选举其他的Leader。</span><br><span class="line">    Leader通过控制提交的进度来解决该问题：如果之前的proposal没有结果，之后的proposal就稍微等待，而不是急于提高编号再次提交。</span><br><span class="line">     ↓</span><br><span class="line">    Leader的出现相当于把一个分布式问题转化为一个单点问题，而单点的正确性和健壮性由选举机制保证。</span><br><span class="line"></span><br><span class="line">Paxos容错性</span><br><span class="line">异常情况</span><br><span class="line">      在算法执行的过程中会产生很多的异常情况：   </span><br><span class="line">           proposer宕机，</span><br><span class="line">            acceptor在接收proposal后宕机，</span><br><span class="line">            proposer接收消息后宕机，</span><br><span class="line">            acceptor在accept后宕机，</span><br><span class="line">            learn宕机，</span><br><span class="line">            存储失败，等等。</span><br><span class="line">     持久存储</span><br><span class="line">        为保证paxos算法的正确性，proposer、acceptor、learner都实现持久存储，以做到server恢复后仍能正确参与paxos处理。</span><br></pre></td></tr></table></figure><h5 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分布式系统中有三种衡量特性：</span><br><span class="line">一致性（Consistency）：每一个更新成功后，分布式系统中的所有节点都能读到最新的信息，即访问所有节点相当于同一份内容。这样的系统被认为是强一致性的。</span><br><span class="line">可用性（Availability）：每一个请求都能得到响应。请求只需要在一定时间内返回即可，结果可以是成功或者失败，也不需要确保返回的是最新版本的信息。</span><br><span class="line">分区容错性（Partition tolerance）：在网络中断、消息丢失的情况下，系统照样能够工作。网络分区是指由于某种原因网络被分成若干个孤立的区域，区域之间互不相通。</span><br><span class="line"></span><br><span class="line">一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319220312563.png" alt="image-20200319220312563"></p><h5 id="数据一致性模型"><a href="#数据一致性模型" class="headerlink" title="数据一致性模型"></a>数据一致性模型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CAP理论 → 分布式系统如果不想牺牲一致性，则可能要牺牲可用性。</span><br><span class="line">    ↓</span><br><span class="line">数据一致性模型主要有以下几种：</span><br><span class="line">   弱一致性[异步冗余]、</span><br><span class="line">   最终一致性（一段时间达到一致性） [异步冗余] 、</span><br><span class="line">   强一致性[同步冗余] 。</span><br><span class="line"></span><br><span class="line">最终一致性的经典实现：Paxos算法（解决基于CAP原理构建的分布式系统环境中如何高效的达到数据的最终一致性的问题。）</span><br><span class="line">强一致性的经典实现：Raft算法</span><br></pre></td></tr></table></figure><h4 id="Raft算法（）"><a href="#Raft算法（）" class="headerlink" title="Raft算法（）"></a>Raft算法（）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分布式系统中的一致性问题(consensus problem)：对于一组服务器，给定一组操作，我们需要一个协议使得最后它们的结果（状态）达成一致。</span><br><span class="line">在一个分布式系统中，因为各种意外可能，有的服务器可能会崩溃或变得不可靠，从而不能和其他服务器达成一致状态。</span><br><span class="line">    ↓</span><br><span class="line">需要一种Consensus协议确保容错性：即使系统中有一两个服务器宕机，也不会影响其处理过程。</span><br></pre></td></tr></table></figure><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MapReduce：一种线性可伸缩的编程模型，处理和生成超大数据集的算法模型。</span><br><span class="line">受启发于Lisp和许多其他函数式语言的Map和Reduce的原语。</span><br><span class="line">MapReduce架构的程序能够在大量的普通配置的计算机上实现并行化处理</span><br><span class="line">（典型的MapReduce计算往往由几千台机器组成、处理TB级的数据）。</span><br><span class="line"></span><br><span class="line">用户只表述要执行的简单运算，不必关心并行、容错、数据分布、负载均衡等复杂细节(这些问题都被封装在库里)。</span><br><span class="line">表述过程：</span><br><span class="line">1）创建一个Map函数处理一个基于key1/value 对的数据集合，输出中间数据集合（该集合再次以key2/value对的形式呈现）；</span><br><span class="line">2）创建一个Reduce函数来合并处理中间数据内具有相同key2值的value（value list）。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571991040356.png" alt="1571991040356"></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/1571991244030.png" alt="1571991244030"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map调用被分布到多台机器上执行：Map调用的输入数据自动分割为M个数据片段的集合，这些数据片段在不同的机器上并行处理。</span><br><span class="line"></span><br><span class="line">Reduce调用也分布在多台机器上执行：使用分区函数将Map调用产生的中间key值分成R个不同分区（例如hash(key) mod R），分区数量（R）和分区函数由用户来指定。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/20151030095843101.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.用户程序调用的MapReduce库首先将输入文件分成M个数据片度，每个数据片段的大小一般从 16MB到64MB(可以通过可选的参数来控制每个数据片段的大小)。然后master在机群中创建大量的用户程序副本（It then starts up many copies of the program on a cluster of machines，即，把map/reduce函数给不同的机器执行）。</span><br><span class="line">2.这些程序副本中的有一个特殊的程序–master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。</span><br><span class="line">3.被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value pair，然后把key/value pair传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value pair，并缓存在本机内存中。</span><br><span class="line">4.缓存中的key/value pair通过分区函数分成R个区域，之后周期性的写入到本地磁盘上。缓存的key/value pair在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce worker（图中没画出来）。</span><br><span class="line">5.当Reduce worker程序接收到master程序发来的数据存储位置信息后，Reduce worker使用remote procedure calls从Map worker所在主机的磁盘上读取这些缓存数据。当Reduce worker读取了（他所需要的）所有的中间数据后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序（从而保证相同的key的序列依次出现）。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。</span><br><span class="line">6.Reduce worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce worker程序将这个key值和它相关的中间value值的集合传递给用户自定义的Reduce函数并计算出最终输出。Reduce函数的输出被追加到所属分区的输出文件。</span><br><span class="line">7.当所有的Map和Reduce任务都完成之后，master唤醒用户程序。在这个时候，在用户程序里的对MapReduce调用才返回。</span><br><span class="line"></span><br><span class="line">在成功完成任务之后，MapReduce的输出存放在R个输出文件中（对应每个Reduce任务产生一个输出文件，文件名由用户指定）。一般情况下，用户不需要将这R个输出文件合并成一个文件–他们经常把这些文件作为另外一个MapReduce的输入，或者在另外一个可以处理多个分割文件的分布式应用中使用</span><br></pre></td></tr></table></figure><h5 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">关系代数是一种过程化查询语言。包括一个运算集合，这些运算以一个或两个关系为输入，产生一个新的关系作为结果。</span><br><span class="line">五个基本操作：</span><br><span class="line">  集合并(∪)、集合差(-)、笛卡尔积(×)、选择(σ)、投影(π)、更名(ρ)</span><br><span class="line">四个组合操作：</span><br><span class="line">  集合交(∩)、联接(等值联接)、自然联接(RS ⋈ )、除法(÷) 、赋值（←）</span><br></pre></td></tr></table></figure><h5 id="大数据中的迭代算法处理——Haloop"><a href="#大数据中的迭代算法处理——Haloop" class="headerlink" title="大数据中的迭代算法处理——Haloop"></a>大数据中的迭代算法处理——Haloop</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Haloop（迭代式MapReduce）</span><br><span class="line">一些数据分析技术需要迭代计算（例如：PageRank、基于超文本的话题搜索、社会网络分析等等）</span><br><span class="line">而MapReduce框架对此支持度不够（只能多次发起MapReduce任务）。</span><br><span class="line">具有迭代结构的算法可用如下公式描述：</span><br><span class="line">　Ri +1 =R0 ∪ (Ri  ⋈   L)</span><br><span class="line">其中, R0表示初始化时的结果, L 表示一种不变的关系。</span><br><span class="line">    当到达某检查点条件时（如结果收敛）迭代终止运行。</span><br><span class="line">例：K-mean聚类、PageRank。</span><br><span class="line"></span><br><span class="line">重复多次执行MapReduce任务的缺点：</span><br><span class="line">1）每次执行都需要重新装载数据、重新处理，而迭代过程中数据可分为动态数据和静态不变的数据两类。</span><br><span class="line">2）迭代终止条件可能需要判断是否到达一个稳定点，该判断过程可能本身又需要在每次迭代执行过程中增加一次额外的MapReduce计算。</span><br><span class="line">→任务调度开销、从磁盘读数据的开销、网络传输数据的开销。</span><br></pre></td></tr></table></figure><p><strong>问题实例（PageRank算法）</strong></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319222231269.png" alt="image-20200319222231269"></p><p><strong>问题实例（多跳邻居）</strong></p><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319222525357.png" alt="image-20200319222525357"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">优化思路：</span><br><span class="line">要使得迭代效率提高，必须把循环体控制在job内，使之能运行多个map-reduce对，避免重复多次启动。</span><br><span class="line">实现map/reduce静态数据缓存（内存或者本地磁盘），减少task的访问开销，须要task调度的配合以实现计算的本地化。</span><br><span class="line">迭代的终止条件判断应该准确、高效。</span><br></pre></td></tr></table></figure><h5 id="Haloop系统框架"><a href="#Haloop系统框架" class="headerlink" title="Haloop系统框架"></a>Haloop系统框架</h5><p><img src="/../assets/pic/2019-10-29-%E7%8E%B0%E4%BB%A3%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/image-20200319222935049.png" alt="image-20200319222935049"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h4&gt;&lt;h5 id=&quot;现代数据管理的需求&quot;&gt;&lt;a href=&quot;#现代数据管理的需求&quot; class=&quot;headerlink&quot; title=&quot;现代数据管理的需求&quot;&gt;&lt;/a&gt;现代数据管理的需求&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;High performance高性能——对数据库高并发读写的需求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Huge Storage海量存储——对海量数据的高效率存储和访问的需求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;High Scalability高可扩展性&amp;amp;&amp;amp; High Availability高可用性的需求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="复习" scheme="/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="分布式" scheme="/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统复习汇总</title>
    <link href="/2019/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/"/>
    <id>/2019/2019-10-28-分布式系统知识复习/</id>
    <published>2019-10-28T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章-概述"></a>第一章-概述</h4><p>“一个分布式系统是一些独立的计算机的集合，但是对这个系统的用户来说，系统就像一台计算机一样.” </p><p>从硬件角度：每台计算机都是自主的。</p><p>从软件角度：对用户来说就像与单个系统打交道。</p><a id="more"></a><h5 id="计算系统的表现形式"><a href="#计算系统的表现形式" class="headerlink" title="计算系统的表现形式"></a>计算系统的表现形式</h5><p>•分布式系统都建立于大量自治的计算机节点之上。这些节点通过SAN (System Area Network)、LAN或WAN以层次方式互连</p><p>•分布式系统被认为高可扩展，并能在物理上或逻辑上达到Web规模互连</p><p>•分布式系统被划分为四组：集群、P2P网络、计算网格、大数据中心之上的云计算</p><p>•<strong>集中式计算：</strong>这种计算范式是将所有计算资源集中在一个物理系统之内。所有资源（处理器、内存、存储器）是全部共享的，并且紧耦合在一个集成式的操作系统中</p><p>•<strong>并行计算：</strong>在并行计算中，所有处理器或是紧耦合于中心共享内存或是松耦合于分布式内存</p><p>•<strong>分布式计算：</strong>一个分布式系统由众多自治的计算机组成，各自拥有其私有内存，通过计算机网络通信。分布式系统中的信息交换通过消息传递的方式完成</p><h5 id="并行和分布式计算系统分类"><a href="#并行和分布式计算系统分类" class="headerlink" title="并行和分布式计算系统分类"></a>并行和分布式计算系统分类</h5><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113205823594.png" alt="image-20200113205823594"></p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113205710609.png" alt="image-20200113205710609"></p><h5 id="三种云服务模型"><a href="#三种云服务模型" class="headerlink" title="三种云服务模型"></a>三种云服务模型</h5><p>•<strong>基础设施即服务（**</strong>IaaS<strong>**）</strong>：这个模型将用户需要的基础设施（即服务器、存储、网络和数据中心构造）组合在一起。用户可以在使用客户机操作系统的多个虚拟机上配置和运行指定应用</p><p>•<strong>平台即服务（**</strong>PaaS<strong>**）</strong>：这个模型使用户能够在一个虚拟的云平台上配置用户定制的应用。PaaS包括中间件、数据库、开发工具和一些运行时支持（如Web 2.0和Java）</p><p>•<strong>软件即服务（**</strong>SaaS<strong>**）：</strong>这是指面向数千付费云用户的初始浏览器的应用软件。SaaS模型应用于业务流程、工业应用、客户关系管理、企业资源计划、人力资源和合作应用</p><h5 id="分布式系统设计目标"><a href="#分布式系统设计目标" class="headerlink" title="分布式系统设计目标"></a><strong>分布式系统设计目标</strong></h5><p><strong>资源可访问</strong></p><p>响应时间过长，服务不稳定，时常宕机、网络阻塞等，没有用户界面，泄露个人隐私，在法律上的不可行</p><p><strong>透明性</strong></p><p>•<strong>访问</strong>：隐藏数据表示形式的不同以及资源的访问方式的不同，例如提供sdk</p><p>•<strong>位置*</strong>：隐藏资源的实际位置，如文件下载，不会开放文件的真实物理地址</p><p>•<strong>迁移</strong>：隐藏资源的访问过程中，资源是否迁移到了其他地方，如主备切换需要对资源访问者透明</p><p>•<strong>复制</strong>：隐藏资源是否进行复制，例如DNS缓存是否存在对于访问者是透明的</p><p>•<strong>并发</strong>：隐藏资源是否由若干相互竞争的用户共享</p><p>•<strong>故障</strong>：隐藏资源的故障和恢复</p><p><strong>开放性</strong></p><p>•<strong>定义完整且中立的接口</strong></p><p>–完整意味着接口实现不可缺少的全部规定</p><p>–不完整意味着开发者需要添加特定一些细节</p><p>–中立意味着接口定义不涉及如何实现的内容</p><p>•<strong>互操作性</strong></p><p>–定义：来自不同厂商的系统和组件可以在何种程度上共存和相互配合</p><p>–标签框架案例：一份数据，一次MR实现各个合作厂商的标签功能，框架定义接口，合作商提供实现</p><p>•<strong>策略与机制分离</strong></p><p>–机制是组件之间的结构关系和运行方式</p><p>–策略是“机制”具体实现某些特定场景的一些可定制化的配置组合</p><p>–假分离：逻辑上分离，但实现上可能仍然是一个整体</p><p>–真分离：例如浏览器插件，针对缓存机制自定义一些策略</p><h5 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h5><p>•<strong>可扩展内容</strong></p><p>–规模可扩展：更多的用户和资源加入系统</p><p>–地域可扩展：多地容灾</p><p>–管理可扩展：跨多个独立机构仍然可管理</p><p>•<strong>扩展技术</strong></p><p>–隐藏通信等待时间：异步通信，ajax</p><p>–分布技术：把组件拆分成多个部分然后分布到系统中去。DNS服务器</p><p>–<strong>复制和缓存</strong></p><p>•优点：增加可用性，有助于负载均衡</p><p>•缺点：数据有时效性，因此有一致性问题</p><h4 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h4><h5 id="1-通信"><a href="#1-通信" class="headerlink" title="1.通信"></a>1.通信</h5><p>进程间的通信是一切分布式系统的基础，它基于底层网络提供的底层消息传递机制。</p><p><strong>分层通信协议</strong></p><p>•中间件协议是中间件提供的用于支持高层应用系统通信的协议</p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113211157150.png" alt="image-20200113211157150"></p><p>•不同的中间件系统有不同的中间件协议</p><p>–支持远程过程调用的协议，如DCE</p><p>–支持远程对象调用的协议，如CORBA</p><p>–支持实时流数据传输并保持同步的协议</p><p>–可靠多播协议，用于支持可靠多播服务的中间件系统</p><p>•从通信持久性方面</p><p>–持久通信：传输的消息一直由通信中间件存储，直到该消息被传送给接收方，如电子邮件系统</p><p>–瞬时通信：通信中间件只在发送和接收应用程序正在运行的时候才存储消息，即由于传输中断或者接收方当前不在活动状态，中间件就不传输消息，而是丢弃消息</p><p>•从通信同步性方面</p><p>–同步通信：发送方提交消息后将被阻塞，直到知道其消息被接收。发送方可有三类同步点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1基于发送：发送方中间件请求传输完成</span><br><span class="line">2基于接收：请求被传送到目标接收方</span><br><span class="line">3基于响应：接收方返回响应</span><br></pre></td></tr></table></figure><p>–异步通信：发送方在提交要传输的消息后立刻接着后续的执行，不会阻塞</p><p><strong>远程过程调用</strong></p><p>•像调用本地子程序一样，调用远程子程序，调用者和被调者都不用考虑通信问题</p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113211302474.png" alt="image-20200113211302474"></p><p><strong>远程方法调用</strong></p><p>•像调用本地对象的方法一样，调用远程对象的方法，调用者和被调者都不用考虑通信问题</p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113211329364.png" alt="image-20200113211329364"></p><p><strong>面向消息的通信</strong></p><p>p远程过程调用和远程方法调用都有助于隐藏分布式系统中的通信。但这两种机制并不总是适用的：如当无法保证发送请求时接收端正在执行的情况下,如同步性会阻塞发送进程.需要其他通信机制的支持:如面向消息的通信</p><p><strong>面向消息的瞬时通信-MPI</strong></p><p>提供高层通信，支持并行计算，如MPP、COW</p><p>可靠的底层网络</p><p>支持分组通信，地址（groupID, processID）</p><p>支持多种通信方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">–瞬时异步 MPI_bsend</span><br><span class="line">–基于收条的瞬时同步 MPI_send</span><br><span class="line">–基于递交的瞬时同步 MPI_ssend</span><br><span class="line">–基于响应的瞬时同步 MPI_sendrecv</span><br></pre></td></tr></table></figure><p><strong>面向消息的持久通信</strong></p><p>•其支持系统一般称为消息队列系统或者面向消息的中间件</p><p>–支持持久异步通信</p><p>–适合于对传输时间要求宽松的场合，如几分钟</p><p>–不保证消息到达接收方的时间，也不保证接收方一定读取消息</p><p>松散耦合的通信方式，使用方便</p><p><strong>多播通信</strong></p><p>•组：由系统或用户确定的若干个进程的集合</p><p>–组的成员籍（membership）</p><p>•通信方式</p><p>–点到点通信（point-to-point）：单播（unicast）</p><p>–一到多通信(one-to-many) ：多播（multicast）、广播（broadcast）</p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113211515335.png" alt="image-20200113211515335"></p><h5 id="2-同步"><a href="#2-同步" class="headerlink" title="2.同步"></a>2.同步</h5><p>单机系统容易给发生的所有事件定义一个全局顺序，但是<strong>分布式系统没有全局时钟</strong>，很难给所有事件定义一个全局顺序。</p><p><strong>Lamport**</strong>逻辑时钟**：判断两个事件发生先后的标准</p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113212040206.png" alt="image-20200113212040206"></p><p>Vector Clock的无限增长问题：（1）采用服务器向量：不要用client来标识向量空间，用server来标识向量空间。(2)向量时钟的剪枝：向量剪枝尽量只丢掉一些向量时钟的信息，而不是丢掉实实在在的数据。</p><p>分布式系统在进行同步时一般总是需要一个主节点来做协调工作，需要系统集体做出决定.</p><p><strong>paxos</strong></p><p>为了避免单点故障，会有一个Acceptor集合，Proposer想Acceptor集合发送提案，Acceptor集合中的每个成员都有可能同意该提案且每个Acceptor只能批准一个提案，只有当一半以上的成员同意了一个提案，就认为该提案被选定了。</p><p>Paxos的目标：保证最终有一个value会被选定，当value被选定后，进程最终也能获取到被选定的value。</p><p><img src="/../assets/pic/2019-10-28-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/image-20200113212404313.png" alt="image-20200113212404313"></p><h5 id="3-一致性"><a href="#3-一致性" class="headerlink" title="3.一致性"></a>3.一致性</h5><p>•分布式系统中对数据进行复制一般是为了提高可靠性或性能，难题是副本之间的一致性问题</p><p>–数据为中心的一致性模型</p><p>进程在读一条数据时，<strong>期待返回的是最近一次写操作的结果</strong>，在没有全局性逻辑时钟的情况下，很难知道哪一次写操作是最近一次。</p><p><strong>顺序一致性</strong>：任何执行结果都是相同的，就好像所有进程对数据存储的读、写操作是按某种序列顺序执行的，并且每个进程的操作按照程序所制定的顺序出现在这个序列中。</p><p><strong>因果一致性</strong>：一种弱化的顺序一致性模型。所有进程必须以相同的顺序看到具有潜在因果关系的写操作。不同机器上的进程可以以不同的顺序看到并发的写操作</p><p><strong>最终一致性</strong>：系统中数据的副本可以容忍在很长时间内一定程度的不一致，但是在不对数据进行修改的前提下，最终会达到一致</p><p>–用户为中心的一致性模型</p><p><strong>单调读</strong>：在某一时间读取了数据项的值为V1，进程之后的读操作总是V1，或者是在V1的基础上的更新的值</p><p><strong>单调写</strong>：进程完成对数据的写动作，后续的写动作，必须在之前提交的写动作之后完成</p><h5 id="4-容错"><a href="#4-容错" class="headerlink" title="4.容错"></a>4.容错</h5><p><strong>容错重要概念</strong></p><p>•可用性（availability）</p><p>–如果系统可以正确的操作运行，就说系统是可用的</p><p>–高可用是说系统在任何给定的时间都是可响应的</p><p>•可靠性（reliability）</p><p>–系统可以无故障的持续运行（7 X 24小时）</p><p>•安全性（safety）</p><p>–系统偶然出现故障的情况能正常操作而不会出现任何灾难</p><p>•可维护性（maintainability）</p><p>–发生故障的系统被恢复的难易程度</p><p>•分区容忍性（partition tolerance）</p><p>–把宕掉的机器和正常的机器进行分区，机器正常运行的分区仍然能够满足一致性和可用性</p><p><strong>CAP定理</strong></p><p>•Consistency(一致性)、 Availability(可用性)、Partition tolerance(分区容忍性) 三选二</p><p>–C(一致性)：一致性是系统的承诺（例如成功完成了某个操作），希望尽量信守承诺</p><p>–A (可用性)：用户访问服务，要有响应，而且希望越快越好</p><p>–P(分区容忍)：不可避免，但是在出现分区时，希望尽量兼顾A和C</p><p><strong>故障恢复</strong></p><p>•容错的基本要求就是系统能够在故障中恢复，目前来看比较有效的就是回退方式</p><p>•checkpoint</p><p>–系统需要定时找到一个全局的一致性切面，形成一个快照保存下来，这个快照也称为恢复线路</p><p>–仅仅基于checkpoint的回退是有损的恢复方式</p><p>•基于消息日志</p><p>–如果消息的传输可以重放，那么就可以在某个checkpoint的基础上，重放之后的消息，达到一个全局一致性</p><h5 id="5-安全性"><a href="#5-安全性" class="headerlink" title="5.安全性"></a>5.安全性</h5><p><strong>安全威胁应对手段</strong></p><p>•加密<strong>：</strong>数据结构转换为一些攻击者无法理解的形式</p><p>•身份认证和授权<strong>：</strong>一般是基于用户名密码的认证方式，会涉及ip白名单，数字签名、数字证书、秘钥、授权和确权等</p><p>•审计：攻击者通常不希望留下痕迹，追踪各个客户的访问内容和访问方式，虽然不能提供任何具体的安全威胁有关的防护，但是在发生了安全破坏之后对分析入侵和破坏行为非常有意义。因此对攻击者有震慑作用</p><p>•访问控制列表（ACL）：每个用户表示一行，每个被访问的对象表示一列</p><p>•保护域/用户组/角色 ：缩小ACL的方法是利用保护域，保护域是一组用户，可以将保护域作为一个用户加入ACL</p><h5 id="6-分布式共享内存"><a href="#6-分布式共享内存" class="headerlink" title="6.分布式共享内存"></a>6.分布式共享内存</h5><p><strong>分布式共享内存DSM</strong></p><p>•分布式共享内存DSM (Distributed Shared Memory):它使得不同机器上的进程不用通过共享物理内存就可以使用共享数据。DSM是一个共享内存的程序模型，它在某些方面要优于基于消息的模型</p><p>•进程访问DSM中的数据就如同访问本机的内存一样。DSM运行系统还应保证在不同机器上执行的进程可以观察到别人对DSM的修改，DSM中存在复制数据，为了提高访问速度，每台机器都存有最近访问的共享数据的备份。</p><p><strong>DSM应用的关键问题</strong></p><p>•当系统容纳相应多的设备时，怎样保持系统的高性能</p><p>•访问DSM将导致大量通信开销的产生</p><p>•访问DSM的进程相当多时，怎样保证系统的一致性</p><p><strong>消息传递与DSM的比较</strong></p><p>•程序模型：不需要编码、解码；数据的安全；数据的表示；进程的同步方法；异步的通信方式</p><p>•效率</p><p><strong>DSM的主要处理方式</strong></p><p>•基于硬件的方式</p><p>–依靠硬件来装载、存储指令以完成DSM的寻址操作及远程内存结点的通信（适合于多处理机系统）</p><p>•基于虚拟页的方式</p><p>–这种方式与传统的虚拟存储器系统类似，不同之处在于：操作系统不是从磁盘中而是通过网络从另一个处理机中获取页</p><p>•基于库的方式</p><p>–一些程序设计语言或语言的扩展，支持DSM方式。进程通过库调用来完成对DSM中数据的访问</p><h5 id="7-分布式文件系统"><a href="#7-分布式文件系统" class="headerlink" title="7.分布式文件系统"></a>7.分布式文件系统</h5><p>•从用户的使用角度来看，分布式文件系统是一个标准的文件系统，提供了一系列API，由此进行文件或目录的创建、移动、删除，以及对文件的读写等操作</p><p>•从内部实现角度来看，分布式文件系统还要通过网络管理存储在其他节点上的文件和目录。并且，同一文件不只是存储在一个节点上，而是在一簇节点上按规则分布式存储，协同提供服务</p><p>目标：高效、可靠、可扩展</p><p>关键技术：•高速缓存机制•容错机制•一致性•负载均衡</p><p><strong>•HDFS的主要设计目标</strong></p><p><strong>存储非常大的文件：</strong>这里非常大指的是几百MB、GB、或者TB级别。实际应用中已有很多集群存储的数据达到PB级别。根据Hadoop官网，Yahoo的Hadoop集群约有10万颗CPU，运行在4万个机器节点上</p><p><strong>采用流式的数据访问方式**</strong>:** HDFS基于这样的一个假设：最有效的数据处理模式是一次写入、多次读取，数据集经常从数据源生成或者拷贝一次，然后在其上做很多分析工作。分析工作经常读取其中的大部分数据，即使不是全部。 因此读取整个数据集所需时间比读取第一条记录的延时更重要</p><p><strong>运行于商业硬件上**</strong>:** Hadoop不需要特别贵的、可靠的机器，可运行于普通商用机器。商用机器不代表低端机器，在集群中（尤其是大的集群），节点失败率是比较高的，HDFS的目标是确保集群在节点失败的时候不会让用户感觉到明显的中断</p><h5 id="8-分布式数据管理"><a href="#8-分布式数据管理" class="headerlink" title="8.分布式数据管理"></a>8.分布式数据管理</h5><p>•在大数据时代背景下，海量数据的存储和管理成为了亟待解决的问题</p><p>•面临的挑战：–存储规模大；–种类和来源多样化，存储管理复杂；–对数据服务的种类和水平要求高</p><p>•关键技术：–分布式文件系统；–分布式数据库</p><p>•分布式数据库的基本概念：数据存储在物理上是分布的，逻辑上是统一的，可以看做是一组数据库的集合</p><p>•分布式数据库管理系统(DBMS)：分布式数据库系统中的一组软件，负责管理分布环境下逻辑集成数据的存取、一致性、有效性和完备性</p><p><strong>分布式数据库的特性</strong></p><p>•数据的物理分布性•数据的逻辑整体性•数据的分布独立性•场地自治性•场地之间的协调性•数据冗余及冗余透明性•事务管理的分布性</p><h5 id="9-流数据与流处理"><a href="#9-流数据与流处理" class="headerlink" title="9.流数据与流处理"></a>9.流数据与流处理</h5><p>•流数据是一组由无限快速、持续到达的数据组成的序列，流处理是一种对数据流进行分析处理的并行编程范式</p><p>•流处理的基本需求：–高吞吐–高时效–可扩展-高可用</p><p>•将流应用建模为有向无环图（DAG）模型</p><p>–点：执行一种简单应用逻辑的操作</p><p>–有向边：操作之间的逻辑关联，流数据元组(tuple)的传递方向 [元组：最小可被独立处理的单元流数据]</p><p>•流处理的并行技术：流水线并行；任务并行；数据并行</p><p><strong>代表性开源流处理系统</strong></p><p>•以元组为单元的单纯流处理系统</p><p>–Apache Storm</p><p>–Apache Flink</p><p>•基于微批处理模型的流处理系统</p><p>–Spark Streaming</p><h5 id="10-虚拟化"><a href="#10-虚拟化" class="headerlink" title="10.虚拟化"></a>10.虚拟化</h5><p>•虚拟化是一种方法，本质上讲是指从逻辑角度而不是物理角度来对资源进行配置，是从单一的逻辑角度来看待不同的物理资源的方法。譬如说，当前只有一台计算机，通过虚拟技术，在用户看来，似乎却是多台，每台都有其各自的CPU、内存、硬盘等物理资源。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率</p><p>• 对于用户，虚拟化技术实现了软件跟硬件分离，用户不需要考虑后台的具体硬件实现，而只需在虚拟层环境上运行自己的系统和软件</p><p>• 虚拟化使用软件的方法重新定义划分IT资源，可以实现IT资源的动态分配、灵活调度、跨域共享，提高IT资源利用率，使IT资源能够真正成为社会基础设施，服务于各行各业中灵活多变的应用需求</p><p><strong>虚拟化技术类型</strong>大致看来主要有以下几种类型：拆分、整合、迁移</p><p>•拆分：某台计算机性能较高，而工作负荷小，资源没有得到充分利用。这种情况适用于拆分虚拟技术，可以将这台计算机拆分为逻辑上的多台计算机，同时供多个用户使用。这样可以使此服务器的硬件资源得到充分的利用</p><p>•整合：当前有大量性能一般的计算机，但在气象预报、地质分析等领域，数据计算往往需要性能极高的计算机，此时可应用虚拟整合技术，将大量性能一般的计算机整合为一台计算机，以满足用户对整体性能的要求</p><p>•迁移：将一台逻辑服务器中的闲置的一部分资源动态的加入到另一台逻辑服务器中，提高另一方的性能，实现资源共享、跨系统平台应用等</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章-概述&quot;&gt;&lt;a href=&quot;#第一章-概述&quot; class=&quot;headerlink&quot; title=&quot;第一章-概述&quot;&gt;&lt;/a&gt;第一章-概述&lt;/h4&gt;&lt;p&gt;“一个分布式系统是一些独立的计算机的集合，但是对这个系统的用户来说，系统就像一台计算机一样.” &lt;/p&gt;
&lt;p&gt;从硬件角度：每台计算机都是自主的。&lt;/p&gt;
&lt;p&gt;从软件角度：对用户来说就像与单个系统打交道。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="复习" scheme="/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="分布式" scheme="/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>区块链原理</title>
    <link href="/2019/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>/2019/l_2019-10-06-比特币原理介绍/</id>
    <published>2019-10-06T02:36:00.000Z</published>
    <updated>2020-10-10T01:51:18.824Z</updated>
    
    <content type="html"><![CDATA[<h4 id="比特币原理"><a href="#比特币原理" class="headerlink" title="比特币原理"></a>比特币原理</h4><p>2008年，网络极客中本聪提出了比特币的概念，这是一种全新的电子货币。比特币是一种去中心化的记账系统，人们通过挖矿获得比特币，通过公开记账的方式完成支付。</p><a id="more"></a><h5 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">比特币地址：（例如：1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV）由一串字符和数字组成，以阿拉伯数字“1”开头。就像别人向你的email地址发送电子邮件一样，他可以通过你的比特币地址向你发送比特币。</span><br><span class="line"></span><br><span class="line">比特币：既可以指这种虚拟货币单位，也指比特币网络或者网络节点使用的比特币软件。</span><br><span class="line"></span><br><span class="line">区块：一个区块就是若干交易数据的集合，它会被标记上时间戳和之前一个区块的独特标记。区块头经过哈希运算后会生成一份工作量证明，从而验证区块中的交易。有效的区块经过全网络的共识后会被追加到主区块链中。</span><br><span class="line"></span><br><span class="line">区块链：是一串通过验证的区块，当中的每一个区块都与上一个相连，一直连到创世区块。</span><br><span class="line"></span><br><span class="line">交易确认：当一项交易被区块收录时，我们可以说它有一次确认。矿工们在此区块之后每再产生一个区块，此项交易的确认数就再加一。当确认数达到六及以上时，通常认为这笔交易比较安全并难以逆转。</span><br><span class="line"></span><br><span class="line">难度：整个网络会通过调整“难度”这个变量来控制生成工作量证明所需要的计算力。</span><br><span class="line"></span><br><span class="line">难度目标：使整个网络的计算力大致每10分钟产生一个区块所需要的难度数值即为难度目标。</span><br><span class="line"></span><br><span class="line">难度调整：整个网络每产生2,106个区块后会根据之前2,106个区块的算力进行难度调整。</span><br><span class="line"></span><br><span class="line">矿工费：交易的发起者通常会向网络缴纳一笔矿工费，用以处理这笔交易。大多数的交易需要0.5毫比特币的矿工费。</span><br><span class="line"></span><br><span class="line">矿工：指通过不断重复哈希运算来产生工作量证明的各网络节点。</span><br><span class="line"></span><br><span class="line">比特币网络：是一个由若干节点组成的用以广播交易信息和数据区块的P2P网络。</span><br><span class="line"></span><br><span class="line">交易：简单地说，交易指把比特币从一个地址转到另一个地址。更准确地说，一笔“交易”指一个经过签名运算的，表达价值转移的数据结构。每一笔“交易”都经过比特币网络传输，由矿工节点收集并封包至区块中，永久保存在区块链某处。</span><br><span class="line"></span><br><span class="line">钱包：指保存比特币地址和私钥的软件，可以用它来接受、发送、储存你的比特币。</span><br><span class="line"></span><br><span class="line">比特币组成：</span><br><span class="line">    一个去中心化的点对点网络（比特币协议）</span><br><span class="line">    一个公共的交易账簿（区块链）</span><br><span class="line">    一个去中心化的数学的和确定性的货币发行（分布式挖矿）</span><br><span class="line">    一个去中心化的交易验证系统（交易脚本）</span><br></pre></td></tr></table></figure><h5 id="李永乐简单讲解"><a href="#李永乐简单讲解" class="headerlink" title="李永乐简单讲解"></a>李永乐简单讲解</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/1572410085065.png" alt="1572410085065"></p><p> 区块链由一个个区块（block）组成。区块很像数据库的记录，每次写入数据，就是创建一个区块。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每个区块包含两个部分 </span><br><span class="line">   区块头（Head）：记录当前区块的特征值</span><br><span class="line">   区块体（Body）：实际数据</span><br></pre></td></tr></table></figure><p>区块头包含很多内容，其中有当前区块体的哈希，还有上一个区块的哈希。</p><p>这意味着，如果当前区块体的内容变了，或者上一个区块的哈希变了，一定会引起当前区块的哈希改变。  正是通过这种联动机制，区块链保证了自身的可靠性，数据一旦写入，就无法被篡改。  </p><p>区块头里面所有的特征值都是固定的，为了让区块头产生变化，中本聪故意增加了一个随机项，叫做 Nonce。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">生成时间</span><br><span class="line">实际数据（即区块体）的哈希</span><br><span class="line">上一个区块的哈希</span><br><span class="line">随机数 Nonce</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/1572410872011.png" alt="1572410872011"></p><h4 id="北大肖臻《区块链技术与应用》"><a href="#北大肖臻《区块链技术与应用》" class="headerlink" title="北大肖臻《区块链技术与应用》"></a>北大肖臻《区块链技术与应用》</h4><p>内容部分节选自<a href="https://space.bilibili.com/34990713" target="_blank" rel="noopener">sam_nau</a>的笔记和<a href="https://blog.csdn.net/Mu_Xiaoye" target="_blank" rel="noopener">Sinocifengs</a>博客</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200311171057282.png" alt="image-20200311171057282"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200311171118951.png" alt="image-20200311171118951"></p><h5 id="BTC密码学原理篇"><a href="#BTC密码学原理篇" class="headerlink" title="BTC密码学原理篇"></a>BTC密码学原理篇</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234021805.jpeg" alt="img"></p><p>比特币属于加密货币，可见其中必然会涉及到密码学的知识。而比特币本身开放，其交易记录、交易金额、交易内容甚至源代码都面向全网开放，加密又使用在哪里呢？</p><p>在比特币中，正是加密确保了信息的不可篡改，保证了区块链本身的优势——不可篡改。加密主要涉及两个内容：hash和签名</p><p><strong>hash（哈希）</strong></p><p>【目前并不存在一个hash函数可以从数学上证明具有collision resistance的性质】</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312131300824.png" alt="image-20200312131300824"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312131336498.png" alt="image-20200312131336498"></p><p><strong>签名：比特币中账户管理</strong></p><p>在比特币系统中，申请账户是用户自己来处理的，即自己创建一个公钥-私钥对。【注意：比特币系统中，很难通过生成大量公私钥对来获取他人私钥】</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200311174937768.png" alt="image-20200311174937768"></p><h5 id="BTC数据结构"><a href="#BTC数据结构" class="headerlink" title="BTC数据结构"></a>BTC数据结构</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234045566.jpeg" alt="在这里插入图片描述"></p><p><strong>Hash pointer（哈希指针）</strong></p><p>【一般的链表我们都可以改造为使用哈希指针的链表，但当链表中存在环时，哈希指针便不能再使用】</p><p>每个区块根据自己的区块内容生成自己哈希值，此外，每个区块（除创世纪块）都保存有前一个区块哈希值。本区块哈希生成依赖于本区块内容，而本区块内容中又包含有前一个区块的哈希值。从而保证了区块内容不被篡改。</p><p>而用户只需要记住最后一个区块链的哈希地址，就可以检测区块链上内容是否被篡改。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312124635119.png" alt="image-20200312124635119"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312125105259.png" alt="image-20200312125105259"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312125225972.png" alt="image-20200312125225972"></p><p><strong>Markle Tree(默克尔树)</strong></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312125631031.png" alt="image-20200312125631031"></p><p>比特币中节点分为<strong>轻节点</strong>和<strong>全节点</strong>。全节点保存整个区块的所有内容，而轻节点仅仅保存区块的块头信息。因为硬件的局限。一个区块大小为1MB，如果存储区块所有内容，则所需空间过大，不现实。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312145940197.png" alt="image-20200312145940197"></p><p>当需要向轻节点证明某条交易是否被写入区块链，便需要用到Markle proof。我们将交易到根节点这一条路径称为Markle proof，全节点将整个Markle proof发送给轻节点（如下图所示），轻节点即可根据其算出根哈希值，和自己保存的对比，从而验证该交易是否被写入区块链。只要沿着该路径，所有哈希值都正确，说明内容没有被修改过。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312132552787.png" alt="image-20200312132552787"></p><h5 id="BTC共识协议"><a href="#BTC共识协议" class="headerlink" title="BTC共识协议"></a>BTC共识协议</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234107392.jpeg" alt="在这里插入图片描述"></p><p><strong>数字货币发行问题</strong></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312133329901.png" alt="image-20200312133329901"></p><p><strong>验证交易有效性</strong></p><p>在进行交易时，需要付款人签名和收款人地址（收款人的公钥的哈希）。在交易中，收款方需要知道付款方的公钥，从而验证A签名是否有效。</p><p>在比特币系统中，通过执行脚本实现上述验证过程。将当前交易输入脚本与前一个交易输出脚本（说明币的来源的交易）拼接执行，如果可以正确执行，说明交易合法。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312133409401.png" alt="image-20200312133409401"></p><p>可否各个节点独立完成区块链构建？<br>很明显不行，各个节点独立打包交易，形成区块链，必然无法避免区块链内容不一致。从分布式系统角度来说，<strong>账本内容需要取得分布式共识</strong>，从而保证区块链内容在不同节点上的一致性。</p><p>在比特币系统中，每个节点都可以自行组装一个候选区块，而后，尝试各种nonce值，这就是挖矿。[H(block header)&lt;=target]<br>当某个节点找到符合要求的nonce，便获得了记账权，从而可以将区块发布到系统中。其他节点收到区块后，验证区块合法性，如果系统中绝大多数节点验证通过，则接收该区块为最新的区块并加入到区块链中。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312134253009.png" alt="image-20200312134253009"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312134532906.png" alt="image-20200312134532906"></p><h5 id="BTC具体实现"><a href="#BTC具体实现" class="headerlink" title="BTC具体实现"></a>BTC具体实现</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234120964.jpeg" alt="在这里插入图片描述"></p><p><strong>UTXO</strong></p><p>区块链是一个去中心化的账本，比特币采用了 <strong>基于交易的账本模式</strong> 。然而，系统中并无显示记录账户包含比特币数，实际上其需要通过交易记录进行推算。在比特币系统中，全节点需要维护一个名为 <strong>UTXO(Unspent Transaction Output尚未被花掉的交易输出)</strong> 的数据结构。</p><p>UTXO便于快速检测double spending（双花攻击），如果想要花掉的BTC不在UTXO中，那么说明这个BTC要么根本不存在，要么已经被花过。</p><p>UTXO集合中每个元素要给出产生这个输出的交易的哈希值，以及其在交易中是第几个输出。通过这两个信息，便可以定位到UTXO中的输出。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312135958995.png" alt="image-20200312135958995"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312140619197.png" alt="image-20200312140619197"></p><p><strong>比特币区块信息</strong></p><p>Version(版本协议)，Hash of previous block header（指向前一个区块指针），Merkle root hash（默克尔树根哈希值），time（区块产生时间，可调），target（nBits挖矿难度目标阈值,只能按协议定期修改），nonce（随机数）</p><p>每个发布区块者可以得到出快奖励，也就是可以在区块中发布一个 <strong>铸币交易(coinbase交易)</strong> ,这也是BTC系统中产生新比特币的唯一方式。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200216145156800.png" alt="img"></p><p>有一个CoinBase域，其中可以写入任何内容，在这里写什么都没有影响。所以可以在这里添加一些任意信息，便可以实现无法篡改（也无法删除）。只要我们改变了写入内容，便可以改变Merkle Tree 的根哈希值</p><p>所以，在实际的挖矿中，包含两层循环。外层循环调整coinbase域（可以规定只将其中前x个字节作为另一个nonce），算出block header中根哈希值后，内层循环再调整nonce。</p><p>这样就解决了，挖矿人员越来越多，挖矿难度已经调整的比较大了，而nonce的2^32这一搜索空间太小的问题。</p><p><strong>挖矿过程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">挖矿求解问题：Hash（block header）&lt;=target</span><br><span class="line">Hash of previous block header只计算区块块头部分的哈希（ Merkle root hash保证了block body内容不被篡改，所以只需要计算block header即可保证整个区块内容不会被篡改）</span><br><span class="line">区块链系统中，轻节点（只存储区块block header信息）只利用区块链，但并不参与区块链系统维护和构造</span><br><span class="line">挖矿之初便要选择上一个区块是谁。也就是说，并不是获得记账权之后才选择插入到哪一个区块之后。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312140750785.png" alt="image-20200312140750785"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312140812217.png" alt="image-20200312140812217">比特币系统中，假如发生以下情况，各个节点以自己先收到的区块所在链为主链，对后收到的合法区块会不予认可（但会先保存起来）。此时便变成了两批算力分布挖1和2，具体哪一个成为主链，取决于哪一条链先挖到下一个区块，使得两个等长合法链出现长短不一致，最终胜者成为最长合法链。<br><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/2020021614571328.png" alt="img"></p><h5 id="BTC网络"><a href="#BTC网络" class="headerlink" title="BTC网络"></a>BTC网络</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234138104.jpeg" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">新发布的交易和区块在比特币网络上是如何传播的呢？</span><br><span class="line">比特币工作于网络应用层，其底层（网络层）是一个P2P Overlay network（P2P覆盖网络）。</span><br><span class="line">比特币系统中所有节点完全平等，不像一些其他网络存在超级节点(super node)。</span><br><span class="line">要加入网络，至少需要知道一个种子节点，通过种子节点告知自己它所知道的节点。</span><br><span class="line">节点之间的通信采用了TCP协议，便于穿透防火墙。</span><br><span class="line">当节点离开时，只需要自行退出即可，其他节点在一定时间后仍然没有收到该节点消息，便会将其删掉。</span><br><span class="line">比特币网络设计原则：简单、鲁棒（最坏情况下能达到最优状况，即健壮性）而非高效。</span><br><span class="line">每个节点维护一个邻居节点集合，消息传播在网络中采用洪泛法，某个节点在收到一条消息会将其发送给所有邻居节点并标记，下次再收到便不会再发送该消息</span><br><span class="line">比特币系统中，每个节点要维护一个等待上链的交易集合。</span><br><span class="line">第一次听到交易，若是合法交易，则将其加入该交易集合并转发给邻居节点，以后再收到该交易就不再转发</span><br><span class="line">假如网络中存在两个冲突交易，如A-&gt;B,A-&gt;C。先到先接受，之后收到另一个交易会将其放弃。</span><br><span class="line">假如某个节点先听到A-&gt;B，但又听到A-&gt;C已经上链，则此时A-&gt;B为非法交易，在等待上链交易集合中删除A-&gt;B</span><br><span class="line">新发布区块在网络中传播方式与新发布交易传播方式类似，每个节点除检查该区块内容是否合法，还要检查是否位于最长合法链上。</span><br><span class="line">比特币网络传播属于 Best effort（尽力而为） ，不能保证一定传输成功</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312144135875.png" alt="image-20200312144135875"></p><h5 id="BTC挖矿难度"><a href="#BTC挖矿难度" class="headerlink" title="BTC挖矿难度"></a>BTC挖矿难度</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234159930.jpeg" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在BTC协议中规定，每隔2016个区块需要调整一次难度，根据10min产生一个新区块可以得到，大概需要14天的时间</span><br><span class="line">上调和下调都是有4倍限制，实际最近2016个区块出块时间超过8个星期(正常2个星期)，计算也只按照8个星期计算</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312144859545.png" alt="image-20200312144859545"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312145056919.png" alt="image-20200312145056919"></p><h5 id="BTC挖矿"><a href="#BTC挖矿" class="headerlink" title="BTC挖矿"></a>BTC挖矿</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234325352.jpeg" alt="在这里插入图片描述"></p><p><strong>全节点和轻节点</strong></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312145940197.png" alt="image-20200312145940197"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312150347874.png" alt="image-20200312150347874"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312150410470.png" alt="image-20200312150410470"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">矿池</span><br><span class="line">    优点：解决了矿工收入不稳定的问题，减轻了矿工的负担。</span><br><span class="line">    缺点：威胁到了区块链系统的安全，使得51%攻击变得容易起来。</span><br><span class="line">思考一：有没有可能，某个矿工平时正常提交share，但真正挖到区块后不提交给矿主而是自己偷偷发布出去，从而避免他人分走挖矿所得到的出块奖励？</span><br><span class="line">事实上，这种情况是不可能的。因为每个矿工挖矿任务是矿主分配的。矿主组装区块，交给矿工计算，而区块中铸币交易的收款人地址是矿主，如果矿工修改该地址，计算的nonce值也会作废。</span><br><span class="line"></span><br><span class="line">思考二：如果矿工自己刚开始就自己偷偷组装一个区块，自己挖矿，这样就类似于其脱离了该矿池。因为其自己所组织的区块不会被矿主所认可，其提交的share也不会被认可，也就得不到分配的收益。</span><br><span class="line"></span><br><span class="line">思考三：有没有可能矿工捣乱？平时提交share，等挖到后扔掉区块，不提交？</span><br><span class="line">这种可能是有的，如果矿工本身仅仅想捣乱，是可以这么做的。但扔掉区块后，对其本身来说，也没有相应的奖励获得，看似是损人不利己的情况。</span><br></pre></td></tr></table></figure><h5 id="BTC脚本"><a href="#BTC脚本" class="headerlink" title="BTC脚本"></a>BTC脚本</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234302755.jpeg" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比特币系统中使用的脚本语言非常简单，唯一可以访问的内存空间只有栈，所以也被称为“基于栈的语言”</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194029907.png" alt="在这里插入图片描述"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194054878.png" alt="在这里插入图片描述"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194121126.png" alt="在这里插入图片描述"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194136796.png" alt="在这里插入图片描述"></p><p><strong>输入输出脚本的执行</strong></p><p>在早期，直接将两个脚本按照如图顺序(input script在前，output script在后) 拼接后执行</p><p>后来考虑到安全性问题，两个脚本改为分别执行：先执行input script，若无出错，再执行output script。<br>若脚本顺利执行，最终栈顶结果为true，则验证通过，交易合法；如果执行过程中出现任何错误，交易非法。<br>若一个交易有多个输入脚本，则每个输入脚本都要和对应输出脚本匹配执行，全部验证通过才能说明该交易合法。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194341541.png" alt="在这里插入图片描述"><br><strong>输入输出脚本的几种形式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P2PK形式(Pay to public key)</span><br><span class="line">特点：输出脚本直接给出收款人公钥。(CHECKSIG为检查签名操作)</span><br><span class="line">P2PKH形式(Pay to public key hash)——最常用</span><br><span class="line">特点：输出脚本不直接给出收款人公钥，而是公钥的哈希。</span><br><span class="line">P2SH形式(Pay to script hash)</span><br><span class="line">特点：输出脚本给出的不是收款人公钥的哈希，而是收款人提供的一个脚本的哈希。该脚本称为redeemScript,即赎回脚本。等未来花钱的时候，输入脚本要给出redeemScript的具体内容以及可以使之正确运行需要的签名。</span><br></pre></td></tr></table></figure><p>P2PKH形式(Pay to public key hash)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">图中第5步，两个公钥哈希是不同的。上面一个是输出脚本提供的收款人的哈希，下面一个是要花钱时候输入脚本要给出的公钥通过HASH160操作得到的。</span><br><span class="line">图中第6步，该操作的目的是为了防止冒名顶替(公钥)。假设比较正确，则两个元素消失（不往栈中压入TRUE或FALSE）</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194626894.png" alt="img"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194643254.png" alt="在这里插入图片描述"></p><p>P2SH形式(Pay to script hash)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一阶段执行拼接后的输入和输出脚本。</span><br><span class="line">第二阶段执行反序列化后的赎回脚本</span><br><span class="line">在BTC系统中，一个输出可能需要多个签名才能取出钱来。例如，对于公司账户，可能会要求5个合伙人中任意3个的签名才能取走钱，这样便为私钥泄露和丢失提供了一定程度的保护。</span><br><span class="line">P2SH形式本质上是将复杂度从输出脚本转移到输入脚本，可见此时输出脚本只有三行，原本复杂度被转入到赎回脚本redeemScript中。</span><br><span class="line">输出脚本只需要给出赎回脚本的哈希值即可。该赎回脚本在输入脚本提供，即收款人提供。</span><br><span class="line">类似之前提到的电商，收款人只需要公布赎回脚本哈希值即可，用户只要在输出脚本中包含该哈希值，用户无需知道收款人的相关规则(对用户更加友好)。</span><br><span class="line">现在的多重签名，大多都采用P2SH的形式</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194740962.png" alt="在这里插入图片描述"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200218194754568.png" alt="在这里插入图片描述"></p><p>Proof of Burn脚本：该方法是销毁比特币的一种方法。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312151139767.png" alt="image-20200312151139767"></p><h5 id="BTC分叉"><a href="#BTC分叉" class="headerlink" title="BTC分叉"></a>BTC分叉</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234344955.jpeg" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soft fork</span><br><span class="line">特点：只要系统中拥有半数以上算力节点更新软件，系统就不会产生永久性分叉</span><br><span class="line">hard fork</span><br><span class="line">特点：必须系统中所有节点更新软件，系统才不会产生永久性分叉</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312153437145.png" alt="image-20200312153437145"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312153506761.png" alt="image-20200312153506761"></p><h5 id="BTC问答"><a href="#BTC问答" class="headerlink" title="BTC问答"></a>BTC问答</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312154332117.png" alt="image-20200312154332117"></p><h5 id="BTC匿名性"><a href="#BTC匿名性" class="headerlink" title="BTC匿名性"></a>BTC匿名性</h5><p>⽐特币匿名性没有我们想象那么好</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/20200120234353681.jpeg" alt="在这里插入图片描述"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312154534407.png" alt="image-20200312154534407"></p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20200312154651091.png" alt="image-20200312154651091"></p><h5 id="BTC思考"><a href="#BTC思考" class="headerlink" title="BTC思考"></a>BTC思考</h5><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/202001202344077.jpeg" alt="在这里插入图片描述"></p><p>会不会BTC这种建立在密码学上的加密货币，在量子计算出来后会不会变得不安全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一. 量子计算距离使用仍然有很长距离</span><br><span class="line">二. 量子计算若真正使用到破坏现有加密算法，对传统金融业的破坏仍然是最大的。</span><br><span class="line">三. 实际中使用的并非公钥，而是可以用公钥哈希。而哈希函数一般都是不可逆的，所以即使量子计算也无法反推私钥。</span><br><span class="line">BTC中用的SHA-256，无论输入多大，最终结果都为256位，必然会导致信息丢失，无法反推原本数据。</span><br><span class="line">总结：**加密可逆、哈希不可逆；加密不损失信息、哈希破坏信息**（加密和哈希的区别）</span><br></pre></td></tr></table></figure><h4 id="比特币：一种点对点电子现金系统"><a href="#比特币：一种点对点电子现金系统" class="headerlink" title="比特币：一种点对点电子现金系统"></a>比特币：一种点对点电子现金系统</h4><p>本文提出了一种完全通过点对点技术实现的电子现金系统，它使得在线支付能够直接由一方发起并支付给另外一方，中间不需要通过任何的金融机构。</p><p>虽然数字签名（Digital signatures）部分解决了这个问题，但是如果仍然需要第三方的支持才能防止双重支付（double-spending）的话，那么这种系统也就失去了存在的价值。</p><p>我们(we)在此提出一种解决方案，使现金系统在点对点的环境下运行，并防止双重支付问题。</p><p>该网络通过随机散列（hashing）对全部交易加上时间戳（timestamps），将它们合并入一个不断延伸的基于随机散列的工作量证明（proof-of-work）的链条作为交易记录，除非重新完成全部的工作量证明，形成的交易记录将不可更改。</p><p>最长的链条不仅将作为被观察到的事件序列（sequence）的证明，而且被看做是来自 CPU计算能力最大的池（pool）。只要大多数的 CPU 计算能力都没有打算合作起来对全网进行攻击，那么诚实的节点将会生成最长的、超过攻击者的链条。</p><p>这个系统本身需要的基础设施非常少。信息尽最大努力在全网传播即可，节点(nodes)可以随时离开和重新加入网络，并将最长的工作量证明链条作为在该节点离线期间发生的交易的证明。</p><h5 id="交易-Transactions"><a href="#交易-Transactions" class="headerlink" title="交易(Transactions)"></a>交易(Transactions)</h5><p>一枚电子货币（an electronic coin）是这样的一串数字签名：每一位所有者通过对前一次交易和下一位拥有者的公钥(Public key) 签署一个随机散列的数字签名，并将这个签名附加在这枚电子货币的末尾，电子货币就发送给了下一位所有者。而收款人通过对签名进行检验，就能够验证该链条的所有者。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20191231160003140.png" alt="image-20191231160003140"></p><h5 id="时间戳服务器-Timestamp-server"><a href="#时间戳服务器-Timestamp-server" class="headerlink" title="时间戳服务器(Timestamp server)"></a>时间戳服务器(Timestamp server)</h5><p>时间戳服务器通过对以区块(block)形式存在的一组数据实施随机散列而加上时间戳，并将该随机散列进行广播。该时间戳能够证实特定数据必然于某特定时刻是的确存在的，因为只有在该时刻存在了才能获取相应的随机散列值。每个时间戳应当将前一个时间戳纳入其随机散列值中，每一个随后的时间戳都对之前的一个时间戳进行增强(reinforcing)，这样就形成了一个链条（Chain）。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20191231160252279.png" alt="image-20191231160252279"></p><h5 id="工作量证明-（Proof-of-Work）"><a href="#工作量证明-（Proof-of-Work）" class="headerlink" title="工作量证明 （Proof-of-Work）"></a>工作量证明 （Proof-of-Work）</h5><p>在进行随机散列运算时，工作量证明机制引入了对某一个特定值的扫描工作，比方说 SHA-256下，随机散列值以一个或多个 0 开始。那么随着 0 的数目的上升, 找到这个解所需要的工作量将呈指数增长，但是检验结果仅需要一次随机散列运算。</p><p>我们在区块中补增一个随机数(Nonce)，这个随机数要使得该给定区块的随机散列值出现了所需的那么多个 0。我们通过反复尝试来找到这个随机数，找到为止。这样我们就构建了一个工作量证明机制。只要该 CPU 耗费的工作量能够满足该工作量证明机制，那么除非重新完成相当的工作量，该区块的信息就不可更改。由于之后的区块是链接在该区块之后的，所以想要更改该区块中的信息，就还需要重新完成之后所有区块的全部工作量。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20191231160620734.png" alt="image-20191231160620734"></p><p>另一个问题是，硬件的运算速度在高速增长，且节点参与网络的程度会有所起伏。为了解决这个问题，工作量证明的难度(the proof-of-work difficulty)将采用移动平均目标的方法来确定，即令难度指向令每小时生成区块的速度为某一预设的平均数。如果区块生成的速度过快，那么难度就会提高。</p><p>节点始终都将最长的链条视为正确的链条，并持续工作和延长它。如果有两个节点同时广播不同版本的新区块，那么其他节点在接收到该区块的时间上将存在先后差别。当此情形，他们将在率先收到的区块基础上进行工作，但也会保留另外一个链条，以防后者变成最长的链条。该僵局（tie）的打破要等到下一个工作量证明被发现，而其中的一条链条被证实为是较长的一条，那么在另一条分支链条上工作的节点将转换阵营，开始在较长的链条上工作。</p><h5 id="回收硬盘空间"><a href="#回收硬盘空间" class="headerlink" title="回收硬盘空间"></a>回收硬盘空间</h5><p>如果最近的交易已经被纳入了足够多的区块之中，那么就可以丢弃该交易之前的数据，以回收硬盘空间。为了同时确保不损害区块的随机散列值，交易信息被随机散列时，被构建成一种 Merkle 树（Merkle tree） 的形态，使得只有根(root)被纳入了区块的随机散列值。通过将该树（tree）的分支拔除（stubbing）的方法，老区块就能被压缩。而内部的随机散列值是不必保存的。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20191231161504421.png" alt="image-20191231161504421"></p><h5 id="简化的支付确认（Simplified-Payment-Verification-）"><a href="#简化的支付确认（Simplified-Payment-Verification-）" class="headerlink" title="简化的支付确认（Simplified Payment Verification ）"></a>简化的支付确认（Simplified Payment Verification ）</h5><p>在不运行完整网络节点的情况下，也能够对支付进行检验。一个用户需要保留最长的工作量证明链条的区块头的拷贝，它可以不断向网络发起询问，直到它确信自己拥有最长的链条，并能够通过 merkle 的分支通向它被加上时间戳并纳入区块的那次交易。节点想要自行检验该交易的有效性原本是不可能的，但通过追溯到链条的某个位置，它就能看到某个节点曾经接受过它，并且于其后追加的区块也进一步证明全网曾经接受了它。</p><p><img src="/../assets/pic/l_2019-10-06-%E6%AF%94%E7%89%B9%E5%B8%81%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/image-20191231161935995.png" alt="image-20191231161935995"></p><h5 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h5><p>隐私依然可以得到保护：将公钥保持为匿名。公众得知的信息仅仅是有某个人将一定数量的货币发所给了另外一个人，但是难以将该交易同某个特定的人联系在一起，也就是说，公众难以确信，这些人究竟是谁。作为额外的预防措施，使用者可以让每次交易都生成一个新的地址，以确保这些交易不被追溯到一个共同的所有者。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;比特币原理&quot;&gt;&lt;a href=&quot;#比特币原理&quot; class=&quot;headerlink&quot; title=&quot;比特币原理&quot;&gt;&lt;/a&gt;比特币原理&lt;/h4&gt;&lt;p&gt;2008年，网络极客中本聪提出了比特币的概念，这是一种全新的电子货币。比特币是一种去中心化的记账系统，人们通过挖矿获得比特币，通过公开记账的方式完成支付。&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="金融" scheme="/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>基金基本知识</title>
    <link href="/2019/l_2019-10-05-%E5%9F%BA%E9%87%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>/2019/l_2019-10-05-基金基本知识/</id>
    <published>2019-10-05T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文部分节选自<a href="https://www.zhihu.com/people/xiao-xiao-robot" target="_blank" rel="noopener">小小robot</a></p><h4 id="简单概念："><a href="#简单概念：" class="headerlink" title="简单概念："></a>简单概念：</h4><p><strong>股票：代表一种股权</strong>（拥有权），享受经营的分红，收益较高，同时承担经营的风险，风险较大。</p><p><strong>债券：代表一种债权</strong>，提前约定收益，收益较低，利息不受经营的影响，风险较小（简单说，就说借钱给别人，约定收益）。</p><p><strong>基金：代表一种委托关系</strong>（股票、债券都是直接投资，此处区别），委托专业机构帮你理财，收益受专业机构的理财能力影响，一般而言，收益小于股票，大于债券，相对应，风险小于股票，大于债券。</p><a id="more"></a><h5 id="基金涉及到的主体"><a href="#基金涉及到的主体" class="headerlink" title="基金涉及到的主体"></a>基金涉及到的主体</h5><p><img src="/../assets/pic/l_2019-10-05-%E5%9F%BA%E9%87%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/v2-f1f8f95de1a2ec9f5a1387d72ae58164_720w.jpg" alt="img"></p><p>（1）<strong>基金管理公司</strong>，就是负责管理基金的公司，他们的工作包括发起设立基金，进行基金运作，帮助投资者获得收益。一个基金管理公司，可以管理多个基金（大点的基金公司，基本上都是好几十个）。</p><p>（2）<strong>投资者</strong>，一个投资者可以同时投资于多个（没有限制，只要你钱多就行）基金。当投资者投资了某个基金管理公司旗下的基金时，其实就相当于投资者与该基金公司签订了一份委托协议，即投资人委托基金管理公司进行投资。</p><p>（3）<strong>基金托管公司</strong>，所谓“托管”，我们可以理解为托付保管，所以基金托管公司呢，其实就是被托付来保管基金资产的，他们的职责主要就是保管基金的资产，监督基金管理公司以及向监管机构出报告等等。每个基金都由一个基金托管公司进行托管，这由基金管理公司委托基金托管公司进行的。</p><h5 id="基金的生命周期"><a href="#基金的生命周期" class="headerlink" title="基金的生命周期"></a>基金的生命周期</h5><p>产品设计——证监会审批——确认发行——公开发行（募集资金）——建仓期封闭——正式运作——清盘</p><h4 id="基金分类"><a href="#基金分类" class="headerlink" title="基金分类"></a>基金分类</h4><h5 id="公募基金VS私募基金"><a href="#公募基金VS私募基金" class="headerlink" title="公募基金VS私募基金"></a>公募基金VS私募基金</h5><p>所谓公和私，其实指的就是对公和对私，对公即对所有人都可以投资，一般买入门槛很低；对私，即对私人发行，一般门槛比较高，几十万上百万起</p><h5 id="投资标的分类"><a href="#投资标的分类" class="headerlink" title="投资标的分类"></a>投资标的分类</h5><p>基本分类：货币型基金、股票型基金、债券型基金、混合型基金和指数型基金</p><ul><li><p>货币型基金</p></li><li><ul><li>余额宝、招商招钱宝的本质就是货币基金，收益较低（但比银行活期高得多，目前在一年3%收益率左右徘徊），风险也很低，而且很灵活。</li></ul></li><li><p>股票型基金</p></li><li><ul><li>即大部分资金（不能低于80%的仓位）投资于股票的基金，一般按照主题分（行业，政策等）因其投资标的是股票，因此收益和风险在各类基金中都是最高的。</li></ul></li><li><p>债券型基金</p></li><li><ul><li>即大部分资金（80%以上）投资于债券的基金，大部分债券型基金都会标明投资债券的品种，如信用债、可转债等等。</li></ul></li><li><p>混合型基金</p></li><li><ul><li>可以投资于货币工具、股票和债券等等，一个什么都可以投的基金。</li></ul></li><li><p>指数型基金</p></li><li><ul><li>我们常见的指数有沪深300指数，上证50指数，深圳50指数等等，其实就是选取了不同市场中具有代表性的n只股票，通过一些算法把它们编织成一个指数，来代表某个市场的表现。所以投资于指数的基金，本质上就是投资于这些指数所包含的股票的基金。</li></ul></li></ul><h5 id="场外交易VS场内交易"><a href="#场外交易VS场内交易" class="headerlink" title="场外交易VS场内交易"></a>场外交易VS场内交易</h5><p>所谓“场”指的就是二级市场，也就是证券交易所。所谓场内交易，就是指在证券交易所里可以交易的；场外交易，就是不能在证券交易所里交易的。</p><h5 id="开放式基金VS封闭式基金"><a href="#开放式基金VS封闭式基金" class="headerlink" title="开放式基金VS封闭式基金"></a>开放式基金VS封闭式基金</h5><p>封闭式基金，即买了之后，是不能赎回的，只能够转让给其他人，即只能场内交易；开放式基金，买了之后是可以随时赎回的，但是不能够转让给其他人，即只能场外交易。</p><p>一般基金不是封闭式就是开放式，所谓封闭式，只能够交易，不能够申赎；所谓开放式，不能够交易，只能够申赎。</p><h5 id="其他类别"><a href="#其他类别" class="headerlink" title="其他类别"></a>其他类别</h5><ul><li><p><strong>ETF</strong></p></li><li><ul><li>学名<strong>交易型开放式指数基金（</strong>俗称交易所交易基金<strong>）</strong>，所谓交易型开放式，即它是一个开放式基金，又可以在二级市场交易，同时是指数基金。（牛逼在可以场内交易，交易费用又比指数基金低）</li></ul></li><li><p><strong>LOF</strong></p></li><li><ul><li>学名<strong>交易型开放式基金</strong>，区别于ETF：a. 不是指数基金，投资标的面更广;b.申赎门槛比ETF（几十万）低。（牛逼在比ETF灵活）</li></ul></li><li><p><strong>ETF联接</strong></p></li><li><ul><li>基金公司专门为了让那些没有证券账户，无法在证券公司进行该ETF交易的投资者也能对该ETF进行投资，而复制了一个场外可以申赎的指数基金。</li></ul></li><li><p><strong>QDII</strong></p></li><li><ul><li>是指在一国境内设立，经该国有关部门批准从事境外证券市场的股票、债券等有价证券业务的证券投资基金。</li></ul></li><li><p><strong>分级基金</strong></p></li><li><ul><li>所谓分级基金，就是把一个母基金劈成两半，一半是优先级，也称A类份额，另一半是落后级，不对，是进取级，也称B类份额。A份额和B份额的资产作为一个整体投资，其中持有B份额的人每年向A份额的持有人支付约定利息，至于支付利息后的总投资亏损由B份额持有人承担。（风险高，B资金门槛高，不适合小白）</li></ul></li><li><p><strong>保本基金</strong></p></li><li><ul><li>保本基金就是在一定期间内，对所投资的本金提供一定比例的保证保本基金，基金利用利息或是极小比例的资产从事高风险投资，而将大部份的资产从事固定收益投资，使得基金投资的市场不论如何下跌时，绝对不会低于其所担保的价格，而达到所谓的「保本」作用。</li></ul></li><li><p><strong>量化基金</strong></p></li><li><ul><li>就是“通过借助统计学、数学方法，运用计算机从海量历史数据中寻找能够带来超额收益的多种“大概率”策略，并纪律严明地按照这些策略所构建的数量化模型来指导投资，力求取得稳定的、可持续的、高于平均的超额回报，其本质是定性投资的数量化实践。从投资标的分类来看，量化基金为大多为混合基金和股票基金</li></ul></li></ul><h4 id="基金的基本要素"><a href="#基金的基本要素" class="headerlink" title="基金的基本要素"></a>基金的基本要素</h4><h5 id="业绩和净值"><a href="#业绩和净值" class="headerlink" title="业绩和净值"></a>业绩和净值</h5><p>业绩和净值主要展示基金的收益表现</p><ul><li><p><strong>业绩表现</strong></p></li><li><ul><li>含义是基金历史收益情况（绝对收益表现+相对收益表现），通常而言都会用折线图来直观展示，大部分基金的收益曲线，都会拿来和“沪深300”做对比。</li></ul></li><li><p><strong>净值</strong></p></li><li><ul><li>所有基金的默认初始单位净值都是1，之后随着业绩表现净值也随之变化，假设上涨了20%，那么净值就从1涨到了1.2。</li><li>累计净值是单位净值加上历史的所有分红。通常而言，基金的累计净值就是单位净值，除非该基金进行过分红或者拆分。</li><li>货币基金净值一直为1，所以看万份收益和七日年化</li></ul></li></ul><h5 id="产品档案"><a href="#产品档案" class="headerlink" title="产品档案"></a>产品档案</h5><p>产品档案即基金产品的基本信息，包括基金概况、基金经理、基金持仓等等。</p><ul><li><p><strong>基金经理</strong></p></li><li><ul><li>1.任职时间长，经得起时间的考验</li><li>2.长期表现优异，平均年化收益高</li></ul></li></ul><h5 id="交易规则"><a href="#交易规则" class="headerlink" title="交易规则"></a>交易规则</h5><p>交易规则，包括交易确认时间，费率等内容。</p><ul><li>T日，即”Trading Day“交易日的意思，以每天的15:00（同股市收盘时间）为分界线，过了15:00即为下一个交易日。</li><li>一般而言，申购基金都是T+1个日确认，而赎回基金，则有的是T+1日钱到账，有的是T+2日到账，具体时间跟平台和银行都有关系</li></ul><h4 id="基金购买"><a href="#基金购买" class="headerlink" title="基金购买"></a>基金购买</h4><h5 id="基金怎么买"><a href="#基金怎么买" class="headerlink" title="基金怎么买"></a>基金怎么买</h5><ul><li><p><strong>申购和认购</strong></p></li><li><ul><li>对于新成立的基金，购买行为称做认购；对于成立后的基金，购买行为称为申购，申购基金的普遍确认时间是T+1日。</li></ul></li><li><p><strong>赎回、极速赎回（快赎）</strong></p></li><li><ul><li>赎回，一般都是T+2或者T+3，但是不少基金公司的货币基金，已经可以支持赎回T+0到账，即现在赎回，基本上立即到账。</li><li>快速赎回，赎回一般需要T+2或者T+3，但是呢如果在赎回的时候，现将基金转换成货币基金，因为基金转换到货币基金通常T+1日即可完成，这样一来，叠加上货币T+0的功能，即可以做到T+1赎回啦。</li></ul></li><li><p><strong>使用货币基金支付</strong></p></li><li><ul><li>快赎其实就是是基金转换，而这里的使用货币基金购买，实际的操作是先赎回货币基金，同时再申购其他基金。</li></ul></li></ul><h5 id="基金去哪里买"><a href="#基金去哪里买" class="headerlink" title="基金去哪里买"></a>基金去哪里买</h5><p>基金的销售分为直销和代销，直销指基金公司自己卖，代销指基金公司委托银行、证券公司、第三方平台（小白最为推荐）帮忙卖。</p><ul><li><p>哪里更便宜？（一般是直销，但代销平台更低）</p></li><li><ul><li>费用可以分为两种，一种是手续费（申购费、认购费、赎回费，经常打折），另一种则是管理费（不打折）。</li><li>直销更便宜一点，省去手续费中给代销的佣金</li></ul></li><li><p>哪里更方便？（代销平台）</p></li></ul><p><img src="/../assets/pic/l_2019-10-05-%E5%9F%BA%E9%87%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/v2-aa06347aa9ec4bdd829720884b232a8d_720w.jpg" alt="img"></p><h5 id="费用怎么算"><a href="#费用怎么算" class="headerlink" title="费用怎么算"></a>费用怎么算</h5><ul><li><p><strong>运作费用</strong>：(一般不会打折，自动在基金净值中扣除)</p></li><li><ul><li>管理费：就是帮你管理这个基金收取的佣金。</li><li>托管费：这是基金公司代资管托管银行收取的托管费用。</li></ul></li><li><p><strong>交易费用</strong></p></li><li><ul><li>申购费：申购基金时的手续费。</li><li>认购费：认购新基金时的手续费。</li><li>赎回费：赎回基金时的手续费。</li><li>转换费：基金转换时的需要支付的费用。</li></ul></li></ul><h4 id="基金投资的逻辑"><a href="#基金投资的逻辑" class="headerlink" title="基金投资的逻辑"></a>基金投资的逻辑</h4><h5 id="合适的基金"><a href="#合适的基金" class="headerlink" title="合适的基金"></a>合适的基金</h5><ul><li><ul><li><p>主动型基金是由基金经理根据自己的投资理念进行管理的，具备主管能动性，这类基金如果长期年化收益高，表现稳定，可以称之为“好”。</p></li><li><ul><li>可按照一些既定标准去选择，比方说成立时间较长，平均年化收益高，回撤较小等。或通过选择基金经理的方式来反选基金。</li></ul></li><li><p>被动型基金，其投资是完全复制某一指数的成份，基金经理只需被动按方抓药，因此无所谓好与不好，更多判断的是当下投资是否合适。</p></li><li><ul><li>沪深300指数：代表的是中国A股，即如果A股大盘长期向好，这个指数也会同步增长。</li><li>上证50指数：代表的是A股中的大蓝筹股，也就是白马股、优质股，像什么中国平安啊，招商银行等优质公司。这些可是中国的核心资产，强烈推荐。</li><li>恒生指数：代表港股大盘，港股过去一年表现强势，但估值仍然处于中位，接下来应该还会有所表现。</li></ul></li></ul></li></ul><h5 id="合适的时机"><a href="#合适的时机" class="headerlink" title="合适的时机"></a>合适的时机</h5><ul><li>均值回归原理<ul><li>基金的投资完全可以忽略小的波动，而着眼于大的周期。即在市场整体估值偏低的时候持续买入，而在估值偏高的时候陆续卖出即可。</li></ul></li><li>市盈率=股价/每股收益，是最常用的估值指标之一<ul><li>横向比较，就是比较行业，看下这个公司的市盈率相对于行业的平均市盈率是高是低。</li><li>纵向比较，查下下这个公司过往的市盈率，看下目前的市盈率是处在什么样的一个位置。</li></ul></li></ul><h4 id="基金绩效评价"><a href="#基金绩效评价" class="headerlink" title="基金绩效评价"></a>基金绩效评价</h4><p><img src="/../assets/pic/l_2019-10-05-%E5%9F%BA%E9%87%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/v2-34ab973b584e26ae018996cdc951e9ef_720w.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文部分节选自&lt;a href=&quot;https://www.zhihu.com/people/xiao-xiao-robot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小小robot&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;简单概念：&quot;&gt;&lt;a href=&quot;#简单概念：&quot; class=&quot;headerlink&quot; title=&quot;简单概念：&quot;&gt;&lt;/a&gt;简单概念：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;股票：代表一种股权&lt;/strong&gt;（拥有权），享受经营的分红，收益较高，同时承担经营的风险，风险较大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;债券：代表一种债权&lt;/strong&gt;，提前约定收益，收益较低，利息不受经营的影响，风险较小（简单说，就说借钱给别人，约定收益）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基金：代表一种委托关系&lt;/strong&gt;（股票、债券都是直接投资，此处区别），委托专业机构帮你理财，收益受专业机构的理财能力影响，一般而言，收益小于股票，大于债券，相对应，风险小于股票，大于债券。&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="金融" scheme="/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>股票基本知识</title>
    <link href="/2019/l_2019-10-04-%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>/2019/l_2019-10-04-股票基本知识/</id>
    <published>2019-10-04T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h5 id="为什么要学股票投资？"><a href="#为什么要学股票投资？" class="headerlink" title="为什么要学股票投资？"></a>为什么要学股票投资？</h5><p>本文部分节选自<a href="https://www.zhihu.com/people/xiao-xiao-robot" target="_blank" rel="noopener">小小robot</a></p><a id="more"></a><ul><li><p><strong>1、掌握一种财富增值的手段。</strong></p></li><li><ul><li>美国标准普尔500指数（代表美国股市）从1957年到现在，年化大概可以9%，接近10%。</li><li>沪深300指数（同上，可代表中国股市）从2004年以来，上涨约4.2倍，年化收益约12.27%</li></ul></li><li><p><strong>2、建立常识，增长知识，减少被忽悠的风险。</strong></p></li><li><ul><li>股神巴菲特年收益20%，动不动就年化收益十几二十的理财产品风险极高</li><li>非理性（贪婪，无知）炒股能够消灭财富</li></ul></li><li><p><strong>3、完善知识框架，丰富经济金融知识。</strong></p></li><li><ul><li><p>股市是经济的晴雨表</p></li><li><p>了解股票市场，会完善自己在经济金融方面的知识框架，会让自己能够理解更多市场行为背后的因素。关注股票呢，也会倒逼着你去了解公司的运作、经济的运行。</p></li><li><ul><li>比如，2014年至15年的大牛市，其实跟央行的放水有很大的关系，央行给市场注入了大量货币，但由于实体产业不行，过多的钱只能脱实向虚，流入股市进而推动资产价格上升。</li><li>比如，2017年的钢铁、煤炭行业的大涨，其实背后的因素是政府供给侧改革去产能的措施，改善了上游行业的盈利情况，使得行业实现扭亏为盈，出现较高的业绩增长等等</li></ul></li></ul></li></ul><h5 id="股票的本质"><a href="#股票的本质" class="headerlink" title="股票的本质"></a>股票的本质</h5><ul><li><p><strong>股票本质</strong></p></li><li><ul><li>股份：你对某家公司的所有权。</li><li>股票：所拥有的公司股份的凭证。</li><li>股权：你因为拥有某家公司的所有权，而具备的权利（比如你可以参与决策投票，分红等等）。</li></ul></li><li><p><strong>股票存在的价值</strong></p></li><li><ul><li>企业为什么要发行股票？——为了融资来发展公司。</li><li>个人为什么要投资股票？——为了获得收益，包括分红收益，以及股价上涨带来的溢价收益。</li></ul></li><li><p><strong>股票市场</strong></p></li><li><ul><li>股票市场：是企业能够通过向投资人发售股份以达到融资目的的市场。股票市场的存在，就是为了撮合想发展但缺钱的企业与有钱但想投资的投资者。发行股票（首次公开募股，即所谓的IPO）条件比较严苛。</li><li>一级市场：企业首次发行股票并卖给最初的投资者时形成的市场，称为一级市场。</li><li>二级市场：投资者与投资者转让股票的市场，称为二级市场。</li></ul></li></ul><h5 id="股票价格"><a href="#股票价格" class="headerlink" title="股票价格"></a>股票价格</h5><p>投资股票收益的主要来自两个方面：1、分红收益，2、股票溢价收益。现实中，比起股价波动的收益，分红收益显得有点微不足道。所以，对全球股市而言，投资收益都主要来源于股票溢价。</p><ul><li><p><strong>股票初始价格是如何确定的？</strong></p></li><li><ul><li><p>第一种是直接定价，即由上市公司和投行直接商量后确定。</p></li><li><p>第二种是网下询价，即由上市公司和投行商量出一个价格区间后，向各大机构投资者（各公募基金、保险资管、社保等等）进行询价后最终敲定。</p></li><li><p><strong>股价=每股收益*市盈率</strong>，即<strong>P=EPS*PE</strong>，中国所有首发股票的最高价格基本都遵循一个公式——发行价格=EPS（每股收益）*23，也就是，首发价格不高于每股收益的23倍</p></li><li><ul><li>EPS（Earnings Per Share）</li><li>PE（Price earnings ratio，即P/E ratio）</li><li>23倍的市盈率其实相对A股大部分股票而言是比较低的，目的在于保护投资者，带来了新股的赚钱效应，所以全面打新股</li></ul></li></ul></li><li><p><strong>影响股价波动的因素是什么？</strong></p></li><li><ul><li><p>股价=每股盈利*市盈率</p></li><li><p>每股盈利牵扯到公司的经营模式、盈利能力、管理能力等等，事实上反映的就是一个公司的基本面。</p></li><li><p>市盈率的本质是估值，是人们愿意为购买这个公司所付出的乘数，已经涵盖了多种影响因素，简单归纳为三个，分别是预期因素，心理因素和技术因素。</p></li><li><ul><li>预期因素：当人们对某个行业或企业有更高的预期时，就会给予更高的估值，就愿意接受更高的市盈率。因此，尽管基本面价值不变，估值的上升自然会推动股价上涨。</li><li>心理因素：心理因素其实就更主观些，可以理解为人性对投资行为的干扰。</li><li>技术因素：指某些特殊的交易方式或规则，比如强制平仓，量化交易触及止损线</li></ul></li></ul></li><li><p><strong>目前股票价格是高还是低？</strong></p></li><li><ul><li><p>通过市盈率，我们可以知道一个企业的价格偏离了它实际价值多少。而偏离得越多，就说明这个企业的价格就越贵（或越便宜）了</p></li><li><ul><li>横向比较，就是比较行业，看下这个公司的市盈率相对于行业的平均市盈率是高时低。</li><li>纵向比较，查下下这个公司过往的市盈率，看下目前的市盈率是处在什么样的一个位置。</li></ul></li></ul></li></ul><h5 id="投资流派"><a href="#投资流派" class="headerlink" title="投资流派"></a>投资流派</h5><ul><li><p><strong>技术分析</strong>，专门研究价格的变动规律和趋势，根据统计和图形进行判断和操作。</p></li><li><ul><li>简单点讲，技术分析研究的就是价格变动的规律，技术分析不会关注价格背后变动的原因，而更在意判断格变动的规律和趋势，从而为之后的决策提供依据。</li></ul></li><li><p><strong>基本面分析</strong>，主要研究企业的经营状况和内在价值，包括经营模式、盈利情况、财务状况、发展前景等等。</p></li><li><ul><li><strong>价值型投资</strong>：主要看重的是企业当下的价值，追求性价比，低买高抛。价值投资比较关注的是公司当前的价值，所以会重点关注企业的营收情况，净利率和毛利率变化，ROE（净资产回报率）等等，以及很重要的估值水平。</li><li><strong>成长型投资</strong>：更关注的是企业未来的增长潜力，所以成长投资会更多地关注企业的行业市场规模，净利润增长率等等，而对于估值水平的忍受能力相对较高（能够接受比较高的估值水平）。</li></ul></li><li><p><strong>事件驱动型投资</strong>，我的理解是根据国家政策、突发事件等因素，来判断利好利空，从而进行短期的投机操作。</p></li></ul><h5 id="股票市场、交易所及重要指数"><a href="#股票市场、交易所及重要指数" class="headerlink" title="股票市场、交易所及重要指数"></a>股票市场、交易所及重要指数</h5><ul><li><p><strong>股票市场</strong></p></li><li><ul><li>一般可分为场内市场和场外市场，所谓的场内即指证券交易所（下面会着重介绍），场外主要是一些非上市公司股票或者上市公司股票的特殊情况，这里先不谈。</li></ul></li><li><p><strong>交易所</strong></p></li><li><ul><li>是为证券集中交易提供场所和设施,组织和监督证券交易,实行自律管理的法人。</li><li>上海证券交易所上市的企业以央企，国企为主，知名公司为辅，多为传统企业。</li><li>深交所的企业则以中小型和创业型企业为主，且多为高科技企业。</li></ul></li><li><p><strong>股票价格指数</strong></p></li><li><ul><li><p>为度量和反映股票市场总体价格水平及其变动趋势而编制的股价统计相对数。</p></li><li><p><strong>美股</strong></p></li><li><ul><li>道琼斯工业指数：简称道指，它是以在纽约证券交易所（美国三大交易所之一，主要是大公司，类比上交所）上市的一部分有代表性的公司股票作为编制对象的。</li><li>纳斯达克指数：简称纳指，编制对象是纳斯达克交易所（美国三大交易所之一，主要是中小公司，类比深交所）的代表企业。</li><li>标普500指数：编制对象不局限于某个交易所，而是美国三大交易所的股票均有涉及，也因此代表性最强。</li></ul></li><li><p><strong>欧洲</strong></p></li><li><ul><li>富时100指数：是在伦敦证券交易所上市的最大的一百家公司的股票指数。</li></ul></li><li><p><strong>亚洲</strong></p></li><li><ul><li>日本经济平均指数（也称日经225指数），韩国综合指数，香港的恒生指数等</li></ul></li><li><p><strong>中国大陆的各类指数</strong></p></li><li><ul><li>上证综指：代表的就是中国大盘股的走势，按照市值比例，所有上证股票都计算，我们所说的大盘一般指的就是上证综指。</li><li>深证成指：主要代表在深交所上市的股票情况。</li><li>沪深300指数 ：类似于标普500指数，不拘泥上交所或深交所，而是涉及了两个交易所的具备代表性的股票，因此更有代表性，也是国内作为各类基金业绩参照的基准。比如我们常听到的表述是某基金跑赢沪深300指数10个百分点，而不是说跑赢上证综指或深证成指。）</li><li>中小盘指、创业板指、上证50，中证1000等等</li></ul></li></ul></li></ul><h4 id="股票操作知识"><a href="#股票操作知识" class="headerlink" title="股票操作知识"></a>股票操作知识</h4><h5 id="股票怎么交易"><a href="#股票怎么交易" class="headerlink" title="股票怎么交易"></a>股票怎么交易</h5><ul><li><p><strong>股票的交易模式——你在跟谁交易？</strong></p></li><li><ul><li><p>一级市场，是企业首次发行股票并卖给投资者的；</p></li><li><ul><li>买新股，指的就是向企业购买新上市的股票，此时你的交易对手就是该企业，他把自家股票给你，你把钱给他</li></ul></li><li><p>二级市场，是投资者之间相互买卖股票的。</p></li><li><ul><li>日常在证券账户里面买卖，都是跟其它投资人而非股票所属的企业进行交易（除非是股票回购）。</li></ul></li><li><p>投资人“身份”</p></li><li><ul><li>散户：通常也称“韭菜”（好心酸），基本就是上面说的个人投资者，一些中小企业也可算在这个范畴。</li><li>庄家：通常是指资金雄厚，或手里握有某只股票的大量筹码，通过一些手段在一定程度上影响股价的组织，可能是个人（多账户联通）、企业或机构。随着现在防炒作的技术和力度的加大，现在的庄家已经没有过去那么多，或者应该说没那么明目张胆了。</li><li>主力：一般指的是“主力资金”，也就金额较大，比较集中的买单或者卖单，“主力资金”同样有可能来自个人，企业或各类机构。</li></ul></li></ul></li><li><p><strong>股票的交易——买入与卖出、看多与看空、做多与做空</strong></p></li><li><ul><li><p>“买入”和“卖出”，这个跟所有东西的买卖一样，股票的日常交易就是买和卖了。</p></li><li><p>“多”和“空”，这两个词在金融市场上很常见，所谓“多”，就是指上涨、向好，所谓“空”，就是下跌，向差。</p></li><li><ul><li>所以“看多”，就是指对之后的行情走势比较看好，比如说“看多某只股票”就是觉得这个股票之后会涨。“看空”则相反。</li><li>再就是“做多”，“做”的意思等同于“交易”了。“做多”就是认为未来会涨，所以买入。</li></ul></li></ul></li><li><p><strong>股票交易时间和交易价格确定</strong></p></li><li><ul><li><p>交易时间：工作日的上午和下午，上午是9:30-11:30，下午是13:00-15:00。我们管开始交易叫“开盘”，交易结束叫“收盘”。</p></li><li><p>交易价格的确认，分为两种形式，一种叫“集合竞价”，一种叫“连续竞价”。</p></li><li><ul><li>集合竞价：在一段时间内先不交易，大家集中报价，想报多少报多少，然后取能够使整个市场成交最多的价格作为交易价格。这个就是A股的开盘价和收盘价价格的由来，在9:15-9:30（即开盘前），14:57-15:00（即收盘前），股价就是通过这种方式得出来的。</li><li>连续竞价：价格优先和时间优先。除了上述开盘和收盘两个特殊时间段，其余交易时间采用的都是连续竞价。</li></ul></li></ul></li><li><p><strong>股票的交易费用</strong></p></li><li><ul><li><p>交易佣金，就是你用了某个证券公司的服务，它在你每次交易（买和卖都收）的时候，都要按你的交易金额，提取一定比例的佣金。</p></li><li><ul><li>交易佣金是证券公司最大的利润来源，以前的交易佣金是很高的，近些年随着市场竞争和互联网券商的兴起，现在的交易佣金已经降到了0.03%-0.05%左右，互联网渠道基本在0.025%左右，也就是每交易1万元，收个2块5。不过每笔佣金最低按5元收取，所以低于5元的也收5元。</li></ul></li><li><p>印花税、规费、过户费等等，但这些比例不大，而且也是必须交的，直接忽略就是。</p></li></ul></li></ul><h5 id="股票账户开通"><a href="#股票账户开通" class="headerlink" title="股票账户开通"></a>股票账户开通</h5><ul><li><p><strong>证券账户</strong></p></li><li><ul><li><p>证券账户，就是一个用来证券交易的账户，开通后就可以交易A股股票</p></li><li><p>在我国，证券账户是须经证券公司（国外称投资银行）开通的，并且必须是实名认证的，按最新规定，目前一个人最多可以开立三个证券账户。</p></li><li><ul><li>上交所的上市企业以央企，国企为主，多为传统企业，股票代码为600开头。</li><li>而深交所的则以中小型和创业型企业为主，股票代码有000开头和300开头（创业板）。</li></ul></li></ul></li><li><p><strong>开户考虑因素</strong></p></li><li><ul><li><p>第一，证券公司实力</p></li><li><ul><li>推荐选择知名的大公司，像中信、华泰、广发、海通、国泰君安等等。当然小券商也有自己的优势，比如政策可能更灵活，佣金更低等等。</li></ul></li><li><p>第二，佣金</p></li><li><ul><li>之前提过，股票交易是需要佣金的。目前市场佣金水平在万二到千一之间（所谓万二，也就是每交易1万元收2块钱），一般而言，通过券商官方渠道（营业部、APP等）去开户的时候，默认的佣金会比较高（可能在万8左右）；而互联网渠道的话（像同花顺，雪球等），为了吸引客户，通常会要求合作券商的佣金设在万2.5左右，基本是接近下限了。</li></ul></li><li><p>第三，交易软件</p></li><li><ul><li>APP比较好用的是华泰和长江，一个是界面和整体体验较好，另外一个就是有账户收益率曲线对比、分析等功能，还是挺有参考意义的，华泰证券叫涨乐财富通，长江证券叫长江e号，广发证券叫广发易淘金。</li></ul></li><li><p>户所需资料，其实就一般就只需要三个——本人，身份证，银行卡。</p></li></ul></li></ul><h5 id="如何看行情信息"><a href="#如何看行情信息" class="headerlink" title="如何看行情信息"></a>如何看行情信息</h5><ul><li><p>市场行情：主要看各个市场指数。</p></li><li><ul><li>美股：道琼斯工业指数、纳斯达克</li><li>港股：恒生指数</li><li>A股：上证综指、深圳成指、中小板指、创业板指</li></ul></li><li><p>个股行情：大致可分为三个板块：走势图及指标、委托买卖与基本情况、资讯和公告</p></li><li><ul><li><p>1、走势图及指标</p></li><li><ul><li>按键F5切换分时图和K线图</li><li>K线图红色柱子表示收涨，绿色表示收跌，是收盘价与开盘价比</li><li>柱子中心直线表示的是当天的最高价与最低价</li><li>量的单位是手，1手=100股</li></ul></li><li><p>2、委托买卖及基本情况</p></li><li><ul><li>4列数字的含义分别是买卖位置、报价、手数、手数增减</li><li>振幅：股票振幅就是股票开盘后的当日最高价和最低价之间的差的绝对值与前日收盘价的百分比</li><li>量比：量比是衡量相对成交量的指标。它是指股市开市后平均每分钟的成交量与过去5个交易日平均每分钟成交量之比。</li><li>换手：换手率=某一段时期内的成交量/发行总股数×100%</li></ul></li><li><p>3、资讯和公告</p></li><li><ul><li>资讯可能是新闻，研报等等，公告是公司的正式发文</li><li>F10，切换至个股基本信息</li></ul></li></ul></li></ul><h4 id="股票基本知识"><a href="#股票基本知识" class="headerlink" title="股票基本知识"></a>股票基本知识</h4><h5 id="股票类型"><a href="#股票类型" class="headerlink" title="股票类型"></a>股票类型</h5><p>6开头的代表着是在主板上市的股票，0开头的代表着是在深市上市的股票，3开头的代表着是在创业板上市的股票。对应就有三大指数，上证指数（000001），深证成指（399001），创业板指（399006），其中主板的股票由上海证券交易所监管，深市，和创业板的股票都由深圳证券交易所监管。</p><h5 id="各类股"><a href="#各类股" class="headerlink" title="各类股"></a>各类股</h5><p><strong>A股</strong>在我国境内由境内公司发行,由境内投资者(国家允许的机构、组织和个人)购买的,在境内交易的人民币普通股票。</p><p><strong>B股</strong>，公司在境内发行和上市,以人民币表明面值,由外国人和台湾、港澳的法人、自然人和其他组织,以及境内外的中国公民,以外币认购和买卖的特种股票。</p><p><strong>H股</strong>，公司注册地在境内,但在香港发行和上市,以港币表明面值,由外国人和台湾、港澳的法人、自然人和其他组织以外币认购和买卖的特种股票。因为香港的英文是HONGKONG,所以简称为H股(由此引申出：N股即在纽约上市等)。</p><p><strong>绩优股</strong>一般指公司业绩优良的股票。通常以每股收益和净资产收益率连续几年处于领先的地位确定。</p><p><strong>蓝筹股</strong>就是指公司业绩优良,在行业内和股市中占有重要地位的股票。目前我国缺少真正意义上的蓝筹股。</p><p><strong>国有股</strong>指由国家和国有法人投资形成的股份是国有股。</p><p><strong>法人股</strong>指由国有法人和非国有法人投资形成的股份是法人股。</p><p><strong>次新股</strong>一般指上市不到两年的股票。</p><p><strong>黑马股</strong>一般指股价突飞猛进的股票。</p><h5 id="大股小股"><a href="#大股小股" class="headerlink" title="大股小股"></a>大股小股</h5><p><strong>大股小股其实是根据流通值来定的，而不是总市值</strong>。为什么这个概念经常被提到，是因为这个流通盘大小决定主力机构的控盘难度，流通盘太大的股票，拉升，砸盘都需要很多的钱才能完成，而流通盘小的股票则要相对容易很多。像中国人保，总市值有4500多亿，但是在解禁之前，它的流通值才100亿多一点，这样就容易被游资拿来炒作。而且大机构一般青睐大盘股，因为他们资金规模大，如果在小盘股里面，稍微一拉，股价就容易飞涨，稍微一跌，就容易跌停，他们出货就非常困难。而游资就特别青睐小盘股。 大盘股在涨的时候慢一些，而下跌的行情下则会相对抗跌一些。小盘股涨的时候很猛，下跌的情况下，跌得也猛。一般而言，上了100亿的流通值，大机构青睐的概率相对会高一些，而流通值100亿以下的，就算小盘股了。 不一定6开头的就是大盘股，0开头的都是小盘股，3开头的创业板里也有权重大股，<strong>这个主要看流通值大小</strong>。002开头的为中小板，普遍为流通盘偏小的股票。</p><h5 id="指数成分股"><a href="#指数成分股" class="headerlink" title="指数成分股"></a>指数成分股</h5><p>指数的作用是为投资者提供一种风向标的参考。而指数是由指数成分股的股价走势，经过计算而得来，而能入选指数股的一般都是经过了筛选的，一般不会太差，所以选股的时候，优先选择指数成分股，再配合其他条件去筛选，是个不错的方法。指数股还有个好处是，<strong>有的时候遇到市场大跌，为了保证指数跌幅不要太大，会拉升指数股来保全指数</strong>。</p><p>A股有几个非常重要的指数，上证50，上证180，沪深 300，深证100，创业板 50，中创100 ，中证500，其中上证指数是跟上证50高度关联的，创业板指数其实就跟创业板50关联度大。而中证500则代表一些流通盘偏小的题材股。</p><h5 id="指数分时图"><a href="#指数分时图" class="headerlink" title="指数分时图"></a>指数分时图</h5><p>指数分时图中，会有两条线，一条白线，一条黄线。白线代表着流通盘大，偏权重的股，黄线代表着流通盘小，偏题材的股。</p><p>看这两条线有什么用呢？我们可以根据这两条线来预判当天的股票中，风向是偏大股还是偏小股，黄线在上，白线在下，那么说明行情偏向于小盘股，反之，则是行情偏向于大盘股，如果两根线捆绑模式，那就说明大股，小股是同步的模式。 </p><h5 id="交易时间"><a href="#交易时间" class="headerlink" title="交易时间"></a>交易时间</h5><p>首先，我们现在可以自由交易的股票市场为沪深两市，而不能自由交易比如美股等。交易时间为周一到周五上午9：30到11：30，下午1：00到3：00，周末以及法定节假日休市。</p><h5 id="T-1"><a href="#T-1" class="headerlink" title="T+1"></a><strong>T+1</strong></h5><p>T是英文Trade(交易的意思)的第一个字母。目前沪深两所规定,当天买进的股票只能在第二天卖出,而当天卖出的股票确认成交后,返回的资金当天就可以买进股票。此交易规则简称为T+1。如您今天买进深发展100股,只能明天卖出。如果您明天卖出深发展100股并卖出的股票确认成交后,返回的资金您当天马上又可以买进该股或其他股票。</p><h5 id="价格优先-时间优先"><a href="#价格优先-时间优先" class="headerlink" title="价格优先,时间优先"></a>价格优先,时间优先</h5><p>股票买卖时,如果许多股民同时买卖一个股票,则必须按照“价格优先、时间优先”的规则办。掌握好这个规则,对我们在急风暴雨的行情操作中帮助极大。特别是价格优先规则,股民一定要深刻体会。比如行情一旦启动,您还空仓。此时应该迅速采用价格优先规则,高填买单以便迅速成交,防止踏空。而行情一旦开始下跌,您还满仓。此时应该迅速采用价格优先规则,低填卖单以便迅速成交,防止套牢。 </p><p>遵循“价格优先,时间优先”原则。如某股市价8元,您填买入(或卖出)8元,但全国那么多投资者都在填8元价位,这就要“时间优先”了,俗话讲：先来后到。要排队。先填8元,先成交。等到您时,可能价格变成8.20元(或7.98元),您就买不到了(或卖不出了)。 </p><h5 id="印花税、过户费、券商佣金"><a href="#印花税、过户费、券商佣金" class="headerlink" title="印花税、过户费、券商佣金"></a><strong>印花税、过户费、券商佣金</strong></h5><p>印花税：这个税只在卖出股票的时候收取，收费方式为成交金额的千分之一，由国家进行征收。</p><p>过户费：这个只在买卖上海股票的时候收取，收费方式为成交股数的万分之零点二，不足一元按一元收取。而过户费只有在买入上证A股时才会收取。</p><p>与其他人成本最大的不同就在于交易佣金，佣金在不同券商区别较大，有万分之三的也有千分之一的，不足5元的按5元收取。故选择正确的券商进行开户或者跟券商进行佣金的协商是非常必要的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设我在开户时的券商给出的佣金收费比例也是万分之三，2016年7月30日我以每股6元的价格，购入某A股股票，500股，8月5日时，因股价上涨至6.8元，我将此股票全部卖出，那么在此次交易过程中，一共交纳了多少手续费？</span><br><span class="line">计算过程如下：首先，购买时：印花税0元，过户费：500*0.02‰=0.01元，因为不足1元按照1元收取；券商佣金，因为3000*0.3‰=0.9元，严重小于5元，所以仍然按照5元计算，也就是说购买该股票交纳手续费1+5=6元；其次，卖出时：印花税=6.8*500*1‰=3.4元，过户费=500*0.02‰=0.01元，不足1元按照1元收取；券商佣金还是低于5元，仍然按照5元收取，即卖出时手续费需要交纳3.4+1+5=9.4元。 因此，在此交易过程中总共交纳的手续费为6+9.4=15.4元。</span><br></pre></td></tr></table></figure><h5 id="交易界面"><a href="#交易界面" class="headerlink" title="交易界面"></a>交易界面</h5><p>我们将这个界面分为四部分，分别为股票简称和代码、基本信息、K线图以及成交量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">15.46 为目前该股票每股的市场价格，也就是你买入一股所需要支付的钱，每支股票一次至少交易100股=1手 </span><br><span class="line">0.07为现在的价格减去平盘价（也就是昨收盘）的价格，这只股票昨日收盘价15.39，故15.46-15.39=0.07</span><br><span class="line">0.45%为涨跌百分比，等于实际涨跌额除以平盘价。（15.46-15.39）/15.39=0.45%</span><br><span class="line">②高：表示当日开盘后波动时出现的最高价格。</span><br><span class="line">③低：表示当日开盘后波动时出现的最低价格。</span><br><span class="line">④开：表示当日开盘价格。</span><br><span class="line">⑤换：换手率，也称“周转率”，指在一定时间内市场中股票转手买卖的频率，是反映股票流通性强弱的指标之一。换手率越高，表示股票流通性越强，市场越活跃。</span><br><span class="line">⑥量: 量比,是衡量相对成交量的指标。它是指股市开市后平均每分钟的成交量与过去5个交易日平均每分钟成交量之比,即量比=（现成交总手数 / 现累计开市时间(分) ）/ 过去5日平均每分钟成交量。量比反映的是当前盘口的成交力度与最近五天的成交力度的差别，这个差别的值越大表明盘口成交越趋活跃。</span><br><span class="line">⑦额：今日内外盘买卖均价成交的总金额</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/l_2019-10-04-%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/1572179246894.png" alt="1572179246894"></p><h5 id="k线"><a href="#k线" class="headerlink" title="k线"></a>k线</h5><p>不论是股票还是邮币卡投资者入门，一定要搞懂盘面上的线图。 </p><p><img src="/../assets/pic/l_2019-10-04-%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/1572173685170.png" alt="1572173685170"></p><p><img src="/../assets/pic/l_2019-10-04-%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/1572182336673.png" alt="1572182336673"></p><h5 id="均线"><a href="#均线" class="headerlink" title="均线"></a>均线</h5><p>MA5（灰色线）：5日均线，数值是最近5日收盘价的平均值。但如果是在开盘状况下，前四天是取收盘价，而当天的数值取的就是当时的市场价格，所以此时数值可能一直在变化。</p><p>同理MA10（紫色线）为10日均线，MA20（黄色线）为20日均线，MA30（蓝色线）为30日均线。</p><h5 id="成交量"><a href="#成交量" class="headerlink" title="成交量"></a>成交量</h5><p>成交量为股票买卖双方达成交易的数量，是单边的，例如，某只股票成交量为十万股，这是表示以买卖双方意愿达成的，在计算时成交量是十万股，即：买方买进了十万股，同时卖方卖出十万股。  是收盘价高于开盘价为红,收盘价低于开盘价为绿。 这同时可以反映出股票买卖的本质还是供求关系，买多于卖，供不应求时则股票价格上涨，卖多于买供过于求时股票价格下跌。</p><p>这里的成交量其实就是每天的成交额或者成交的总手数，代表着主力资金动态。<strong>量能变大，意味着主力资金交易活跃，而后续股价出现异动的概率就很高。而缩量就代表着主力资金活跃度不高，以散户交易为主，主力机构在看戏。</strong> </p><h5 id="分时界面"><a href="#分时界面" class="headerlink" title="分时界面"></a>分时界面</h5><p> 这个界面分为三部分，分时图，分时图中成交量，以及分时详情。</p><p><img src="/../assets/pic/l_2019-10-04-%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/1572178932123.png" alt="1572178932123"> </p><h5 id="分时图（灰线）"><a href="#分时图（灰线）" class="headerlink" title="分时图（灰线）"></a>分时图（灰线）</h5><p>是股票的动态实时（即时）分时走势图。15.56为当日均价（黄线）。</p><h5 id="时图成交量（每分钟一柱）"><a href="#时图成交量（每分钟一柱）" class="headerlink" title="时图成交量（每分钟一柱）"></a>时图成交量（每分钟一柱）</h5><p>图中三种颜色:红色表示成交量是价格上涨过程中成交的；绿色表示成交量是价格下跌过程中成交的；白色表示是价格不变过程中成交的量。越长表示这个价位交易量越大。</p><p>量表示此时股票分时量，是指一分钟成交金额的总量。计算方法是成交手数<em>100</em>价格，将所有股票的成交量加起来就是一分钟的总成交量。</p><p>现手：5表示此时有人买入5手即500股。</p><p>ps：关于分时图成交量现在的几种说法</p><p>（1 ）分时的红绿柱是由柱子所处的那一分钟最后一笔交易的方向决定的，买则为红，卖则为绿。</p><p>（2 ）只要价格比上一分钟价格低，下面就显示为绿色，只要价格比上一分钟高，下方则为红色。</p><p>（3 ）在一个价位上，主动挂单买入，或是先下买单买入，然后才卖家挂单或实时出货而成交的，一般会用红色线柱表示；<br>白色的线柱，一般会出现在买、卖挂单和实时买、卖单为是同时成交的，也就是同一时间上正好有人在同一价位上买货和卖货;<br>与红色立柱正好反之交易的，就是主动挂单卖出或实时出货在先，然后才有买家接货的，一般就会用绿色标。</p><h5 id="分时详情"><a href="#分时详情" class="headerlink" title="分时详情"></a>分时详情</h5><p><img src="/../assets/pic/l_2019-10-04-%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/1572179209678.png" alt="1572179209678"></p><p>①五档：显示买卖各五个价格。</p><p>即：买1、买2、买3、买4、买5；卖1、卖2、卖3、卖4、卖5；也就是同一时间可以看到5个买盘价格和5个卖盘价格。未成交的最低卖价就是卖一，未成交的最高买价就是买一，其余类推。</p><p>若你想买入股票，当你报价高于卖1，即高于15.45元的任何价位，就可即时成交，成交价是15.45元。如果你的报价是15.44元，那么你就跟其他报价15.44元买入的投资者一起排队等候。等到即市价格跌至15.44元，你才有机会成交。</p><p>②明细</p><p>明细的含义是在某时以某个价格成交了几手，红色为买入，绿色为卖出。</p><p>例如14：59  15.46  11 就是在14：59一位买家以15.46元/每股的价格买入11手。</p><p>③成交</p><p>饼状图显示买卖比例。特大单、大单、中单和小单没有固定标准。一般而言，特大单和大单代表机构，中单和小单代表中小投资者。通常流通盘（股票能在二级市场进行交易的流通量）在1亿股以下的，500手算大单；流通盘在1亿到10亿之间的1000手以上算大单；流通盘在10亿股以上的3000手以上算大单。</p><h5 id="市盈率和市净率"><a href="#市盈率和市净率" class="headerlink" title="市盈率和市净率"></a>市盈率和市净率</h5><p>（市盈率）PE=股价/每股收益。也就是说，一个股票要么股价低，要么盈利能力强，都可以降低市盈率，那么相应这个股票就算低估类型了。</p><p>（市净率）PB=股价/每股净资产。也就是说，如果一家企业，PB低，那么就可以说明这家公司要么股价低，要么净资产高，相应这个股票也算低估类型了。</p><p>一般市盈率和市净率尽量低的，为低估。破净股有什么好处：简单说，就算是公司破产了，投资者们也能从清算中获得不低于股票价值的补偿。不过一般谁也不愿意走到那一步，只能用来说明估值比较低而已。</p><p>这个两个财务指标只能参照一下，不能绝对的来衡量。不是说这两个指标低的股，以后就一定可以大涨。<strong>要主力机构认同它低估，那么它才是真的低估，毕竟股价上涨是靠主力机构来推动</strong>。</p><h5 id="除息和除权"><a href="#除息和除权" class="headerlink" title="除息和除权"></a>除息和除权</h5><p><strong>除息和除权</strong>(XD,XR,DR)除息英文是EXCLUDE DIVIDEND,简称XD。除权英文是EXCLUDE RIGHT,简称XR。如果又除息又除权,则英文简称为DR。</p><p>如果某股票今天除息,则在该股票名称前标明XD；如果某股票今天除权,则在该股票名称前标明XR；如果某股票今天又除息又除权,则在该股票名称前标明DR。以及时提醒股民。</p><h4 id="股市基本术语"><a href="#股市基本术语" class="headerlink" title="股市基本术语"></a><strong>股市基本术语</strong></h4><h5 id="1、内外盘"><a href="#1、内外盘" class="headerlink" title="1、内外盘"></a>1、内外盘</h5><p>内盘：以买入价成交的交易，成交数量统计加入内盘。</p><p>外盘：以卖出价成交的交易。成交的数量量统计加入外盘。</p><p>内盘，外盘这两个数据大体可以用来判断买卖力量的强弱。若外盘数量大于内盘，则表现买方力量较强，若内盘数量大于外盘则说明卖方力量较强。</p><h5 id="2、多头空头"><a href="#2、多头空头" class="headerlink" title="2、多头空头"></a>2、多头空头</h5><p>多头：指投资者对股市看好，预计股价将会看涨，于是趁低价时买进股票，待股票上涨至某一价位时再卖出，以获取差额收益。</p><p>空头：空头是投资者和股票商认为现时股价虽然较高，但对股市前景看坏，预计股价将会下跌，于是把借来的股票或者是原有持仓及时卖出，待股价跌至某一价位时再买进，以获取差额收益。</p><p><strong>多翻空</strong>：原来预计股价上升,看好股市前景的多头投资者。后来发现股市前景不乐观,于是立即转为空头。</p><p><strong>空翻多</strong>：原来预计股价下跌,看空股市前景的空头投资者。后来发现股市前景乐观,于是立即转为多头。</p><p><strong>轧多</strong>：空头对多头的打击。当多头认为股市会继续上升时,他们的仓位较重。</p><p><strong>轧空</strong>：多头对空头的打击。当空头认为股市会继续下跌时,他们基本是空仓。</p><p><strong>多杀多</strong>：原来一直看多的多头们,由于对大势能否持续上升的判断出现分歧,有的多头开始看空。于是纷纷抛出股票,形成了多头之间的互相残杀的局面。</p><p><strong>空杀空</strong>：原来一直看空的空头们,由于对大势能否继续下跌的判断出现分歧,有的空头认为股市跌到底了,于是开始看多并建仓,形成了空头之间的分裂局面。</p><p><strong>诱多主力</strong>：庄家引诱股民看多,实际上主力庄家已经在悄悄平仓出货。</p><p><strong>诱空主力</strong>：庄家引诱股民看空,实际上主力庄家已经在悄悄建仓进货。</p><p><strong>死多头(死多)</strong>：不顾实际情况或分析失误,坚定看多的股评人和股民。</p><p><strong>死空头(死空)</strong>：不顾实际情况或分析失误,坚定看空的股评人和股民。</p><p><strong>利多(利好)</strong>：有利于多头的各种信息。管理层鼓励股市上升的政策；经济指标好转的信息；上市公司业绩良好等。</p><p><strong>利空：</strong>有利于空头的各种信息。监管股市的政策出台；经济指标恶化的信息；上市公司业绩滑坡等。</p><p><strong>多头排列</strong>：短期均线上穿中期均线,中期均线上穿长期均线,整个均线系统形成向上发散态势,显示多头的气势。</p><p><strong>空头排列</strong>：短期均线下穿中期均线,中期均线下穿长期均线,整个均线系统形成向下发散态势,显示空头的气势。</p><p><strong>踏空</strong>：一直认为股市会继续下跌并没有建仓,结果股市一路上涨,失去可一次赚钱的机会。</p><p><strong>敲进</strong>：直接按卖出价格买进股票的迅速行为。</p><p><strong>敲出</strong>：直接按买入价格卖出股票的迅速行为。</p><h5 id="3、涨停跌停"><a href="#3、涨停跌停" class="headerlink" title="3、涨停跌停"></a>3、涨停跌停</h5><p>涨跌停板是证券管理部门为了防止过度的投机而采取的一种措施，是指一只个股每天的最大涨跌幅度不能超过前一交易日的百分比。普通的股票最大涨跌幅为前一交易日的10%。<strong>新股上市首日不设涨跌幅限制</strong>。</p><h5 id="4、洗盘"><a href="#4、洗盘" class="headerlink" title="4、洗盘"></a>4、洗盘</h5><p>投机者先把股价大幅度杀低，使大批小额股票投资者(散户)产生恐慌而抛售股票，然后再把股价抬高，以便乘机渔利。</p><h5 id="5、回档"><a href="#5、回档" class="headerlink" title="5、回档"></a>5、回档</h5><p>在股市上，股价呈不断上涨趋势，终因股价上涨速度过快而反转回跌到某一价位，这一调整现象称为回档。一般来说，股票的回档幅度要比上涨幅度小，通常是反转回跌到前一次上涨幅度的三分之一左右时又恢复原来上涨趋势。</p><h5 id="6、反弹"><a href="#6、反弹" class="headerlink" title="6、反弹"></a>6、反弹</h5><p>在股市上，股价呈不断下跌趋势，终因股价下跌速度过快而反转回升到某一价位的调整现象称为反弹。一般来说，股票的反弹幅度要比下跌幅度小，通常是反弹到前一次下跌幅度的三分之一左右时，又恢复原来的下跌趋势。</p><h5 id="7、跳空"><a href="#7、跳空" class="headerlink" title="7、跳空"></a>7、跳空</h5><p>指受强烈利多或利空消息刺激，股价开始大幅度跳动。跳空通常在股价大变动的开始或结束前出现。</p><p><strong>跳空高开</strong>指开盘价格超过昨日最高价格的现象。</p><p><strong>跳空低开</strong>指开盘价格超过昨日最低价格的现象。</p><p><strong>跳空缺口</strong>指开盘价格超过昨日最高价格或开盘价格低于昨日最低价格的空间价位。</p><p><strong>高开</strong>指开盘价超过昨日收盘价但未超过最高价的现象。</p><p><strong>低开</strong>指开盘价低于昨日收盘价但未低于最低价的现象。</p><h5 id="8、补空"><a href="#8、补空" class="headerlink" title="8、补空"></a>8、补空</h5><p>是空头买回以前卖出的股票的行为。</p><h5 id="9、阻力线与支撑线"><a href="#9、阻力线与支撑线" class="headerlink" title="9、阻力线与支撑线"></a>9、阻力线与支撑线</h5><p>阻力线：股市受利多信息的影响，股价上涨至某一价格时，做多头的认为有利可图，但实际却有大量卖出，使股价至此停止上升，甚至出现回跌。股市上一般将这种遇到阻力时的价位称为关卡，股价上升时的关卡称为阻力线。</p><p>支撑线：股市受利空信息的影响，股价跌至某一价位时，做空头的认为有利可图，大量买进股票，使股价不再下跌，甚至出现回升趋势。股价下跌时的关卡称为支撑线。</p><h5 id="10、ST"><a href="#10、ST" class="headerlink" title="10、ST"></a>10、ST</h5><p>在股票名称前冠以“ST”的股票表示该上市公司最近两年连续亏损，或亏损一年，但净资产跌破面值、公司经营过程中出现重大违法行为等情况之一，交易所对该公司股票交易进行特别处理。股票交易日涨跌幅限制5%。</p><h5 id="11、金叉死叉"><a href="#11、金叉死叉" class="headerlink" title="11、金叉死叉"></a>11、金叉死叉</h5><p>黄金交叉(金叉)：指短期移动平均线向上穿过中期移动平均线或短期、中期移动平均线同时向上穿过长期移动平均线的走势图形，表示股价将继续上升。</p><p>死亡交叉(死叉)：指下降中的短期移动平均线由上而下穿过下降的长期移动平均线，这个时候支撑线被向下跌破，表示股价将继续下落。</p><h5 id="12、各种买入卖出行为"><a href="#12、各种买入卖出行为" class="headerlink" title="12、各种买入卖出行为"></a>12、各种买入卖出行为</h5><p><strong>建仓</strong>指买入股票并有了成交结果的行为。</p><p><strong>补仓</strong>指分批买入股票并有了成交结果的行为。</p><p><strong>平仓(清仓)</strong>一般指买进股票后,股价上涨有盈利后卖出股票并有了成交结果的行为。</p><p><strong>斩仓(砍仓)</strong>一般指买进股票后,股价开始下跌造成亏损后卖出股票并有了成交结果的行为。</p><p><strong>全仓买卖</strong>股票不分批、分次,而是一次性建仓或一次性平仓、斩仓并有了成交结果的行为。</p><p><strong>半仓买</strong>股票仅用50%的资金建仓。平仓、斩仓卖出股票仅卖掉50%。并先后顺利成交。</p><p><strong>满仓</strong>指您已经用全部的资金买进了股票,您账上没有充足的钱再继续买进股票了。此时您的仓位已经填满了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h4&gt;&lt;h5 id=&quot;为什么要学股票投资？&quot;&gt;&lt;a href=&quot;#为什么要学股票投资？&quot; class=&quot;headerlink&quot; title=&quot;为什么要学股票投资？&quot;&gt;&lt;/a&gt;为什么要学股票投资？&lt;/h5&gt;&lt;p&gt;本文部分节选自&lt;a href=&quot;https://www.zhihu.com/people/xiao-xiao-robot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小小robot&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="金融" scheme="/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>知识图谱相关知识学习</title>
    <link href="/2019/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>/2019/2019-07-28-知识图谱相关知识/</id>
    <published>2019-07-28T02:36:00.000Z</published>
    <updated>2020-10-10T01:52:07.781Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529155145920.png" alt="image-20200529155145920"></p><a id="more"></a><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/20180703153705193.jpg" alt="这里写图片描述"></p><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><p><strong>知识图谱</strong>是结构化的语义<strong>知识库</strong>，是一种揭示实体之间语义关系的<strong>语义网络</strong>。用于以符号形式描述物理世界中的概念及其相互关系。其基本组成单位是“实体－关系－实体”三元组，以及实体及其相关属性健值对，实体间通过关系相互联结，构成网状的知识结构。现在的知识图谱已被用来泛指各种大规模的知识库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">知识图谱</span><br><span class="line">图状具有关联性的知识集合。可以由三元组(实体entity,实体关系relation,实体entity)表示，也可用图数据库表示。</span><br><span class="line"></span><br><span class="line">类型 type（语义类）</span><br><span class="line">具有相同特点或属性的实体集合的抽象，如足球球员、足球联赛、足球教练等。</span><br><span class="line"></span><br><span class="line">实体</span><br><span class="line">实体就是type的实例，如足球球员--梅西，足球联赛--西甲等。</span><br><span class="line"></span><br><span class="line">关系</span><br><span class="line">实体与实体之间通过关系关联起来，如梅西是巴塞罗那的球员。</span><br><span class="line"></span><br><span class="line">属性</span><br><span class="line">实体自带信息是属性，如梅西 出生日期 1987年6月24日， 身高 1.7米等。</span><br><span class="line"></span><br><span class="line">本体</span><br><span class="line">本体最为抽象，简单理解就是一堆概念，这堆概念集合能够描述某个具体的domain里的一切事物的共有特征，然后概念间又有一定的关系，所有构成一个具有层级特征的结构。</span><br><span class="line"></span><br><span class="line">知识和知识库</span><br><span class="line">知识库（Knowledge Base），就是一个知识数据库，包含了知识的本体和知识。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529155741093.png" alt="image-20200529155741093"></p><p>•<strong>知识抽取</strong>：从一些公开的半结构化、非结构化的数据中提取出实体、关系、属性等知识要素。</p><p>•<strong>知识融合</strong>：消除实体、关系、属性等指称项与事实对象之间的歧义，形成高质量的知识库。</p><p>•<strong>知识加工</strong>：在已有的知识库的基础上，进一步挖掘隐含的知识，从而丰富、扩展知识库。</p><p>•<strong>知识更新</strong>：数据驱动下的全面更新和增量更新。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529160446637.png" alt="image-20200529160446637"></p><h5 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529155014650.png" alt="image-20200529155014650"></p><h5 id="常见知识图谱项目"><a href="#常见知识图谱项目" class="headerlink" title="常见知识图谱项目"></a>常见知识图谱项目</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529155649961.png" alt="image-20200529155649961"></p><h4 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h4><p>知识表示研究如何用计算机符号表示知识</p><p><strong>语义网知识表示框架</strong></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529155953264.png" alt="image-20200529155953264"></p><h5 id="RDF"><a href="#RDF" class="headerlink" title="RDF"></a>RDF</h5><p><strong>资源描述框架(Resource Description Framework， RDF)</strong>，RDF三元组可以看做是图模型的边和顶点(vertex,edge,vertex）</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529163043196.png" alt="image-20200529163043196"></p><h5 id="RDFS"><a href="#RDFS" class="headerlink" title="RDFS"></a>RDFS</h5><p><strong>RDFS(RDF Schema)</strong> 为RDF提供了一个基本的类型系统。在RDF的基础上定义了一些固定的关键词如：Class，subClassOf，type， Property， subPropertyOf， Domain， Range以及多了Schema层。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529161248305.png" alt="image-20200529161248305"></p><h5 id="OWL"><a href="#OWL" class="headerlink" title="OWL"></a>OWL</h5><p><strong>OWL</strong>语言扩展RDF(S)Schema层，使它支持推理等操作，作为语义网上表示本体的推荐语言。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529163138585.png" alt="image-20200529163138585"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529161413888.png" alt="image-20200529161413888"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529163526980.png" alt="image-20200529163526980"></p><h5 id="JSON-LD"><a href="#JSON-LD" class="headerlink" title="JSON-LD"></a>JSON-LD</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529161508211.png" alt="image-20200529161508211"></p><h5 id="RDFa"><a href="#RDFa" class="headerlink" title="RDFa"></a>RDFa</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529164254340.png" alt="image-20200529164254340"></p><h5 id="HTML5-MicroData"><a href="#HTML5-MicroData" class="headerlink" title="HTML5 MicroData"></a>HTML5 MicroData</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529161548226.png" alt="image-20200529161548226"></p><h4 id="知识存储"><a href="#知识存储" class="headerlink" title="知识存储"></a>知识存储</h4><p>•知识图谱在逻辑上可分为模式层与数据层两个层次</p><p>•数据层主要是由一系列的事实组成，用(实体1，关系，实体2)、(实体、属性，属性值)这样的三元组来表达事实。</p><p>•知识存储主要有两种：一种是基于RDF (Resource Description Framework)的存储Jena ，一种是基于图数据库的存储Neo4j/OrientDB/JanusGraph 。</p><p>•模式层构建在数据层之上，主要是通过本体库来规范数据层的一系列事实表达。本体是结构化知识库的概念模板，通过本体库而形成的知识库不仅层次结构较强，并且冗余程度较小。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529160147115.png" alt="image-20200529160147115"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529160302645.png" alt="image-20200529160302645"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529163834741.png" alt="image-20200529163834741"></p><h4 id="知识抽取"><a href="#知识抽取" class="headerlink" title="知识抽取"></a>知识抽取</h4><p>从一些公开的半结构化、非结构化的数据中提取出实体、关系、属性等知识要素</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529161911670.png" alt="image-20200529161911670"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165021769.png" alt="image-20200529165021769"></p><h5 id="知识抽取子任务"><a href="#知识抽取子任务" class="headerlink" title="知识抽取子任务"></a>知识抽取子任务</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165153298.png" alt="image-20200529165153298"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165223483.png" alt="image-20200529165223483"></p><h5 id="知识抽取相关比赛"><a href="#知识抽取相关比赛" class="headerlink" title="知识抽取相关比赛"></a>知识抽取相关比赛</h5><p>•<strong>Message Understanding Conference (MUC)</strong>：由美国DARPA启动并资助的项目，目的是鼓励和开发更好的信息抽取方法<br> 地址：<a href="https://en.wikipedia.org/wiki/Message_Understanding_Conference" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Message_Understanding_Conference</a></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165743739.png" alt="image-20200529165743739"></p><p>•<strong>Automatic Content Extraction (ACE)</strong>：ACE对MUC定义的任务进行了融合、分类和细化; 主要分为五大任务</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165816344.png" alt="image-20200529165816344"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165838162.png" alt="image-20200529165838162"></p><p>•<strong>TAC Knowledge Base Population (KBP)</strong>：KBP对ACE定义的任务进一步修订，适合现代知识抽取的需求主要分为四个独立任务和一个整合任务<br> 地址：<a href="https://tac.nist.gov/2017/KBP/" target="_blank" rel="noopener">https://tac.nist.gov/2017/KBP/</a></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165925013.png" alt="image-20200529165925013"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529165945750.png" alt="image-20200529165945750"></p><p>•<strong>Semantic Evaluation(SemEval)</strong>：由ACL-SIGLEX组织的国际权威的词义消歧评测，目标是增进人们对词义与多义现象的理解<br> 地址：<a href="https://en.wikipedia.org/wiki/SemEval" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/SemEval</a></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529170044943.png" alt="image-20200529170044943"></p><h5 id="实体识别"><a href="#实体识别" class="headerlink" title="实体识别"></a>实体识别</h5><p>实体抽取也称为命名实体学习(named entity learning)或命名实体识别(named entity recognition)或序列标注等，指的是从原始语料中<strong>自动识别出命名实体</strong>,常用Bi_LSTM+CRF.</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529170323794.png" alt="image-20200529170323794"></p><h5 id="关系抽取"><a href="#关系抽取" class="headerlink" title="关系抽取"></a>关系抽取</h5><p>从文本中抽取两个或多个实体之间的语义关系，抽取元组-&gt;清理-&gt;融合-&gt;人工审核-&gt;KG</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529171452080.png" alt="image-20200529171452080"></p><h5 id="基于模板的关系抽取"><a href="#基于模板的关系抽取" class="headerlink" title="基于模板的关系抽取"></a>基于模板的关系抽取</h5><p><strong>基于触发词的Pattern</strong></p><p>首先确定一个触发词（trigger word），然后根据触发词做pattern的匹配及抽取，然后做一个映射。准确但要人工构建</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529171645130.png" alt="image-20200529171645130"></p><p><strong>基于依存句法分析的Pattern</strong></p><p>文本一般具有一些句法结构，如主谓结构、动宾结构、从句结构、这些结构可以是跨多个词所产生的。</p><p>以动词为起点，构建规则，对节点上的词性和边上的依存关系进行限定（可以理解为泛化的正则表达式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优点</span><br><span class="line"> 在小规模数据集上容易实现</span><br><span class="line"> 构建简单</span><br><span class="line">缺点</span><br><span class="line"> 特定领域的模板需要专家构建</span><br><span class="line"> 难以维护</span><br><span class="line"> 可移植性差</span><br><span class="line"> 规则集合小的时候,召回率很低</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529171856301.png" alt="image-20200529171856301"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529171803782.png" alt="image-20200529171803782"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529171952856.png" alt="image-20200529171952856"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个例子中的依存关系路径中“-1”代表谓语，同时可以看出“董卿”这个词依存关系路径为1，说明此处的董卿是和词顺序为“1”的现身关联，于是可以得到“董卿，现身”；接着看“国家博物馆”也是和“现身”所关联，所以可以得出一个动宾关系“现身，国家博物馆”。</span><br></pre></td></tr></table></figure><h5 id="监督学习进行关系抽取"><a href="#监督学习进行关系抽取" class="headerlink" title="监督学习进行关系抽取"></a>监督学习进行关系抽取</h5><p>确定实体对的情况下，根据句子上下文对实体关系进行预测，准确率高（标注越多越好），但标注成本大，无法拓展新关系</p><p>•预先定义好关系的类别</p><p>•人工标注一些数据</p><p>•设计特征表示</p><p>•选择一个分类方法 (SVM、NN、Naive Bayes)</p><p>•评估结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">轻量级特征</span><br><span class="line">    实体前后的词</span><br><span class="line">    实体的类型</span><br><span class="line">    实体之间的距离（也就是实体之间的相似度）</span><br><span class="line"></span><br><span class="line">中等量级特征</span><br><span class="line">Chunk序列：如词组</span><br><span class="line"></span><br><span class="line">重量级特征</span><br><span class="line">    实体间的依存关系路径</span><br><span class="line">    实体间树结构的距离</span><br><span class="line">    特定的结构信息</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529172407138.png" alt="image-20200529172407138"></p><p><strong>深度学习</strong></p><p>Pipeline：实体识别与关系分类完全分离(串联) 不会相互影响，关系的识别依赖于实体识别的效果</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529172540708.png" alt="image-20200529172540708"></p><p>Joint Model 模型将实体识别和关系分类的过程是共同优化。同时整合前面的两个任务，是全局最优化，效果一般情况下优于Pipeline，但是参数空间会提高。该模型将依存关系使用Bi-TreeLSTM的树型模型表示。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529172600132.png" alt="image-20200529172600132"></p><h5 id="半监督学习进行关系抽取"><a href="#半监督学习进行关系抽取" class="headerlink" title="半监督学习进行关系抽取"></a>半监督学习进行关系抽取</h5><p>标注数据不足或数据量又特别大的情况下，关系的抽取可以采用弱监督学习方法</p><p><strong>半监督学习方法——远程监督方法</strong></p><p>可以通过已有知识库三元组出发，实体链接或实体发现，使用现有的知识库去标注数据。</p><p>利用丰富知识库信息，减少标注，但假设过于肯定，引入大量噪声，存在语义漂移现象；很难发现新关系</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529173810941.png" alt="image-20200529173810941"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529173958844.png" alt="image-20200529173958844"></p><p><strong>半监督学习方法——Bootstrapping</strong></p><p>在前面模板方法是基于手工书写的模板（如基于dependency的模板）来做的，在Bootstrapping中，可以去学习模板。</p><p><strong>优点：</strong> 构建成本低，适合大规模构建；可以发现新的关系 (隐含的)。<br><strong>缺点：</strong> 对初始给定的种子集敏感；存在语义漂移问题；结果准确率较低；缺乏对每一个结果的置信度的计算。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529174035979.png" alt="image-20200529174035979"></p><h5 id="结构化数据关系抽取"><a href="#结构化数据关系抽取" class="headerlink" title="结构化数据关系抽取"></a>结构化数据关系抽取</h5><p>结构化数据即行数据，存储在数据库里，可以用二维表结构来逻辑表达实现的数据，如关系数据库。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529180105667.png" alt="image-20200529180105667"></p><p><strong>Direct Mapping</strong></p><p>通过明确在关系模式中编码的语义，将关系数据转换为RDF。D2R,Virtuoso等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">table to class</span><br><span class="line">column to property</span><br><span class="line">row to resource</span><br><span class="line">cell to literal value</span><br><span class="line">in addition cell to Uri</span><br><span class="line">if there is a foreign key constraint</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529175451236.png" alt="image-20200529175451236"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529175652897.png" alt="image-20200529175652897"></p><p><strong>R2RML: RDB to RDF Mapping Language</strong></p><p>映射的任务是将逻辑表作为输入，然后依据规则“triples map”将其转换成三元组的集合。没办法灵活定制也支持视图，sql结果</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529175940995.png" alt="image-20200529175940995"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529175909927.png" alt="image-20200529175909927"></p><h5 id="半结构化数据知识抽取"><a href="#半结构化数据知识抽取" class="headerlink" title="半结构化数据知识抽取"></a>半结构化数据知识抽取</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529180616732.png" alt="image-20200529180616732"></p><p>手工方法需要查看网页结构和代码，通过人工分析，手工写出适合这个网站的表达式，这个表达式的形式可以是XPath表达式，也可以是CSS选择器</p><p>包装器归纳是基于有监督学习的，他从标注好的训练样例集合中学习数据抽取规则，用于从其他用相同标记或相同网页模板抽取目标数据。</p><p>自动抽取，网站中的数据通常是用很少的一些模板来编码的，通过挖掘多个数据记录中的重复模式来寻找这些模板是可能的。</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601152312209.png" alt="image-20200601152312209"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601152450820.png" alt="image-20200601152450820"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529180559328.png" alt="image-20200529180559328"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601152809966.png" alt="image-20200601152809966"></p><h5 id="事件抽取"><a href="#事件抽取" class="headerlink" title="事件抽取"></a>事件抽取</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529174335648.png" alt="image-20200529174335648"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529174411408.png" alt="image-20200529174411408"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529174530593.png" alt="image-20200529174530593"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529174718050.png" alt="image-20200529174718050"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529174748566.png" alt="image-20200529174748566"></p><h5 id="扩充语料库方法"><a href="#扩充语料库方法" class="headerlink" title="扩充语料库方法"></a>扩充语料库方法</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529175100242.png" alt="image-20200529175100242"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529175128102.png" alt="image-20200529175128102"></p><h5 id="文本知识抽取（开放域关系抽取）"><a href="#文本知识抽取（开放域关系抽取）" class="headerlink" title="文本知识抽取（开放域关系抽取）"></a>文本知识抽取（开放域关系抽取）</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601153606811.png" alt="image-20200601153606811"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601154111849.png" alt="image-20200601154111849"></p><h4 id="知识挖掘"><a href="#知识挖掘" class="headerlink" title="知识挖掘"></a>知识挖掘</h4><h5 id="实体链接"><a href="#实体链接" class="headerlink" title="实体链接"></a>实体链接</h5><p>识别非结构化数据（文本）中的实体，并将它们链接到知识库中</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601154549013.png" alt="image-20200601154549013"></p><p>•<strong>实体消歧(Entity disambiguation)</strong></p><p>专门用于解决<strong>同名实体产生歧义</strong>问题的技术。比如“李娜”即是歌手也是运动员，通过实体消歧，可以根据当前语境，准确建立实体链接。</p><p>主要采用<strong>聚类法</strong>，该方法以实体对象为聚类中心，将所有指向同一目标实体对象的指称项聚集到以该对象为中心的类别下。该方法的关键问题是如何定义实现对象与指称项之间的相似度。</p><p>•<strong>共指消解（</strong> <strong>coreference resolution</strong> <strong>）</strong></p><p>对于<strong>多个指称项</strong>(比如president Obama, the president, he)指向同一个实体对象(奥巴马)，共指消解可以将这些指称项关联(合并)到正确的实体对象。</p><p>(1) 以句法分析为基础的Hobbs算法和向心理论；</p><p>(2)统计机器学习方法</p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529171048182.png" alt="image-20200529171048182"></p><h5 id="知识规则挖掘"><a href="#知识规则挖掘" class="headerlink" title="知识规则挖掘"></a>知识规则挖掘</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601155252339.png" alt="image-20200601155252339"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601155410361.png" alt="image-20200601155410361"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601155438368.png" alt="image-20200601155438368"></p><h5 id="知识图谱分布式表示-表示学习"><a href="#知识图谱分布式表示-表示学习" class="headerlink" title="知识图谱分布式表示(表示学习)"></a>知识图谱分布式表示(表示学习)</h5><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529161705216.png" alt="image-20200529161705216"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601155808315.png" alt="image-20200601155808315"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601155902155.png" alt="image-20200601155902155"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601155927002.png" alt="image-20200601155927002"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601160259853.png" alt="image-20200601160259853"></p><h4 id="知识融合"><a href="#知识融合" class="headerlink" title="知识融合"></a>知识融合</h4><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601161727822.png" alt="image-20200601161727822"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162208764.png" alt="image-20200601162208764"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601161800354.png" alt="image-20200601161800354"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162807386.png" alt="image-20200601162807386"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162251795.png" alt="image-20200601162251795"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162319541.png" alt="image-20200601162319541"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162529215.png" alt="image-20200601162529215"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162442678.png" alt="image-20200601162442678"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601162653641.png" alt="image-20200601162653641"></p><h4 id="知识计算"><a href="#知识计算" class="headerlink" title="知识计算"></a>知识计算</h4><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601172212587.png" alt="image-20200601172212587"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601172231341.png" alt="image-20200601172231341"></p><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601172316345.png" alt="image-20200601172316345"></p><h4 id="行业知识图谱"><a href="#行业知识图谱" class="headerlink" title="行业知识图谱"></a>行业知识图谱</h4><p><img src="/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200601170654227.png" alt="image-20200601170654227"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/../assets/pic/2019-07-28-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20200529155145920.png&quot; alt=&quot;image-20200529155145920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>NER命名实体识别项目</title>
    <link href="/2019/2019-07-27-NER%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE/"/>
    <id>/2019/2019-07-27-NER命名实体识别项目/</id>
    <published>2019-07-27T02:36:00.000Z</published>
    <updated>2020-10-10T01:51:51.267Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NER概述"><a href="#NER概述" class="headerlink" title="NER概述"></a>NER概述</h4><p>命名实体识别（NER）是指在文本中识别出特殊对象，这些对象的语义类别通常在识别前被预定义好，预定义类别如人、地址、组织等。命名实体识别不仅仅是独立的信息抽取任务，它在许多大型nlp应用系统如信息检索、自动文本摘要、问答系统、机器翻译以及知识建库（知识图谱）中也扮演了关键的角色。</p><a id="more"></a><h5 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h5><p>所有数据集中，最常见的数据集为 <strong>CoNLL03 和 OneNotes</strong>，分别常见于粗粒度的NER任务和细粒度的NER任务。</p><p>常见的数据集列举如下：</p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/1252882-20190418100821087-874379776.png" alt="img"></p><h5 id="NER工具"><a href="#NER工具" class="headerlink" title="NER工具"></a>NER工具</h5><p>现成的NER工具来源于学界、工业界以及开源项目。列举如下：</p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/1252882-20190418100916769-571424262.png" alt="img"></p><h5 id="评估标准"><a href="#评估标准" class="headerlink" title="评估标准"></a>评估标准</h5><p><strong>1. 精确匹配评估</strong></p><p>NER任务需要同时确定实体边界以及实体类别。在精确匹配评估中，只有当实体边界以及实体类别同时被精确标出时，实体识别任务才能被认定为成功。</p><p>基于数据的TP、FP以及FN，可以计算NER任务的准确率，召回率以及F-score用于评估任务优劣。</p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/1252882-20190418102115228-1520214846.png" alt="img"></p><p>　　</p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/image-20200519120544842.png" alt="image-20200519120544842"> </p><p>绝大多数的NER任务需要识别多种实体类别，需要对所有的实体类别评估NER的效果。基于这个思路，有两类评估指标：</p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/1252882-20190418102220289-1755447297.png" alt="img"></p><p><strong>2. 宽松匹配评估</strong></p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/1252882-20190418102516690-1859773115.png" alt="img"></p><h4 id="项目原理"><a href="#项目原理" class="headerlink" title="项目原理"></a>项目原理</h4><h5 id="实体标注体系"><a href="#实体标注体系" class="headerlink" title="实体标注体系"></a>实体标注体系</h5><p>一、BMES  四位序列标注法</p><p>B表示一个词的词首位值，M表示一个词的中间位置，E表示一个词的末尾位置，S表示一个单独的字词。</p><p>我/S 是/S 广/B 东/M 人/E    （符号标注，‘东’是‘广’和‘人’的中间部分，凑成‘广东人’这个实体）</p><p>我/ 是/ 广东人/        （标注上分出来的实体块）</p><p>二、BIO  三位标注  (B-begin，I-inside，O-outside)</p><p>B-X 代表实体X的开头， I-X代表实体的结尾  O代表不属于任何类型的</p><p>三、BIOES   (B-begin，I-inside，O-outside，E-end，S-single)</p><p>B 表示开始，I表示内部， O表示非实体 ，E实体尾部，S表示改词本身就是一个实体。</p><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/image-20200509025146955.png" alt="image-20200509025146955"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入是词向量，这个直接用word2vec训练就能得到</span><br><span class="line">输出是每个句子预测的标签</span><br></pre></td></tr></table></figure><p>词向量输入到 <strong>BILSTM层</strong> ，然后输出值是这句话每个标签的预测分数，这些分数便是 <strong>CRF层</strong> 的输入，其实没有CRF层我们也可以训练 BILSTM，但是我们就不能保证每次预测的都是对的，因为它有可能胡来，比如比如在B之后再来一个B。第一个预测的是B-PER，下一个预测的是B-ORG，这就不符合自然语言的规则了，所以我们加入了CRF这一层，用来约束这些标签，它可以自动地去学习这些约束。<br> 那么CRF是怎么学习这些约束的呢？<br> 简单地说就是计算每个标签下一个标签地概率，概率大就有可能出现这样的标签，概率小就不会出现了。</p><p>CRF的<strong>特征函数</strong>的存在就是为了对所给序列观察学习各种特征（n-gram窗口），这些特征就是在限定窗口下的各种词之间的关系。然后一般都会学到这样的一条规律（特征）：B后面不会直接再出现B,B后面接E不会再出现E。这个限定特征会使得CRF的预测结果不出现上述例子的错误。</p><p><img src="/../assets/pic/2019-07-27-NER命名实体识别项目/v2-cf73dad66de3c8840ae558cd273d2773_1440w.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;NER概述&quot;&gt;&lt;a href=&quot;#NER概述&quot; class=&quot;headerlink&quot; title=&quot;NER概述&quot;&gt;&lt;/a&gt;NER概述&lt;/h4&gt;&lt;p&gt;命名实体识别（NER）是指在文本中识别出特殊对象，这些对象的语义类别通常在识别前被预定义好，预定义类别如人、地址、组织等。命名实体识别不仅仅是独立的信息抽取任务，它在许多大型nlp应用系统如信息检索、自动文本摘要、问答系统、机器翻译以及知识建库（知识图谱）中也扮演了关键的角色。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python做自然语言处理</title>
    <link href="/2019/2019-07-26-python%E5%81%9A%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    <id>/2019/2019-07-26-python做自然语言处理/</id>
    <published>2019-07-26T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>“自然语言处理”（Natural Language Processing 简称 NLP）包含所有用计算机对自然语言进行的操作 ，从最简单的通过计数词出现的频率来比较不同的写作风格，到最复杂的完全“理解”人所说的话，至少要能达到对人的话语作出有效反应的程度。</p><a id="more"></a><h4 id="文本预处理常用方法"><a href="#文本预处理常用方法" class="headerlink" title="文本预处理常用方法"></a>文本预处理常用方法</h4><h5 id="英文文本预处理"><a href="#英文文本预处理" class="headerlink" title="英文文本预处理"></a>英文文本预处理</h5><p>文本预处理过程大致分为以下几点：1、英文缩写替换；2、转换为小写字母；3、删除标点符号、数字及其它特殊字符；4、分词；5、拼写检查；6、词干提取和词形还原；7、删除停用词</p><p>词干提取(stemming)和词型还原(lemmatization)是英文文本预处理的特色。两者其实有共同点，即都是要找到词的原始形式。只不过词干提取(stemming)会更加激进一点，它在寻找词干的时候可以会得到不是词的词干。比如”imaging”的词干可能得到的是”imag”, 并不是一个词。而词形还原则保守一些，它一般只对能够还原成一个正确的词的词进行处理。</p><p>下面使用传统机器学习方法来实现简单的英文文本分类任务，使用情感分类数据集，是个二分类数据集，标签为positive或者negative。分类任务过程如下：首先进行文本预处理，然后提取TFIDF特征，最后利用传统的机器学习方法逻辑回归对文本进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> nltk.stem.porter <span class="keyword">import</span> PorterStemmer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line">path_neg = <span class="string">'./polarity_data/rt-polarity.neg'</span></span><br><span class="line">path_pos = <span class="string">'./polarity_data/rt-polarity.pos'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本预处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_preprocessing</span><span class="params">(path)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    text = []</span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            text.append(line.strip())</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 英文缩写替换</span></span><br><span class="line">    text_abbreviation = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text:</span><br><span class="line">        item = item.lower().replace(<span class="string">"it's"</span>, <span class="string">"it is"</span>).replace(<span class="string">"i'm"</span>, <span class="string">"i am"</span>).replace(<span class="string">"he's"</span>, <span class="string">"he is"</span>).replace(<span class="string">"she's"</span>, <span class="string">"she is"</span>)\</span><br><span class="line">        .replace(<span class="string">"we're"</span>, <span class="string">"we are"</span>).replace(<span class="string">"they're"</span>, <span class="string">"they are"</span>).replace(<span class="string">"you're"</span>, <span class="string">"you are"</span>).replace(<span class="string">"that's"</span>, <span class="string">"that is"</span>)\</span><br><span class="line">        .replace(<span class="string">"this's"</span>, <span class="string">"this is"</span>).replace(<span class="string">"can't"</span>, <span class="string">"can not"</span>).replace(<span class="string">"don't"</span>, <span class="string">"do not"</span>).replace(<span class="string">"doesn't"</span>, <span class="string">"does not"</span>)\</span><br><span class="line">        .replace(<span class="string">"we've"</span>, <span class="string">"we have"</span>).replace(<span class="string">"i've"</span>, <span class="string">" i have"</span>).replace(<span class="string">"isn't"</span>, <span class="string">"is not"</span>).replace(<span class="string">"won't"</span>, <span class="string">"will not"</span>)\</span><br><span class="line">        .replace(<span class="string">"hasn't"</span>, <span class="string">"has not"</span>).replace(<span class="string">"wasn't"</span>, <span class="string">"was not"</span>).replace(<span class="string">"weren't"</span>, <span class="string">"were not"</span>).replace(<span class="string">"let's"</span>, <span class="string">"let us"</span>)</span><br><span class="line">        </span><br><span class="line">        text_abbreviation.append(item)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 删除标点符号、数字等其他字符</span></span><br><span class="line">    text_clear_str = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text_abbreviation:</span><br><span class="line">        item = re.sub(<span class="string">"[^a-zA-Z]"</span>, <span class="string">" "</span>, item)</span><br><span class="line">        text_clear_str.append(<span class="string">' '</span>.join(item.split()))</span><br><span class="line">        </span><br><span class="line">    text_clear_str_stem_del_stopwords = []</span><br><span class="line">    stem_porter = PorterStemmer()  <span class="comment"># 词形归一化</span></span><br><span class="line">    stop_words = stopwords.words(<span class="string">"english"</span>)  <span class="comment"># 停用词</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分词、词形归一化、删除停用词</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text_clear_str:</span><br><span class="line">        words_token = word_tokenize(item)  <span class="comment"># 分词</span></span><br><span class="line">        words = [stem_porter.stem(w) <span class="keyword">for</span> w <span class="keyword">in</span> words_token <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> stop_words]</span><br><span class="line">        text_clear_str_stem_del_stopwords.append(<span class="string">' '</span>.join(words))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> text_clear_str_stem_del_stopwords</span><br><span class="line"></span><br><span class="line">start_time1 = time.clock()</span><br><span class="line"></span><br><span class="line">text_neg = text_preprocessing(path_neg)</span><br><span class="line">text_pos = text_preprocessing(path_pos)</span><br><span class="line"></span><br><span class="line">end_time1 = time.clock()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"the time of text preprocessing is %.2f s"</span> % (end_time1 - start_time1))</span><br><span class="line"></span><br><span class="line">text = text_neg + text_pos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征提取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">features_extraction</span><span class="params">(text)</span>:</span></span><br><span class="line">    vectors = TfidfVectorizer()</span><br><span class="line">    features = vectors.fit_transform(text).todense()</span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line">start_time2 = time.clock()</span><br><span class="line">features = features_extraction(text)</span><br><span class="line">end_time2 = time.clock()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"the time of features extracting is %.2f s"</span> % (end_time2 - start_time2))</span><br><span class="line">print(<span class="string">'.'</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">m = len(text_neg)</span><br><span class="line">n = len(text_pos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line">labels = np.vstack((np.zeros((m, <span class="number">1</span>)), np.ones((n, <span class="number">1</span>))))</span><br><span class="line"><span class="comment"># 数据集</span></span><br><span class="line">data = np.hstack((features, labels))</span><br><span class="line"><span class="comment"># 数据集随机打乱</span></span><br><span class="line">np.random.shuffle(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本特征</span></span><br><span class="line">features = data[:, :<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># 样本标签</span></span><br><span class="line">labels = data[:, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(features.shape)</span><br><span class="line">print(labels.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集、测试集划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归</span></span><br><span class="line">start_time3 = time.clock()</span><br><span class="line">lr = LogisticRegression().fit(x_train, y_train)</span><br><span class="line">end_time3 = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练时间</span></span><br><span class="line">print(<span class="string">"the time of LogisicRegression training is %.2f s"</span> % (end_time3 - start_time3))</span><br><span class="line"></span><br><span class="line">y_pred = lr.predict(x_test)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"the f1_score of LogisicRegression is %.4f"</span> % f1_score(y_test, y_pred))</span><br></pre></td></tr></table></figure><h5 id="中文文本预处理"><a href="#中文文本预处理" class="headerlink" title="中文文本预处理"></a>中文文本预处理</h5><p>1、删除标点符号、数字及其它特殊字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">'最后是12月12日《篮球先锋报》的新闻报道“湖”涂开营。到底是保罗还是霍华德，\</span></span><br><span class="line"><span class="string">湖人转了一圈之后终于发现，三巨头不切实际，而霍华德也比保罗更符合湖人构建王朝的要求。\</span></span><br><span class="line"><span class="string">于是，湖人放弃追逐保罗，又把奥多姆送去小牛，目的就是抢魔兽。这一次，他们能如愿吗？标签：$LOTOzf$'</span></span><br><span class="line">text = re.sub(<span class="string">"[0-9《》“”‘’。、，？！——$￥#@%……&amp;*^()a-zA-Z&lt;&gt;；：/]"</span>, <span class="string">""</span>, text)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure><p>2、jieba分词</p><p>可使用 jieba.cut 和 jieba.cut_for_search 方法进行分词，两者所返回的结构都是一个可迭代的 generator，可使用 for 循环来获得分词后得到的每一个词语（unicode），或者直接使用 jieba.lcut 以及 jieba.lcut_for_search 直接返回 list。其中：jieba.cut 和 jieba.lcut 接受 3 个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentence：需要分词的字符串（unicode 或 UTF-8 字符串、GBK 字符串）</span><br><span class="line">cut_all 参数：是否使用全模式，默认值为 False</span><br><span class="line">HMM 参数：用来控制是否使用 HMM 模型，默认值为 True</span><br></pre></td></tr></table></figure><p>jieba.cut_for_search 和 jieba.lcut_for_search 接受 2 个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentence：需要分词的字符串（unicode 或 UTF-8 字符串、GBK 字符串）</span><br><span class="line">HMM 参数：用来控制是否使用 HMM 模型，默认值为 True</span><br><span class="line">尽量不要使用 GBK 字符串，可能无法预料地错误解码成 UTF-8</span><br></pre></td></tr></table></figure><p>jieba 是目前最好的 Python 中文分词组件，它有以下三种分词模式：<br><strong>精准模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">sentence= <span class="string">'他来到北京大学参加暑期夏令营'</span></span><br><span class="line"><span class="comment"># 精准模式 [‘他’, ‘来到’, ‘北京大学’, ‘参加’, ‘暑期’, ‘夏令营’]</span></span><br><span class="line">print(list(jieba.cut(sentence, cut_all=<span class="keyword">False</span>)))</span><br></pre></td></tr></table></figure><p><strong>全模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentence= <span class="string">'他来到北京大学参加暑期夏令营'</span></span><br><span class="line"><span class="comment"># 全模式 [‘他’, ‘来到’, ‘北京’, ‘北京大学’, ‘大学’, ‘参加’, ‘暑期’, ‘夏令’, ‘夏令营’]</span></span><br><span class="line">print(list(jieba.cut(sentence, cut_all=<span class="keyword">True</span>)))</span><br></pre></td></tr></table></figure><p><strong>搜索引擎模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">'他毕业于北京大学机电系，后来在一机部上海电器科学研究所工作'</span></span><br><span class="line"><span class="comment"># 搜索引擎模式 </span></span><br><span class="line"><span class="comment">#[‘他’, ‘毕业’, ‘于’, ‘北京’, ‘大学’, ‘北京大学’, ‘机电’, ‘系’, ‘，’, ‘后来’, ‘在’, ‘一机部’, ‘上海’, ‘电器’, ‘科学’, ‘研究’, ‘研究所’, ‘工作’]</span></span><br><span class="line">print(list(jieba.cut_for_search(sentence)))</span><br></pre></td></tr></table></figure><p><strong>自定义词典</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用 add_word(word, freq=None, tag=None) 和 del_word(word) 可在程序中动态修改词典。</span><br><span class="line"></span><br><span class="line">jieba.load_userdict(file_name) # file_name 为文件类对象或自定义词典的路径</span><br><span class="line">词典格式和 dict.txt 一样，一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒</span><br></pre></td></tr></table></figure><p>3、删除停用词<br>首先需要在网上下载中文的停用词表或者自己制作停用词表，也可以下载好停用词表，然后加上一些其它的停用词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停用词</span></span><br><span class="line">stop_words = [<span class="string">'于'</span>, <span class="string">'后来'</span>, <span class="string">'在'</span>]</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">'他毕业于北京大学机电系后来在一机部上海电器科学研究所工作'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分词</span></span><br><span class="line">sent_cut = list(jieba.cut(sentence))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除停用词</span></span><br><span class="line">text = [w <span class="keyword">for</span> w <span class="keyword">in</span> sent_cut <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> stop_words]</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'分词：'</span>, sent_cut)</span><br><span class="line">print(<span class="string">'删除停用词：'</span>, text)</span><br><span class="line">分词： [‘他’, ‘毕业’, ‘于’, ‘北京大学’, ‘机电’, ‘系’, ‘后来’, ‘在’, ‘一机部’, ‘上海’, ‘电器’, ‘科学’, ‘研究所’, ‘工作’]</span><br><span class="line">删除停用词： [‘毕业’, ‘北京大学’, ‘机电’, ‘系’, ‘一机部’, ‘上海’, ‘电器’, ‘科学’, ‘研究所’, ‘工作’]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“自然语言处理”（Natural Language Processing 简称 NLP）包含所有用计算机对自然语言进行的操作 ，从最简单的通过计数词出现的频率来比较不同的写作风格，到最复杂的完全“理解”人所说的话，至少要能达到对人的话语作出有效反应的程度。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow学习笔记</title>
    <link href="/2019/2019-07-25-Tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>/2019/2019-07-25-Tensorflow学习笔记/</id>
    <published>2019-07-25T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="机器学习库对比"><a href="#机器学习库对比" class="headerlink" title="机器学习库对比"></a>机器学习库对比</h5><p><img src="/../assets/pic/2019-07-25-Tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200623185049201.png" alt="image-20200623185049201"></p><h5 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h5><p>使用 TensorFlow, 你必须明白 TensorFlow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用计算图 (graph) 来表示计算任务.</span><br><span class="line">在会话 (Session) 的上下文 (context) 中执行计算图.</span><br><span class="line">使用 tensor 表示数据，一个张量中主要保存了三个属性：名字（name）、维度（shape）和类型（type）</span><br><span class="line">通过 变量 (Variable) 维护状态.</span><br><span class="line">使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.</span><br></pre></td></tr></table></figure><a id="more"></a><p>TensorFlow 是一个编程系统, 使用图来表示计算任务. 图中的节点被称之为 <em>op</em> (operation 的缩写). 一个 op 获得 0 个或多个 <code>Tensor</code>, 执行计算, 产生 0 个或多个 <code>Tensor</code>. </p><p>每个 Tensor 是一个类型化的多维数组. 例如, 你可以将一小组图像集表示为一个四维浮点数数组, 这四个维度分别是 <code>[batch, height, width, channels]</code>.</p><p>一个 TensorFlow 图<em>描述</em>了计算的过程. 为了进行计算, 图必须在 <code>会话</code> 里被启动. <code>会话</code> 将图的 op 分发到诸如 CPU 或 GPU 之类的 <code>设备</code> 上, 同时提供执行 op 的方法. 这些方法执行后, 将产生的 tensor 返回.</p><p>在 Python 语言中, 返回的 tensor 是  <code>numpy.ndarray</code>  对象; 在 C 和 C++ 语言中, 返回的 tensor 是 <code>tensorflow::Tensor</code> 实例. </p><p><strong>构建图</strong></p><p>TensorFlow 程序通常被组织成一个构建阶段和一个执行阶段. 在构建阶段, op 的执行步骤 被描述成一个图. 在执行阶段, 使用会话执行执行图中的 op.</p><p>例如, 通常在构建阶段创建一个图来表示和训练神经网络, 然后在执行阶段反复执行图中的训练 op.</p><p>op 构造器的返回值代表被构造出的 op 的输出, 这些返回值可以传递给其它 op 构造器作为输入.</p><p>TensorFlow Python 库有一个<em>默认图 (default graph)</em>, op 构造器可以为其增加节点. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点</span></span><br><span class="line"><span class="comment"># 加到默认图中.</span></span><br><span class="line"><span class="comment"># 构造器的返回值代表该常量 op 的返回值.</span></span><br><span class="line">matrix1 = tf.constant([[<span class="number">3.</span>, <span class="number">3.</span>]])</span><br><span class="line"><span class="comment"># 创建另外一个常量 op, 产生一个 2x1 矩阵.</span></span><br><span class="line">matrix2 = tf.constant([[<span class="number">2.</span>],[<span class="number">2.</span>]])</span><br><span class="line"><span class="comment"># 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.</span></span><br><span class="line"><span class="comment"># 返回值 'product' 代表矩阵乘法的结果.</span></span><br><span class="line">product = tf.matmul(matrix1, matrix2)</span><br></pre></td></tr></table></figure><p>默认图现在有三个节点, 两个 <code>constant()</code> op, 和一个<code>matmul()</code> op. 为了真正进行矩阵相乘运算, 并得到矩阵乘法的 结果, 你必须在会话里启动这个图.</p><p><strong>在一个会话中启动图</strong></p><p>构造阶段完成后, 才能启动图. 启动图的第一步是创建一个 <code>Session</code> 对象, 如果无任何创建参数, 会话构造器将启动默认图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动默认图.</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 调用 sess 的 'run()' 方法来执行矩阵乘法 op, 传入 'product' 作为该方法的参数. </span></span><br><span class="line"><span class="comment"># 'product' 代表了矩阵乘法op输出, 传入它是向方法表明, 我们希望取回矩阵乘法 op 的输出.</span></span><br><span class="line"><span class="comment"># 整个执行过程是自动化的, 会话负责传递 op 所需的全部输入. op 通常是并发执行的.</span></span><br><span class="line"><span class="comment"># 函数调用 'run(product)' 触发了图中三个 op (两个常量 op 和一个矩阵乘法 op) 的执行.</span></span><br><span class="line"><span class="comment"># 返回值 'result' 是一个 numpy `ndarray` 对象.</span></span><br><span class="line">result = sess.run(product)</span><br><span class="line"><span class="keyword">print</span> (result)</span><br><span class="line"><span class="comment"># ==&gt; [[ 12.]]</span></span><br><span class="line"><span class="comment"># 任务完成, 关闭会话.</span></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><p><strong>Tensor</strong></p><p>TensorFlow 程序使用 tensor 数据结构来代表所有的数据, 计算图中, 操作间传递的数据都是 tensor. 你可以把 TensorFlow tensor 看作是一个 n 维的数组或列表. 一个 tensor 包含一个静态类型 rank, 和 一个 shape.</p><p><strong>变量</strong></p><p>变量维护图执行过程中的状态信息. 通常会将一个统计模型中的参数表示为一组变量. 例如, 你可以将一个神经网络的权重作为某个变量存储在一个 tensor 中. 在训练过程中, 通过重复运行训练图, 更新这个 tensor.</p><p><code>变量</code>,需要通过seesion初始化后，才能在session中使用。这一初始化步骤为，为初始值指定具体值（本例当中是全为零），并将其分配给每个<code>变量</code>,可以一次性为所有<code>变量</code>完成此操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess.run(tf.initialize_all_variables())</span><br></pre></td></tr></table></figure><p>下面的例子演示了如何使用变量实现一个简单的计数器. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个变量, 初始化为标量 0.</span></span><br><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">"counter"</span>)</span><br><span class="line"><span class="comment"># 创建一个 op, 其作用是使 state 增加 1</span></span><br><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line">new_value = tf.add(state, one)</span><br><span class="line">update = tf.assign(state, new_value)</span><br><span class="line"><span class="comment"># 启动图后, 变量必须先经过`初始化` (init) op 初始化,</span></span><br><span class="line"><span class="comment"># 首先必须增加一个`初始化` op 到图中.</span></span><br><span class="line">init_op = tf.initialize_all_variables()</span><br><span class="line"><span class="comment"># 启动图, 运行 op</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="comment"># 运行 'init' op</span></span><br><span class="line">  sess.run(init_op)</span><br><span class="line">  <span class="comment"># 打印 'state' 的初始值</span></span><br><span class="line">  <span class="keyword">print</span> sess.run(state)</span><br><span class="line">  <span class="comment"># 运行 op, 更新 'state', 并打印 'state'</span></span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    sess.run(update)</span><br><span class="line">    <span class="keyword">print</span> sess.run(state)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p><strong>Fetch</strong></p><p>为了取回操作的输出内容, 可以在使用 <code>Session</code> 对象的 <code>run()</code> 调用 执行图时, 传入一些 tensor, 这些 tensor 会帮助你取回结果. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">input1 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">input2 = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">input3 = tf.constant(<span class="number">5.0</span>)</span><br><span class="line">intermed = tf.add(input2, input3)</span><br><span class="line">mul = tf.mul(input1, intermed)</span><br><span class="line"><span class="keyword">with</span> tf.Session():</span><br><span class="line">  result = sess.run([mul, intermed])</span><br><span class="line">  <span class="keyword">print</span> (result)</span><br><span class="line"><span class="comment"># 输出:取出了mul intermed结果</span></span><br><span class="line"><span class="comment"># [array([ 21.], dtype=float32), array([ 7.], dtype=float32)]</span></span><br></pre></td></tr></table></figure><p><strong>Feed</strong></p><p>TensorFlow 还提供了 feed 机制, 该机制 可以临时替代图中的任意操作中的 tensor ，可以对图中任何操作提交补丁, 直接插入一个 tensor.</p><p>feed 使用一个 tensor 值临时替换一个操作的输出结果. 你可以提供 feed 数据作为 <code>run()</code> 调用的参数. </p><p>feed 只在调用它的方法内有效, 方法结束, feed 就会消失. 最常见的用例是将某些特殊的操作指定为 “feed” 操作, 标记的方法是使用 tf.placeholder() 为这些操作创建占位符.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input1 = tf.placeholder(tf.types.float32)</span><br><span class="line">input2 = tf.placeholder(tf.types.float32)</span><br><span class="line">output = tf.mul(input1, input2)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="keyword">print</span> sess.run([output], feed_dict=&#123;input1:[<span class="number">7.</span>], input2:[<span class="number">2.</span>]&#125;)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [array([ 14.], dtype=float32)]</span></span><br></pre></td></tr></table></figure><p><strong>指定其他gpu</strong></p><p>一般你不需要显式指定使用 CPU 还是 GPU, TensorFlow 能自动检测. 如果检测到 GPU,TensorFlow 会尽可能地利用找到的第一个 GPU 来执行操作.</p><p>如果机器上有超过一个可用的 GPU, 除第一个外的其它 GPU 默认是不参与计算的. 为了TensorFlow 使用这些 GPU, 你必须将 op 明确指派给它们执行. <code>with...Device</code> 语句用来指派特定的 CPU 或 GPU 执行操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="keyword">with</span> tf.device(<span class="string">"/gpu:1"</span>):</span><br><span class="line">    matrix1 = tf.constant([[<span class="number">3.</span>, <span class="number">3.</span>]])</span><br><span class="line">    matrix2 = tf.constant([[<span class="number">2.</span>],[<span class="number">2.</span>]])</span><br><span class="line">    product = tf.matmul(matrix1, matrix2)</span><br></pre></td></tr></table></figure><p><strong>交互式使用</strong></p><p>为了便于使用诸如 <a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> 之类的 Python 交互环境, 可以使用 <a href="http://www.tensorfly.cn/tfdoc/api_docs/python/client.html#InteractiveSession" target="_blank" rel="noopener"><code>InteractiveSession</code></a> 代替 <code>Session</code> 类, 使用 <a href="http://www.tensorfly.cn/tfdoc/api_docs/python/framework.html#Tensor.eval" target="_blank" rel="noopener"><code>Tensor.eval()</code></a> 和 <a href="http://www.tensorfly.cn/tfdoc/api_docs/python/framework.html#Operation.run" target="_blank" rel="noopener"><code>Operation.run()</code></a> 方法代替 <code>Session.run()</code>. 这样可以避免使用一个变量来持有会话.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入一个交互式 TensorFlow 会话.</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">x = tf.Variable([<span class="number">1.0</span>, <span class="number">2.0</span>])</span><br><span class="line">a = tf.constant([<span class="number">3.0</span>, <span class="number">3.0</span>])</span><br><span class="line"><span class="comment"># 使用初始化器 initializer op 的 run() 方法初始化 'x' </span></span><br><span class="line">x.initializer.run()</span><br><span class="line"><span class="comment"># 增加一个减法 sub op, 从 'x' 减去 'a'. 运行减法 op, 输出结果 </span></span><br><span class="line">sub = tf.sub(x, a)</span><br><span class="line">print(sub.eval())</span><br><span class="line"><span class="comment"># ==&gt; [-2. -1.]</span></span><br></pre></td></tr></table></figure><h5 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h5><p><img src="/../assets/pic/2019-07-25-Tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200623190400715.png" alt="image-20200623190400715"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tf.matmul(..,..) 是矩阵阶乘的工具</span><br><span class="line">tf.add(..,..)  矩阵加法函数</span><br><span class="line">tf.nn.relu(...) to apply the ReLU activation</span><br><span class="line">tf.convert_to_tensor() 可以将给定的值转换为张量类型，并将其与 TensorFlow 函数和运算符一起使用。该函数接受 Numpy 数组、Python 列表和 Python 标量</span><br><span class="line">tf.linspace(start,stop,num) 在一定范围内生成一个从初值到终值等差排布的序列</span><br><span class="line">tf.range(start,limit,delta) 从开始（默认<span class="number">0</span>）生成一个数字序列，增量delta（默认<span class="number">1</span>），直到终值（不包括终值）</span><br><span class="line">tf.random_normal([<span class="number">2</span>,<span class="number">3</span>],mean=<span class="number">2</span>,stddev=<span class="number">4</span>,seed=<span class="number">12</span>) 创建一个具有一定均值（默认值=<span class="number">0.0</span>）和标准差（默认值=<span class="number">1.0</span>）、形状为 [M，N] 的正态分布随机数组</span><br><span class="line">tf.random_uniform([<span class="number">2</span>,<span class="number">3</span>],maxval=<span class="number">4</span>,seed=<span class="number">12</span>) 在种子的 [minval（default=<span class="number">0</span>），maxval] 范围内创建形状为 [M，N] 的给定伽马分布随机数组</span><br><span class="line">tf.Variable(tf.random_normal([<span class="number">100</span>,<span class="number">100</span>],stddev=<span class="number">2</span>)) 创建变量，使用正态分布随机初始化</span><br><span class="line">tf.global_variables_initializer() 显式初始化所有的声明变量</span><br><span class="line">tf.placeholder(dtype,shape=<span class="keyword">None</span>,name=<span class="keyword">None</span>) 占位符，它们用于将数据提供给计算图</span><br><span class="line">feed_dict=&#123;x:x_data&#125; 在x_data中一个个遍历其中的数据付给x</span><br></pre></td></tr></table></figure><h5 id="简单训练过程"><a href="#简单训练过程" class="headerlink" title="简单训练过程"></a>简单训练过程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无论神经网络的结构如何变化，这3个步骤是不变的</span><br><span class="line">1.定义神经网络的结构和前向传播的输出结果。</span><br><span class="line">2.定义损失函数以及选择反向传播优化的算法。</span><br><span class="line">    tf.train.GradientDescentOptimizer</span><br><span class="line">    tf.train.AdamOptimizer</span><br><span class="line">    tf.train.MomentumOptimizer</span><br><span class="line">3.生成会话（tf.Session）并且在训练数据上反复运行反向传播优化算法。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-25-Tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20191230122415319.png" alt="image-20191230122415319"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三层全连接神经网络解决二分类问题</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># numpy 是一个科学计算的工具包，这里通过 numpy 工具包生成模拟数据集</span></span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> RandomState</span><br><span class="line"><span class="comment"># 定义训练数据 batch 的大小</span></span><br><span class="line">batch_size = <span class="number">8</span></span><br><span class="line"><span class="comment"># 定义神经网络的参数</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将大量数据放进一个 batch 会导致内存溢出，在shape维度上用None方便使用不大的batch</span></span><br><span class="line"><span class="comment"># x,y_表示输入样本数据</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="keyword">None</span>, <span class="number">2</span>), name=<span class="string">"x-input"</span>)</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape=(<span class="keyword">None</span>, <span class="number">1</span>), name=<span class="string">"y-input"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络的前向传播过程</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line">y = tf.sigmoid(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数和反向传播算法</span></span><br><span class="line">cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y, <span class="number">1e-10</span>, <span class="number">1.0</span>)) + (<span class="number">1</span> - y_) * tf.log(tf.clip_by_value(<span class="number">1</span>-y, <span class="number">1e-10</span>, <span class="number">1.0</span>)))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过随机数生成一个模拟数据集</span></span><br><span class="line">rdm = RandomState(<span class="number">1</span>)</span><br><span class="line">data_size = <span class="number">128</span></span><br><span class="line">X = rdm.rand(data_size, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义规则来给出样本的标签，x1 + x2 &lt; 1 .为正样本 （1），其他为 负样本（0）</span></span><br><span class="line">Y = [[int(x1+x2 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> X ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Session 来运行 tf 程序</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">     <span class="comment"># 初始化变量</span></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="comment"># 输出目前（未经训练）的参数取值。</span></span><br><span class="line">    print(sess.run(w1))</span><br><span class="line">    print(sess.run(w2))</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    <span class="comment"># 设定训练的轮数</span></span><br><span class="line">    STEPS = <span class="number">5000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line">        <span class="comment"># 每次选取 batch_size 个样本进行训练</span></span><br><span class="line">        start = (i*batch_size) % data_size</span><br><span class="line">        end = (i*batch_size) % data_size + batch_size</span><br><span class="line">        <span class="comment"># 通过选取的样本 训练神经网络，并更新参数</span></span><br><span class="line">        sess.run([train_step, y, y_], feed_dict=&#123;x:X[start:end], y_:Y[start:end]&#125;)</span><br><span class="line">        <span class="comment"># 每隔一段时间，计算在所有数据上的交叉熵并输出</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> ==<span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 随着训练进行，交叉熵逐渐变小，越小则越说明，预测值与真实值之间的差距越小</span></span><br><span class="line">            total_cross_entropy = sess.run(cross_entropy, feed_dict=&#123;x:X, y_:Y&#125;)</span><br><span class="line">            print(<span class="string">"After %d training step(s), cross entropy on all data is %g"</span> % (i, total_cross_entropy))</span><br><span class="line">            <span class="comment">#训练完后，神经网络参数的值，w1 ,w2 的值已经发生了变化，也就是训练的结果。</span></span><br><span class="line">            print(<span class="string">"\n"</span>)</span><br><span class="line">            print(sess.run(w1))</span><br><span class="line">            print(sess.run(w2))</span><br></pre></td></tr></table></figure><h5 id="batch-vs-epoch"><a href="#batch-vs-epoch" class="headerlink" title="batch vs epoch"></a>batch vs epoch</h5><p>batchsize：批大小。在深度学习中，一般采用 SGD 训练，即每次训练在训练集中取batchsize个样本训练；</p><p>iteration：迭代，1 个 iteration 等于使用 batchsize 个样本训练一次；<br> 一个迭代 = 一个正向通过 + 一个反向通过 ,梯度下降一步</p><p>epoch：迭代次数，1 个 epoch 等于使用训练集中的全部样本训练一次；<br> 一个epoch = 所有训练样本的一个正向传递和一个反向传递</p><p>举个例子，训练集有 1000 个样本，batchsize = 10，那么：<br>训练完整个样本集需要：<br>100次 iteration，1次 epoch。</p><h5 id="保存检查点（变量）（checkpoint）"><a href="#保存检查点（变量）（checkpoint）" class="headerlink" title="保存检查点（变量）（checkpoint）"></a>保存检查点（变量）（checkpoint）</h5><p>为了得到可以用来后续恢复模型以进一步训练或评估的检查点文件（checkpoint file），我们实例化一个<a href="http://www.tensorfly.cn/tfdoc/api_docs/python/state_ops.html#Saver" target="_blank" rel="noopener"><code>tf.train.Saver</code></a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure><p>在训练循环中，将定期调用<a href="http://www.tensorfly.cn/tfdoc/api_docs/python/state_ops.html#Saver.save" target="_blank" rel="noopener"><code>saver.save()</code></a>方法，向训练文件夹中写入包含了当前所有可训练变量值得检查点文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver.save(sess, FLAGS.train_dir, global_step=step)</span><br></pre></td></tr></table></figure><p>这样，我们以后就可以使用<a href="http://www.tensorfly.cn/tfdoc/api_docs/python/state_ops.html#Saver.restore" target="_blank" rel="noopener"><code>saver.restore()</code></a>方法，重载模型的参数，继续训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver.restore(sess, FLAGS.train_dir)</span><br></pre></td></tr></table></figure><p><strong>保存恢复变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create some variables.</span></span><br><span class="line">v1 = tf.Variable(..., name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(..., name=<span class="string">"v2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an op to initialize the variables.</span></span><br><span class="line">init_op = tf.initialize_all_variables()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add ops to save and restore all the variables.</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Later, launch the model, initialize the variables, do some work, save the</span></span><br><span class="line"><span class="comment"># variables to disk.</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  sess.run(init_op)</span><br><span class="line">  <span class="comment"># Do some work with the model.</span></span><br><span class="line">  <span class="comment"># Save the variables to disk.</span></span><br><span class="line">  save_path = saver.save(sess, <span class="string">"/tmp/model.ckpt"</span>)</span><br><span class="line">  print(<span class="string">"Model saved in file: "</span>, save_path)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Later, launch the model, use the saver to restore variables from disk, and</span></span><br><span class="line"><span class="comment"># do some work with the model.</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="comment"># Restore variables from disk.</span></span><br><span class="line">  saver.restore(sess, <span class="string">"/tmp/model.ckpt"</span>)</span><br><span class="line">  print(<span class="string">"Model restored."</span>)</span><br><span class="line">  <span class="comment"># Do some work with the model</span></span><br></pre></td></tr></table></figure><p><strong>选择存储和恢复哪些变量</strong></p><p>举个例子，你也许训练得到了一个5层神经网络，现在想训练一个6层的新模型，可以将之前5层模型的参数导入到新模型的前5层中。</p><p>可以通过给<code>tf.train.Saver()</code>构造函数传入Python字典，很容易地定义需要保持的变量及对应名称：键对应使用的名称，值对应被管理的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create some variables.</span></span><br><span class="line">v1 = tf.Variable(..., name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(..., name=<span class="string">"v2"</span>)</span><br><span class="line"><span class="comment"># Add ops to save and restore only 'v2' using the name "my_v2"</span></span><br><span class="line">saver = tf.train.Saver(&#123;<span class="string">"my_v2"</span>: v2&#125;)</span><br></pre></td></tr></table></figure><h5 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h5><p>TensorFlow程序读取数据一共有3种方法:</p><ul><li>供给数据(Feeding)： 在TensorFlow程序运行的每一步， 让Python代码来供给数据。</li><li>从文件读取数据： 在TensorFlow图的起始， 让一个输入管线从文件中读取数据。</li><li>预加载数据： 在TensorFlow图中定义常量或变量来保存所有数据(仅适用于数据量较小情况)。</li></ul><h3 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a>Keras</h3><p>Keras 是一个用于构建和训练深度学习模型的高阶 API。它可用于快速设计原型、高级研究和生产。</p><p>keras的3个优点： 方便用户使用、模块化和可组合、易于扩展</p><h4 id="Keras-快速入门"><a href="#Keras-快速入门" class="headerlink" title="Keras 快速入门"></a>Keras 快速入门</h4><h5 id="1-导入tf-keras"><a href="#1-导入tf-keras" class="headerlink" title="1.导入tf.keras"></a>1.导入tf.keras</h5><p>tensorflow2推荐使用keras构建网络，常见的神经网络都包含在keras.layer中(最新的tf.keras的版本可能和keras不同)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line">print(tf.__version__)</span><br><span class="line">print(tf.keras.__version__)</span><br></pre></td></tr></table></figure><h5 id="2-构建简单模型"><a href="#2-构建简单模型" class="headerlink" title="2.构建简单模型"></a>2.构建简单模型</h5><p><strong>模型堆叠</strong></p><p>最常见的模型类型是层的堆叠：tf.keras.Sequential 模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br></pre></td></tr></table></figure><p><strong>网络配置</strong></p><p>tf.keras.layers中网络配置：</p><p>activation：设置层的激活函数。此参数由内置函数的名称指定，或指定为可调用对象。默认情况下，系统不会应用任何激活函数。</p><p>kernel_initializer 和 bias_initializer：创建层权重（核和偏差）的初始化方案。此参数是一个名称或可调用对象，默认为 “Glorot uniform” 初始化器。</p><p>kernel_regularizer 和 bias_regularizer：应用层权重（核和偏差）的正则化方案，例如 L1 或 L2 正则化。默认情况下，系统不会应用正则化函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layers.Dense(<span class="number">32</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">layers.Dense(<span class="number">32</span>, activation=tf.sigmoid)</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_initializer=<span class="string">'orthogonal'</span>)</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_initializer=tf.keras.initializers.glorot_normal)</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_regularizer=tf.keras.regularizers.l2(<span class="number">0.01</span>))</span><br><span class="line">layers.Dense(<span class="number">32</span>, kernel_regularizer=tf.keras.regularizers.l1(<span class="number">0.01</span>))</span><br></pre></td></tr></table></figure><h5 id="3-训练和评估"><a href="#3-训练和评估" class="headerlink" title="3.训练和评估"></a>3.训练和评估</h5><p><strong>设置训练流程</strong></p><p>构建好模型后，通过调用 compile 方法配置该模型的学习流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">             loss=tf.keras.losses.categorical_crossentropy,</span><br><span class="line">             metrics=[tf.keras.metrics.categorical_accuracy])</span><br></pre></td></tr></table></figure><p><strong>输入Numpy数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">train_x = np.random.random((<span class="number">1000</span>, <span class="number">72</span>))</span><br><span class="line">train_y = np.random.random((<span class="number">1000</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">val_x = np.random.random((<span class="number">200</span>, <span class="number">72</span>))</span><br><span class="line">val_y = np.random.random((<span class="number">200</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">model.fit(train_x, train_y, epochs=<span class="number">10</span>, batch_size=<span class="number">100</span>,</span><br><span class="line">          validation_data=(val_x, val_y))</span><br></pre></td></tr></table></figure><p><strong>tf.data输入数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices((train_x, train_y))</span><br><span class="line">dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">dataset = dataset.repeat()</span><br><span class="line">val_dataset = tf.data.Dataset.from_tensor_slices((val_x, val_y))</span><br><span class="line">val_dataset = val_dataset.batch(<span class="number">32</span>)</span><br><span class="line">val_dataset = val_dataset.repeat()</span><br><span class="line"></span><br><span class="line">model.fit(dataset, epochs=<span class="number">10</span>, steps_per_epoch=<span class="number">30</span>,</span><br><span class="line">          validation_data=val_dataset, validation_steps=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>评估与预测</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test_x = np.random.random((<span class="number">1000</span>, <span class="number">72</span>))</span><br><span class="line">test_y = np.random.random((<span class="number">1000</span>, <span class="number">10</span>))</span><br><span class="line">model.evaluate(test_x, test_y, batch_size=<span class="number">32</span>)</span><br><span class="line">test_data = tf.data.Dataset.from_tensor_slices((test_x, test_y))</span><br><span class="line">test_data = test_data.batch(<span class="number">32</span>).repeat()</span><br><span class="line">model.evaluate(test_data, steps=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># predict</span></span><br><span class="line">result = model.predict(test_x, batch_size=<span class="number">32</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h5 id="4-构建高级模型"><a href="#4-构建高级模型" class="headerlink" title="4.构建高级模型"></a>4.构建高级模型</h5><p><strong>函数式api</strong></p><p>tf.keras.Sequential 模型是层的简单堆叠，无法表示任意模型。使用 Keras 函数式 API 可以构建复杂的模型拓扑，例如：</p><p>多输入模型，</p><p>多输出模型，</p><p>具有共享层的模型（同一层被调用多次），</p><p>具有非序列数据流的模型（例如，残差连接）。</p><p><strong>使用函数式 API 构建的模型具有以下特征：</strong></p><p>层实例可调用并返回张量。 输入张量和输出张量用于定义 tf.keras.Model 实例。 此模型的训练方式和 Sequential 模型一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">input_x = tf.keras.Input(shape=(<span class="number">72</span>,))</span><br><span class="line">hidden1 = layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>)(input_x)</span><br><span class="line">hidden2 = layers.Dense(<span class="number">16</span>, activation=<span class="string">'relu'</span>)(hidden1)</span><br><span class="line">pred = layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(hidden2)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Model(inputs=input_x, outputs=pred)</span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">             loss=tf.keras.losses.categorical_crossentropy,</span><br><span class="line">             metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(train_x, train_y, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>模型子类化</strong></p><p>通过对 tf.keras.Model 进行子类化并定义您自己的前向传播来构建完全可自定义的模型。在 <strong>init</strong> 方法中创建层并将它们设置为类实例的属性。在 call 方法中定义前向传播</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span><span class="params">(tf.keras.Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_classes=<span class="number">10</span>)</span>:</span></span><br><span class="line">        super(MyModel, self).__init__(name=<span class="string">'my_model'</span>)</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.layer1 = layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>)</span><br><span class="line">        self.layer2 = layers.Dense(num_classes, activation=<span class="string">'softmax'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        h1 = self.layer1(inputs)</span><br><span class="line">        out = self.layer2(h1)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_output_shape</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        shape = tf.TensorShape(input_shape).as_list()</span><br><span class="line">        shape[<span class="number">-1</span>] = self.num_classes</span><br><span class="line">        <span class="keyword">return</span> tf.TensorShape(shape)</span><br><span class="line"></span><br><span class="line">model = MyModel(num_classes=<span class="number">10</span>)</span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.RMSprop(<span class="number">0.001</span>),</span><br><span class="line">             loss=tf.keras.losses.categorical_crossentropy,</span><br><span class="line">             metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_x, train_y, batch_size=<span class="number">16</span>, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>自定义层</strong></p><p>通过对 tf.keras.layers.Layer 进行子类化并实现以下方法来创建自定义层：</p><p>build：创建层的权重。使用 add_weight 方法添加权重。</p><p>call：定义前向传播。</p><p>compute_output_shape：指定在给定输入形状的情况下如何计算层的输出形状。 或者，可以通过实现 get_config 方法和 from_config 类方法序列化层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLayer</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, output_dim, **kwargs)</span>:</span></span><br><span class="line">        self.output_dim = output_dim</span><br><span class="line">        super(MyLayer, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        shape = tf.TensorShape((input_shape[<span class="number">1</span>], self.output_dim))</span><br><span class="line">        self.kernel = self.add_weight(name=<span class="string">'kernel1'</span>, shape=shape,</span><br><span class="line">                                   initializer=<span class="string">'uniform'</span>, trainable=<span class="keyword">True</span>)</span><br><span class="line">        super(MyLayer, self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.matmul(inputs, self.kernel)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_output_shape</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        shape = tf.TensorShape(input_shape).as_list()</span><br><span class="line">        shape[<span class="number">-1</span>] = self.output_dim</span><br><span class="line">        <span class="keyword">return</span> tf.TensorShape(shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_config</span><span class="params">(self)</span>:</span></span><br><span class="line">        base_config = super(MyLayer, self).get_config()</span><br><span class="line">        base_config[<span class="string">'output_dim'</span>] = self.output_dim</span><br><span class="line">        <span class="keyword">return</span> base_config</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_config</span><span class="params">(cls, config)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(**config)</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential(</span><br><span class="line">[</span><br><span class="line">    MyLayer(<span class="number">10</span>),</span><br><span class="line">    layers.Activation(<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.RMSprop(<span class="number">0.001</span>),</span><br><span class="line">             loss=tf.keras.losses.categorical_crossentropy,</span><br><span class="line">             metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_x, train_y, batch_size=<span class="number">16</span>, epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>回调</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">callbacks = [</span><br><span class="line">    tf.keras.callbacks.EarlyStopping(patience=<span class="number">2</span>, monitor=<span class="string">'val_loss'</span>),</span><br><span class="line">    tf.keras.callbacks.TensorBoard(log_dir=<span class="string">'./logs'</span>)</span><br><span class="line">]</span><br><span class="line">model.fit(train_x, train_y, batch_size=<span class="number">16</span>, epochs=<span class="number">5</span>,</span><br><span class="line">         callbacks=callbacks, validation_data=(val_x, val_y))</span><br></pre></td></tr></table></figure><h5 id="5保持和恢复"><a href="#5保持和恢复" class="headerlink" title="5保持和恢复"></a>5保持和恢复</h5><p><strong>权重保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">layers.Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">              loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.save_weights(<span class="string">'./weights/model'</span>)</span><br><span class="line">model.load_weights(<span class="string">'./weights/model'</span>)</span><br><span class="line">model.save_weights(<span class="string">'./model.h5'</span>)</span><br><span class="line">model.load_weights(<span class="string">'./model.h5'</span>)</span><br></pre></td></tr></table></figure><p><strong>保存网络结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列化成json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">json_str = model.to_json()</span><br><span class="line">pprint.pprint(json.loads(json_str))</span><br><span class="line">fresh_model = tf.keras.models.model_from_json(json_str)</span><br><span class="line"><span class="comment"># 保持为yaml格式  #需要提前安装pyyaml</span></span><br><span class="line"></span><br><span class="line">yaml_str = model.to_yaml()</span><br><span class="line">print(yaml_str)</span><br><span class="line">fresh_model = tf.keras.models.model_from_yaml(yaml_str)</span><br></pre></td></tr></table></figure><p><strong>保存整个模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">  layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>, input_shape=(<span class="number">72</span>,)),</span><br><span class="line">  layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(train_x, train_y, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>)</span><br><span class="line">model.save(<span class="string">'all_model.h5'</span>)</span><br><span class="line">model = tf.keras.models.load_model(<span class="string">'all_model.h5'</span>)</span><br></pre></td></tr></table></figure><h5 id="6-将keras用于Estimator"><a href="#6-将keras用于Estimator" class="headerlink" title="6.将keras用于Estimator"></a>6.将keras用于Estimator</h5><p>Estimator API 用于针对分布式环境训练模型。它适用于一些行业使用场景，例如用大型数据集进行分布式训练并导出模型以用于生产</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>),</span><br><span class="line">                          layers.Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>)])</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=tf.keras.optimizers.RMSprop(<span class="number">0.001</span>),</span><br><span class="line">              loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">estimator = tf.keras.estimator.model_to_estimator(model)</span><br></pre></td></tr></table></figure><h4 id="keras-函数api"><a href="#keras-函数api" class="headerlink" title="keras 函数api"></a>keras 函数api</h4><h5 id="1构建简单的网络"><a href="#1构建简单的网络" class="headerlink" title="1构建简单的网络"></a>1构建简单的网络</h5><p><strong>创建网络</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inputs = tf.keras.Input(shape=(<span class="number">784</span>,), name=<span class="string">'img'</span>)</span><br><span class="line">h1 = layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>)(inputs)</span><br><span class="line">h2 = layers.Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>)(h1)</span><br><span class="line">outputs = layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(h2)</span><br><span class="line">model = tf.keras.Model(inputs=inputs, outputs=outputs, name=<span class="string">'mnist model'</span>)</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line">keras.utils.plot_model(model, <span class="string">'mnist_model.png'</span>)</span><br><span class="line">keras.utils.plot_model(model, <span class="string">'model_info.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>训练、验证及测试</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()</span><br><span class="line">x_train = x_train.reshape(<span class="number">60000</span>, <span class="number">784</span>).astype(<span class="string">'float32'</span>) /<span class="number">255</span></span><br><span class="line">x_test = x_test.reshape(<span class="number">10000</span>, <span class="number">784</span>).astype(<span class="string">'float32'</span>) /<span class="number">255</span></span><br><span class="line">model.compile(optimizer=keras.optimizers.RMSprop(),</span><br><span class="line">             loss=<span class="string">'sparse_categorical_crossentropy'</span>, <span class="comment"># 直接填api，后面会报错</span></span><br><span class="line">             metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">history = model.fit(x_train, y_train, batch_size=<span class="number">64</span>, epochs=<span class="number">5</span>, validation_split=<span class="number">0.2</span>)</span><br><span class="line">test_scores = model.evaluate(x_test, y_test, verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">'test loss:'</span>, test_scores[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'test acc:'</span>, test_scores[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong>模型保持和序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.save(<span class="string">'model_save.h5'</span>)</span><br><span class="line"><span class="keyword">del</span> model</span><br><span class="line">model = keras.models.load_model(<span class="string">'model_save.h5'</span>)</span><br></pre></td></tr></table></figure><h5 id="2-使用共享网络创建多个模型"><a href="#2-使用共享网络创建多个模型" class="headerlink" title="2 使用共享网络创建多个模型"></a>2 使用共享网络创建多个模型</h5><p>在函数API中，通过在图层图中指定其输入和输出来创建模型。 这意味着可以使用单个图层图来生成多个模型。可以把整个模型，当作一层网络使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编码器网络和自编码器网络</span></span><br><span class="line">encode_input = keras.Input(shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>), name=<span class="string">'src_img'</span>)</span><br><span class="line">h1 = layers.Conv2D(<span class="number">16</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(encode_input)</span><br><span class="line">h1 = layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h1)</span><br><span class="line">h1 = layers.MaxPool2D(<span class="number">3</span>)(h1)</span><br><span class="line">h1 = layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h1)</span><br><span class="line">h1 = layers.Conv2D(<span class="number">16</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h1)</span><br><span class="line">encode_output = layers.GlobalMaxPool2D()(h1)</span><br><span class="line"></span><br><span class="line">encode_model = keras.Model(inputs=encode_input, outputs=encode_output, name=<span class="string">'encoder'</span>)</span><br><span class="line">encode_model.summary()</span><br><span class="line"></span><br><span class="line">decode_input = keras.Input(shape=(<span class="number">16</span>,), name=<span class="string">'encoded_img'</span>)</span><br><span class="line">h2 = layers.Reshape((<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>))(decode_input)</span><br><span class="line">h2 = layers.Conv2DTranspose(<span class="number">16</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h2)</span><br><span class="line">h2 = layers.Conv2DTranspose(<span class="number">32</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h2)</span><br><span class="line">h2 = layers.UpSampling2D(<span class="number">3</span>)(h2)</span><br><span class="line">h2 = layers.Conv2DTranspose(<span class="number">16</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h2)</span><br><span class="line">decode_output = layers.Conv2DTranspose(<span class="number">1</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h2)</span><br><span class="line">decode_model = keras.Model(inputs=decode_input, outputs=decode_output, name=<span class="string">'decoder'</span>)</span><br><span class="line">decode_model.summary()</span><br><span class="line"></span><br><span class="line">autoencoder_input = keras.Input(shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>), name=<span class="string">'img'</span>)</span><br><span class="line">h3 = encode_model(autoencoder_input)</span><br><span class="line">autoencoder_output = decode_model(h3)</span><br><span class="line">autoencoder = keras.Model(inputs=autoencoder_input, outputs=autoencoder_output,</span><br><span class="line">                          name=<span class="string">'autoencoder'</span>)</span><br><span class="line">autoencoder.summary()</span><br></pre></td></tr></table></figure><h2 id="3-复杂网络结构构建"><a href="#3-复杂网络结构构建" class="headerlink" title="3.复杂网络结构构建"></a>3.复杂网络结构构建</h2><h2 id="3-1多输入与多输出网络"><a href="#3-1多输入与多输出网络" class="headerlink" title="3.1多输入与多输出网络"></a>3.1多输入与多输出网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建一个根据文档内容、标签和标题，预测文档优先级和执行部门的网络</span></span><br><span class="line"><span class="comment"># 超参</span></span><br><span class="line">num_words = <span class="number">2000</span></span><br><span class="line">num_tags = <span class="number">12</span></span><br><span class="line">num_departments = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">body_input = keras.Input(shape=(<span class="keyword">None</span>,), name=<span class="string">'body'</span>)</span><br><span class="line">title_input = keras.Input(shape=(<span class="keyword">None</span>,), name=<span class="string">'title'</span>)</span><br><span class="line">tag_input = keras.Input(shape=(num_tags,), name=<span class="string">'tag'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌入层</span></span><br><span class="line">body_feat = layers.Embedding(num_words, <span class="number">64</span>)(body_input)</span><br><span class="line">title_feat = layers.Embedding(num_words, <span class="number">64</span>)(title_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征提取层</span></span><br><span class="line">body_feat = layers.LSTM(<span class="number">32</span>)(body_feat)</span><br><span class="line">title_feat = layers.LSTM(<span class="number">128</span>)(title_feat)</span><br><span class="line">features = layers.concatenate([title_feat,body_feat, tag_input])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类层</span></span><br><span class="line">priority_pred = layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>, name=<span class="string">'priority'</span>)(features)</span><br><span class="line">department_pred = layers.Dense(num_departments, activation=<span class="string">'softmax'</span>, name=<span class="string">'department'</span>)(features)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">model = keras.Model(inputs=[body_input, title_input, tag_input],</span><br><span class="line">                    outputs=[priority_pred, department_pred])</span><br><span class="line">model.summary()</span><br><span class="line">keras.utils.plot_model(model, <span class="string">'multi_model.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line">model.compile(optimizer=keras.optimizers.RMSprop(<span class="number">1e-3</span>),</span><br><span class="line">             loss=&#123;<span class="string">'priority'</span>: <span class="string">'binary_crossentropy'</span>,</span><br><span class="line">                  <span class="string">'department'</span>: <span class="string">'categorical_crossentropy'</span>&#125;,</span><br><span class="line">             loss_weights=[<span class="number">1.</span>, <span class="number">0.2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 载入输入数据</span></span><br><span class="line">title_data = np.random.randint(num_words, size=(<span class="number">1280</span>, <span class="number">10</span>))</span><br><span class="line">body_data = np.random.randint(num_words, size=(<span class="number">1280</span>, <span class="number">100</span>))</span><br><span class="line">tag_data = np.random.randint(<span class="number">2</span>, size=(<span class="number">1280</span>, num_tags)).astype(<span class="string">'float32'</span>)</span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line">priority_label = np.random.random(size=(<span class="number">1280</span>, <span class="number">1</span>))</span><br><span class="line">department_label = np.random.randint(<span class="number">2</span>, size=(<span class="number">1280</span>, num_departments))</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    &#123;<span class="string">'title'</span>: title_data, <span class="string">'body'</span>:body_data, <span class="string">'tag'</span>:tag_data&#125;,</span><br><span class="line">    &#123;<span class="string">'priority'</span>:priority_label, <span class="string">'department'</span>:department_label&#125;,</span><br><span class="line">    batch_size=<span class="number">32</span>,</span><br><span class="line">    epochs=<span class="number">5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-2小型残差网络"><a href="#3-2小型残差网络" class="headerlink" title="3.2小型残差网络"></a>3.2小型残差网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">inputs = keras.Input(shape=(<span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>), name=<span class="string">'img'</span>)</span><br><span class="line">h1 = layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(inputs)</span><br><span class="line">h1 = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(h1)</span><br><span class="line">block1_out = layers.MaxPooling2D(<span class="number">3</span>)(h1)</span><br><span class="line"></span><br><span class="line">h2 = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>)(block1_out)</span><br><span class="line">h2 = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>)(h2)</span><br><span class="line">block2_out = layers.add([h2, block1_out])</span><br><span class="line"></span><br><span class="line">h3 = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>)(block2_out)</span><br><span class="line">h3 = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>)(h3)</span><br><span class="line">block3_out = layers.add([h3, block2_out])</span><br><span class="line"></span><br><span class="line">h4 = layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, activation=<span class="string">'relu'</span>)(block3_out)</span><br><span class="line">h4 = layers.GlobalMaxPool2D()(h4)</span><br><span class="line">h4 = layers.Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>)(h4)</span><br><span class="line">h4 = layers.Dropout(<span class="number">0.5</span>)(h4)</span><br><span class="line">outputs = layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(h4)</span><br><span class="line"></span><br><span class="line">model = keras.Model(inputs, outputs, name=<span class="string">'small resnet'</span>)</span><br><span class="line">model.summary()</span><br><span class="line">keras.utils.plot_model(model, <span class="string">'small_resnet_model.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line">(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()</span><br><span class="line">x_train = x_train.astype(<span class="string">'float32'</span>) / <span class="number">255</span></span><br><span class="line">x_test = y_train.astype(<span class="string">'float32'</span>) / <span class="number">255</span></span><br><span class="line">y_train = keras.utils.to_categorical(y_train, <span class="number">10</span>)</span><br><span class="line">y_test = keras.utils.to_categorical(y_test, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=keras.optimizers.RMSprop(<span class="number">1e-3</span>),</span><br><span class="line">             loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">             metrics=[<span class="string">'acc'</span>])</span><br><span class="line">model.fit(x_train, y_train,</span><br><span class="line">         batch_size=<span class="number">64</span>,</span><br><span class="line">         epochs=<span class="number">1</span>,</span><br><span class="line">         validation_split=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#model.predict(x_test, batch_size=32)</span></span><br></pre></td></tr></table></figure><h2 id="4-共享网络层"><a href="#4-共享网络层" class="headerlink" title="4.共享网络层"></a>4.共享网络层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">share_embedding = layers.Embedding(<span class="number">1000</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">input1 = keras.Input(shape=(<span class="keyword">None</span>,), dtype=<span class="string">'int32'</span>)</span><br><span class="line">input2 = keras.Input(shape=(<span class="keyword">None</span>,), dtype=<span class="string">'int32'</span>)</span><br><span class="line"></span><br><span class="line">feat1 = share_embedding(input1)</span><br><span class="line">feat2 = share_embedding(input2)</span><br></pre></td></tr></table></figure><h2 id="5-模型复用"><a href="#5-模型复用" class="headerlink" title="5.模型复用"></a>5.模型复用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.applications <span class="keyword">import</span> VGG16</span><br><span class="line">vgg16=VGG16()</span><br><span class="line"></span><br><span class="line">feature_list = [layer.output <span class="keyword">for</span> layer <span class="keyword">in</span> vgg16.layers]</span><br><span class="line">feat_ext_model = keras.Model(inputs=vgg16.input, outputs=feature_list)</span><br><span class="line"></span><br><span class="line">img = np.random.random((<span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>).astype(<span class="string">'float32'</span>))</span><br><span class="line">ext_features = feat_ext_model(img)</span><br></pre></td></tr></table></figure><h2 id="6-自定义网络层"><a href="#6-自定义网络层" class="headerlink" title="6.自定义网络层"></a>6.自定义网络层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import tensorflow as tf</span></span><br><span class="line"><span class="comment"># import tensorflow.keras as keras</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDense</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, units=<span class="number">32</span>)</span>:</span></span><br><span class="line">        super(MyDense, self).__init__()</span><br><span class="line">        self.units = units</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        self.w = self.add_weight(shape=(input_shape[<span class="number">-1</span>], self.units),</span><br><span class="line">                                 initializer=<span class="string">'random_normal'</span>,</span><br><span class="line">                                 trainable=<span class="keyword">True</span>)</span><br><span class="line">        self.b = self.add_weight(shape=(self.units,),</span><br><span class="line">                                 initializer=<span class="string">'random_normal'</span>,</span><br><span class="line">                                 trainable=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.matmul(inputs, self.w) + self.b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_config</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'units'</span>: self.units&#125;</span><br><span class="line"></span><br><span class="line">inputs = keras.Input((<span class="number">4</span>,))</span><br><span class="line">outputs = MyDense(<span class="number">10</span>)(inputs)</span><br><span class="line">model = keras.Model(inputs, outputs)</span><br><span class="line">config = model.get_config()</span><br><span class="line">new_model = keras.Model.from_config(</span><br><span class="line">config, custom_objects=&#123;<span class="string">'MyDense'</span>:MyDense&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 在自定义网络层调用其他网络层</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超参</span></span><br><span class="line">time_step = <span class="number">10</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">hidden_dim = <span class="number">32</span></span><br><span class="line">inputs_dim = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRnn</span><span class="params">(layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyRnn, self).__init__()</span><br><span class="line">        self.hidden_dim = hidden_dim</span><br><span class="line">        self.projection1 = layers.Dense(units=hidden_dim, activation=<span class="string">'relu'</span>)</span><br><span class="line">        self.projection2 = layers.Dense(units=hidden_dim, activation=<span class="string">'relu'</span>)</span><br><span class="line">        self.classifier = layers.Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        outs = []</span><br><span class="line">        states = tf.zeros(shape=[inputs.shape[<span class="number">0</span>], self.hidden_dim])</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(inputs.shape[<span class="number">1</span>]):</span><br><span class="line">            x = inputs[:,t,:]</span><br><span class="line">            h = self.projection1(x)</span><br><span class="line">            y = h + self.projection2(states)</span><br><span class="line">            states = y</span><br><span class="line">            outs.append(y)</span><br><span class="line">        <span class="comment"># print(outs)</span></span><br><span class="line">        features = tf.stack(outs, axis=<span class="number">1</span>)</span><br><span class="line">        print(features.shape)</span><br><span class="line">        <span class="keyword">return</span> self.classifier(features)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建网络</span></span><br><span class="line">inputs = keras.Input(batch_shape=(batch_size, time_step, inputs_dim))</span><br><span class="line">x = layers.Conv1D(<span class="number">32</span>, <span class="number">3</span>)(inputs)</span><br><span class="line">print(x.shape)</span><br><span class="line">outputs = MyRnn()(x)</span><br><span class="line">model = keras.Model(inputs, outputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rnn_model = MyRnn()</span><br><span class="line">_ = rnn_model(tf.zeros((<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)))</span><br></pre></td></tr></table></figure><h4 id="MNIST"><a href="#MNIST" class="headerlink" title="MNIST"></a>MNIST</h4><h5 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h5><p>MNIST是一个入门级的计算机视觉数据集，它包含各种手写数字图片，我们将训练一个机器学习模型用于预测图片里面的数字。</p><p>MNIST数据集的官网是<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">Yann LeCun’s website</a>。下面代码自动下载使用数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Functions for downloading and reading MNIST data."""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow.python.platform</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">SOURCE_URL = <span class="string">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maybe_download</span><span class="params">(filename, work_directory)</span>:</span></span><br><span class="line">  <span class="string">"""Download the data from Yann's website, unless it's already here."""</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(work_directory):</span><br><span class="line">    os.mkdir(work_directory)</span><br><span class="line">  filepath = os.path.join(work_directory, filename)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath):</span><br><span class="line">    filepath, _ = urllib.request.urlretrieve(SOURCE_URL + filename, filepath)</span><br><span class="line">    statinfo = os.stat(filepath)</span><br><span class="line">    print(<span class="string">'Successfully downloaded'</span>, filename, statinfo.st_size, <span class="string">'bytes.'</span>)</span><br><span class="line">  <span class="keyword">return</span> filepath</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read32</span><span class="params">(bytestream)</span>:</span></span><br><span class="line">  dt = numpy.dtype(numpy.uint32).newbyteorder(<span class="string">'&gt;'</span>)</span><br><span class="line">  <span class="keyword">return</span> numpy.frombuffer(bytestream.read(<span class="number">4</span>), dtype=dt)[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_images</span><span class="params">(filename)</span>:</span></span><br><span class="line">  <span class="string">"""Extract the images into a 4D uint8 numpy array [index, y, x, depth]."""</span></span><br><span class="line">  print(<span class="string">'Extracting'</span>, filename)</span><br><span class="line">  <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> bytestream:</span><br><span class="line">    magic = _read32(bytestream)</span><br><span class="line">    <span class="keyword">if</span> magic != <span class="number">2051</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'Invalid magic number %d in MNIST image file: %s'</span> %</span><br><span class="line">          (magic, filename))</span><br><span class="line">    num_images = _read32(bytestream)</span><br><span class="line">    rows = _read32(bytestream)</span><br><span class="line">    cols = _read32(bytestream)</span><br><span class="line">    buf = bytestream.read(rows * cols * num_images)</span><br><span class="line">    data = numpy.frombuffer(buf, dtype=numpy.uint8)</span><br><span class="line">    data = data.reshape(num_images, rows, cols, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_to_one_hot</span><span class="params">(labels_dense, num_classes=<span class="number">10</span>)</span>:</span></span><br><span class="line">  <span class="string">"""Convert class labels from scalars to one-hot vectors."""</span></span><br><span class="line">  num_labels = labels_dense.shape[<span class="number">0</span>]</span><br><span class="line">  index_offset = numpy.arange(num_labels) * num_classes</span><br><span class="line">  labels_one_hot = numpy.zeros((num_labels, num_classes))</span><br><span class="line">  labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> labels_one_hot</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_labels</span><span class="params">(filename, one_hot=False)</span>:</span></span><br><span class="line">  <span class="string">"""Extract the labels into a 1D uint8 numpy array [index]."""</span></span><br><span class="line">  print(<span class="string">'Extracting'</span>, filename)</span><br><span class="line">  <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> bytestream:</span><br><span class="line">    magic = _read32(bytestream)</span><br><span class="line">    <span class="keyword">if</span> magic != <span class="number">2049</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'Invalid magic number %d in MNIST label file: %s'</span> %</span><br><span class="line">          (magic, filename))</span><br><span class="line">    num_items = _read32(bytestream)</span><br><span class="line">    buf = bytestream.read(num_items)</span><br><span class="line">    labels = numpy.frombuffer(buf, dtype=numpy.uint8)</span><br><span class="line">    <span class="keyword">if</span> one_hot:</span><br><span class="line">      <span class="keyword">return</span> dense_to_one_hot(labels)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSet</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, images, labels, fake_data=False, one_hot=False,</span></span></span><br><span class="line"><span class="function"><span class="params">               dtype=tf.float32)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a DataSet.</span></span><br><span class="line"><span class="string">    one_hot arg is used only if fake_data is true.  `dtype` can be either</span></span><br><span class="line"><span class="string">    `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into</span></span><br><span class="line"><span class="string">    `[0, 1]`.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dtype = tf.as_dtype(dtype).base_dtype</span><br><span class="line">    <span class="keyword">if</span> dtype <span class="keyword">not</span> <span class="keyword">in</span> (tf.uint8, tf.float32):</span><br><span class="line">      <span class="keyword">raise</span> TypeError(<span class="string">'Invalid image dtype %r, expected uint8 or float32'</span> %</span><br><span class="line">                      dtype)</span><br><span class="line">    <span class="keyword">if</span> fake_data:</span><br><span class="line">      self._num_examples = <span class="number">10000</span></span><br><span class="line">      self.one_hot = one_hot</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">assert</span> images.shape[<span class="number">0</span>] == labels.shape[<span class="number">0</span>], (</span><br><span class="line">          <span class="string">'images.shape: %s labels.shape: %s'</span> % (images.shape,</span><br><span class="line">                                                 labels.shape))</span><br><span class="line">      self._num_examples = images.shape[<span class="number">0</span>]</span><br><span class="line">      <span class="comment"># Convert shape from [num examples, rows, columns, depth]</span></span><br><span class="line">      <span class="comment"># to [num examples, rows*columns] (assuming depth == 1)</span></span><br><span class="line">      <span class="keyword">assert</span> images.shape[<span class="number">3</span>] == <span class="number">1</span></span><br><span class="line">      images = images.reshape(images.shape[<span class="number">0</span>],</span><br><span class="line">                              images.shape[<span class="number">1</span>] * images.shape[<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">if</span> dtype == tf.float32:</span><br><span class="line">        <span class="comment"># Convert from [0, 255] -&gt; [0.0, 1.0].</span></span><br><span class="line">        images = images.astype(numpy.float32)</span><br><span class="line">        images = numpy.multiply(images, <span class="number">1.0</span> / <span class="number">255.0</span>)</span><br><span class="line">    self._images = images</span><br><span class="line">    self._labels = labels</span><br><span class="line">    self._epochs_completed = <span class="number">0</span></span><br><span class="line">    self._index_in_epoch = <span class="number">0</span></span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">images</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._images</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">labels</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._labels</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num_examples</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._num_examples</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">epochs_completed</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._epochs_completed</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next_batch</span><span class="params">(self, batch_size, fake_data=False)</span>:</span></span><br><span class="line">    <span class="string">"""Return the next `batch_size` examples from this data set."""</span></span><br><span class="line">    <span class="keyword">if</span> fake_data:</span><br><span class="line">      fake_image = [<span class="number">1</span>] * <span class="number">784</span></span><br><span class="line">      <span class="keyword">if</span> self.one_hot:</span><br><span class="line">        fake_label = [<span class="number">1</span>] + [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        fake_label = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> [fake_image <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(batch_size)], [</span><br><span class="line">          fake_label <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(batch_size)]</span><br><span class="line">    start = self._index_in_epoch</span><br><span class="line">    self._index_in_epoch += batch_size</span><br><span class="line">    <span class="keyword">if</span> self._index_in_epoch &gt; self._num_examples:</span><br><span class="line">      <span class="comment"># Finished epoch</span></span><br><span class="line">      self._epochs_completed += <span class="number">1</span></span><br><span class="line">      <span class="comment"># Shuffle the data</span></span><br><span class="line">      perm = numpy.arange(self._num_examples)</span><br><span class="line">      numpy.random.shuffle(perm)</span><br><span class="line">      self._images = self._images[perm]</span><br><span class="line">      self._labels = self._labels[perm]</span><br><span class="line">      <span class="comment"># Start next epoch</span></span><br><span class="line">      start = <span class="number">0</span></span><br><span class="line">      self._index_in_epoch = batch_size</span><br><span class="line">      <span class="keyword">assert</span> batch_size &lt;= self._num_examples</span><br><span class="line">    end = self._index_in_epoch</span><br><span class="line">    <span class="keyword">return</span> self._images[start:end], self._labels[start:end]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data_sets</span><span class="params">(train_dir, fake_data=False, one_hot=False, dtype=tf.float32)</span>:</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DataSets</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  data_sets = DataSets()</span><br><span class="line">  <span class="keyword">if</span> fake_data:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fake</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">return</span> DataSet([], [], fake_data=<span class="keyword">True</span>, one_hot=one_hot, dtype=dtype)</span><br><span class="line">    data_sets.train = fake()</span><br><span class="line">    data_sets.validation = fake()</span><br><span class="line">    data_sets.test = fake()</span><br><span class="line">    <span class="keyword">return</span> data_sets</span><br><span class="line">  TRAIN_IMAGES = <span class="string">'train-images-idx3-ubyte.gz'</span></span><br><span class="line">  TRAIN_LABELS = <span class="string">'train-labels-idx1-ubyte.gz'</span></span><br><span class="line">  TEST_IMAGES = <span class="string">'t10k-images-idx3-ubyte.gz'</span></span><br><span class="line">  TEST_LABELS = <span class="string">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class="line">  VALIDATION_SIZE = <span class="number">5000</span></span><br><span class="line">  local_file = maybe_download(TRAIN_IMAGES, train_dir)</span><br><span class="line">  train_images = extract_images(local_file)</span><br><span class="line">  local_file = maybe_download(TRAIN_LABELS, train_dir)</span><br><span class="line">  train_labels = extract_labels(local_file, one_hot=one_hot)</span><br><span class="line">  local_file = maybe_download(TEST_IMAGES, train_dir)</span><br><span class="line">  test_images = extract_images(local_file)</span><br><span class="line">  local_file = maybe_download(TEST_LABELS, train_dir)</span><br><span class="line">  test_labels = extract_labels(local_file, one_hot=one_hot)</span><br><span class="line">  validation_images = train_images[:VALIDATION_SIZE]</span><br><span class="line">  validation_labels = train_labels[:VALIDATION_SIZE]</span><br><span class="line">  train_images = train_images[VALIDATION_SIZE:]</span><br><span class="line">  train_labels = train_labels[VALIDATION_SIZE:]</span><br><span class="line">  data_sets.train = DataSet(train_images, train_labels, dtype=dtype)</span><br><span class="line">  data_sets.validation = DataSet(validation_images, validation_labels,</span><br><span class="line">                                 dtype=dtype)</span><br><span class="line">  data_sets.test = DataSet(test_images, test_labels, dtype=dtype)</span><br><span class="line">  <span class="keyword">return</span> data_sets</span><br></pre></td></tr></table></figure><p>下载下来的数据集被分成两部分：60000行的训练数据集（<code>mnist.train</code>）和10000行的测试数据集（<code>mnist.test</code>）。</p><p>每一个MNIST数据单元有两部分组成：一张包含手写数字的图片和一个对应的标签。我们把这些图片设为“xs”，把这些标签设为“ys”。训练数据集和测试数据集都包含xs和ys，比如训练数据集的图片是 <code>mnist.train.images</code> ，训练数据集的标签是 <code>mnist.train.labels</code>。</p><p>每一张图片包含28像素X28像素。用一个数字数组来表示，把这个数组展开成一个向量，长度是 28x28 = 784。MNIST数据集的图片就是在784维向量空间里面的点。</p><p>在MNIST训练数据集中，<code>mnist.train.images</code> 是一个形状为 <code>[60000, 784]</code> 的张量，第一个维度数字用来索引图片，第二个维度数字用来索引每张图片中的像素点。在此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于0和1之间。</p><p>MNIST数据集的标签是介于0到9的数字，用来描述给定图片里表示的数字。为了用于这个教程，我们使标签数据是”one-hot vectors”。 一个one-hot向量除了某一位的数字是1以外其余各维度数字都是0。所以在此教程中，数字n将表示成一个只有在第n维度（从0开始）数字为1的10维向量。比如，标签0将表示成([1,0,0,0,0,0,0,0,0,0,0])。因此， <code>mnist.train.labels</code> 是一个 <code>[60000, 10]</code> 的数字矩阵。</p><h5 id="softmax"><a href="#softmax" class="headerlink" title="softmax"></a>softmax</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#输入图片向量 None表示此张量的第一个维度可以是任何长度</span></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line"><span class="comment">#权重 Variable代表一个可修改的张量</span></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"><span class="comment">#正向传播，y表示计算出的标签值</span></span><br><span class="line">y = tf.nn.softmax(tf.matmul(x,W) + b)</span><br><span class="line"><span class="comment"># y_表示实际值</span></span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>,<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算交叉熵 tf.reduce_sum 计算张量的所有元素的总和</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向传播，梯度下降以0.01学习速率最小化交叉熵。</span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一个操作来初始化我们创建的变量：</span></span><br><span class="line">init = tf.initialize_all_variables()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line"><span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 然后开始训练模型，这里我们让模型循环训练1000次！</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">  <span class="comment">#每一步迭代，我们都会加载100个训练样本，然后执行一次train_step，并通过feed_dict将x和 y_张量占位符用训练训练数据替代。</span></span><br><span class="line">  batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">  sess.run(train_step, feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf.argmax(y,1)返回的是模型对于任一输入x预测到的标签值，而 tf.argmax(y_,1) 代表正确的标签，我们可以用 tf.equal 来检测我们的预测是否真实标签匹配(索引位置一样表示匹配)。</span></span><br><span class="line"><span class="comment">#这行代码会给我们一组布尔值。为了确定正确预测项的比例，我们可以把布尔值转换成浮点数，然后取平均值。例如，[True, False, True, True] 会变成 [1,0,1,1] ，取平均值后得到 0.75.</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line">print(sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;))</span><br></pre></td></tr></table></figure><h5 id="构建一个多层卷积网络"><a href="#构建一个多层卷积网络" class="headerlink" title="构建一个多层卷积网络"></a>构建一个多层卷积网络</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入图片向量 None表示此张量的第一个维度可以是任何长度</span></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line"><span class="comment">#权重 Variable代表一个可修改的张量</span></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"><span class="comment"># y_表示实际值</span></span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>,<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于我们使用的是ReLU神经元，因此比较好的做法是用一个较小的正数来初始化偏置项，以避免神经元节点输出恒为0的问题（dead neurons）</span></span><br><span class="line"><span class="comment">#为了不在建立模型的时候反复做初始化操作，我们定义两个函数用于初始化。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">  initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">  <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">  initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">  <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="comment">#卷积 卷积使用1步长（stride size），保证输出和输入是同一个大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#池化 池化用简单传统的2x2大小的模板做max pooling。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                        strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现第一层了。它由一个卷积接一个max pooling完成。卷积在每个5x5的patch（filter)中算出32个特征。卷积的权重张量形状是[5, 5, 1, 32]</span></span><br><span class="line"><span class="comment"># 前两个维度是patch的大小，接着是输入的通道数目，最后是输出的通道数目。 而对于每一个输出通道都有一个对应的偏置量。</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#把x变成一个4d向量，其第2、第3维对应图片的宽、高，最后一维代表图片的颜色通道数(灰度图所以为1，rgb彩色图，则为3)。</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#把x_image和权值向量进行卷积，加上偏置项，然后应用ReLU激活函数，最后进行max pooling。</span></span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class="line"><span class="comment">#卷积后28*28*32 池化后14*14*32</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#为了构建一个更深的网络，我们会把几个类似的层堆叠起来。卷积在每个5x5的patch（filter)中算出64个特征。</span></span><br><span class="line"><span class="comment">#卷积后14*14*64 池化后7*7*64</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片尺寸减小到7x7，我们加入一个有1024个神经元的全连接层，用于处理整个图片。</span></span><br><span class="line"><span class="comment"># 我们把池化层输出的张量reshape成一些向量，乘上权重矩阵，加上偏置，然后对其使用ReLU。</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#为了减少过拟合，我们在输出层之前加入dropout。</span></span><br><span class="line"><span class="comment"># 我们用一个placeholder来代表一个神经元的输出在dropout中保持不变的概率。在训练过程中启用dropout，在测试过程中关闭dropout。</span></span><br><span class="line">keep_prob = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一个softmax层，就像前面的单层softmax regression一样</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练和评估模型</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_conv,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line"><span class="comment">#添加一个操作来初始化我们创建的变量：</span></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">  batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">  <span class="keyword">if</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">    train_accuracy = accuracy.eval(feed_dict=&#123;</span><br><span class="line">        x:batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"step %d, training accuracy %g"</span>%(i, train_accuracy))</span><br><span class="line">  train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line"><span class="comment">#测试集上的准确率</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"test accuracy %g"</span>%accuracy.eval(feed_dict=&#123;</span><br><span class="line">    x: mnist.test.images[<span class="number">0</span>:<span class="number">200</span>], y_: mnist.test.labels[<span class="number">0</span>:<span class="number">200</span>], keep_prob: <span class="number">1.0</span>&#125;))</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;机器学习库对比&quot;&gt;&lt;a href=&quot;#机器学习库对比&quot; class=&quot;headerlink&quot; title=&quot;机器学习库对比&quot;&gt;&lt;/a&gt;机器学习库对比&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;/../assets/pic/2019-07-25-Tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200623185049201.png&quot; alt=&quot;image-20200623185049201&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h5&gt;&lt;p&gt;使用 TensorFlow, 你必须明白 TensorFlow:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;使用计算图 (graph) 来表示计算任务.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在会话 (Session) 的上下文 (context) 中执行计算图.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用 tensor 表示数据，一个张量中主要保存了三个属性：名字（name）、维度（shape）和类型（type）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过 变量 (Variable) 维护状态.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用 feed 和 fetch 可以为任意的操作(arbitrary operation) 赋值或者从其中获取数据.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达深度学习笔记汇总1-神经网络和深度学习</title>
    <link href="/2019/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>/2019/2019-07-25-深度学习笔记/</id>
    <published>2019-07-25T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="课程概述"><a href="#课程概述" class="headerlink" title="课程概述"></a>课程概述</h4><p>在第一门课程中，你将学习如何建立神经网络（包含一个深度神经网络），以及如何在数据上面训练他们。在这门课程的结尾，你将用一个深度神经网络进行辨认猫。</p><p>在第二门课中，你将进行深度学习方面的实践，学习严密地构建神经网络，如何真正让它表现良好，因此你将要学习超参数调整、正则化、诊断偏差和方差以及一些高级优化算法，比如 Momentum 和 Adam 算法，犹如黑魔法一样根据你建立网络的方式。</p><a id="more"></a><p>在第三门课中，我们将使用两周时间来学习如何结构化你的机器学习工程。事实证明，构建机器学习系统的策略改变了深度学习的错误。</p><p>在第四门课程中，我们将会提到卷积神经网络(CNN(s))，它经常被用于图像领域，你将会在第四门课程中学到如何搭建这样的模型。</p><p>最后在第五门课中，你将会学习到序列模型，以及如何将它们应用于自然语言处理，以及其它问题。序列模型包括的模型有循环神经网络（RNN）、全称是长短期记忆网络（LSTM）。你将在课程五中了解其中的时期是什么含义，并且有能力应用到自然语言处理（NLP）问题。</p><h4 id="深度学习应用"><a href="#深度学习应用" class="headerlink" title="深度学习应用"></a>深度学习应用</h4><p>对于图像应用，我们经常在神经网络上使用卷积（Convolutional Neural Network），通常缩写为 CNN。对于序列数据，例如音频，有一个时间组件，随着时间的推移，音频被播放出来，所以音频是最自然的表现。作为一维时间序列（两种英文说法 one-dimensional timeseries / temporal sequence）.对于序列数据，经常使用 RNN，一种递归神经网络（RecurrentNeural Network），语言，英语和汉语字母表或单词都是逐个出现的，所以语言也是最自然的序列数据，因此更复杂的 RNNs 版本经常用于这些应用。</p><p>从趋近于零开始，然后变成一条直线。这个函数被称作 <strong>ReLU 激活函数</strong>，它的全称是 Rectified Linear Unit。</p><h4 id="神经网络编程基础"><a href="#神经网络编程基础" class="headerlink" title="神经网络编程基础"></a>神经网络编程基础</h4><h5 id="二分类-Binary-Classification"><a href="#二分类-Binary-Classification" class="headerlink" title="二分类(Binary Classification)"></a>二分类(Binary Classification)</h5><p>所以在二分类问题中，我们的目标就是习得一个分类器，它以图片的特征向量作为输入，然后预测输出结果𝑧为 1 还是 0，也就是预测图片中是否有猫：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1566363171528.png" alt="1566363171528"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1566363254583.png" alt="1566363254583"></p><h5 id="逻辑回归-Logistic-Regression"><a href="#逻辑回归-Logistic-Regression" class="headerlink" title="逻辑回归(Logistic Regression)"></a>逻辑回归(Logistic Regression)</h5><p>详情见机器学习笔记的逻辑回归模块</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567135490347.png" alt="1567135490347"></p><p>损失函数只适用于像这样的单个训练样本，而代价函数是参数的总代价，所以在训练逻辑回归模型时候，我们需要找到合适的w和b，来让代价函数 J 的总代价降到最低。</p><h5 id="梯度下降法（Gradient-Descent-）"><a href="#梯度下降法（Gradient-Descent-）" class="headerlink" title="梯度下降法（Gradient Descent ）"></a>梯度下降法（Gradient Descent ）</h5><p>在你测试集上，通过最小化代价函数（成本函数）J(w,b)来训练的参数w和b，</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1566464612563.png" alt="1566464612563"></p><h5 id="计算图（Computation-Graph）"><a href="#计算图（Computation-Graph）" class="headerlink" title="计算图（Computation Graph）"></a>计算图（Computation Graph）</h5><p>一个神经网络的计算，都是按照前向或反向传播过程组织的。首先我们计算出一个新的网络的输出（前向过程），紧接着进行一个反向传输操作。后者我们用来计算出对应的梯度或导数。计算图解释了为什么我们用这种方式组织这些计算过程。</p><h5 id="使用计算图求导数"><a href="#使用计算图求导数" class="headerlink" title="使用计算图求导数"></a>使用计算图求导数</h5><p>在上一个视频中，我们看了一个例子使用流程计算图来计算函数J。现在我们看看流程图的描述，看看你如何利用它计算出函数J的导数。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1566465632425.png" alt="1566465632425"></p><h5 id="逻辑回归中的梯度下降"><a href="#逻辑回归中的梯度下降" class="headerlink" title="逻辑回归中的梯度下降"></a>逻辑回归中的梯度下降</h5><p>本节我们讨论怎样通过计算偏导数来实现逻辑回归的梯度下降算法。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567135805492.png" alt="1567135805492"></p><h5 id="m-个样本的梯度下降"><a href="#m-个样本的梯度下降" class="headerlink" title="m 个样本的梯度下降"></a>m 个样本的梯度下降</h5><p>之前学习了应用梯度下降在逻辑回归的一个训练样本上。现在我们想要把它应用在m个训练样本上。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567234361044.png" alt="1567234361044"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">J=0;dw1=0;dw2=0;db=0;</span><br><span class="line">for i = 1 to m</span><br><span class="line">    z(i) = wx(i)+b;</span><br><span class="line">    a(i) = sigmoid(z(i));</span><br><span class="line">    J += -[y(i)log(a(i))+(1-y(i)）log(1-a(i));</span><br><span class="line">    dz(i) = a(i)-y(i);</span><br><span class="line">    dw1 += x1(i)dz(i);</span><br><span class="line">    dw2 += x2(i)dz(i);</span><br><span class="line">    db += dz(i);</span><br><span class="line">J/= m;</span><br><span class="line">dw1/= m;</span><br><span class="line">dw2/= m;</span><br><span class="line">db/= m;</span><br><span class="line">w=w-alpha*dw</span><br><span class="line">b=b-alpha*db</span><br></pre></td></tr></table></figure><h5 id="向量化-Vectorization"><a href="#向量化-Vectorization" class="headerlink" title="向量化(Vectorization)"></a>向量化(Vectorization)</h5><p>向量化是非常基础的去除代码中 for 循环的艺术,经验提醒我，当我们在写神经网络程序时，或者在写逻(logistic)回归，或者其他神经网络模型时，应该避免写循环(loop)语句。虽然有时写循环(loop)是不可避免的，但是我们可以使用比如 numpy 的内置函数或者其他办法去计算。当你这样使用后，程序效率总是快于循环(loop)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.rand(1000000)</span><br><span class="line">b=np.random.rand(1000000)</span><br><span class="line">tic=time.time()</span><br><span class="line">c=np.dot(a,b)</span><br><span class="line">toc=time.time()</span><br><span class="line">print(&quot;Vectorization: &quot;+str(1000*(toc-tic))+&quot;ms&quot;)</span><br><span class="line">print(c)</span><br><span class="line">c=0</span><br><span class="line">tic=time.time()</span><br><span class="line">for i in range(1000000):</span><br><span class="line">    c+=a[i]*b[i]</span><br><span class="line">toc=time.time()</span><br><span class="line">print(&quot;For loop: &quot;+str(1000*(toc-tic))+&quot;ms&quot;)</span><br><span class="line">print(c)</span><br><span class="line">-------------------------------------</span><br><span class="line">Vectorization: 0.9992122650146484ms</span><br><span class="line">250263.52748534942</span><br><span class="line">For loop: 486.6981506347656ms</span><br><span class="line">250263.52748535923</span><br></pre></td></tr></table></figure><h5 id="向量化逻辑回归"><a href="#向量化逻辑回归" class="headerlink" title="向量化逻辑回归"></a>向量化逻辑回归</h5><p>本次视频中我们将讨论如何实现逻辑回归的向量化计算</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567233331653.png" alt="1567233331653"></p><h5 id="向量化-logistic-回归的梯度输出"><a href="#向量化-logistic-回归的梯度输出" class="headerlink" title="向量化 logistic  回归的梯度输出"></a>向量化 logistic  回归的梯度输出</h5><p>本次视频的重点是如何同时向量化地计算 m个数据的梯度，并且实现一个非常高效的逻辑回归算法(Logistic Regression)。dz为预测值与实际值得误差，dw为误差在参数w上的偏导数</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567233610847.png" alt="1567233610847"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567233540892.png" alt="1567233540892"></p><p>现在我们利用前五个公式完成了前向和后向传播，也实现了对所有训练样本进行预测和求导，再利用后两个公式，梯度下降更新参数，这样通过一次迭代实现一次梯度下降。</p><h5 id="Python-中的广播（Broadcasting）"><a href="#Python-中的广播（Broadcasting）" class="headerlink" title="Python  中的广播（Broadcasting）"></a>Python  中的广播（Broadcasting）</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567236406729.png" alt="1567236406729"></p><p>下面再来解释一下 A.sum(axis = 0) 中的参数 axis 。axis  用来指明将要进行的运算在是沿着哪个轴执行，在 numpy  中，0  轴是垂直的，也就是列，而 1 轴是水平的，也就是行。</p><p>第二个 A/cal.reshape(1,4) 指令则调用了 numpy 中的广播机制：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567236488836.png" alt="1567236488836"></p><p>如果两个数组的后缘维度的轴长度相符或其中一方的轴长度为 1 ，则认为它们是广播兼容的。广播会在缺失维度和轴长度为 1 的维度上进行。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567236637687.png" alt="1567236637687"></p><h5 id="关于numpy向量的说明"><a href="#关于numpy向量的说明" class="headerlink" title="关于numpy向量的说明"></a>关于numpy向量的说明</h5><p>本节主要讲 Python 中的 numpy 一维数组的特性，以及与行向量或列向量的区别，并介绍了老师在实际应用中的一些小技巧，去避免在 coding 中由于这些特性而导致的 bug。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567237433322.png" alt="1567237433322"></p><h5 id="Jupyter-快速入门"><a href="#Jupyter-快速入门" class="headerlink" title="Jupyter 快速入门"></a>Jupyter 快速入门</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">命令模式：</span><br><span class="line">    shift + enter : 运行当前单元后，选中下一单元</span><br><span class="line">    ctrl + enter ：只运行当前单元</span><br><span class="line">    Enter: 进入编辑模式</span><br><span class="line">    Y ： 切换code状态</span><br><span class="line">    M ： 切换Markdown状态</span><br><span class="line">    A ：在上方插入单元格</span><br><span class="line">    B ：在下方插入单元格</span><br><span class="line">    连按两次D ：删除当前单元格</span><br><span class="line">    连按两次 I ： 中断内核运行</span><br><span class="line">    C ：复制当前单元格</span><br><span class="line">    shift + v ：粘贴单元格</span><br><span class="line">    shift + Tab：查看当前函数的说明（光标要在函数的位置内如下图所示）</span><br><span class="line"></span><br><span class="line">编辑模式：</span><br><span class="line">    编辑模式暂时用的不多，用到的时候再补充</span><br><span class="line">    shift + enter : 运行当前单元后，选中下一单元</span><br><span class="line">    ctrl + enter ：只运行当前单元</span><br><span class="line">    Esc or Ctrl-M: 进入命令模式</span><br><span class="line"></span><br><span class="line">高级使用技巧</span><br><span class="line">    Cell 内 Undo 用 CTRL + Z，如恢复删除的代码</span><br><span class="line">    Cell 外 Undo 用 ESC + Z，如恢复删除的 Cell</span><br></pre></td></tr></table></figure><h5 id="logistic-损失函数的解释"><a href="#logistic-损失函数的解释" class="headerlink" title="logistic  损失函数的解释"></a>logistic  损失函数的解释</h5><p>在逻辑回归中我们需要最小化损失函数，因此最小化损失函数与最大化条件概率的对数关联起来了</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567733781692.png" alt="1567733781692"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567733935641.png" alt="1567733935641"></p><h3 id="浅层神经网络"><a href="#浅层神经网络" class="headerlink" title="浅层神经网络"></a>浅层神经网络</h3><h5 id="神经网络概述"><a href="#神经网络概述" class="headerlink" title="神经网络概述"></a>神经网络概述</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567734655114.png" alt="1567734655114"></p><h5 id="神经网络的表示"><a href="#神经网络的表示" class="headerlink" title="神经网络的表示"></a>神经网络的表示</h5><p>在传统的符号使用中，如果你阅读研究论文或者在这门课中，你会看到人们将这个神经网络称为一个两层的神经网络，因为我们不将输入层看作一个标准的层。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567735347366.png" alt="1567735347366"></p><p>x表示输入特征，a表示每个神经元的输出，W表示特征的权重，上标表示神经网络的层数（隐藏层为 1），下标表示该层的第几个神经元。这是神经网络的 符号惯例.</p><h5 id="神经网络的计算"><a href="#神经网络的计算" class="headerlink" title="神经网络的计算"></a>神经网络的计算</h5><p>通过本视频，你能够根据给出的一个单独的输入特征向量，运用四行代码计算出一个简单神经网络的输出。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567735737378.png" alt="1567735737378"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567735912423.png" alt="1567735912423"></p><h5 id="多样本神经网络的向量化计算"><a href="#多样本神经网络的向量化计算" class="headerlink" title="多样本神经网络的向量化计算"></a><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567736049339.png" alt="1567736049339">多样本神经网络的向量化计算</h5><p>在这个视频，将会了解到如何向量化多个训练样本，并计算出结果。该过程与你在逻辑回归中所做类似。逻辑回归是将各个训练样本组合成矩阵，对矩阵的各列进行计算。神经网络是通过对逻辑回归中的等式简单的变形，让神经网络计算出输出值。这种计算是所有的训练样本同时进行的，以下是实现它具体的步骤：</p><p><strong>非向量化形式</strong>的实现，而且要计算出它的预测值，对于所有训练样本，需要让i从 1 到m实现这四个等式：a[2](1)是指第i训练样本而[2]是指第二层。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567740474532.png" alt="1567740474532"></p><p><strong>向量化实现</strong>从水平上看，矩阵A代表了各个训练样本。从竖直上看，矩阵A的不同的索引对应于不<br>同的隐藏单元。对于矩阵Z ， X情况也类似，水平方向上，对应于不同的训练样本；竖直方向上，对应不<br>同的输入特征，而这就是神经网络输入层中各个节点。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567740766598.png" alt="1567740766598"></p><h5 id="向量化实现的解释"><a href="#向量化实现的解释" class="headerlink" title="向量化实现的解释"></a>向量化实现的解释</h5><p>在这个视频中，我们将会继续了解到，为什么上一节中写下的公式就是将多个样本向量化的正确实现。</p><p> W [1] 是一个矩阵，x(1) ,x(2) ,x (3) 都是列向量，矩阵乘以列向量得到列向量，下面将它们用图形直观的表示出来</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567752808420.png" alt="1567752808420"></p><h5 id="激活函数（Activation-functions-）"><a href="#激活函数（Activation-functions-）" class="headerlink" title="激活函数（Activation functions ）"></a>激活函数（Activation functions ）</h5><p>使用一个神经网络时，需要决定使用哪种激活函数用隐藏层上，哪种用在输出节点上。到目前为止，之前的视频只用过 sigmoid 激活函数，但是，有时其他的激活函数效果会更好。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567753315120.png" alt="1567753315120"></p><p>在讨论优化算法时，有一点要说明：我基本已经不用 sigmoid 激活函数了，tanh 函数在所有场合都优于 sigmoid 函数。但有一个例外：在二分类的问题中，对于输出层，因为y的值是 0 或 1，所以想让y^ 的数值介于 0 和 1 之间，而不是在-1 和+1 之间。所以需要使用 sigmoid 激活函数。</p><p>sigmoid 函数和 tanh 函数两者共同的缺点是，在z特别大或者特别小的情况下，导数的梯度或者函数的斜率会变得特别小，最后就会接近于 0，导致降低梯度下降的速度。</p><p>如果输出是 0、1 值（二分类问题），则输出层选择 sigmoid 函数，然后其它的所有单元都选择 Relu(修正线性单元的函数) 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sigmoid 激活函数：除了输出层是一个二分类问题基本不会用它。</span><br><span class="line">tanh 激活函数：tanh 是非常优秀的，几乎适合所有场合。</span><br><span class="line">ReLu 激活函数：最常用，如果不确定用哪个激活函数，就使用 ReLu 或者Leaky ReLu。</span><br></pre></td></tr></table></figure><h5 id="为什么需要非线性激活函数"><a href="#为什么需要非线性激活函数" class="headerlink" title="为什么需要非线性激活函数"></a>为什么需要非线性激活函数</h5><p>如果你是用线性激活函数或者叫恒等激励函数，那么神经网络只是把输入线性组合再输出。如果你使用线性激活函数或者没有使用一个激活函数，那么无论你的神经网络有多少层一直在做的只是计算线性函数，所以不如直接去掉全部隐藏层。</p><p>事实证明如果你在隐藏层用线性激活函数，在输出层用 sigmoid 函数，那么这个模型的复杂度和没有任何隐藏层的标准 Logistic 回归是一样的.</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567753897268.png" alt="1567753897268"></p><p>总而言之，不能在隐藏层用线性激活函数，可以用 ReLU 或者 tanh 或者 leaky ReLU 或者其他的非线性激活函数，唯一可以用线性激活函数的通常就是输出层。</p><h5 id="激活函数的导数"><a href="#激活函数的导数" class="headerlink" title="激活函数的导数"></a>激活函数的导数</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567755100768.png" alt="1567755100768"></p><h5 id="神经网络的梯度下降"><a href="#神经网络的梯度下降" class="headerlink" title="神经网络的梯度下降"></a>神经网络的梯度下降</h5><p>在这个视频中，我会给你实现反向传播或者说梯度下降算法的方程组</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567755679332.png" alt="1567755679332"></p><p>训练参数需要做梯度下降，在训练神经网络的时候，随机初始化参数很重要，而不是初始化成全零。当你参数初始化成某些值后，每次梯度下降都会循环计算以下预测值：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567755790140.png" alt="1567755790140"></p><p>下图是正向和反向传播的公式，这些都是针对所有样本进行过向量化。axis=1 表示水平相加求和， keepdims 是防止python 输出那些古怪的秩数(n,)</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567755423004.png" alt="1567755423004"></p><h5 id="直观理解反向传播"><a href="#直观理解反向传播" class="headerlink" title="直观理解反向传播"></a>直观理解反向传播</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567757169699.png" alt="1567757169699"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567757112382.png" alt="1567757112382"></p><h5 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h5><p>当你训练神经网络时，权重随机初始化是很重要的。对于逻辑回归，把权重初始化为 0当然也是可以的。但是对于一个神经网络，如果你把权重或者参数都初始化为 0，那么梯度下降将不会起作用。</p><p>如果你要初始化成 0，由于所有的隐含单元都是对称的，无论你运行梯度下降多久，他们一直计算同样的函数。这没有任何帮助，因为你想要两个不同的隐含单元计算不同的函数，这个 问 题 的 解 决 方 法 就 是 随 机 初 始 化 参 数 。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567757689257.png" alt="1567757689257"></p><h4 id="深层神经网络"><a href="#深层神经网络" class="headerlink" title="深层神经网络"></a>深层神经网络</h4><h5 id="深层神经网络-1"><a href="#深层神经网络-1" class="headerlink" title="深层神经网络"></a>深层神经网络</h5><p>但是在过去的几年中，DLI（深度学习学院 deep learning institute）已经意识到有一些函数，只有非常深的神经网络能学会，而更浅的模型则办不到。尽管对于任何给定的问题很难去提前预测到底需要多深的神经网络，所以先去尝试逻辑回归，尝试一层然后两层隐含层，然后把隐含层的数量看做是另一个可以自由选择大小的超参数，然后再保留交叉验证数据上评估，或者用你的开发集来评估。<br>我们再看下深度学习的符号定义：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567758056574.png" alt="1567758056574"></p><h5 id="前向传播和反向传播"><a href="#前向传播和反向传播" class="headerlink" title="前向传播和反向传播"></a>前向传播和反向传播</h5><p>之前我们学习了构成深度神经网络的基本模块，比如每一层都有前向传播步骤以及一个相反的反向传播步骤，这次视频我们讲讲如何实现这些步骤。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567758554030.png" alt="1567758554030"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567758516983.png" alt="1567758516983"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567758732152.png" alt="1567758732152"></p><h5 id="深层网络中的前向传播"><a href="#深层网络中的前向传播" class="headerlink" title="深层网络中的前向传播"></a>深层网络中的前向传播</h5><p>我们先来看对其中一个训练样本 x 如何应用前向传播，之后讨论向量化的版本。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567759099948.png" alt="1567759099948"></p><h5 id="核对矩阵的维数"><a href="#核对矩阵的维数" class="headerlink" title="核对矩阵的维数"></a>核对矩阵的维数</h5><p>当实现深度神经网络的时候，其中一个我常用的检查代码是否有错的方法就是拿出一张纸过一遍算法中矩阵的维数。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567759963479.png" alt="1567759963479"></p><p>向量化后：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567760037825.png" alt="1567760037825"></p><p>在你做深度神经网络的反向传播时，一定要确认所有的矩阵维数是前后一致的，可以大大提高代码通过率。</p><h5 id="为什么使用深层表示"><a href="#为什么使用深层表示" class="headerlink" title="为什么使用深层表示"></a>为什么使用深层表示</h5><p>首先，深度网络究竟在计算什么？如果你在建一个人脸识别或是人脸检测系统，深度神经网络所做的事就是，当你输入一张脸部的照片，然后你可以把深度神经网络的第一层，当成一个特征探测器或者边缘探测器。</p><p>你可以直觉上把这种神经网络的前几层当作探测简单的函数，比如边缘，之后把它们跟后几层结合在一起，那么总体上就能学习更多复杂的函数。这些图的意义，我们在学习卷积神经网络的时候再深入了解。</p><p>所以深度神经网络的这许多隐藏层中，较早的前几层能学习一些低层次的简单特征，等到后几层，就能把简单的特征结合起来，去探测更加复杂的东西。比如你录在音频里的单词、词组或是句子，然后就能运行语音识别了。同时我们所计算的之前的几层，也就是相对简单的输入函数，比如图像单元的边缘什么的。到网络中的深层时，你实际上就能做很多复杂的事，比如探测面部或是探测单词、短语或是句子。</p><p>深层的网络隐藏单元数量相对较少，隐藏层数目较多，如果浅层的网络想要达到同样的计算结果则需要指数级增长的单元数量才能达到。</p><h5 id="搭建神经网络块"><a href="#搭建神经网络块" class="headerlink" title="搭建神经网络块"></a>搭建神经网络块</h5><p>这周的前几个视频和之前几周的视频里，你已经看到过正向反向传播的基础组成部分了，它们也是深度神经网络的重要组成部分，现在我们来用它们建一个深度神经网络。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568268534183.png" alt="1568268534183"></p><p>这是一个层数较少的神经网络，我们选择其中一层（方框部分），从这一层的计算着手。然后如果实现了这两个函数（正向和反向），然后神经网络的计算过程会是这样的：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568268627285.png" alt="1568268627285"></p><p>在编程练习中你缓存了Z，还有W和b对吧？从实现角度上看，我认为是一个很方便的方法，可以将参数复制到你在计算反向传播时所需要的地方。现在你们见过实现深度神经网络的基本元件，在每一层中有一个正向传播步骤，以及对应的反向传播步骤，以及把信息从一步传递到另一步的缓存。</p><h5 id="参数-VS-超参数（Parameters-vs-Hyperparameters-）"><a href="#参数-VS-超参数（Parameters-vs-Hyperparameters-）" class="headerlink" title="参数 VS  超参数（Parameters vs Hyperparameters ）"></a>参数 VS  超参数（Parameters vs Hyperparameters ）</h5><p>想要你的深度神经网络起很好的效果，你还需要规划好你的参数以及超参数。<br>什么是超参数？<br>比如算法中的 learning rate α（学习率）、iterations(梯度下降法循环的数量)、L（隐藏层数目）、n [l] （隐藏层单元数目）、choice of activation function（激活函数的选择）都需要你来设置，这些数字实际上控制了最后的参数W和b的值，所以它们被称作超参数。</p><p>实际上深度学习有很多不同的超参数，之后我们也会介绍一些其他的超参数，如momentum、mini batch size、regularization parameters 等等</p><p>如何寻找超参数的最优值？走 Idea—Code—Experiment—Idea 这个循环，尝试各种不同的参数，实现模型并观察是否成功，然后再迭代。</p><p>有一条经验规律：经常试试不同的超参数，勤于检查结果，看看有没有更好的超参数取值，你将会得到设定超参数的直觉。</p><h4 id="深度学习的实践层面"><a href="#深度学习的实践层面" class="headerlink" title="深度学习的实践层面"></a>深度学习的实践层面</h4><p>本周，我们将继续学习如何有效运作神经网络，内容涉及超参数调优，如何构建数据，以及如何确保优化算法快速运行，从而使学习算法在合理时间内完成自我学习。</p><p>在配置训练、验证和测试数据集的过程中做出正确决策会在很大程度上帮助大家创建高效的神经网络。训练神经网络时，我们需要做出很多决策，例如：<br>神经网络分多少层；每层含有多少个隐藏单元；学习速率是多少；各层采用哪些激活函数。</p><h5 id="训练，验证，测试集（Train-Dev-Test-sets-）"><a href="#训练，验证，测试集（Train-Dev-Test-sets-）" class="headerlink" title="训练，验证，测试集（Train / Dev / Test sets ）"></a>训练，验证，测试集（Train / Dev / Test sets ）</h5><p>假设这是训练数据，我用一个长方形表示，我们通常会将这些数据划分成几部分，一部分作为训练集，一部分作为简单交叉验证集，有时也称之为验证集，方便起见，我就叫它验证集（dev set），其实都是同一个概念，最后一部分则作为测试集。<br>接下来，我们开始对训练执行算法，通过验证集或简单交叉验证集选择最好的模型，经过充分验证，我们选定了最终模型，然后就可以在测试集上进行评估了，为了无偏评估算法的运行状况。<br>在机器学习发展的小数据量时代，常见做法是将所有数据三七分，就是人们常说的 70%验证集，30%测试集，如果没有明确设置验证集，也可以按照 60%训练，20%验证和 20%测试集来划分。这是前几年机器学习领域普遍认可的最好的实践方法。</p><p>但是在大数据时代，我们现在的数据量可能是百万级别，那么验证集和测试集占数据总量的比例会趋向于变得更小。因为验证集的目的就是验证不同的算法，检验哪种算法更有效，因此，验证集要足够大才能评估，比如 2 个甚至 10 个不同算法，并迅速判断出哪种算法更有效。我们可能不需要拿出 20%的数据作为验证集。</p><p>我建议大家要确保验证集和测试集的数据来自同一分布，关于这个问题我也会多讲一些。因为你们要用验证集来评估不同的模型，尽可能地优化性能。如果验证集和测试集来自同一个分布就会很好。</p><p>但由于深度学习算法需要大量的训练数据，为了获取更大规模的训练数据集，我们可以采用当前流行的各种创意策略，例如，网页抓取，代价就是训练集数据与验证集和测试集数据有可能不是来自同一分布。</p><h5 id="偏差，方差（Bias-Variance）"><a href="#偏差，方差（Bias-Variance）" class="headerlink" title="偏差，方差（Bias /Variance）"></a>偏差，方差（Bias /Variance）</h5><p>假设这就是数据集，如果给这个数据集拟合一条直线，可能得到一个逻辑回归拟合，但它并不能很好地拟合该数据，这是高偏差（high bias）的情况，我们称为“欠拟合” （underfitting）。</p><p>相反的如果我们拟合一个非常复杂的分类器，比如深度神经网络或含有隐藏单元的神经网络，可能就非常适用于这个数据集，但是这看起来也不是一种很好的拟合方式分类器方差较高（high variance），数据过度拟合（overfitting）。</p><p>在两者之间，可能还有一些像图中这样的，复杂程度适中，数据拟合适度的分类器，这个数据拟合看起来更加合理，我们称之为“适度拟合”（just right）是介于过度拟合和欠拟合中间的一类。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563967374118.png" alt="1563967374118"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568683382157.png" alt="1568683382157"></p><p>总结一下，我们讲了如何通过分析在训练集上训练算法产生的误差和验证集上验证算法产生的误差来诊断算法是否存在高偏差和高方差，是否两个值都高，或者两个值都不高，根据算法偏差和方差的具体情况决定接下来你要做的工作，下节课，我会根据算法偏差和方差的高低情况讲解一些机器学习的基本方法，帮助大家更系统地优化算法。</p><h5 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h5><p>这是我在训练神经网络时用到基本方法，初始模型训练完成后，我首先要知道算法的偏差高不高，如果偏差较高，试着评估训练集或训练数据的性能。如果偏差的确很高，甚至无法拟合训练集，那么你要做的就是选择一个新的网络，比如含有更多隐藏层或者隐藏单元的网络，或者花费更多时间来训练网络，或者尝试更先进的优化算法，后面我们会讲到这部分内容。你也可以尝试其他方法，可能有用，也可能没用。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568792151018.png" alt="1568792151018"></p><p>一会儿我们会看到许多不同的神经网络架构，或许你能找到一个更合适解决此问题的新的网络架构，加上括号，因为其中一条就是你必须去尝试，可能有用，也可能没用，不过采用规模更大的网络通常都会有所帮助，延长训练时间不一定有用，但也没什么坏处。训练学习算法时，我会不断尝试这些方法，直到解决掉偏差问题，这是最低标准，反复尝试，直到可以拟合数据为止，至少能够拟合训练集。</p><p>如果方差高，最好的解决办法就是采用更多数据，如果你能做到，会有一定的帮助，但有时候，我们无法获得更多数据，我们也可以尝试通过正则化来减少过拟合</p><p>只要正则适度，通常构建一个更大的网络便可以，在不影响方差的同时减少偏差，而采用更多数据通常可以在不过多影响偏差的同时减少方差。</p><h5 id="正则化（Regularization）"><a href="#正则化（Regularization）" class="headerlink" title="正则化（Regularization）"></a>正则化（Regularization）</h5><p>深度学习可能存在过拟合问题——高方差，有两个解决方法，一个是正则化，另一个是准备更多的数据，这是非常可靠的方法，但你可能无法时时刻刻准备足够多的训练数据或者获取更多数据的成本很高，但正则化通常有助于避免过拟合或减少你的网络误差。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568792614324.png" alt="1568792614324"></p><p>L2正则化是最常见的正则化类型，你们可能听说过L1正则化，L1正则化，加的不是L2范数.如果用的是L1正则化，w最终会是稀疏的，也就是说w向量中有很多 0，有人说这样有利于压缩模型，因为集合中参数均为 0，存储模型所占用的内存更少。实际上，虽然𝑀1正则化使模型变得稀疏，却没有降低太多存储内存，所以我认为这并不是𝑀1正则化的目的，至少不是为了压缩模型，人们在训练网络时，越来越倾向于使用L2正则化。</p><h5 id="为-什-么-正-则-化-有-利-于-预-防-过-拟-合"><a href="#为-什-么-正-则-化-有-利-于-预-防-过-拟-合" class="headerlink" title="为 什 么 正 则 化 有 利 于 预 防 过 拟 合"></a>为 什 么 正 则 化 有 利 于 预 防 过 拟 合</h5><p>直观上理解就是如果正则化λ设置得足够大，权重矩阵𝑋被设置为接近于 0 的值，直观理解就是把多隐藏单元的权重设为 0，于是基本上消除了这些隐藏单元的许多影响。如果是这种情况，这个被大大简化了的神经网络会变成一个很小的网络，小到如同一个逻辑回归单元，可是深度却很大，它会使这个网络从过度拟合的状态更接近高偏差状态。</p><p>但是λ会存在一个中间值，于是会有一个接近“Just Right”的中间状态。</p><h5 id="dropout-正则化（Dropout-Regularization"><a href="#dropout-正则化（Dropout-Regularization" class="headerlink" title="dropout  正则化（Dropout Regularization)"></a>dropout  正则化（Dropout Regularization)</h5><p>除了L2正则化，还有一个非常实用的正则化方法——“Dropout（随机失活）”.</p><p>我们复制这个神经网络，dropout 会遍历网络的每一层，并设置消除神经网络中节点的概率。假设网络中的每一层，每个节点都以抛硬币的方式设置概率，每个节点得以保留和消除的概率都是 0.5，设置完节点概率，我们会消除一些节点，然后删除掉从该节点进出的连线，最后得到一个节点更少，规模更小的网络，然后用 backprop 方法进行训练。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568794165306.png" alt="1568794165306"></p><p>这是网络节点精简后的一个样本，对于其它样本，我们照旧以抛硬币的方式设置概率，保留一类节点集合，删除其它类型的节点集合。对于每个训练样本，我们都将采用一个精简后神经网络来训练它，这种方法似乎有点怪，单纯遍历节点，编码也是随机的，可它真的有效。</p><h5 id="理解-dropout"><a href="#理解-dropout" class="headerlink" title="理解 dropout"></a>理解 dropout</h5><p>Dropout 可以随机删除网络中的神经单元，他为什么可以通过正则化发挥如此大的作用呢？<br>直观上理解：不要依赖于任何一个特征，因为该单元的输入可能随时被清除，因此该单元通过这种方式传播下去，并为单元的四个输入增加一点权重，通过传播所有权重，dropout将产生收缩权重的平方范数的效果，和之前讲的L2正则化类似；实施 dropout 的结果实它会压缩权重，并完成一些预防过拟合的外层正则化；𝑀2对不同权重衰减是不同的，它取决于激活函数倍增的大小</p><p>总结一下，dropout 的功能类似于L2正则化，与L2正则化不同的是应用方式不同会带来一点点小变化，甚至更适用于不同的输入</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568794569310.png" alt="1568794569310"></p><p>第二个直观认识是，我们从单个神经元入手，如图，这个单元的工作就是输入并生成一些有意义的输出。通过 dropout，该单元的输入几乎被消除，有时这两个单元会被删除，有时会删除其它单元，就是说，我用紫色圈起来的这个单元，它不能依靠任何特征，因为特征都有可能被随机清除，或者说该单元的输入也都可能被随机清除。我不愿意把所有赌注都放在一个节点上，不愿意给任何一个输入加上太多权重，因为它可能会被删除，因此该单元将通过这种方式积极地传播开，并为单元的四个输入增加一点权重，通过传播所有权重，dropout 将产生收缩权重的平方范数的效果，和我们之前讲过的L2正则化类似，实施 dropout的结果是它会压缩权重，并完成一些预防过拟合的外层正则化。</p><p>总结一下，如果你担心某些层比其它层更容易发生过拟合，可以把某些层的 keep-prob值设置得比其它层更低，缺点是为了使用交叉验证，你要搜索更多的超级参数，另一种方案是在一些层上应用 dropout，而有些层不用 dropout，应用 dropout 的层只含有一个超级参数，就是 keep-prob。</p><p>计算视觉中的输入量非常大，输入太多像素，以至于没有足够的数据，所以 dropout在计算机视觉中应用得比较频繁，有些计算机视觉研究人员非常喜欢用它，几乎成了默认的选择，但要牢记一点，dropout 是一种正则化方法，它有助于预防过拟合，因此除非算法过拟合，不然我是不会使用 dropout 的，所以它在其它领域应用得比较少，主要存在于计算机视觉领域，因为我们通常没有足够的数据，所以一直存在过拟合，这就是有些计算机视觉研究人员如此钟情于 dropout 函数的原因。直观上我认为不能概括其它学科。</p><h5 id="其他正则化方法"><a href="#其他正则化方法" class="headerlink" title="其他正则化方法"></a>其他正则化方法</h5><p>一.数据扩增</p><p>假设你正在拟合猫咪图片分类器，如果你想通过扩增训练数据来解决过拟合，但扩增数据代价高，而且有时候我们无法扩增数据，但我们可以通过添加这类图片来增加训练集。通过随意翻转和裁剪图片，我们可以增大数据集，额外生成假训练数据。</p><p>二.early stopping</p><p>验证集误差通常会先呈下降趋势，然后在某个节点处开始上升，early stopping 的作用是，你会说，神经网络已经在这个迭代过程中表现得很好了，我们在此停止训练吧，得到验证集误差</p><p>当你还未在神经网络上运行太多迭代过程的时候，参数𝑥接近 0，因为随机初始化𝑥值时，它的值可能都是较小的随机值，所以在你长期训练神经网络之前𝑥依然很小，在迭代过程和训练过程中𝑥的值会变得越来越大，比如在这儿，神经网络中参数𝑥的值已经非常大了，所以 early stopping 要做就是在中间点停止迭代过程，我们得到一个𝑥值中等大小的弗罗贝尼乌斯范数</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568796728786.png" alt="1568796728786"></p><p>我认为机器学习过程包括几个步骤，其中一步是选择一个算法来优化代价函数J，我们有很多种工具来解决这个问题，如梯度下降，后面我会介绍其它算法，例如 Momentum，RMSprop 和 Adam 等等，但是优化代价函数𝐾之后，我也不想发生过拟合，也有一些工具可以解决该问题，比如正则化，扩增数据等等</p><p>一组工具优化代价函数J，机器学习就会变得更简单，在重点优化代价函数𝐾时，你只需要留意w和b，J(w,b)的值越小越好，你只需要想办法减小这个值，其它的不用关注。然后，预防过拟合还有其他任务，换句话说就是减少方差，这一步我们用另外一套工具来实现，这个原理有时被称为“正交化”。</p><p>但对我来说 early stopping 的主要缺点就是你不能独立地处理这两个问题，因为提早停止梯度下降，也就是停止了优化代价函数J，因为现在你不再尝试降低代价函数J，所以代价函数J的值可能不够小，同时你又希望不出现过拟合，你没有采取不同的方式来解决这两个问题，而是用一种方法同时解决两个问题，这样做的结果是我要考虑的东西变得更复杂。</p><h5 id="归一化输入（Normalizing-inputs"><a href="#归一化输入（Normalizing-inputs" class="headerlink" title="归一化输入（Normalizing inputs)"></a>归一化输入（Normalizing inputs)</h5><p>训练神经网络，其中一个加速训练的方法就是归一化输入。假设一个训练集有两个特征，输入特征为 2 维，归一化需要两个步骤：1.零均值2.归一化方差；</p><p>然而如果你归一化特征，代价函数平均起来看更对称，如果你在上图这样的代价函数上运行梯度下降法，你必须使用一个非常小的学习率。因为如果是在这个位置，梯度下降法可能需要多次迭代过程，直到最后找到最小值。但如果函数是一个更圆的球形轮廓，那么不论从哪个位置开始，梯度下降法都能够更直接地找到最小值，你可以在梯度下降法中使用较大步长，而不需要像在左图中那样反复执行。</p><p>当然，实际上w是一个高维向量，因此用二维绘制w并不能正确地传达并直观理解，但总地直观理解是代价函数会更圆一些，而且更容易优化.</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568797570701.png" alt="1568797570701"></p><h5 id="梯度消失-梯度爆炸（Vanishing-Exploding-gradients-）"><a href="#梯度消失-梯度爆炸（Vanishing-Exploding-gradients-）" class="headerlink" title="梯度消失/ 梯度爆炸（Vanishing / Exploding gradients ）"></a>梯度消失/ 梯度爆炸（Vanishing / Exploding gradients ）</h5><p>训练神经网络，尤其是深度神经所面临的一个问题就是梯度消失或梯度爆炸，也就是你训练神经网络的时候，导数或坡度有时会变得非常大，或者非常小，甚至于以指数方式变小，这加大了训练的难度。</p><p>对于当前的神经网络，假设L= 150，最近 Microsoft 对 152 层神经网络的研究取得了很大进展，在这样一个深度神经网络中，如果激活函数或梯度函数以与𝑀相关的指数增长或递减，它们的值将会变得极大或极小，从而导致训练难度上升，尤其是梯度指数小于L时，梯度下降算法的步长会非常非常小，梯度下降算法将花费很长时间来学习。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568797824859.png" alt="1568797824859"></p><p>如上图：权重W只比 1 略大一点，或者说只是比单位矩阵大一点，深度神经网络的激活函数将爆炸式增长，如果W比 1 略小一点，激活函数将以指数级递减.</p><h5 id="神经网络的权重初始化"><a href="#神经网络的权重初始化" class="headerlink" title="神经网络的权重初始化"></a>神经网络的权重初始化</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568798195177.png" alt="1568798195177"></p><h5 id="梯度的数值逼近和梯度检验（Gradient-checking-）"><a href="#梯度的数值逼近和梯度检验（Gradient-checking-）" class="headerlink" title="梯度的数值逼近和梯度检验（Gradient checking ）"></a>梯度的数值逼近和梯度检验（Gradient checking ）</h5><p>在实施 backprop 时，有一个测试叫做梯度检验，它的作用是确保 backprop 正确实施。</p><p>梯度检验帮我们节省了很多时间，也多次帮我发现 backprop 实施过程中的 bug，接下来，我们看看如何利用它来调试或检验 backprop 的实施是否正确。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568798556182.png" alt="1568798556182"></p><p>在实施神经网络时，我经常需要执行 foreprop 和 backprop，然后我可能发现这个梯度检验有一个相对较大的值，我会怀疑存在 bug，然后开始调试，调试，调试，调试一段时间后，我得到一个很小的梯度检验值，现在我可以很自信的说，神经网络实施是正确的。</p><h5 id="梯度检验应用的注意事项"><a href="#梯度检验应用的注意事项" class="headerlink" title="梯度检验应用的注意事项"></a>梯度检验应用的注意事项</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568798673304.png" alt="1568798673304"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先，不要在训练中使用梯度检验，它只用于调试。</span><br><span class="line">第二点，如果算法的梯度检验失败，要检查所有项，检查每一项，并试着找出 bug</span><br><span class="line">第三点，在实施梯度检验时，如果使用正则化，请注意正则项。</span><br><span class="line">第四点，梯度检验不能与 dropout 同时使用，因为每次迭代过程中，dropout 会随机消除隐藏层单元的不同子集，难以计算 dropout 在梯度下降上的代价函数𝐾。</span><br></pre></td></tr></table></figure><p>回顾这一周，我们讲了如何配置训练集，验证集和测试集，如何分析偏差和方差，如何处理高偏差或高方差以及高偏差和高方差并存的问题，如何在神经网络中应用不同形式的正则化，如𝑀2正则化和 dropout，还有加<br>快神经网络训练速度的技巧，最后是梯度检验。</p><h4 id="优化算法-Optimization-algorithms"><a href="#优化算法-Optimization-algorithms" class="headerlink" title="优化算法 (Optimization algorithms)"></a>优化算法 (Optimization algorithms)</h4><p>本周将学习优化算法，这能让你的神经网络运行得更快。机器学习的应用是一个高度依赖经验的过程，伴随着大量迭代的过程，你需要训练诸多模型，才能找到合适的那一个，所以，优化算法能够帮助你快速训练模型。</p><h5 id="Mini-batch梯度下降"><a href="#Mini-batch梯度下降" class="headerlink" title="Mini-batch梯度下降"></a>Mini-batch梯度下降</h5><p>向量化能够让你相对较快地处理所有m个样本。如果𝑛很大的话，处理速度仍然缓慢。比如说，如果m是 500 万或 5000 万或者更大的一个数，在对整个训练集执行梯度下降法时，你要做的是，你必须处理整个训练集，然后才能进行一步梯度下降法，然后你需要再重新处理 500 万个训练样本，才能进行下一步梯度下降法。</p><p>你可以把训练集分割为小一点的子集训练，这些子集被取名为 mini-batch，假设每一个子集中只有 1000 个样本，那么把其中的x (1) 到x (1000) 取出来，将其称为第一个子训练集，也叫做 mini-batch，然后你再取出接下来的 1000 个样本，从x (1001) 到x(2000) ，然后再取 1000个样本，以此类推。</p><p>在继续课程之前，先确定一下我的符号，之前我们使用了上角小括号(i)表示训练集里的值，所以x (i) 是第i个训练样本。我们用了上角中括号[l]来表示神经网络的层数，z [l] 表示神经网络中第l层的z值，我们现在引入了大括号t来代表不同的mini-batch，所以我们有x {t} 和Y{t} ，检查一下自己是否理解无误。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568949475847.png" alt="1568949475847"></p><p>在训练集上运行 mini-batch 梯度下降法，你运行 for t=1……5000 ，因为我们有 5000 个各有 1000 个样本的组，在 for 循环里你要做得基本就是对X{t} 和Y{t} 执行一步梯度下降法。首先执行前向传播，接下来你要计算损失成本函数J,接下来，你执行反向传播来计算J{t} 的梯度,然后你更新加权值.</p><p>这是使用 mini-batch 梯度下降法训练样本的一步，我写下的代码也可被称为进行“一代”（1 epoch）的训练。一代这个词意味着只是一次遍历了训练集。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568949569181.png" alt="1568949569181"></p><h5 id="理解-mini-batch-梯度下降法"><a href="#理解-mini-batch-梯度下降法" class="headerlink" title="理解 mini-batch  梯度下降法"></a>理解 mini-batch  梯度下降法</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568949864186.png" alt="1568949864186"></p><p>你需要决定的变量之一是 mini-batch 的大小，m就是训练集的大小.</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1568950046292.png" alt="1568950046292"></p><p>首先，如果训练集较小，直接使用 batch 梯度下降法，样本集较小就没必要使用 mini-batch 梯度下降法，你可以快速处理整个训练集，所以使用 batch 梯度下降法也很好，这里的少是说小于 2000 个样本，这样比较适合使用 batch 梯度下降法。不然，样本数目较大的话，一般的 mini-batch 大小为 64 到 512，考虑到电脑内存设置和使用的方式，如果 mini-batch 大小是 2 的𝑜次方，代码会运行地快一些，64 就是 2 的 6 次方，以此类推，128 是 2 的7 次方，256 是 2 的 8 次方，512 是 2 的 9 次方。所以我经常把 mini-batch 大小设成 2 的次方。在上一个视频里，我的 mini-batch 大小设为了 1000，建议你可以试一下 1024，也就是2 的 10 次方。也有 mini-batch 的大小为 1024，不过比较少见，64 到 512 的 mini-batch 比较常见。</p><h5 id="指数加权平均数"><a href="#指数加权平均数" class="headerlink" title="指数加权平均数"></a>指数加权平均数</h5><p>指数加权平均数经常被使用，再说一次，它在统计学中被称为指数加权移动平均值，我们就简称为指数加权平均数。通过调整这个参数（β），或者说后面的算法学习，你会发现这是一个很重要的参数，可以取得稍微不同的效果，往往中间有某个值效果最好，为中间值时得到的红色曲线，比起绿线和黄线更好地平均了温度</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569221392292.png" alt="1569221392292"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569221347277.png" alt="1569221347277"></p><p>我们平均了大约1/（1-β）天的温度，当β= 0.9的时候，我们说仿佛你在计算一个指数加权平均数，只关注了过去 10天的温度，因为 10 天后，权重下降到不到当日权重的三分之一。</p><p>指数加权平均数公式的好处之一在于，它占用极少内存，电脑内存中只占用一行数字而已，然后把最新数据代入公式，不断覆盖就可以了，正因为这个原因，其效率，它基本上只占用一行代码，计算指数加权平均数也只占用单行数字的存储和内存，当然它并不是最好的，也不是最精准的计算平均数的方法。</p><h5 id="指数加权平均的偏差修正"><a href="#指数加权平均的偏差修正" class="headerlink" title="指数加权平均的偏差修正"></a>指数加权平均的偏差修正</h5><p>学过了如何计算指数加权平均数，有一个技术名词叫做偏差修正，可以让平均数运算更加准确，来看看它是怎么运行的。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569221863695.png" alt="1569221863695"></p><p>如果你执行写在这里的公式，在β等于 0.98 的时候，得到的并不是绿色曲线，而是紫色曲线，你可以注意到紫色曲线的起点较低，模型無法很好地估计前几天的温度。有个办法可以修改这一估测，让估测变得更好，更准确，特别是在估测初期，也就是不用vt,用右边那个。</p><p>所以当t很大的时候，偏差修正几乎没有作用，因此当t较大的时候，紫线基本和绿线重合了。不过在开始学习阶段，你才开始预测热身练习，偏差修正可以帮助你更好预测温度，偏差修正可以帮助你使结果从紫线变成绿线。</p><h5 id="动量梯度下降法（Gradient-descent-with-Momentum-）"><a href="#动量梯度下降法（Gradient-descent-with-Momentum-）" class="headerlink" title="动量梯度下降法（Gradient descent with Momentum ）"></a>动量梯度下降法（Gradient descent with Momentum ）</h5><p>还有一种算法叫做 Momentum，或者叫做动量梯度下降法，运行速度几乎总是快于标准的梯度下降算法，简而言之，基本的想法就是计算梯度的指数加权平均数，并利用该梯度更新你的权重.</p><p>例如，如果你要优化成本函数，函数形状如图，红点代表最小值的位置，假设你从这里（蓝色点）开始梯度下降法，如果进行梯度下降法的一次迭代，无论是 batch 或 mini-batch下降法，也许会指向这里，现在在椭圆的另一边，计算下一步梯度下降，结果或许如此，然后再计算一步，再一步，计算下去</p><p>慢慢摆动到最小值，这种上下波动减慢了梯度下降法的速度，你就无法使用更大的学习率，如果你要用较大的学习率（紫色箭头），结果可能会偏离函数的范围，为了避免摆动过大，你要用一个较小的学习率。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569222487522.png" alt="1569222487522"></p><p>另一个看待问题的角度是，在纵轴上，你希望学习慢一点，因为你不想要这些摆动，但是在横轴上，你希望加快学习，你希望快速从左向右移，移向最小值，移向红点。所以使用动量梯度下降法，你需要做的是，在每次迭代中，确切来说在第𝑢次迭代的过程中，你会计算微分dW，db.</p><p>在上几个导数中，你会发现这些纵轴上的摆动平均值接近于零，所以在纵轴方向，你希望放慢一点，平均过程中，正负数相互抵消，所以平均值接近于零。但在横轴方向，所有的微分都指向横轴方向，因此横轴方向的平均值仍然较大，因此用算法几次迭代后，你发现动量梯度下降法，最终纵轴方向的摆动变小了，横轴方向运动更快，因此你的算法走了一条更加直接的路径，在抵达最小值的路上减少了摆动。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569222706502.png" alt="1569222706502"></p><h5 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h5><p>知道了动量（Momentum）可以加快梯度下降，还有一个叫做 RMSprop 的算法，全称是 root mean square prop 算法，它也可以加速梯度下降，我们来看看它是如何运作的。</p><p>想减缓b方向的学习，即纵轴方向，同时加快，至少不是减缓横轴方向的学习，RMSprop 算法可以实现这一点</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569223012486.png" alt="1569223012486"></p><p>你看这些微分，垂直方向的要比水平方向的大得多，所以斜率在b方向特别大，所以这些微分中，db较大，dw较小，db的平方较大，所以S db 也会较大，结果就是纵轴上的更新要被一个较大的数相除，就能消除摆动，而水平方向的更新则被较小的数相除。</p><p>RMSprop 的影响就是你的更新最后会变成这样（绿色线），纵轴方向上摆动较小，而横轴方向继续推进。还有个影响就是，你可以用一个更大学习率a，然后加快学习，而无须在纵轴上垂直方向偏离。</p><h5 id="Adam-优化算法"><a href="#Adam-优化算法" class="headerlink" title="Adam 优化算法"></a>Adam 优化算法</h5><p>在深度学习的历史上，包括许多知名研究者在内，提出了优化算法，并很好地解决了一些问题，但随后这些优化算法被指出并不能一般化，并不适用于多种神经网络，时间久了，深度学习圈子里的人开始多少有些质疑全新的优化算法，很多人都觉得动量（Momentum）梯度下降法很好用，很难再想出更好的优化算法。所以 RMSprop 以及 Adam 优化算法（Adam优化算法也是本视频的内容），就是少有的经受住人们考验的两种算法，已被证明适用于不同的深度学习结构，这个算法我会毫不犹豫地推荐给你，因为很多人都试过，并且用它很好地解决了许多问题。</p><p>Adam 优化算法基本上就是将 Momentum 和 RMSprop 结合在一起，那么来看看如何使用 Adam 算法。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569223921852.png" alt="1569223921852"></p><p>本算法中有很多超参数，超参数学习率𝑏很重要，也经常需要调试，你可以尝试一系列值，然后看哪个有效.这就是关于 Adam 优化算法的全部内容，有了它，你可以更加快速地训练神经网络</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569223962474.png" alt="1569223962474"></p><h5 id="学习率衰减-Learning-rate-decay"><a href="#学习率衰减-Learning-rate-decay" class="headerlink" title="学习率衰减(Learning rate decay)"></a>学习率衰减(Learning rate decay)</h5><p>加快学习算法的一个办法就是随时间慢慢减少学习率，我们将之称为学习率衰减，我们来看看如何做到，首先通过一个例子看看，为什么要计算学习率衰减。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569224340891.png" alt="1569224340891"></p><p>假设你要使用 mini-batch 梯度下降法，mini-batch 数量不大，大概 64 或者 128 个样本，在迭代过程中会有噪音（蓝色线），下降朝向这里的最小值，但是不会精确地收敛，所以你的算法最后在附近摆动，并不会真正收敛，因为你用的a是固定值，不同的 mini-batch 中有噪音</p><p>但要慢慢减少学习率𝑏的话，在初期的时候，a学习率还较大，你的学习还是相对较快，但随着a变小，你的步伐也会变慢变小，所以最后你的曲线（绿色线）会在最小值附近的一小块区域里摆动，而不是在训练过程中，大幅度在最小值附近摆动。</p><p>所以慢慢减少𝑏的本质在于，在学习初期，你能承受较大的步伐，但当开始收敛的时候，小一些的学习率能让你步伐小一些</p><p>decay-rate称为衰减率，epoch-num 为代数，a0 为初始学习率</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569224519093.png" alt="1569224519093"></p><p>除了这个学习率衰减的公式，人们还会用其它的公式。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569224741965.png" alt="1569224741965"></p><p>比如，这个叫做指数衰减，其中a相当于一个小于 1 的值,你的学习率呈指数下降</p><h5 id="局部最优的问题"><a href="#局部最优的问题" class="headerlink" title="局部最优的问题"></a>局部最优的问题</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569225149665.png" alt="1569225149665"></p><p>但是一个具有高维度空间的函数，如果梯度为 0，那么在每个方向，它可能是凸函数，也可能是凹函数,那么想要得到局部最优，所有的 2 万个方向都需要是这样，但发生的机率也许很小.所以我们从深度学习历史中学到的一课就是，我们对低维度空间的大部分直觉，比如你可以画出上面的图，并不能应用到高维度空间中。适用于其它算法，因为如果你有 2 万个参数，那么J函数有 2 万个维度向量，你更可能遇到鞍点，而不是局部最优点。</p><p>结果是平稳段会减缓学习，平稳段是一块区域，其中导数长时间接近于 0，如果你在此处，梯度会从曲面从从上向下下降，因为梯度等于或接近 0，曲面很平坦，你得花上很长时间慢慢抵达平稳段的这个点.在这些情况下，更成熟的优化算法，如 Adam 算法，能够加快速度，让你尽早往下走出平稳段</p><h4 id="超-参-数-调-试-Batch-正-则-化-和-程-序-框-架"><a href="#超-参-数-调-试-Batch-正-则-化-和-程-序-框-架" class="headerlink" title="超 参 数 调 试 Batch 正 则 化 和 程 序 框 架"></a>超 参 数 调 试 Batch 正 则 化 和 程 序 框 架</h4><h5 id="调试处理（Tuning-process-）"><a href="#调试处理（Tuning-process-）" class="headerlink" title="调试处理（Tuning process ）"></a>调试处理（Tuning process ）</h5><p>神经网络的改变会涉及到许多不同超参数的设置。现在，对于超参数而言，你要如何找到一套好的设定呢？分享一些指导原则，一些关于如何系统地组织超参调试过程的技巧，让你更有效的聚焦到合适的超参设定中。</p><p>但希望你粗略了解到哪些超参数较为重要，a无疑是最重要的，接下来是我用橙色圈住的那些，然后是我用紫色圈住的那些，但这不是严格且快速的标准，我认为，其它深度学习的研究者可能会很不同意我的观点或有着不同的直觉。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569225813881.png" alt="1569225813881"></p><p>现在，如果你尝试调整一些超参数，该如何选择调试值呢？在早一代的机器学习算法中，如果你有两个超参数，这里我会称之为超参 1，超参 2，常见的做法是在网格中取样点，像这样，然后系统的研究这些数值。</p><p>在深度学习领域，我们常做的，我推荐你采用下面的做法，随机选择点，所以你可以选择同等数量的点，对吗？25 个点，接着，用这些随机取的点试验超参数的效果。之所以这么做是因为，对于你要解决的问题而言，你很难提前知道哪个超参数最重要，正如你之前看到的，一些超参数的确要比其它的更重要。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569225906864.png" alt="1569225906864"></p><p>当你给超参数取值时，另一个惯例是采用由粗糙到精细的策略。比如在二维的那个例子中，你进行了取值，也许你会发现效果最好的某个点，也许这个点周围的其他一些点效果也很好，那在接下来要做的是放大这块小区域（小蓝色方框内），然后在其中更密集得取值或随机取值，聚集更多的资源，在这个蓝色的方格中搜索，如果你怀疑这些超参数在这个区域的最优结果，那在整个的方格中进行粗略搜索后，你会知道接下来应该聚焦到更小的方格中。在更小的方格中，你可以更密集得取点。所以这种从粗到细的搜索也经常使用。</p><h5 id="超参数合适的范围"><a href="#超参数合适的范围" class="headerlink" title="超参数合适的范围"></a>超参数合适的范围</h5><p>在上一个视频中，你已经看到了在超参数范围中，随机取值可以提升你的搜索效率。但随机取值并不是在有效范围内的随机均匀取值，而是选择合适的标尺，用于探究这些超参数，这很重要。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569227135734.png" alt="1569227135734"></p><p>假设你在搜索超参数a（学习速率），假设你怀疑其值最小是 0.0001 或最大是 1。如果你画一条从 0.0001 到 1 的数轴，沿其随机均匀取值，那 90%的数值将会落0.1 到 1 之间，结果就是，在 0.1 到 1 之间，应用了 90%的资源，而在 0.0001 到 0.1 之间，只有 10%的搜索资源，这看上去不太对。</p><p>所以总结一下，在对数坐标下取值，取最小值的对数就得到a的值，取最大值的对数就得到b值，所以现在你在对数轴上的10^a 到10^b 区间取值，在a，b间随意均匀的选取r值，将超参数设置为10^r，这就是在对数轴上取值的过程。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569227372084.png" alt="1569227372084"></p><p>关于为什么我们要这样做，为什么用线性轴取值不是个好办法，这是因为当β接近 1 时，所得结果的灵敏度会变化，即使β有微小的变化。所以β在 0.9 到 0.9005 之间取值，无关紧要，你的结果几乎不会变化。</p><h5 id="超参数调试实践"><a href="#超参数调试实践" class="headerlink" title="超参数调试实践"></a>超参数调试实践</h5><p>一种是你照看一个模型，通常是有庞大的数据组，但没有许多计算资源或足够的 CPU 和GPU 的前提下，基本而言，你只可以一次负担起试验一个模型或一小批模型，在这种情况下，即使当它在试验时，你也可以逐渐改良。所以这是一个人们照料一个模型的方法，观察它的表现，耐心地调试学习率，但那通常是因为你没有足够的计算能力，不能在同一时间试验大量模型时才采取的办法。</p><p>另一种方法则是同时试验多种模型，你设置了一些超参数，尽管让它自己运行，或者是一天甚至多天，然后你会获得像这样的学习曲线，这可以是损失函数 J 或实验误差或损失或数据误差的损失，但都是你曲线轨迹的度量。用这种方式你可以试验许多不同的参数设定，然后只是最后快速选择工作效果最好的那个。在这个例子中，也许这条看起来是最好的（下方绿色曲线）。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570245104302.png" alt="1570245104302"></p><h5 id="归一化网络的激活函数：Batch-Norm"><a href="#归一化网络的激活函数：Batch-Norm" class="headerlink" title="归一化网络的激活函数：Batch Norm"></a>归一化网络的激活函数：Batch Norm</h5><p>在深度学习兴起后，最重要的一个思想是它的一种算法，叫做 Batch 归一化，Batch归一化会使你的参数搜索问题变得很容易，使神经网络对超参数的选择更加稳定，超参数的范围会更加庞大，工作效果也很好，也会是你的训练更加容易，甚至是深层网络。让我们来看看 Batch 归一化是怎么起作用的吧。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570245584550.png" alt="1570245584550"></p><p>当训练一个模型，比如 logistic 回归时，你也许会记得，归一化输入特征可以加快学习过程。你计算了平均值，从训练集中减去平均值，计算了方差，接着根据方差归一化你的数据集，在之前的视频中我们看到，这是如何把学习问题的轮廓，从很长的东西，变成更圆的东西，更易于算法优化。所以这是有效的，对 logistic 回归和神经网络的归一化输入特征值而言。</p><p>那么更深的模型呢？你不仅输入了特征值𝑦，而且这层有激活值a [1] ，这层有激活值a [2]等等。如果你想训练这些参数，比如w[3] ，b[3] ，那归一化a [2] 的平均值和方差岂不是很好？以便使w [3] ，b[3]  的训练更有效率。在 logistic 回归的例子中，我们看到了如何归一化x1 ，x2 ，x3 ，会帮助你更有效的训练w和b。所以问题来了，对任何一个隐藏层而言，我们能否归一化a值</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570245973748.png" alt="1570245973748"></p><p>所有这些都是针对l层，但我省略l及方括号，然后用正如你常用的那个公式计算方差，接着，你会取每个z(i) 值，使其规范化，方法如下，减去均值再除以标准偏差，为了使数值稳定，通常将𝜀作为分母，以防𝜎 = 0的情况。</p><p>所以现在我们已把这些z值标准化，化为含平均值 0 和标准单位方差，所以z的每一个分量都含有平均值 0 和方差 1，但我们不想让隐藏单元总是含有平均值 0 和方差 1，也许隐藏单元有了不同的分布会有意义，所以我们所要做的就是计算z^,这里β和𝛾是你模型的学习参数。</p><p>所以我希望你学到的是，归一化输入特征X是怎样有助于神经网络中的学习，Batch 归一化的作用是它适用的归一化过程，不只是输入层，甚至同样适用于神经网络中的深度隐藏层。你应用 Batch 归一化了一些隐藏单元值中的平均值和方差，不过训练输入和这些隐藏单元值的一个区别是，你也许不想隐藏单元值必须是平均值 0 和方差 1。</p><p>比如，如果你有 sigmoid 激活函数，你不想让你的值总是全部集中在这里，你想使它们有更大的方差，或不是 0 的平均值，以便更好的利用非线性的 sigmoid 函数，而不是使所有的值都集中于这个线性版本中，这里β和𝛾模型的学习参数就起到了作用。</p><h5 id="将-Batch-Norm-拟合进神经网络"><a href="#将-Batch-Norm-拟合进神经网络" class="headerlink" title="将 Batch Norm  拟合进神经网络"></a>将 Batch Norm  拟合进神经网络</h5><p>你已经看到那些等式，它可以在单一隐藏层进行 Batch 归一化，接下来，让我们看看它怎样在深度网络训练中拟合的吧。其过程如下图</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570246571952.png" alt="1570246571952"></p><p>在 TensorFlow框架中，你可以用这个函数（ tf.nn.batch_normalization ）来实现 Batch 归一化。</p><p>实践中，Batch 归一化通常和训练集的 mini-batch 一起使用。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570247001482.png" alt="1570247001482"></p><p>在此例中的 mini-batch 中增加任何常数，数值都不会改变，因为加上的任何常数都将会被均值减去所抵消。所以，如果你在使用 Batch 归一化，其实你可以消除这个参数（b [𝑚] ），或者你也可以，暂时把它设置为 0.总结：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570247798205.png" alt="1570247798205"></p><p>如果你已将梯度计算如下，你就可以使用梯度下降法了，这就是我写到这里的，但也适用于有 Momentum、RMSprop、Adam 的梯度下降法。与其使用梯度下降法更新 mini-batch，你可以使用这些其它算法来更新，我们在之前几个星期中的视频中讨论过的，也可以应用其它的一些优化算法来更新由 Batch 归一化添加到算法中的 参数。</p><p>为什么 Batch 归一化会起作用呢？</p><p>Batch 归一化做的，是它减少了这些隐藏值分布变化的数量。Batch 归一化减少了输入值改变的问题，它的确使这些值变得更稳定，神经网络的之后层就会有更坚实的基础。即使使输入分布改变了一些，它会改变得更少。它做的是当前层保持学习，当改变时，迫使后层适应的程度减小了，你可以这样想，它减弱了前层参数的作用与后层参数的作用之间的联系，它使得网络每层都可以自己学习，稍稍独立于其它层，这有助于加速整个网络的学习。</p><p>所以，希望这能带给你更好的直觉，重点是 Batch 归一化的意思是，尤其从神经网络后层之一的角度而言，前层不会左右移动的那么多，因为它们被同样的均值和方差所限制，所以，这会使得后层的学习工作变得更容易些。</p><p>Batch 归一化还有一个作用，它有轻微的正则化效果。对比而言，Batch 归一化含几重噪音，因为标准偏差的缩放和减去均值带来的额外噪音。这里的均值和标准差的估计值也是有噪音的，所以类似于 dropout，Batch 归一化有轻微的正则化效果，因为给隐藏单元添加了噪音，这迫使后部单元不过分依赖任何一个隐藏单元，类似dropout，它给隐藏层增加了噪音，因此有轻微的正则化效果。因为添加的噪音很微小，所以并不是巨大的正则化效果，你可以将 Batch 归一化和 dropout 一起使用，如果你想得到 dropout 更强大的正则化效果。</p><p>不要把 Batch 归一化当作正则化，把它当作将你归一化隐藏单元激活值并加速学习的方式，我认为正则化几乎是一个意想不到的副作用。</p><p>Batch 归一化一次只能处理一个 mini-batch 数据，它在 mini-batch 上计算均值和方差。所以测试时，你试图做出预测，试着评估神经网络，你也许没有mini-batch 的例子，你也许一次只能进行一个简单的例子，所以测试时，你需要做一些不同的东西以确保你的预测有意义。</p><h5 id="测试时的Batch-Norm"><a href="#测试时的Batch-Norm" class="headerlink" title="测试时的Batch Norm"></a>测试时的Batch Norm</h5><p>Batch 归一化将你的数据以 mini-batch 的形式逐一处理，但在测试时，你可能需要对每个样本逐一处理，我们来看一下怎样调整你的网络来做到这一点。</p><p>在测试时，你可能不能将一个 mini-batch 中的 6428 或 2056 个样本同时处理，因此你需要用其它方式来得到μ和𝜎^2 ，而且如果你只有一个样本，一个样本的均值和方差没有意义。那么实际上，为了将你的神经网络运用于测试，就需要单独估算μ和𝜎^2 ，在典型的 Batch 归一化运用中，你需要用一个指数加权平均来估算，这个平均数涵盖了所有 mini-batch，接下来我会具体解释。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570261405282.png" alt="1570261405282"></p><p>正如我们之前用的指数加权平均来计算均值，当时是试着计算当前气温的指数加权平均，你会这样来追踪你看到的这个均值向量的最新平均值，于是这个指数加权平均就成了你对这一隐藏层的Z均值的估值。</p><p>总结一下就是，在训练时，μ和𝜎^2  是在整个 mini-batch 上计算出来的包含了像是 64 或28 或其它一定数量的样本，但在测试时，你可能需要逐一处理样本，方法是根据你的训练集估算μ和𝜎^2  ，估算的方式有很多种，理论上你可以在最终的网络中运行整个训练集来得到μ和𝜎^2  ，但在实际操作中，我们通常运用指数加权平均来追踪在训练过程中你看到的μ和𝜎^2 的值。还可以用指数加权平均，有时也叫做流动平均来粗略估算μ和𝜎^2 ，然后在测试中使用μ和𝜎^2 的值来进行你所需要的隐藏单元Z值的调整。在实践中，不管你用什么方式估算μ和𝜎^2 ，这套过程都是比较稳健的，因此我不太会担心你具体的操作方式，而且如果你使用的是某种深度学习框架，通常会有默认的估算μ和𝜎^2 的方式，应该一样会起到比较好的效果。但在实践中，任何合理的估算你的隐藏单元Z值的均值和方差的方式，在测试中应该都会有效。</p><h5 id="Softmax-回归（Softmax-regression）"><a href="#Softmax-回归（Softmax-regression）" class="headerlink" title="Softmax  回归（Softmax regression）"></a>Softmax  回归（Softmax regression）</h5><p>有一种 logistic回归的一般形式，叫做 Softmax 回归，能让你在试图识别某一分类时做出预测，或者说是多种分类中的一个。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569288981511.png" alt="1569288981511"></p><p>我们将建立一个神经网络，其输出层有 4 个，或者说C个输出单元，因此𝑜，即输出层也就是L层的单元数量，等于 4，或者一般而言等于C。我们想要输出层单元的数字告诉我们这 4 种类型中每个的概率有多大，所以这里的第一个节点(最后输出的第 1个方格+圆圈)输出的应该是或者说我们希望它输出“其它”类的概率。</p><p>算出了Z后，你需要应用 Softmax 激活函数，这个激活函数对于 Softmax 层而言有些不同.Softmax 激活函数的特殊之处在于，因为需要将所有可能的输出归一化，就需要输入一个向量，最后输出一个向量。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569289431937.png" alt="1569289431937"></p><p>这个例子中（左边图）𝐷 = 4，因此这个绿色分类和Softmax 仍旧可以代表多种分类之间的这些类型的线性决策边界。另一个例子（中间图）是𝐷 = 5类，最后一个例子（右边图）是𝐷 = 6，这显示了 Softmax 分类器在没有隐藏层的情况下能够做到的事情，当然更深的神经网络会有𝑦，然后是一些隐藏单元，以及更多隐藏单元等等，你就可以学习更复杂的非线性决策边界，来区分多种不同分类。</p><p>下面你将更深入地了解 Softmax 分类，并学习如何训练一个使用了 Softmax 层的模型。</p><p>Softmax 这个名称的来源是与所谓 hardmax 对比，hardmax 函数会观察z的元素，然后在z中最大元素的位置放上 1，其它位置放上 0.与之相反，Softmax 所做的从z到这些概率的映射更为温和。<img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569289748196.png" alt="1569289748196"></p><p>训练softmat</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1569289867624.png" alt="1569289867624"></p><p>损失函数所做的就是它找到你的训练集中的真实类别，然后试图使该类别相应的概率尽可能地高，如果你熟悉统计学中最大似然估计，这其实就是最大似然估计的一种形式。</p><p>这是单个训练样本的损失，整个训练集的损失J又如何呢？也就是设定参数的代价之类的，还有各种形式的偏差的代价，它的定义你大致也能猜到，就是整个训练集损失的总和，把你的训练算法对所有训练样本的预测都加起来，</p><h5 id="深度学习框架"><a href="#深度学习框架" class="headerlink" title="深度学习框架"></a>深度学习框架</h5><p>现在有很多好的深度学习软件框架，可以帮助你实现这些模型。现在有许多深度学习框架，能让实现神经网络变得更简单，我们来讲主要的几个。</p><p>一个重要的标准就是便于编程，这既包括神经网络的开发和迭代，还包括为产品进行配置，为了成千上百万，甚至上亿用户的实际使用，取决于你想要做什么。<br>第二个重要的标准是运行速度，特别是训练大数据集时，一些框架能让你更高效地运行和训练神经网络。</p><p>还有一个标准人们不常提到，但我觉得很重要，那就是这个框架是否真的开放，要是一个框架真的开放，它不仅需要开源，而且需要良好的管理。</p><p>框架通过提供比数值线性代数库更高程度的抽象化，这里的每一个程序框架都能让你在开发深度机器学习应用时更加高效。</p><h5 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570244153559.png" alt="1570244153559"></p><p>定义参数 w，在 TensorFlow 中，你要用 tf.Variable()来定义参数</p><p>让 TensorFlow 评估一个变量，我们要用到:session.run(w)</p><p>placeholder 函数告诉 TensorFlow，你稍后会为x提供数值。</p><p>希望这个让你对 TensorFlow 程序的大致结构有了了解，当你做编程练习，使用更多TensorFlow 代码时，我这里用到的一些函数你会熟悉起来，这里有个地方要注意，w是我们想要优化的参数，因此将它称为变量，注意我们需要做的就是定义一个损失函数，使用这些add 和 multiply 之类的函数。TensorFlow 知道如何对 add 和 mutiply ，还有其它函数求导，这就是为什么你只需基本实现前向传播，它能弄明白如何做反向传播和梯度计算，因为它已经内置在 add ， multiply 和平方函数中。</p><h3 id="结构化深度学习策略"><a href="#结构化深度学习策略" class="headerlink" title="结构化深度学习策略"></a>结构化深度学习策略</h3><p>通过这门课程你们能够学到如何更快速高效地优化你的机器学习系统。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570862112463.png" alt="1570862112463"></p><p>你可能有很多想法去改善你的系统，比如，你可能想我们去收集更多的训练数据吧。或者你会说，可能你的训练集的多样性还不够，你应该收集更多不同姿势的猫咪图片，或者更多样化的反例集。或者你想再用梯度下降训练算法，训练久一点。或者你想尝试用一个完全不同的优化算法，比如 Adam 优化算法。或者尝试使用规模更大或者更小的神经网络。或者你想试试 dropout 或者𝑀2正则化。或者你想修改网络的架构，比如修改激活函数，改变隐藏单元的数目之类的方法。</p><p>当你尝试优化一个深度学习系统时，你通常可以有很多想法可以去试，问题在于，如果你做出了错误的选择，你完全有可能白费 6 个月的时间，往错误的方向前进，在 6 个月之后才意识到这方法根本不管用。</p><p>我希望在这门课程中，可以教给你们一些策略，一些分析机器学习问题的方法，可以指引你们朝着最有希望的方向前进。这门课中，我会和你们分享我在搭建和部署大量深度学习产品时学到的经验和教训，我想这些内容是这门课程独有的。比如说，很多大学深度学习课程很少提到这些策略。</p><h5 id="正交化（Orthogonalization）"><a href="#正交化（Orthogonalization）" class="headerlink" title="正交化（Orthogonalization）"></a>正交化（Orthogonalization）</h5><p>搭建建立机器学习系统的挑战之一是，你可以尝试和改变的东西太多太多了。包括，比如说，有那么多的超参数可以调。我留意到，那些效率很高的机器学习专家有个特点，他们思维清晰，对于要调整什么来达到某个效果，非常清楚，这个步骤我们称之为正交化。</p><p>正交化的概念是指，你可以想出一个维度，这个维度你想做的是控制转向角，还有另一个维度来控制你的速度，那么你就需要一个旋钮尽量只控制转向角，另一个旋钮，在这个开车的例子里其实是油门和刹车控制了你的速度。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570862838582.png" alt="1570862838582"></p><p>如果你的算法在成本函数上不能很好地拟合训练集，你想要一个旋钮，是的我画这东西表示旋钮，或者一组特定的旋钮，这样你可以用来确保你的可以调整你的算法，让它很好地拟合训练集，所以你用来调试的旋钮是你可能可以训练更大的网络，或者可以切到更好的优化算法，比如 Adam 优化算法，等等。</p><p>你的算法在开发集上做的不好，它在训练集上做得很好，但开发集不行，然后你有一组正则化的旋钮可<br>以调节，尝试让系统满足第二个条件。</p><p>如果系统在开发集上做的很好，但测试集上做得不好呢？如果是这样，那么你需要调的旋钮，可能是更大的开发集。因为如果它在开发集上做的不错，但测试集不行这可能意味着你对开发集过拟合了，你需要往回退一步，使用更大的开发集。</p><p>如果它在测试集上做得很好，但无法给你的猫图片应用用户提供良好的体验，这意味着你需要回去，改变开发集或成本函数。因为如果根据某个成本函数，系统在测试集上做的很好，但它无法反映你的算法在现实世界中的表现，这意味着要么你的开发集分布设置不正确，要么你的成本函数测量的指标不对。</p><p>必须弄清楚到底是什么地方出问题了，然后我们刚好有对应的旋钮，或者一组对应的旋钮，刚好可以解决那个问题，那个限制了机器学习系统性能的问题。这就是我们这周和下周要讲到的，如何诊断出系统性能瓶颈到底在哪。还有找到你可以用的一组特定的旋钮来调整你的系统，来改善它特定方面的性能。</p><h5 id="单一数字评估指标"><a href="#单一数字评估指标" class="headerlink" title="单一数字评估指标"></a>单一数字评估指标</h5><p>无论你是调整超参数，或者是尝试不同的学习算法，或者在搭建机器学习系统时尝试不同手段，你会发现，如果你有一个单实数评估指标，你的进展会快得多，它可以快速告诉你，新尝试的手段比之前的手段好还是差。所以当团队开始进行机器学习项目时，我经常推荐他们为问题设置一个单实数评估指标。</p><p>如果用准确率和查全率，很难直观判断模型好坏，有一个单实数评估指标真的可以快速判断各种模型的好坏，从而提高你决策的效率。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570863520948.png" alt="1570863520948"></p><h5 id="满足和优化指标（Satisficing-and-optimizing-metrics-）"><a href="#满足和优化指标（Satisficing-and-optimizing-metrics-）" class="headerlink" title="满足和优化指标（Satisficing and optimizing metrics ）"></a>满足和优化指标（Satisficing and optimizing metrics ）</h5><p>要把你顾及到的所有事情组合成单实数评估指标有时并不容易，在那些情况里，我发现有时候设立满足和优化指标是很重要的。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570863924205.png" alt="1570863924205"></p><p>你可能选择一个分类器，能够最大限度提高准确度，但必须满足运行时间要求，就是对图像进行分类所需的时间必须小于等于 100 毫秒。所以在这种情况下，我们就说准确度是一个优化指标。</p><p>所以更一般地说，如果你要考虑N个指标，有时候选择其中一个指标做为优化指标是合理的。所以你想尽量优化那个指标，然后剩下N− 1个指标都是满足指标，意味着只要它们达到一定阈值，例如运行时间快于 100 毫秒，但只要达到一定的阈值，你不在乎它超过那个门槛之后的表现，但它们必须达到这个门槛。</p><h5 id="训练-开发-测试集划分"><a href="#训练-开发-测试集划分" class="headerlink" title="训练/ 开发/ 测试集划分"></a>训练/ 开发/ 测试集划分</h5><p>training set：训练集是用来训练模型的。遵循训练集大，开发，测试集小的特点，占了所有数据的绝大部分。</p><p>development set：有时叫交叉验证集，用来对训练集训练出来的模型进行测试，通过测试结果来不断地优化模型。</p><p>test set：在训练结束后，对训练出的模型进行一次最终的评估所用的数据集。</p><p>设立训练集，开发集和测试集的方式大大影响了你或者你的团队在建立机器学习应用方面取得进展的速度。让你的开发集和测试集来自同一分布,如果你的开发集和测试集来自不同的分布，就像你设了一个目标，让你的团队花几个月尝试逼近靶心，结果在几个月工作之后发现，你说“等等”，测试的时候，”我要把目标移到这里”。</p><p>为了避免这种情况，我建议的是你将所有数据随机洗牌，放入开发集和测试集，所以开发集和测试集都有来自八个地区的数据，并且开发集和测试集都来自同一分布，这分布就是你的所有数据混在一起。不管那些数据是什么，都要随机分配到开发集和测试集上。</p><h5 id="开发集和测试集的大小"><a href="#开发集和测试集的大小" class="headerlink" title="开发集和测试集的大小"></a>开发集和测试集的大小</h5><p>在上一个视频中你们知道了你的开发集和测试集为什么必须来自同一分布，但它们规模应该多大？在深度学习时代，设立开发集和测试集的方针也在变化。</p><p>你可能听说过一条经验法则，在机器学习中，把你取得的全部数据用 70/30 比例分成训练集和测试集。或者如果你必须设立训练集、开发集和测试集，你会这么分 60%训练集，20%开发集，20%测试集。在机器学习的早期，这样分是相当合理的，特别是以前的数据集大小要小得多。所以如果你总共有 100 个样本，这样 70/30 或者 60/20/20 分的经验法则是相当合理的。如果你有几千个样本或者有一万个样本，这些做法也还是合理的。</p><p>但在现代机器学习中，我们更习惯操作规模大得多的数据集，比如说你有 1 百万个训练样本，这样分可能更合理，98%作为训练集，1%开发集，1%测试集，我们用D和T缩写来表示开发集和测试集。</p><p>测试集的目的是完成系统开发之后，测试集可以帮你评估投产系统的性能。方针就是，令你的测试集足够大，能够以高置信度评估系统整体性能。所以除非你需要对最终投产系统有一个很精确的指标，一般来说测试集不需要上百万个例子。</p><p>对于某些应用，你也许不需要对系统性能有置信度很高的评估，也许你只需要训练集和开发集。我认为，不单独分出一个测试集也是可以的。事实上，有时在实践中有些人会只分成训练集和测试集，他们实际上在测试集上迭代，所以这里没有测试集，他们有的是训练集和开发集，但没有测试集。如果你真的在调试这个集，这个开发集或这个测试集，这最好称为开发集。</p><h5 id="什么时候该改变开发-测试集和指标"><a href="#什么时候该改变开发-测试集和指标" class="headerlink" title="什么时候该改变开发/ 测试集和指标"></a>什么时候该改变开发/ 测试集和指标</h5><p>学过如何设置开发集和评估指标，就像是把目标定在某个位置，让你的团队瞄准。但有时候在项目进行途中，你可能意识到，目标的位置放错了。这种情况下，你应该移动你的目标，即更改评估指标。如果你的评估指标无法正确评估好算法的排名，那么就需要花时间定义一个新的评估指标。如果你在指标上表现很好，在当前开发集或者开发集和测试集分布中表现很好，但你的实际应用程序，你真正关注的地方表现不好，那么就需要修改指标或者你的开<br>发测试集。</p><p>假设你在构建一个猫分类器，试图找到很多猫的照片，向你的爱猫人士用户展示，你决定使用的指标是分类错误率。所以算法A和B分别有 3％错误率和 5％错误率，所以算法A似乎做得更好。但算法A由于某些原因，把很多色情图像分类成猫了,这是你的公司完全不能接受的。所以从你们公司的角度来看，以及从用户接受的角度来看，算法B实际上是一个更好的算法，因为它不让任何色情图像通过。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570865613094.png" alt="1570865613094"></p><p>上面公式更改了评估指标，这样你赋予了色情图片更大的权重，让算法将色情图分类为猫图时，错误率这个项快速变大。这个例子里，你把色情图片分类成猫这一错误的惩罚权重加大 10 倍。</p><p>加权的细节并不重要，实际上要使用这种加权，你必须自己过一遍开发集和测试集，在开发集和测试集里，自己把色情图片标记出来，这样你才能使用这个加权函数。</p><p>我想你处理机器学习问题时，应该把它切分成独立的步骤。一步是弄清楚如何定义一个指标来衡量你想做的事情的表现，然后我们可以分开考虑如何改善系统在这个指标上的表现。</p><h5 id="为什么是人的表现"><a href="#为什么是人的表现" class="headerlink" title="为什么是人的表现"></a>为什么是人的表现</h5><p>在过去的几年里，更多的机器学习团队一直在讨论如何比较机器学习系统和人类的表现。有两个主要原因，首先是因为深度学习系统的进步，机器学习算法突然变得更好了。在许多机器学习的应用领域已经开始见到算法已经可以威胁到人类的表现了。其次，事实证明，当你试图让机器做人类能做的事情时，可以精心设计机器学习系统的工作流程，让工作流程效率更高，所以在这些场合，比较人类和机器是很自然的，或者你要让机器模仿人类的行为。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570866484828.png" alt="1570866484828"></p><p>随着时间的推移，当您继续训练算法时，可能模型越来越大，数据越来越多，但是性能无法超过某个理论上限，这就是所谓的贝叶斯最优错误率（Bayes optimal error）。所以贝叶斯最优错误率一般认为是理论上可能达到的最优错误率</p><p>为什么当你超越人类的表现时，进展会慢下来。一个原因是人类水平在很多任务中离贝叶斯最优错误率已经不远了，人们非常擅长看图像，分辨里面有没有猫或者听写音频。所以，当你超越人类的表现之后也许没有太多的空间继续改善了。但第二个原因是，只要你的表现比人类的表现更差，那么实际上可以使用某些工具来提高性能。一旦你超越了人类的表现，这些工具就没那么好用了。</p><h5 id="可避免偏差（Avoidable-bias-）"><a href="#可避免偏差（Avoidable-bias-）" class="headerlink" title="可避免偏差（Avoidable bias ）"></a>可避免偏差（Avoidable bias ）</h5><p>知道人类水平的表现是怎样的，可以确切告诉你算法在训练集上的表现到底应该有多好，或者有多不好。</p><p>你的算法在训练集上的表现和人类水平的表现有很大差距的话，说明你的算法对训练集的拟合并不好。所以从减少偏差和方差的工具这个角度看，在这种情况下，我会把重点放在减少偏差上。你需要做的是，比如说训练更大的神经网络，或者跑久一点梯度下降，就试试能不能在训练集上做得更好。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570866949429.png" alt="1570866949429"></p><p>假设人类水平错误实际上是 7.5%，也许你的数据集中的图像非常模糊，即使人类都无法判断这张照片中有没有猫。你就知道，也许你的系统在训练集上的表现还好，它只是比人类的表现差一点点。在第二个例子中，你能希望专注减少这个分量，减少学习算法的方差，也许你可以试试正则化，让你的开发错误率更接近你的训练错误率。</p><p>贝叶斯错误率或者对贝叶斯错误率的估计和训练错误率之间的差值称为可避免偏差。当你理解人类水平错误率，理解你对贝叶斯错误率的估计，你就可以在不同的场景中专注于不同的策略，使用避免偏差策略还是避免方差策略。</p><h5 id="理解人的表现"><a href="#理解人的表现" class="headerlink" title="理解人的表现"></a>理解人的表现</h5><p>假设一个普通的人类，未经训练的人类，在此任务上达到 3%的错误率。普通的医生，也许是普通的放射科医生，能达到 1%的错误率。经验丰富的医生做得更好，错误率为 0.7%。还有一队经验丰富的医生，就是说如果你有一个经验丰富的医生团队，让他们都看看这个图像，然后讨论并辩论，他们达成共识的意见达到 0.5%的错误率。所以我想问你的问题是，你应该如何界定人类水平错误率？人类水平错误率 3%,1%, 0.7%还是 0.5%？</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570867690094.png" alt="1570867690094"></p><p>对人类水平有大概的估计可以让你做出对贝叶斯错误率的估计，这样可以让你更快地作出决定是否应该专注于减少算法的偏差，或者减少算法的方差。</p><h5 id="超过人的表现"><a href="#超过人的表现" class="headerlink" title="超过人的表现"></a>超过人的表现</h5><p>机器学习有很多问题已经可以大大超越人类水平了。例如，我想网络广告，估计某个用户点击广告的可能性，可能学习算法做到的水平已经超越任何人类了。还有提出产品建议，向你推荐电影或书籍之类的任务。我想今天的网站做到的水平已经超越你最亲近的朋了。还有物流预测，从𝐵到𝐶开车需要多久，或者预测快递车从𝐵开到𝐶需要多少时间。或者预测某人会不会偿还贷款，这样你就能判断是否批准这人的贷款。我想这些问题都是今天的机器学习远远超过了单个人类的表现。</p><p>人类在自然感知任务中往往表现非常好，所以有可能对计算机来说在自然感知任务的表现要超越人类要更难一些。</p><h5 id="改善你的模型的表现"><a href="#改善你的模型的表现" class="headerlink" title="改善你的模型的表现"></a>改善你的模型的表现</h5><p>你们学过正交化，如何设立开发集和测试集，用人类水平错误率来估计贝叶斯错误率以及如何估计可避免偏差和方差。我们现在把它们全部组合起来写成一套指导方针，如何提高学习算法性能的指导方针。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570868523271.png" alt="1570868523271"></p><p>如果你想用尽一切办法减少可避免偏差，我建议试试这样的策略：比如使用规模更大的模型，这样算法在训练集上的表现会更好，或者训练更久。使用更好的优化算法，比如说加入 momentum 或者 RMSprop，或者使用更好的算法，比如 Adam。你还可以试试寻找更好新神经网络架构，或者说更好的超参数。这些手段包罗万有，你可以改变激活函数，改变层数或者隐藏单位数，虽然你这么做可能会让模型规模变大。或者试用其他模型，其他架构，<br>如循环神经网络和卷积神经网络。</p><p>另外当你发现方差是个问题时，你可以试用很多技巧，包括以下这些：你可以收集更多数据，因为收集更多数据去训练可以帮你更好地推广到系统看不到的开发集数据。你可以尝试正则化，包括L2正则化，dropout 正则化或者我们在之前课程中提到的数据增强。同时你也可以试用不同的神经网络架构，超参数搜索，看看能不能帮助你，找到一个更适合你的问题的神经网络架构。</p><h5 id="进行误差分析"><a href="#进行误差分析" class="headerlink" title="进行误差分析"></a>进行误差分析</h5><p>人工检查一下你的算法犯的错误也许可以让你了解接下来应该做什么。这个过程称为错误分析.如果你要搭建应用系统，那这个简单的人工统计步骤，错误分析，可以节省大量时间，可以迅速决定什么是最重要的，或者最有希望的方向。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570869546288.png" alt="1570869546288"></p><p>首先，收集一下，比如说 100 个错误标记的开发集样本，然后手动检查，一次只看一个，看看你的开发集里有多少错误标记的样本是狗。现在，假设事实上，你的 100 个错误标记样本中只有 5%是狗，就是说在 100 个错误标记的开发集样本中，有 5个是狗。这意味着即使你完全解决了狗的问题，那么你最多只能希望你的错误率从 10%下降到 9.5%.在机器学习中，有时我们称之为性能上限，就意味着，最好能到哪里，完全解决狗的问题可以对你有多少帮助。</p><p>有时你在做错误分析时，也可以同时并行评估几个想法，比如，你有几个改善猫检测器的想法，也许你可以改善针对狗图的性能，或者有时候要注意，那些猫科动物，如狮子，豹，猎豹等等，它们经常被分类成小猫或者家猫，所以你也许可以想办法解决这个错误。或者也许你发现有些图像是模糊的，如果你能设计出一些系统，能够更好地处理模糊图像。</p><p>所以总结一下，进行错误分析，你应该找一组错误样本，可能在你的开发集里或者测试集里，观察错误标记的样本，看看假阳性（false positives）和假阴性（false negatives），统计属于不同错误类型的错误数量。在这个过程中，你可能会得到启发，归纳出新的错误类型，就像我们看到的那样。</p><h5 id="清除标注错误的数据"><a href="#清除标注错误的数据" class="headerlink" title="清除标注错误的数据"></a>清除标注错误的数据</h5><p>你的监督学习问题的数据由输入x和输出标签 y构成，如果你观察一下你的数据，并发现有些输出标签 y是错的，你的数据有些标签是错的，是否值得花时间去修正这些标签呢？</p><p>我们来考虑训练集，事实证明，深度学习算法对于训练集中的随机错误是相当健壮的（robust）。只要你的标记出错的样本，只要这些错误样本离随机错误不太远，有时可能做标记的人没有注意或者不小心，按错键了，如果错误足够随机，那么放着这些错误不管可能也没问题，而不要花太多时间修复它们。</p><p>深度学习算法对随机误差很健壮，但对系统性的错误就没那么健壮了。所以比如说，如果做标记的人一直把白色的狗标记成猫，那就成问题了。</p><p>是否值得修正这 6%标记出错的样本，我的建议是，如果这些标记错误严重影响了你在开发集上评估算法的能力，那么就应该去花时间修正错误的标签。</p><p>如果你决定要去修正开发集数据，手动重新检查标签，并尝试修正一些标签，这里还有一些额外的方针和原则需要考虑。首先，我鼓励你不管用什么修正手段，都要同时作用到开发集和测试集上，我们之前讨论过为什么，开发和测试集必须来自相同的分布。</p><p>就因为花了这几分钟，或者几个小时去亲自统计数据，真的可以帮你找到需要优先处理的任务，我发现花时间亲自检查数据非常值得，所以我强烈建议你们这样做，如果你在搭建你的机器学习系统的话，然后你想确定应该优先尝试哪些想法，或者哪些方向。</p><h5 id="快速搭建系统并迭代"><a href="#快速搭建系统并迭代" class="headerlink" title="快速搭建系统并迭代"></a>快速搭建系统并迭代</h5><p>一般来说，对于几乎所有的机器学习程序可能会有 50 个不同的方向可以前进，并且每个方向都是相对合理的可以改善你的系统。但挑战在于，你如何选择一个方向集中精力处理。</p><p>如果你将机器学习算法应用到新的应用程序里，你的主要目标是弄出能用的系统，你的主要目标并不是发明全新的机器学习算法，这是完全不同的目标，那时你的目标应该是想出某种效果非常好的算法。所以我鼓励你们搭建快速而粗糙的实现，然后用它做偏差/方差分析，用它做错误分析，然后用分析结果确定下一步优先要做的方向。</p><h5 id="不同分布数据进行训练和测试"><a href="#不同分布数据进行训练和测试" class="headerlink" title="不同分布数据进行训练和测试"></a>不同分布数据进行训练和测试</h5><p>深度学习算法对训练数据的胃口很大，当你收集到足够多带标签的数据构成训练集时，算法效果最好，这导致很多团队用尽一切办法收集数据，然后把它们堆到训练集里，让训练的数据量更大，即使有些数据，甚至是大部分数据都来自和开发集、测试集不同的分布(如网页爬高质量200K,用户上传低质量图片10K)。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570872074698.png" alt="1570872074698"></p><p>现在你就陷入困境了，因为你有一个相对小的数据集，只有 10,000 个样本来自那个分布，而你还有一个大得多的数据集来自另一个分布，图片的外观和你真正想要处理的并不一样。你的大部分精力都用在优化来自网页下载的图片，这其实不是你想要的。</p><p>建议这样：训练集，比如说还是 205,000 张图片，我们的训练集是来自网页下载的 200,000 张图片，然后如果需要的话，再加上 5000 张来自手机上传的图片。然后对于开发集和测试集，这数据集的大小是按比例画的，你的开发集和测试集都是手机图。</p><h5 id="数据分布不匹配时的偏差与方差的分析"><a href="#数据分布不匹配时的偏差与方差的分析" class="headerlink" title="数据分布不匹配时的偏差与方差的分析"></a>数据分布不匹配时的偏差与方差的分析</h5><p>当你的训练集来自和开发集、测试集不同分布时，分析偏差和方差的方式可能不一样</p><p>训练-开发集，这是一个新的数据子集，从训练集的分布里挖出来，但你不会用来训练你的网络。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570930138925.png" alt="1570930138925"></p><p>也许算法在开发集上做得不错，可能因为训练集很容易识别，因为训练集都是高分辨率图片，很清晰的图像，但开发集要难以识别得多。所以也许软件没有方差问题，这只不过反映了开发集包含更难准确分类的图片。所以这个分析的问题在于，当你看训练误差，再看开发误差，有两件事变了。首先算法只见过训练集数据，没见过开发集数据。第二，开发集数据来自不同的分布。而且因为你同时改变了两件事情，很难确认这增加的 9%误差率有多少是因为算法没看到开发集中的数据导致的，这是问题方差的部分，有多少是因为开发集数据就是不一样。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570930002910.png" alt="1570930002910"></p><h5 id="处理数据不匹配问题"><a href="#处理数据不匹配问题" class="headerlink" title="处理数据不匹配问题"></a>处理数据不匹配问题</h5><p>如果您的训练集来自和开发测试集不同的分布，如果错误分析显示你有一个数据不匹配的问题该怎么办？如果我发现有严重的数据不匹配问题，我通常会亲自做错误分析，尝试了解训练集和开发测试集的具体差异。技术上，为了避免对测试集过拟合，要做错误分析，你应该人工去看开发集而不是测试集。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570931168253.png" alt="1570931168253"></p><p><strong>尝试收集更多和真正重要的场合相似的数据</strong>，人工合成数据（artificial data synthesis）。</p><p>人工数据合成有一个潜在问题，比如说，你在安静的背景里录得10,000 小时音频数据，然后，比如说，你只录了一小时车辆背景噪音，那么，你可以这么做，将这 1 小时汽车噪音回放 10,000 次，并叠加到在安静的背景下录得的 10,000 小时数据。如果你这么做了，人听起来这个音频没什么问题。但是有一个风险，有可能你的学习算法对这1 小时汽车噪音过拟合。特别是，如果这组汽车里录的音频可能是你可以想象的所有汽车噪音背景的集合，如果你只录了一小时汽车噪音，那你可能只模拟了全部数据空间的一小部分，你可能只从汽车噪音的很小的子集来合成数据。</p><h5 id="迁移学习（Transfer-learning-）"><a href="#迁移学习（Transfer-learning-）" class="headerlink" title="迁移学习（Transfer learning ）"></a>迁移学习（Transfer learning ）</h5><p>深度学习中，最强大的理念之一就是，有的时候神经网络可以从一个任务中习得知识，并将这些知识应用到另一个独立的任务中。所以例如，也许你已经训练好一个神经网络，能够识别像猫这样的对象，然后使用那些知识，或者部分习得的知识去帮助您更好地阅读 x 射线扫描图，这就是所谓的迁移学习。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570931912128.png" alt="1570931912128"></p><p>假设你已经训练好一个图像识别神经网络，所以你首先用一个神经网络，并在(x,y)对上训练，其中x是图像，y是某些对象，图像是猫、狗、鸟或其他东西。如果你把这个神经网络拿来，然后让它适应或者说迁移，在不同任务中学到的知识，比如放射科诊断，就是说阅读X射线扫描图。你可以做的是把神经网络最后的输出层拿走，就把它删掉，还有进入到最后一层的权重删掉，然后为最后一层重新赋予随机权重，然后让它在放射诊断数据上训练。</p><p>如果你有足够多的数据，你可以重新训练神经网络中剩下的所有层。经验规则是，如果你有一个小数据集，就只训练输出层前的最后一层，或者也许是最后一两层。但是如果你有很多数据，那么也许你可以重新训练网络中的所有参数。如果你重新训练神经网络中的所有参数，那么这个在图像识别数据的初期训练阶段，有时称为预训练（pre-training），因为你在用图像识别数据去预先初始化，或者预训练神经网络的权重。然后，如果你以后更新所有权重，然后在放射科数据上训练，有时这个过程叫微调（fine tuning）。</p><p>为什么迁移学习这样做有效果呢？有很多低层次特征，比如说边缘检测、曲线检测、阳性对象检测（positive objects），从非常大的图像识别数据库中习得这些能力可能有助于你的学习算法在放射科诊断中做得更好，算法学到了很多结构信息，图像形状的信息，其中一些知识可能会很有用，所以学会了图像识别，它就可能学到足够多的信息，可以了解不同图像的组成部分是怎样的，学到线条、点、曲线这些知识，也许对象的一小部分，这些知识有可能帮助你的放射科诊断网络学习更快一些，或者需要更少的学习数据。</p><p>迁移学习起作用的场合是，在迁移来源问题中你有很多数据，但迁移目标问题你没有那么多数据。例如，假设图像识别任务中你有 1 百万个样本，所以这里数据相当多。可以学习低层次特征，可以在神经网络的前面几层学到如何识别很多有用的特征。但是对于放射科任务，也许你只有一百个样本，所以你的放射学诊断问题数据很少，也许只有 100 次X射线扫描，所以你从图像识别训练中学到的很多知识可以迁移，并且真正帮你加强放射科识别任务的性能，即使你的放射科数据很少。</p><p>所以总结一下，什么时候迁移学习是有意义的？1.如果你想从任务𝐵学习并迁移一些知识到任务𝐶，那么当任务𝐵和任务𝐶都有同样的输入x时，迁移学习是有意义的。在第一个例子中，𝐵和𝐶的输入都是图像，在第二个例子中，两者输入都是音频。2.当任务𝐵的数据比任务𝐶多得多时，迁移学习意义更大。所有这些假设的前提都是，你希望提高任务𝐶的性能，因为任务𝐶每个数据更有价值，对任务𝐶来说通常任务𝐵的数据量必须大得多，才有帮助，因为任务𝐵里单个样本的价值没有比任务𝐶单个样本价值大。</p><h5 id="多任务学习（Multi-task-learning"><a href="#多任务学习（Multi-task-learning" class="headerlink" title="多任务学习（Multi-task learning)"></a>多任务学习（Multi-task learning)</h5><p>在迁移学习中，你的步骤是串行的，你从任务𝐵里学习只是然后迁移到任务𝐶。在多任务学习中，你是同时开始学习的，试图让单个神经网络同时做几件事情，然后希望这里每个任务都能帮到其他所有任务。</p><p>我们来看一个例子，假设你在研发无人驾驶车辆，那么你的无人驾驶车可能需要同时检测不同的物体，比如检测行人、车辆、停车标志，还有交通灯各种其他东西。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570933101020.png" alt="1570933101020"></p><p>那么你现在可以做的是训练一个神经网络，来预测这些y值，你就得到这样的神经网络，输入x，现在输出是一个四维向量y。请注意，这里输出我画了四个节点，所以第一个节点就是我们想预测图中有没有行人，然后第二个输出节点预测的是有没有车，这里预测有没有停车标志，这里预测有没有交通灯，所以这里y^ 是四维的。整个训练集的平均损失和之前分类猫的例子主要区别在于，现在你要对𝑘 = 1到4求和，这与 softmax 回归的主要区别在于，与 softmax 回归不同，softmax 将单个标签分配给单个样本,只能有一个为1。而这张图可以有很多不同的标签，你要知道每张照片是否有行人、或汽车、停车标志或交通灯，多个物体可能同时出现在一张图里。</p><p>如果你训练了一个神经网络，试图最小化这个成本函数，你做的就是多任务学习。因为你现在做的是建立单个神经网络，观察每张图，然后解决四个问题，系统试图告诉你，每张图里面有没有这四个物体。另外你也可以训练四个不同的神经网络，而不是训练一个网络做四件事情。但神经网络一些早期特征，在识别不同物体时都会用到，然后你发现，训练一个神经网络做四件事情会比训练四个完全独立的神经网络分别做四件事性能要更好，这就是多任务学习的力量。</p><p>也许有些样本都有标记，但也许有些样本他们只标记了有没有车，然后还有一些是问号。即使是这样的数据集，你也可以在上面训练算法，同时做四个任务，即使一些图像只有一小部分标签，其他是问号或者不管是什么。然后你训练算法的方式，即使这里有些标签是问号，或者没有标记，这就是对𝑘从 1 到 4 求和，你就只对带 0 和 1 标签的𝑘值求和，所以当有问号的时候，你就在求和时忽略那个项，这样只对有标签的值求和，于是你就能利用这样的数据集。</p><p>那么多任务学习什么时候有意义呢？当三件事为真时，它就是有意义的。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570937014397.png" alt="1570937014397"></p><p>第一，如果你训练的一组任务，可以共用低层次特征。第二，如果每个任务中的数据量很相近，最后多任务学习往往在以下场合更有意义，当你可以训练一个足够大的神经网络，同时做好所有的工作，所以多任务学习的替代方法是为每个任务训练一个单独的神经网络。但如果你可以训练一个足够大的神经网络，那么多任务学习肯定不会或者很少会降低性能，我们都希望它可以提升性能，比单独训练神经网络来单独完成各个任务性能要更好。</p><p>所以总结一下，多任务学习能让你训练一个神经网络来执行许多任务，这可以给你更高的性能，比单独完成各个任务更高的性能。但要注意，实际上迁移学习比多任务学习使用频率更高。</p><h5 id="端到端的深度学习"><a href="#端到端的深度学习" class="headerlink" title="端到端的深度学习"></a>端到端的深度学习</h5><p>深度学习中最令人振奋的最新动态之一就是端到端深度学习的兴起，那么端到端学习到底是什么呢？简而言之，以前有一些数据处理系统或者学习系统，它们需要多个阶段的处理。那么端到端深度学习就是忽略所有这些不同的阶段，用单个神经网络代替它。</p><p>我们来看一些例子，以语音识别为例，你的目标是输入x，比如说一段音频，然后把它映射到一个输出y，就是这段音频的听写文本。所以传统上，语音识别需要很多阶段的处理。首先你会提取一些特征，一些手工设计的音频特征，也许你听过 MFCC，这种算法是用来从音频中提取一组特定的人工设计的特征。在提取出一些低层次特征之后，你可以应用机器学习算法在音频片段中找到音位，所以音位是声音的基本单位，比如说“Cat”这个词是三个音<br>节构成的，Cu-、Ah-和 Tu-，算法就把这三个音位提取出来，然后你将音位串在一起构成独立的词，然后你将词串起来构成音频片段的听写文本。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570938662864.png" alt="1570938662864"></p><p>和这种有很多阶段的流水线相比，端到端深度学习做的是，你训练一个巨大的神经网络，输入就是一段音频，输出直接是听写文本。事实证明，端到端深度学习的挑战之一是，你可能需要大量数据才能让系统表现良好。</p><p>我们再来看几个例子，比如机器翻译。传统上，机器翻译系统也有一个很复杂的流水线，比如英语机翻得到文本，然后做文本分析，基本上要从文本中提取一些特征之类的，经过很多步骤，你最后会将英文文本翻译成法文。因为对于机器翻译来说的确有很多(英文,法文)的数据对，端到端深度学习在机器翻译领域非常好用，那是因为在今天可以收集x − y对的大数据集，就是英文句子和对应的法语翻译。所以在这个例子中，端到端深度学习效果很好。</p><p>端到端深度学习系统是可行的，它表现可以很好，也可以简化系统架构，让你不需要搭建那么多手工设计的单独组件，但它也不是灵丹妙药，并不是每次都能成功，下面是它的一些优缺点。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1570939219156.png" alt="1570939219156"></p><p>首先端到端学习真的只是让数据说话。端到端深度学习的第二个好处就是这样，所需手工设计的组件更少，所以这也许能够简化你的设计工作流程，你不需要花太多时间去手工设计功能，手工设计这些中间表示方式。那么缺点呢？这里有一些缺点，首先，它可能需要大量的数据。另一个缺点是，它排除了可能有用的手工设计组件。但是当你没有太多的数据时，构造一个精心设计的系统，实际上可以将人类对这问题的很多认识直接注入到问题里，进入算法里应该挺有帮助的。</p><h3 id="卷积神经网络基础"><a href="#卷积神经网络基础" class="headerlink" title="卷积神经网络基础"></a>卷积神经网络基础</h3><h5 id="计算机视觉（Computer-vision）"><a href="#计算机视觉（Computer-vision）" class="headerlink" title="计算机视觉（Computer vision）"></a>计算机视觉（Computer vision）</h5><p>本节课将要学习的一些问题，比如图片分类，或者说图片识别，给出这张 64×64 的图片，让计算机去分辨出这是一只猫。在目标检测项目中，首先需要计算出图中有哪些物体，比如汽车，还有图片中的其他东西，再将它们模拟成一个个盒子，或用一些其他的技术识别出它们在图片中的位置。还有一个更有趣的例子，就是神经网络实现的图片风格迁移，比如说你有一张图片，但你想将这张图片转换为另外一种风格。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571559653256.png" alt="1571559653256"></p><p>在应用计算机视觉时要面临一个挑战，就是数据的输入可能会非常大。举个例子，前面我们一般操作的都是64×64 的小图片，实际上，它的数据量是 64×64×3，因为每张图片都有 3 个颜色通道。如果计算一下的话，可得知数据量为 12288，所以我们的特征向量𝑦维度为 12288。这其实还好，因为 64×64 真的是很小的一张图片。如果你要操作更大的图片，比如一张 1000×1000 的图片，它足有 1 兆那么大，但是特征向量的维度达到1000×1000×3，因为有 3 个 RGB 通道，所以数字将会是 300 万。这就意味着，特征向量x的维度高达 300 万。所以在第一隐藏层中，你也许会有 1000 个隐藏单元，而所有的权值组成了矩阵 W [1] 。如果你使用了标准的全连接网络，这个矩阵的大小将会是1000×300 万,这是个非常巨大的数字。在参数如此大量的情况下，难以获得足够的数据来防止神经网络发生过拟合和竞争需求，要处理包含 30 亿参数的神经网络，巨大的内存需求让人不太能接受。</p><p>为此，你需要进行卷积计算，它是卷积神经网络中非常重要的一块。</p><h5 id="边缘检测示例（Edge-detection-example-）"><a href="#边缘检测示例（Edge-detection-example-）" class="headerlink" title="边缘检测示例（Edge detection example ）"></a>边缘检测示例（Edge detection example ）</h5><p>卷积运算是卷积神经网络最基本的组成部分，使用边缘检测作为入门样例。在这个视频中，你会看到卷积是如何进行运算的。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571559885971.png" alt="1571559885971"></p><p>之前讲过神经网络的前几层是如何检测边缘的，然后，后面的层有可能检测到物体的部分区域，更靠后的一些层可能检测到完整的物体，这个例子中就是人脸。在这个视频中，你会看到如何在一张图片中进行边缘检测。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571559969673.png" alt="1571559969673"></p><p>看一个例子，这是一个 6×6 的灰度图像。因为是灰度图像，所以它是 6×6×1 的矩阵，为了检测图像中的垂直边缘，你可以构造一个 3×3矩阵。在共用习惯中，在卷积神经网络的术语中，它被称为过滤器。在论文它有时候会被称为核，而不是过滤器。使用过滤器这个术语。对这个 6×6 的图像进行卷积运算，卷积运算用“∗”来表示，用 3×3的过滤器对其进行卷积。</p><p>因此 6×6 矩阵和 3×3 矩阵进行卷积运算得到 4×4 矩阵。这些图片和过滤器是不同维度的矩阵，但左边矩阵容易被理解为一张图片，中间的这个被理解为过滤器，右边的图片我们可以理解为另一张图片，这个就是垂直边缘检测器。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571560271760.png" alt="1571560271760"></p><p>这是一个简单的 6×6 图像，左边的一半是 10，右边一半是 0。如果你把它当成一个图片，左边那部分看起来是白色的，像素值 10 是比较亮的像素值，右边像素值比较暗，我使用灰色来表示 0，尽管它也可以被画成黑的。图片里，有一个特别明显的垂直边缘在图像中间，这条垂直线是从黑到白的过渡线，或者从白色到深色。卷积运算<br>后，你得到的是右边的矩阵。</p><p>如果把最右边的矩阵当成图像，它是这个样子。在中间有段亮一点的区域，对应检查到这个 6×6 图像中间的垂直边缘。这里的维数似乎有点不正确，检测到的边缘太粗了。因为在这个例子中，图片太小了。如果你用一个 1000×1000 的图像，而不是 6×6 的图片，你会发现其会很好地检测出图像中的垂直边缘。在这个例子中，在输出图像中间的亮处，表示在图像中间有一个特别明显的垂直边缘。</p><h5 id="更多边缘检测内容"><a href="#更多边缘检测内容" class="headerlink" title="更多边缘检测内容"></a>更多边缘检测内容</h5><p>你已经见识到用卷积运算实现垂直边缘检测，在本视频中，你将学习如何区分正边和负边，这实际就是由亮到暗与由暗到亮的区别，也就是边缘的过渡。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571560597128.png" alt="1571560597128"></p><p>还是上一个视频中的例子，这张 6×6 的图片，左边较亮，而右边较暗，将它与垂直边缘检测滤波器进行卷积，检测结果就显示在了右边这幅图的中间部分。现在这幅图有什么变化呢？它的颜色被翻转了，变成了左边比较暗，而右边比较亮。现在亮度为 10 的点跑到了右边，为 0 的点则跑到了左边。如果你用它与相同的过滤器进行卷积，最后得到的图中间会是-30，而不是 30。如果你将矩阵转换为图片，就会是该矩阵下面图片的样子，表明是由暗向亮过渡。如果你不在乎这两者的区别，你可以取出矩阵的绝对值。但这个特定的过滤器确实可以为我们区分这两种明暗变化的区别。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571560805105.png" alt="1571560805105"></p><p>我们已经见过这个 3×3 的过滤器，它可以检测出垂直的边缘。所以，看到右边这个过滤器，我想你应该猜出来了，它能让你检测出水平的边缘。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571561171670.png" alt="1571561171670"></p><p>通过使用不同的过滤器，你可以找出垂直的或是水平的边缘。但事实上，对于这个 3×3 的过滤器来说，我们使用了其中的一种数字组合。计算机视觉的研究者们也会经常使用其他的数字组合，比如 Sobel 的过滤器， Scharr 过滤器等。随着深度学习的发展，我们学习的其中一件事就是当你真正想去检测出复杂图像的边缘，你不一定要去使用那些研究者们所选择的这九个数字，但你可以从中获益匪浅。把这矩阵中的 9 个数字当成 9 个参数，并且在之后你可以学习使用反向传播算法，其目标就是去理解这9 个参数。</p><h5 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h5><p>为了构建深度神经网络，你需要学会使用的一个基本的卷积操作就是 padding。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571561823489.png" alt="1571561823489"></p><p>我们在之前视频中看到，如果你用一个 3×3 的过滤器卷积一个 6×6 的图像，你最后会得到一个 4×4 的输出，也就是一个 4×4 矩阵。那是因为你的 3×3 过滤器在 6×6 矩阵中，只可能有 4×4 种可能的位置。这背后的数学解释是，如果我们有一个n × n的图像，用f × f的过滤器做卷积，那么输出的维度就是(n − f + 1) × (n − f + 1)。</p><p>这样的话会有两个缺点，第一个缺点是每次做卷积操作，你的图像就会缩小，从 6×6 缩小到 4×4，你可能做了几次之后，你的图像就会变得很小了，可能会缩小到只有 1×1 的大小。第二个缺点，如果你注意角落边缘的像素，这个像素点（绿色阴影标记）只被一个输出所触碰或者使用，因为它位于这个 3×3 的区域的一角。但如果是在中间的像素点，比如这个（红色方框标记），就会有许多 3×3 的区域与之重叠。所以那些在角落或者边缘区域的像素点在输出中采用较少，意味着你丢掉了图像边缘位置的许多信息。</p><p>为了解决这些问题，你可以在卷积操作之前填充这幅图像。在这个案例中，你可以沿着图像边缘再填充一层像素。如果你这样操作了，那么 6×6 的图像就被你填充成了一个 8×8 的图像。如果你用 3×3 的图像对这个 8×8 的图像卷积，你得到的输出就不是 4×4 的，而是 6×6的图像，你就得到了一个尺寸和原始图像 6×6 的图像。习惯上，你可以用 0 去填充，如果p是填充的数量，在这个案例中，p = 1，因为我们在周围都填充了一个像素点，输出也就变成了(n +2p − f + 1) × (n +2p − f + 1)。这个涂绿的像素点（左边矩阵）影响了输出中的这些格子（右边矩阵）。这样一来，丢失信息或者更准确来说角落或图像边缘的信息发挥的作用较小的这一缺点就被削弱了。</p><p>至于选择填充多少像素，通常有两个选择，分别叫做 Valid 卷积和 Same 卷积。Valid 卷积意味着不填充，另一个经常被用到的填充方法叫做 Same 卷积，那意味你填充后，你的输出大小和输入大小是一样的。习惯上，我推荐你只使用奇数的过滤器，你经常会看到 3×3 的过滤器，你也可能会看到一些 5×5，7×7 的过滤器，后面我们也会谈到 1×1 的过滤器。</p><h5 id="卷积步长（Strided-convolutions）"><a href="#卷积步长（Strided-convolutions）" class="headerlink" title="卷积步长（Strided convolutions）"></a>卷积步长（Strided convolutions）</h5><p>卷积中的步幅是另一个构建卷积神经网络的基本操作</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571562423233.png" alt="1571562423233"></p><p>之前我们移动蓝框的步长是 1，现在移动的步长是 2，我们让过滤器跳过 2 个步长，注意一下左上角，这个点移动到其后两格的点，跳过了一个位置。然后你还是将每个元素相乘并求和，你将会得到的结果是 100。</p><p>按照机器学习的惯例，我们通常不进行翻转操作。从技术上说，这个操作可能叫做互相关更好。但在大部分的深度学习文献中都把它叫做卷积运算，因此我们将在这些视频中使用这个约定。</p><h5 id="三维卷积（Convolutions-over-volumes）"><a href="#三维卷积（Convolutions-over-volumes）" class="headerlink" title="三维卷积（Convolutions over volumes）"></a>三维卷积（Convolutions over volumes）</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571563376284.png" alt="1571563376284"></p><p>这里的第一个 6 代表图像高度，第二个 6 代表宽度，这个3 代表通道的数目。同样你的过滤器也有高，宽和通道数，并且图像的通道数必须和过滤器的通道数匹配，所以这两个数（紫色方框标记的两个数）必须相等。先取红色通道的前 9 个数字，然后是绿色通道，然后再是蓝色通道，乘以左边黄色立方体覆盖的对应的 27 个数，然后把这些数都加起来，就得到了输出的第一个数字。</p><p>如果你想检测图像红色通道的边缘，而绿色通道全为 0，蓝色也全为 0。如果你把这三个堆叠在一起形成一个 3×3×3 的过滤器，那么这就是一个检测垂直边界的过滤器，但只对红色通道有用。按照计算机视觉的惯例，当你的输入有特定的高宽和通道数时，你的过滤器可以有不同的高，不同的宽，但是必须一样的通道数。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571575064532.png" alt="1571575064532"></p><p>如果你想同时用多个过滤器怎么办？（第一个）这可能是一个垂直边界检测器或者是学习检测其他的特征。第二个过滤器可以用橘色来表示，它可以是一个水平边缘检测器。所以和第一个过滤器卷积，可以得到第一个 4×4 的输出，然后卷积第二个过滤器，得到一个不同的 4×4 的输出。我们做完卷积，然后把这两个 4×4 的输出，取第一个把它放到前面，然后取第二个过滤器输出，我把它画在这，放到后面，就是一个 4×4×2 的输出立方体。</p><p>对立方体卷积的概念真的很有用，你现在可以用它的一小部分直接在三个通道的RGB 图像上进行操作。更重要的是，你可以检测两个特征，比如垂直和水平边缘或者 10 个或者 128 个或者几百个不同的特征，并且输出的通道数会等于你要检测的特征数。对于这里的符号，我一直用通道数（nc）来表示最后一个维度，在文献里大家也把它叫做 3 维立方体的深度。</p><h5 id="单层卷积网络"><a href="#单层卷积网络" class="headerlink" title="单层卷积网络"></a>单层卷积网络</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571576433362.png" alt="1571576433362"></p><p>我们已经讲了如何通过两个过滤器卷积处理一个三维图像，并输出两个不同的4×4 矩阵。假设使用第一个过滤器进行卷积，得到第一个 4×4 矩阵。使用第二个过滤器进行卷积得到另外一个 4×4 矩阵。各自形成一个卷积神经网络层，然后增加偏差，它是一个实数，通过 Python 的广播机制给这 16 个元素都加上同一偏差。然后应用非线性函数，为了说明，它是一个非线性激活函数 ReLU，输出结果是一个 4×4 矩阵。对于第二个 4×4 矩阵，我们加上不同的偏差，它也是一个实数。</p><p>这一部分（图中蓝色边框标记的部分）就是应用激活函数 ReLU 之前的值，它的作用类似于Z [1] ，最后应用非线性函数，得到的这个 4×4×2 矩阵，成为神经网络的下一层，也就是激活层。这就是a [0] 到a [1] 的演变过程，首先执行线性函数，然后所有元素相乘做卷积，具体做法是运用线性函数再加上偏差，然后应用激活函数 ReLU。</p><p>用 10 个过滤器来提取特征，如垂直边缘，水平边缘和其它特征。即使这些图片很大，参数却很少，这就是卷积神经网络的一个特征，叫作“ 避免过拟合”。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571577042210.png" alt="1571577042210"></p><p>卷积有很多种标记方法，这是我们最常用的卷积符号。大家在线搜索或查看开源代码时，关于高度，宽度和通道的顺序并没有完全统一的标准卷积,了解了卷积神经网络中某一卷积层的工作原理，我们就可以把它们堆叠起来形成一个深度卷积神经网络。</p><h5 id="简单卷积网络示例"><a href="#简单卷积网络示例" class="headerlink" title="简单卷积网络示例"></a>简单卷积网络示例</h5><p>假设你有一张图片，你想做图片分类或图片识别，把这张图片输入定义为x，然后辨别图片中有没有猫，用 0 或 1 表示，这是一个分类问题，我们来构建适用于这项任务的卷积神经网络。针对这个示例，我用了一张比较小的图片，大小是 39×39×3，这样设定可以使其中一些数字效果更好。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571577508713.png" alt="1571577508713"></p><p>这张 39×39×3 的输入图像就处理完毕了，为图片提取了 7×7×40 个特征，计算出来就是 1960 个特征。然后对该卷积进行处理，可以将其平滑或展开成 1960 个单元。平滑处理后可以输出一个向量，其填充内容是 logistic 回归单元还是 softmax 回归单元，完全取决于我们是想识图片上有没有猫，还是想识别K种不同对象中的一种，用y^ 表示最终神经网络的预测输出。明确一点，最后这一步是处理所有数字，即全部的 1960 个数字，把它们展开成一个很长的向量。为了预测最终的输出结果，我们把这个长向量填充到 softmax 回归函数中。</p><p>这是卷积神经网络的一个典型范例，设计卷积神经网络时，确定这些超参数比较费工夫。要决定过滤器的大小、步幅、padding 以及使用多少个过滤器。随着神经网络计算深度不断加深，通常开始时的图像也要更大一些，初始值为 39×39，高度和宽度会在一段时间内保持一致，然后随着网络深度的加深而逐渐减小，从 39 到 37，再到 17，最后到 7。而通道数量在增加，从 3 到 10，再到 20，最后到 40。在许多其它卷积神经网络中，你也可以看到这种趋势。</p><p>一个典型的卷积神经网络通常有三层，一个是卷积层，我们常常用 Conv 来标注。上一个例子，我用的就是 CONV。还有两种常见类型的层，我们留在后两节课讲。一个是池化层，我们称之为 POOL。最后一个是全连接层，用 FC 表示。虽然仅用卷积层也有可能构建出很好的神经网络，但大部分神经望楼架构师依然会添加池化层和全连接层。幸运的是，池化层和全连接层比卷积层更容易设计。</p><h5 id="池化层（Pooling-layers"><a href="#池化层（Pooling-layers" class="headerlink" title="池化层（Pooling layers)"></a>池化层（Pooling layers)</h5><p>除了卷积层，卷积网络也经常使用池化层来缩减模型的大小，提高计算速度，同时提高所提取特征的鲁棒性,</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571577935466.png" alt="1571577935466"></p><p>假如输入是一个 4×4 矩阵，用到的池化类型是最大池化（max pooling）。执行最大池化的树池是一个 2×2 矩阵。执行过程非常简单，把 4×4 的输入拆分成不同的区域，我把这个区域用不同颜色来标记。对于 2×2的输出，输出的每个元素都是其对应颜色区域中的最大元素值。这是一个 2×2 矩阵，即f = 2，步幅是 2，即s = 2。</p><p>最大化运算的实际作用就是，如果在过滤器中提取到某个特征，那么保留其最大值。如果没有提取到这个特征，<br>可能在右上象限中不存在这个特征，那么其中的最大值也还是很小，这就是最大池化的直观理解。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571578148185.png" alt="1571578148185"></p><p>另外还有一种类型的池化，平均池化，它不太常用。我简单介绍一下，这种运算顾名思义，选取的不是每个过滤器的最大值，而是平均值。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571578246075.png" alt="1571578246075"></p><p>目前来说，最大池化比平均池化更常用。但也有例外，就是深度很深的神经网络，你可以用平均池化来分解规模为 7×7×1000 的网络的表示层，在整个空间内求平均值，得到1×1×1000，一会我们看个例子。但在神经网络中，最大池化要比平均池化用得更多。</p><p>总结一下，池化的超级参数包括过滤器大小f和步幅s，常用的参数值为f = 2，s= 2，应用频率非常高，其效果相当于高度和宽度缩减一半。</p><h5 id="卷积神经网络示例"><a href="#卷积神经网络示例" class="headerlink" title="卷积神经网络示例"></a>卷积神经网络示例</h5><p>有一张大小为 32×32×3 的输入图片，这是一张 RGB 模式的图片，你想做手写体数字识别。32×32×3 的 RGB 图片中含有某个数字，比如 7，你想识别它是从 0-9 这 10 个数字中的哪一个，我们构建一个神经网络来实现这个功能。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571578435669.png" alt="1571578435669"></p><p>人们在计算神经网络有多少层时，通常只统计具有权重和参数的层。因为池化层没有权重和参数，只有一些超参数。这里，我们把 CONV1和 POOL1 共同作为一个卷积，并标记为 Layer1。虽然你在阅读网络文章或研究报告时，你可能会看到卷积层和池化层各为一层的情况，这只是两种不同的标记术语.</p><h5 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h5><p>(接上）5×5×16 矩阵包含 400 个元素，现在将 POOL2 平整化为一个大小为 400 的一维向量。我们可以把平整化结果想象成这样的一个神经元集合，然后利用这 400 个单元构建下一层。下一层含有 120 个单元，这就是我们第一个全连接层，标记为 FC3。这 400 个单元与 120 个单元紧密相连，这就是全连接层。它很像我们在第一和第二门课中讲过的单神经网络层，这是一个标准的神经网络。它的权重矩阵为W [3] ，维度为 120×400。这就是所谓的“全连接”，因为这 400 个单元与这 120 个单元的每一项连接，还有一个偏差参数。最后输出 120 个维度，因为有 120 个输出。</p><p>然后我们对这个 120 个单元再添加一个全连接层，这层更小，假设它含有 84 个单元，标记为 FC4。最后，用这 84 个单元填充一个 softmax 单元。如果我们想通过手写数字识别来识别手写 0-9 这 10 个数字，这个 softmax 就会有 10 个输出。</p><p>此例中的卷积神经网络很典型，看上去它有很多超参数，关于如何选定这些参数，后面我提供更多建议。常规做法是，尽量不要自己设置超参数，而是查看文献中别人采用了哪些超参数，选一个在别人任务中效果很好的架构，那么它也有可能适用于你自己的应用程序。</p><p>现在，我想指出的是，随着神经网络深度的加深，高度nH  和宽度nW 通常都会减少，前面我就提到过，从 32×32 到 28×28，到 14×14，到 10×10，再到 5×5。所以随着层数增加，高度和宽度都会减小，而通道数量会增加，从 3 到 6 到 16 不断增加，然后得到一个全连接层。</p><p>在神经网络中，另一种常见模式就是一个或多个卷积后面跟随一个池化层，然后一个或多个卷积层后面再跟一个池化层，然后是几个全连接层，最后是一个 softmax。这是神经网络的另一种常见模式。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571579036127.png" alt="1571579036127"></p><p>第一，池化层和最大池化层没有参数；第二卷积层的参数相对较少，前面课上我们提到过，其实许多参数都存在于神经网络的全连接层。观察可发现，随着神经网络的加深，激活值尺寸会逐渐变小，如果激活值尺寸下降太快，也会影响神经网络性能。神经网络的基本构造模块我们已经讲完了，一个卷积神经网络包括卷积层、池化层和全连接层。根据我的经验，找到整合基本构造模块最好方法就是大量阅读别人的案例。</p><h5 id="为什么使用卷积"><a href="#为什么使用卷积" class="headerlink" title="为什么使用卷积"></a>为什么使用卷积</h5><p>和只用全连接层相比，卷积层的两个主要优势在于参数共享和稀疏连接</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571579178802.png" alt="1571579178802"></p><p>假设有一张 32×32×3 维度的图片，这是上节课的示例，假设用了 6 个大小为 5×5 的过滤器，输出维度为 28×28×6。32×32×3=3072，28×28×6=4704。我们构建一个神经网络，其中一层含有 3072 个单元，下一层含有 4074 个单元，两层中的每个神经元彼此相连，然后计算权重矩阵，它等于 4074×3072≈1400 万，所以要训练的参数很多。虽然以现在的技术，我们可以用 1400 多万个参数来训练网络，因为这张 32×32×3 的图片非常小，训练这么多参数没有问题。如果这是一张 1000×1000 的图片，权重矩阵会变得非常大。我们看看这个卷积层的参数数量，每个过滤器都是 5×5，一个过滤器有 25 个参数，再加上偏差参数，那么每个过滤器就有 26 个参数，一共有 6 个过滤器，所以参数共计 156 个，参数数量还是很少。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571579407747.png" alt="1571579407747"></p><p>卷积网络映射这么少参数有两个原因：<br>一是参数共享。观察发现，特征检测如垂直边缘检测如果适用于图片的某个区域，那么它也可能适用于图片的其他区域。也就是说，如果你用一个 3×3 的过滤器检测垂直边缘，那么图片的左上角区域，以及旁边的各个区域（左边矩阵中蓝色方框标记的部分）都可以使用这个 3×3 的过滤器。每个特征检测器以及输出都可以在输入图片的不同区域中使用同样的参数，以便提取垂直边缘或其它特征。它不仅适用于边缘特征这样的低阶特征，同样适用于高阶特征，例如提取脸上的眼睛，猫或者其他特征对象。直观感觉是，一个特征检测器，如垂直边缘检测器用于检测图片左上角区域的特征，这个特征很可能也适用于图片的右下角区域。因此在计算图片左上角和右下角区域时，你不需要添加其它特征检测器。假如有一个这样的数据集，其左上角和右下角可能有不同分布，也有可能稍有不同，但很相似，整张图片共享特征检测器，提取效果也很好。</p><p>第二个方法是使用稀疏连接，我来解释下。这个 0 是通过 3×3 的卷积计算得到的，它只依赖于这个 3×3 的输入的单元格，右边这个输出单元（元素 0）仅与 36 个输入特征中 9 个相连接。而且其它像素值都不会对输出产生任影响，这就是稀疏连接的概念。再举一个例子，这个输出（右边矩阵中红色标记的元素 30）仅仅依赖于这 9 个特征（左边矩阵红色方框标记的区域），看上去只有这 9 个输入特征与输出相连接，其它像素对输出没有任何影响。</p><p>神经网络可以通过这两种机制减少参数，以便我们用更小的训练集来训练它，从而预防过度拟合。你们也可能听过，卷积神经网络善于捕捉平移不变。通过观察可以发现，向右移动两个像素，图片中的猫依然清晰可见，因为神经网络的卷积结构使得即使移动几个像素，这张图片依然具有非常相似的特征，应该属于同样的输出标记。</p><h3 id="深度卷积网络：实例探究"><a href="#深度卷积网络：实例探究" class="headerlink" title="深度卷积网络：实例探究"></a>深度卷积网络：实例探究</h3><p>在计算机视觉任务中表现良好的神经网络框架往往也适用于其它任务，也许你的任务也不例外。</p><p>LeNet-5 网络，经常被引用的 AlexNet，还有 VGG 网络。这些都是非常有效的神经网络范例，当中的一些思路为现代计算机视觉技术的发展奠定了基础。</p><p>然后是 ResNet，又称残差网络。神经网络正在不断加深，对此你可能有所了解。ResNet神经网络训练了一个深达 152 层的神经网络，并且在如何有效训练方面，总结出了一些有趣的想法和窍门。课程最后，我们还会讲一个 Inception 神经网络的实例分析。</p><h5 id="经典网络（Classic-networks-）"><a href="#经典网络（Classic-networks-）" class="headerlink" title="经典网络（Classic networks ）"></a>经典网络（Classic networks ）</h5><p>这节课，我们来学习几个经典的神经网络结构，分别是 LeNet-5、AlexNet 和 VGGNet。</p><p>首先看看 LeNet-5 的网络结构，假设你有一张 32×32×1 的图片，LeNet-5 可以识别图中的手写数字，比如像这样手写数字 7。LeNet-5 是针对灰度图片训练的，所以图片的大小只有 32×32×1。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571796325642.png" alt="1571796325642"></p><p>相比现代版本，这里得到的神经网络会小一些，只有约 6 万个参数。而现在，我们经常看到含有一千万到一亿个参数的神经网络，比这大 1000 倍的神经网络也不在少数。不管怎样，如果我们从左往右看，随着网络越来越深，图像的高度和宽度在缩小，从最初的 32×32 缩小到 28×28，再到 14×14、10×10，最后只有 5×5。与此同时，随着网络层次的加深，通道数量一直在增加，从 1 增加到 6 个，再到 16 个。这个神经网络中还有一种模式至今仍然经常用到，就是一个或多个卷积层后面跟着一个池化层，然后又是若干个卷积层再接一个池化层，然后是全连接层，最后是输出，这种排列方式很常用。</p><p>举例说明的第二种神经网络是 AlexNet，AlexNet首先用一张227×227×3的图片作为输入，实际上原文中使用的图像是224×224×3，但是如果你尝试去推导一下，你会发现 227×227 这个尺寸更好一些。第一层我们使用 96 个11×11 的过滤器，步幅为 4，由于步幅是 4，因此尺寸缩小到 55×55，缩小了 4 倍左右。然后 用一个 3×3 的过滤器构建最大池化层，f = 3，步幅s为 2，卷积层尺寸缩小为 27×27×96。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571796604495.png" alt="1571796604495"></p><p>这种神经网络与 LeNet 有很多相似之处，不过 AlexNet 要大得多。正如前面讲到的 LeNet 或 LeNet-5 大约有 6 万个参数，而 AlexNet 包含约 6000 万个参数。当用于训练图像和数据集时，AlexNet 能够处理非常相似的基本构造模块，这些模块往往包含着大量的隐藏单元或数据，这一点 AlexNet 表现出色。AlexNet 比 LeNet 表现更为出色的另一个原因是它使用了 ReLu 激活函数。</p><p>这节课要讲的第三个，也是最后一个范例是 VGG，也叫作 VGG-16 网络。值得注意的一点是，VGG-16 网络没有那么多超参数，这是一种只需要专注于构建卷积层的简单网络。首先用 3×3，步幅为 1 的过滤器构建卷积层，padding 参数为 same 卷积中的参数。然后用一个2×2，步幅为 2 的过滤器构建最大池化层。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571796903608.png" alt="1571796903608"></p><p>假设要识别这个图像，在最开始的两层用 64 个 3×3 的过滤器对输入图像进行卷积，输出结果是 224×224×64，因为使用了 same 卷积，通道数量也一样。VGG-16 其实是一个很深的网络，这里我并没有把所有卷积层都画出来。假设这个小图是我们的输入图像，尺寸是 224×224×3，进行第一个卷积之后得到224×224×64 的特征图，接着还有一层 224×224×64，得到这样 2 个厚度为 64 的卷积层，意味着我们用64个过滤器进行了两次卷积。</p><p>接下来创建一个池化层，池化层将输入图像进行压缩，从 224×224×64 缩小到多少呢？没错，减少到 112×112×64。然后又是若干个卷积层，使用 129 个过滤器，以及一些 same 卷积，我们看看输出什么结果，112×112×128.然后进行池化，可以推导出池化后的结果是这样（56×56×128）。接着再用 256 个相同的过滤器进行三次卷积操作，然后再池化，然后再卷积三次，再池化。如此进行几轮操作后，将最后得到的 7×7×512 的特征图进行全连接操作，得到 4096 个单元，然后进行 softmax 激活，输出从 1000 个对象中识别的结果。VGG-16 的这个数字 16，就是指在这个网络中包含 16 个卷积层和全连接层。确实是个很大的网络，总共包含约 1.38 亿个参数，即便以现在的标准来看都算是非常大的网络.</p><h5 id="残差网络-ResNets-Residual-Networks"><a href="#残差网络-ResNets-Residual-Networks" class="headerlink" title="残差网络(ResNets)(Residual Networks)"></a>残差网络(ResNets)(Residual Networks)</h5><p>非常非常深的神经网络是很难训练的，因为存在梯度消失和梯度爆炸问题。这节课我们学习跳跃连接（Skip connection），它可以从某一层网络层获取激活，然后迅速反馈给另外一层，甚至是神经网络的更深层。我们可以利用跳跃连接构建能够训练深度网络的ResNets，有时深度能够超过 100 层。</p><p>ResNets 是由残差块（Residual block）构建的，首先我解释一下什么是残差块。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571797414663.png" alt="1571797414663"></p><p>我们将a [l] 直接向后，拷贝到神经网络的深层，在 ReLU 非线性激活函数前加上a [l] ，这是一条捷径。a [l] 的信息直接到达神经网络的深层，不再沿着主路径传递。实际上这条捷径是在进行 ReLU非线性激活函数之前加上的，而这里的每一个节点都执行了线性函数和 ReLU 激活函数。除了捷径，你还会听到另一个术语“跳跃连接”，就是指a [l] 跳过一层或者好几层，从而将信息传递到神经网络的更深层。</p><p>ResNet 网络就是通过将很多这样的残差块堆积在一起，形成一个很深神经网络，加上所有跳跃连接，正如前一张幻灯片中看到的，每两层增加一个捷径，构成一个残差块。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571798132891.png" alt="1571798132891"></p><p>如果我们使用标准优化算法训练一个普通网络，比如说梯度下降法，或者其它热门的优化算法。如果没有残差，没有这些捷径或者跳跃连接，凭经验你会发现随着网络深度的加深，训练错误会先减少，然后增多。而理论上，随着网络深度的加深，应该训练得越来越好才对。也就是说，理论上网络深度越深越好。但实际上，如果没有残差网络，对于一个普通网络来说，深度越深意味着用优化算法越难训练。实际上，随着网络深度的加深，训练错误会越来越多。但有了 ResNets 就不一样了，即使网络再深，训练的表现却不错，比如说训练误差减少，就算是训练深达 100 层的网络也不例外。</p><h5 id="残差网络为什么有用"><a href="#残差网络为什么有用" class="headerlink" title="残差网络为什么有用"></a>残差网络为什么有用</h5><p>如何构建更深层次的 ResNets 网络的同时还不降低它们在训练集上的效率。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571799248155.png" alt="1571799248155"></p><p>我认为残差网络起作用的主要原因就是这些残差块学习恒等函数非常容易，你能确定网络性能不会受到影响，很多时候甚至可以提高效率，或者说至少不会降低网络的效率，因此创建类似残差网络可以提升网络性能。</p><p>之所以能实现跳跃连接是因为 same 卷积保留了维度，所以很容易得出这个捷径连接，并输出这两个相同维度的向量。如果输入和输出有不同维度，比如输入的维度是 128，a [l+2] 的维度是 256,那么，你都需要调整矩阵Ws 的维度。</p><h5 id="1×1-卷积"><a href="#1×1-卷积" class="headerlink" title="1×1  卷积"></a>1×1  卷积</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571799678094.png" alt="1571799678094"></p><p> 1×1 卷积可以从根本上理解为对这 32 个不同的位置都应用一个全连接层，全连接层的作用是输入 32 个数字，输出结果是 6×6×#filters（过滤器数量），以便在输入层上实施一个非平凡（non-trivial）计算。这种方法通常称为 1×1 卷积，有时也被称为 Network in Network。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571799859519.png" alt="1571799859519"></p><p>假设这是一个 28×28×192 的输入层，你可以使用池化层压缩它的高度和宽度，这个过程我们很清楚。但如果通道数量很大，该如何把它压缩为 28×28×32 维度的层呢？你可以用 32个大小为 1×1 的过滤器，严格来讲每个过滤器大小都是 1×1×192 维，因为过滤器中通道数量必须与输入层中通道的数量保持一致。但是你使用了 32 个过滤器，输出层为 28×28×32，这就是压缩通道数（nc）的方法，对于池化层我只是压缩了这些层的高度和宽度。</p><h5 id="谷歌-Inception-网络思想"><a href="#谷歌-Inception-网络思想" class="headerlink" title="谷歌 Inception  网络思想"></a>谷歌 Inception  网络思想</h5><p>构建卷积层时，你要决定过滤器的大小究竟是 1×1，3×3 还是 5×5，或者要不要添加池化层。而 Inception 网络的作用就是代替你来决定，虽然网络架构因此变得更加复杂，但网络表现却非常好.</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571800167984.png" alt="1571800167984"></p><p>有了这样的 Inception 模块，你就可以输入某个量，因为它累加了所有数字，这里的最终输出为 32+32+128+64=256。Inception 模块的输入为 28×28×192，输出为 28×28×256。基本思想是 Inception 网络不需要人为决定使用哪个过滤器或者是否需要池化，而是由网络自行确定这些参数，你可以给网络添加这些参数的所有可能值，然后把这些输出连接起来，让网络自己学习它需要什么样的参数，采用哪些过滤器组合。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571800517344.png" alt="1571800517344"></p><p>这是一个 28×28×192 的输入块，执行一个 5×5 卷积，它有 32 个过滤器，输出为 28×28×32。我们来计算这个 28×28×32 输出的计算成本，它有 32 个过滤器，因为输出有 32 个通道，每个过滤器大小为 5×5×192，输出大小为 28×28×32，所以你要计算 28×28×32 个数字。对于输出中的每个数字来说，你都需要执行 5×5×192 次乘法运算，所以乘法运算的总次数为每个输出值所需要执行的乘法运算次数（5×5×192）乘以输出值个数（28×28×32），把这些数相乘结果等于 1.2 亿（120422400）。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571800534680.png" alt="1571800534680"></p><p>这里还有另外一种架构，其结果是这样的，对于输入层，使用 1×1 卷积把输入值从 192 个通道减少到 16 个通道。然后对这个较小层运行5×5 卷积，得到最终输出。接下来我们看看这个计算成本，应用 1×1 卷积，过滤器个数为 16，每个过滤器大小为1×1×192，这两个维度相匹配（输入通道数与过滤器通道数），28×28×16 这个层的计算成本是，输出 28×28×192 中每个元素都做 192 次乘法，用 1×1×192 来表示，相乘结果约等于 240万。240 万只是第一个卷积层的计算成本，第二个卷积层的计算成本又是多少呢？这是它的输出，28×28×32，对每个输出值应用一个 5×5×16 维度的过滤器，计算结果为 1000 万。所以所需要乘法运算的总次数是这两层的计算成本之和，也就是 1204 万</p><p>如果你在构建神经网络层的时候，不想决定池化层是使用 1×1，3×3 还是 5×5的过滤器，那么 Inception 模块就是最好的选择。我们可以应用各种类型的过滤器，只需要把输出连接起来。之后我们讲到计算成本问题，我们学习了如何通过使用 1×1 卷积来构建瓶颈层，从而大大降低计算成本。</p><h5 id="Inception-网络（Inception-network-）"><a href="#Inception-网络（Inception-network-）" class="headerlink" title="Inception  网络（Inception network ）"></a>Inception  网络（Inception network ）</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571800863102.png" alt="1571800863102"></p><p>将这些方块全都连接起来。在这过程中，把得到的各个层的通道都加起来，最后得到一个 28×28×256 的输出。通道连接实际就是之前视频中看到过的，把所有方块连接在一起的操作。这就是一个 Inception 模块，而 Inception 网络所做的就是将这些模块都组合到一起。这里有一些额外的最大池化层来修改高和宽的维度。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571801027736.png" alt="1571801027736"></p><p>如果你读过论文的原文，你就会发现，这里其实还有一些分支，我现在把它们加上去。所以这些分支有什么用呢？在网络的最后几层，通常称为全连接层，在它之后是一个 softmax 层来做出预测，这些分支所做的就是通过隐藏层来做出预测，所以这其实是一个 softmax 输出。你应该把它看做 Inception 网络的一个细节，它确保了即便是隐藏单元和中间层也参与了特征计算，它们也能预测图片的分类。它在 Inception 网络中，起到一种调整的效果，并且能防止网络发生过拟合。</p><h5 id="迁移学习（Transfer-Learning）"><a href="#迁移学习（Transfer-Learning）" class="headerlink" title="迁移学习（Transfer Learning）"></a>迁移学习（Transfer Learning）</h5><p>如果你要做一个计算机视觉的应用，相比于从头训练权重，或者说从随机初始化权重开始，如果你下载别人已经训练好网络结构的权重，你通常能够进展的相当快，用这个作为预训练，然后转换到你感兴趣的任务上。计算机视觉的研究社区非常喜欢把许多数据集上传到网上，如果你听说过，比如 ImageNet，或者 MS COCO，或者 Pascal 类型的数据集，这些都是不同数据集的名字，它们都是由大家上传到网络的，并且有大量的计算机视觉研究者已经用这些数据集训练过他们的算法了。有时候这些训练过程需要花费好几周，并且需要很多的GPU，其它人已经做过了，并且经历了非常痛苦的寻最优过程，这就意味着你可以下载花费了别人好几周甚至几个月而做出来的开源的权重参数，把它当作一个很好的初始化用在你自己的神经网络上。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571801539063.png" alt="1571801539063"></p><p>你现在有一个三分类问题，图片里是 Tigger 还是 Misty，或者都不是。现在你可能没有Tigger 或者 Misty 的大量的图片，所以你的训练集会很小，你该怎么办呢？</p><p>我建议你从网上下载一些神经网络开源的实现，不仅把代码下载下来，也把权重下载下来。有许多训练好的网络，你都可以下载。你可以去掉这个 Softmax 层，创建你自己的 Softmax 单元，用来输出 Tigger、Misty 和neither 三个类别。就网络而言，我建议你把所有的层看作是冻结的，你冻结网络中所有层的参数，你只需要训练和你的 Softmax 层有关的参数。</p><p>另一个技巧，也许对一些情况有用，由于前面的层都冻结了，相当于一个固定的函数，不需要改变。因为你不需要改变它，也不训练它，取输入图像X，然后把它映射到这层（softmax的前一层）的激活函数。所以这个能加速训练的技巧就是，如果我们先计算这一层，计算特征或者激活值，然后把它们存到硬盘里。<br>取任意输入图像X，然后计算它的某个特征向量，这样你训练的就是一个很浅的 softmax 模型，用这个特征向量来做预测。</p><p>有很多方式可以实现，你可以取后面几层的权重，用作初始化，然后从这里开始梯度下降。或者你可以直接去掉这几层，换成你自己的隐藏单元和你自己的 softmax 输出层，这些方法值得一试。但是有一个规律，如果你有越来越多的数据，你需要冻结的层数越少，你能够训练的层数就越多。</p><p>最后，如果你有大量数据，你应该做的就是用开源的网络和它的权重，把这、所有的权重当作初始化，然后训练整个网络。</p><h5 id="数据增强（-Data-augmentation-）"><a href="#数据增强（-Data-augmentation-）" class="headerlink" title="数据增强（ Data augmentation ）"></a>数据增强（ Data augmentation ）</h5><p>大部分的计算机视觉任务使用很多的数据，所以数据增强是经常使用的一种技巧来提高计算机视觉系统的表现。当下在计算机视觉方面，计算机视觉的主要问题是没有办法得到充足的数据。对大多数机器学习应用，这不是问题，但是对计算机视觉，数据就远远不够。</p><p>最简单的数据增强方法就是垂直镜像对称；另一个经常使用的技巧是随机裁剪，给定一个数据集，然后开始随机裁剪；理论上，你也可以使用旋转，剪切（shearing：此处并非裁剪的含义，图像仅水平或垂直坐标发生变化）图像，可以对图像进行这样的扭曲变形，引入很多形式的局部弯曲等等。第三种经常使用的方法是彩色转换，有这样一张图片，然后给 R、G 和 B 三个通道上加上不同的失真值。</p><h5 id="计算机视觉现状"><a href="#计算机视觉现状" class="headerlink" title="计算机视觉现状"></a>计算机视觉现状</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571811264770.png" alt="1571811264770"></p><p>你可以认为大部分机器学习问题是介于少量数据和大量数据范围之间的。举个例子，我认为今天我们有相当数量的语音识别数据，至少相对于这个问题的复杂性而言。虽然现在图像识别或图像分类方面有相当大的数据集，因为图像识别是一个复杂的问题，通过分析像素并识别出它是什么，感觉即使在线数据集非常大，如超过一百万张图片，我们仍然希望我们能有更多的数据。还有一些问题，比如物体检测，我们拥有的数据更少。</p><p>当你有很多数据时，人们倾向于使用更简单的算法和更少的手工工程，因为我们不需要为这个问题精心设计特征。当你有大量的数据时，只要有一个大型的神经网络，甚至一个更简单的架构，可以是一个神经网络，就可以去学习它想学习的东西。</p><p>当我看机器学习应用时，我们认为通常我们的学习算法有两种知识来源，一个来源是被标记的数据，就像(x ， y)应用在监督学习。第二个知识来源是手工工程，有很多方法去建立一个手工工程系统，它可以是源于精心设计的特征，手工精心设计的网络体系结构或者是系统的其他组件。所以当你没有太多标签数据时，你只需要更多地考虑手工工程。</p><p>下面是一些有助于在基准测试中表现出色的小技巧</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571811545828.png" alt="1571811545828"></p><p>其中一个是集成，这就意味着在你想好了你想要的神经网络之后，可以独立训练几个神经网络，并平均它们的输出。比如说随机初始化三个、五个或者七个神经网络，然后训练所有这些网络，然后平均它们的输出。</p><p>你在论文中可以看到在测试时，对进准测试有帮助的另一个技巧就是 Multi-crop at test time，我的意思是你已经看到了如何进行数据增强，Multi-crop 是一种将数据增强应用到你的测试图像中的一种形式。</p><h3 id="目标检测（-Object-detection-）"><a href="#目标检测（-Object-detection-）" class="headerlink" title="目标检测（ Object detection ）"></a>目标检测（ Object detection ）</h3><h5 id="目标定位（Object-localization）"><a href="#目标定位（Object-localization）" class="headerlink" title="目标定位（Object localization）"></a>目标定位（Object localization）</h5><p>图片分类任务我们已经熟悉了，就是算法遍历图片，判断其中的对象是不是汽车，这就是图片分类。这节课我们要学习构建神经网络的另一个问题，即定位分类问题。这意味着，我们不仅要用算法判断图片中是不是一辆汽车，还要在图片中标记出它的位置，用边框或红色方框把汽车圈起来，这就是定位分类问题。其中“定位”的意思是判断汽车在图片中的具体位置。</p><p>训练集不仅包含神经网络要预测的对象分类标签，还要包含表示边界框的这四个数字，接着采用监督学习算法，输出一个分类标签，还有四个参数值，从而给出检测对象的边框位置。神经网络多输出几个单元，输出一个边界框。具体说就是让神经网络再多输出 4 个数字，标记为bx,by,bh,bw，这四个数字是被检测对象的边界框的参数化表示。第一个组件Pc 表示是否含有对象，</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571812142263.png" alt="1571812142263"></p><p>以上就是利用神经网络解决对象分类和定位问题的详细过程，结果证明，利用神经网络输出批量实数来识别图片中的对象是个非常有用的算法。下节课，我想和大家分享另一种思路，就是把神经网络输出的实数集作为一个回归任务，这个思想也被应用于计算机视觉的其它领域，也是非常有效的。</p><h5 id="特征点检测（Landmark-detection）"><a href="#特征点检测（Landmark-detection）" class="headerlink" title="特征点检测（Landmark detection）"></a>特征点检测（Landmark detection）</h5><p>神经网络可以通过输出图片上特征点的(x,y)坐标来实现对目标特征的识别，假设你正在构建一个人脸识别应用，出于某种原因，你希望算法可以给出眼角的具体位置。眼角坐标为(x,y)，你可以让神经网络的最后一层多输出两个数字lx 和ly ，作为眼角的坐标值。如果你想知道两只眼睛的四个眼角的具体位置，那么从左到右，依次用四个特征点来表示这四个眼角。</p><p>也许除了这四个特征点，你还想得到更多的特征点输出值，这些（图中眼眶上的红色特征点）都是眼睛的特征点，你还可以根据嘴部的关键点输出值来确定嘴的形状，从而判断人物是在微笑还是皱眉，也可以提取鼻子周围的关键特征点。为了便于说明，你可以设定特征点的个数，假设脸部有 64 个特征点，有些点甚至可以帮助你定义脸部轮廓或下颌轮廓。选定特征点个数，并生成包含这些特征点的标签训练集，然后利用神经网络输出脸部关键特征点的位置。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571812561045.png" alt="1571812561045"></p><p>最后一个例子，如果你对人体姿态检测感兴趣，你还可以定义一些关键特征点，如胸部的中点，左肩，左肘，腰等等。然后通过神经网络标注人物姿态的关键特征点，再输出这些标注过的特征点，就相当于输出了人物的姿态动作。</p><h5 id="目标检测（Object-detection"><a href="#目标检测（Object-detection" class="headerlink" title="目标检测（Object detection)"></a>目标检测（Object detection)</h5><p>学过了对象定位和特征点检测，今天我们来构建一个对象检测算法。这节课，我们将学习如何通过卷积网络进行对象检测，采用的是基于滑动窗口的目标检测算法。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571812860011.png" alt="1571812860011"></p><p>假如你想构建一个汽车检测算法，步骤是，首先创建一个标签训练集，也就是x和y表示适当剪切的汽车图片样本，这张图片（编号 1）x是一个正样本，因为它是一辆汽车图片，这几张图片（编号 2、3）也有汽车，但这两张（编号 4、5）没有汽车。剪切出一些图片并打标签，有了这个标签训练集，你就可以开始训练卷积网络了,输入这些适当剪切过的图片（编号 6），卷积网络输出y，0 或 1 表示图片中有汽车或没有汽车。训练完这个卷积网络，就可以用它来实现滑动窗口目标检测，具体步骤如下。</p><p>假设这是一张测试图片，首先选定一个特定大小的窗口，比如图片下方这个窗口，将这个红色小方块输入卷积神经网络，卷积网络开始进行预测，即判断红色方框内有没有汽车。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571813038555.png" alt="1571813038555"></p><p>滑动窗口目标检测算法接下来会继续处理第二个图像，即红色方框稍向右滑动之后的区域，并输入给卷积网络，因此输入给卷积网络的只有红色方框内的区域，再次运行卷积网络，然后处理第三个图像，依次重复操作，直到这个窗口滑过图像的每一个角落。</p><p>重复上述操作，不过这次我们选择一个更大的窗口，截取更大的区域，并输入给卷积神经网络处理，你可以根据卷积网络对输入大小调整这个区域，然后输入给卷积网络，输出 0或 1。再以某个固定步幅滑动窗口，重复以上操作，遍历整个图像，输出结果。</p><p>然后第三次重复操作，这次选用更大的窗口。如果你这样做，不论汽车在图片的什么位置，总有一个窗口可以检测到它。</p><p>滑动窗口目标检测算法也有很明显的缺点，就是计算成本，因为你在图片中剪切出太多小方块，卷积网络要一个个地处理。如果你选用的步幅很大，显然会减少输入卷积网络的窗口个数，但是粗糙间隔尺寸可能会影响性能。反之，如果采用小粒度或小步幅，传递给卷积网络的小窗口会特别多，这意味着超高的计算成本。</p><h5 id="滑动窗口的卷积实现"><a href="#滑动窗口的卷积实现" class="headerlink" title="滑动窗口的卷积实现"></a>滑动窗口的卷积实现</h5><p>上节课，我们学习了如何通过卷积网络实现滑动窗口对象检测算法，但效率很低。这节课我们讲讲如何在卷积层上应用这个算法。</p><p>首先要知道如何把神经网络的全连接层转化成卷积层。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627162412790.png" alt="image-20200627162412790"></p><p>画一个这样的卷积网络，它的前几层和之前的一样，而对于下一层，也就是这个全连接层，我们可以用 5×5 的过滤器来实现，数量是 400 个，输入图像大小为 5×5×16，用 5×5 的过滤器对它进行卷<br>积操作，过滤器实际上是 5×5×16，因为在卷积过程中，过滤器会遍历这 16 个通道，所以这两处的通道数量必须保持一致，输出结果为 1×1。假设应用 400 个这样的 5×5×16 过滤器，输出维度就是 1×1×400，我们不再把它看作一个含有 400 个节点的集合，而是一个 1×1×400的输出层。从数学角度看，它和全连接层是一样的，因为这 400 个节点中每个节点都有一个5×5×16 维度的过滤器，所以每个值都是上一层这些 5×5×16 激活值经过某个任意线性函数的输出结果。</p><p>掌握了卷积知识，我们再看看如何通过卷积实现滑动窗口对象检测算法。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627162444224.png" alt="image-20200627162444224"></p><p>假设输入给卷积网络的图片大小是 14×14×3，测试集图片是 16×16×3，现在给这个输入图片加上黄色条块，在最初的滑动窗口算法中，你会把这片蓝色区域输入卷积网络（红色笔标记）生成 0 或 1 分类。接着滑动窗口，步幅为 2 个像素，向右滑动 2 个像素，将这个绿框区域输入给卷积网络，运行整个卷积网络，得到另外一个标签 0 或 1。继续将这个橘色区域输入给卷积网络，卷积后得到另一个标签，最后对右下方的紫色区域进行最后一次卷积操作。我们在这个 16×16×3 的小图像上滑动窗口，卷积网络运行了 4 次，于是输出了了 4 个标签。</p><p>结果发现，这 4 次卷积操作中很多计算都是重复的。所以执行滑动窗口的卷积时使得卷积网络在这 4 次前向传播过程中共享很多计算.最终，在输出层这 4 个子方块中，蓝色的是图像左上部分14×14 的输出（红色箭头标识），右上角方块是图像右上部分（绿色箭头标识）的对应输出，左下角方块是输入层左下角（橘色箭头标识），也就是这个 14×14 区域经过卷积网络处理后的结果，同样，右下角这个方块是卷积网络处理输入层右下角 14×14 区域(紫色箭头标识)的结果。</p><p>所以该卷积操作的原理是我们不需要把输入图像分割成四个子集，分别执行前向传播，而是把它们作为一张图片输入给卷积网络进行计算，其中的公共区域可以共享很多计算，就像这里我们看到的这个 4 个 14×14 的方块一样。</p><p>以上就是在卷积层上应用滑动窗口算法的内容，它提高了整个算法的效率。不过这种算法仍然存在一个缺点，就是边界框的位置可能不够准确。</p><h5 id="Bounding-Box-预测（Bounding-box-predictions-）"><a href="#Bounding-Box-预测（Bounding-box-predictions-）" class="headerlink" title="Bounding Box  预测（Bounding box predictions ）"></a>Bounding Box  预测（Bounding box predictions ）</h5><p>最完美的边界框甚至不是方形，稍微有点长方形（红色方框所示），长宽比有点向水平方向延伸，有没有办法让这个算法输出更精准的边界框呢？</p><p>其中一个能得到更精准边界框的算法是 YOLO 算法，YOLO(You only look once)意思是你只看一次</p><p>是这么做的，比如你的输入图像是 100×100 的，然后在图像上放一个网格。为了介绍起来简单一些，我用 3×3 网格，实际实现时会用更精细的网格，可能是 19×19。基本思路是使用图像分类和定位算法，前几个视频介绍过的，然后将算法应用到 9 个格子上。（基本思路是，采用图像分类和定位算法，本周第一个视频中介绍过的，逐一应用在图像的 9 个格子中。）更具体一点，你需要这样定义训练标签，所以对于 9 个格子中的每一个指定一个标签y，y是 8 维的.pc 等于 0 或 1 取决于这个绿色格子中是否有图像。然后bx,by,bh,bw作用就是，如果那个格子里有对象，那么就给出边界框坐标。c1,c2,c2表示具体要识别的类别。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627164619019.png" alt="image-20200627164619019"></p><p>你怎么指定这个边界框呢？</p><p>我们约定左上这个点是(0,0)，然后右下这个点是(1,1) ,要指定橙色中点的位置，bx 大概是 0.4，因为它的位置大概是水平长度的0.4，然后by大概是 0.3，然后边界框的高度用格子总体宽度的比例表示，所以这个红框的宽度可能是蓝线的 90%，所以bh 是 0.9，它的高度也许是格子总体高度的一半，这样的话bw就是 0.5。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627164952279.png" alt="image-20200627164952279"></p><h5 id="交并比（Intersection-over-union）"><a href="#交并比（Intersection-over-union）" class="headerlink" title="交并比（Intersection over union）"></a>交并比（Intersection over union）</h5><p>你如何判断对象检测算法运作良好呢？在本视频中，你将了解到并交比函数。交并比（loU）函数做的是计算两个边界框交集和并集之比。一般约定，在计算机检测任务中，如果IoU ≥ 0.5，就说检测正确，如果预测器和实际边界框完美重叠，loU 就是 1.0.5 是人为约定，没有特别深的理论依据，如果你想更严格一点，可以把阈值定为 0.6。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627165703471.png" alt="image-20200627165703471"></p><h5 id="非极大值抑制（Non-max-suppression-）"><a href="#非极大值抑制（Non-max-suppression-）" class="headerlink" title="非极大值抑制（Non-max suppression ）"></a>非极大值抑制（Non-max suppression ）</h5><p>到目前为止你们学到的对象检测中的一个问题是，你的算法可能对同一个对象做出多次检测，所以算法不是对某个对象检测出一次，而是检测出多次。非极大值抑制这个方法可以确保你的算法对每个对象只检测一次，我们讲一个例子。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627170635526.png" alt="image-20200627170635526"></p><p>实践中当你运行对象分类和定位算法时，对于每个格子都运行一次，所以这个格子（编号 1）可能会认为这辆车中点应该在格子内部，这几个格子（编号 2、3）也会这么认为。对于左边的车子也一样.</p><p>我们分步介绍一下非极大抑制是怎么起效的，因为你要在 361 个格子上都运行一次图像检测和定位算法，那么可能很多格子都会举手说我的pc ，我这个格子里有车的概率很高，而不是 361 个格子中仅有两个格子会报告它们检测出一个对象。</p><p>所以当你运行算法的时候，最后可能会对同一个对象做出多次检测，所以非极大值抑制做的就是清理这些检测结果。这样一辆车只检测一次，而不是每辆车都触发多次检测。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627170920900.png" alt="image-20200627170920900"></p><p>首先看pc概率最大的那个，这个例子（右边车辆）中是 0.9，然后就说这是最可靠的检测，所以我们就用高亮标记，就说我这里找到了一辆车。这么做之后，非极大值抑制就会逐一审视剩下的矩形，所有和这个最大的边框有很高交并比，高度重叠的其他边界框，那么这些输出就会被抑制。所以这两个矩形pc 分别是 0.6 和 0.7，这两个矩形和淡蓝色矩形重叠程度很高，所以会被抑制，变暗，表示它们被抑制了.</p><h5 id="Anchor-Boxes"><a href="#Anchor-Boxes" class="headerlink" title="Anchor Boxes"></a>Anchor Boxes</h5><p>到目前为止，对象检测中存在的一个问题是每个格子只能检测出一个对象，如果你想让一个格子检测出多个对象，你可以这么做，就是使用 anchor box 这个概念，我们从一个例子开始讲吧。</p><p>假设你有这样一张图片，对于这个例子，我们继续使用 3×3 网格，注意行人的中点和汽车的中点几乎在同一个地方，两者都落入到同一个格子中。它将无法输出检测结果，所以我必须从两个检测结果中选一个。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627172242335.png" alt="image-20200627172242335"></p><p>而 anchor box 的思路是，这样子，预先定义两个不同形状的 anchor box，或者 anchor box 形状，你要做的是把预测结果和这两个 anchor box 关联起来。一般来说，你可能会用更多的 anchor box，可能要 5 个甚至更多，但对于这个视频，我们就用两个 anchor box，这样介绍起来简单一些。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627172448107.png" alt="image-20200627172448107"></p><p>现在用到 anchor box 这个概念，是这么做的。现在每个对象都和之前一样分配到同一个格子中，分配到对象中点所在的格子中，以及分配到和对象形状交并比最高的 anchor box中。所以这里有两个 anchor box，你就取这个对象，如果你的对象形状是这样的（编号 1，红色框），你就看看这两个 anchor box，anchor box 1 形状是这样（编号 2，紫色框），anchorbox 2 形状是这样（编号 3，紫色框），然后你观察哪一个 anchor box 和实际边界框（编号1，红色框）的交并比更高，不管选的是哪一个，这个对象不只分配到一个格子，而是分配到一对，即（grid cell ，anchor box）对，这就是对象在目标标签中的编码方式。所以现在输出 y就是 3×3×16，行人更类似于 anchor box 1 的形状，所以对于行人来说，我们将她分配到向量的上半部分。</p><p>现在还有一些额外的细节，如果你有两个 anchor box，但在同一个格子中有三个对象，这种情况算法处理不好，你希望这种情况不会发生，但如果真的发生了，这个算法并没有很好的处理办法，对于这种情况，我们就引入一些打破僵局的默认手段。还有这种情况，两个对象都分配到一个格子中，而且它们的 anchor box 形状也一样，这是算法处理不好的另一种情况，你需要引入一些打破僵局的默认手段，专门处理这种情况，希望你的数据集里不会出现这种情况，其实出现的情况不多，所以对性能的影响应该不会很大。</p><h5 id="YOLO-算法（YOLO-algorithm-）"><a href="#YOLO-算法（YOLO-algorithm-）" class="headerlink" title="YOLO  算法（YOLO algorithm ）"></a>YOLO  算法（YOLO algorithm ）</h5><p>你们已经学到对象检测算法的大部分组件了，在这个视频里，我们会把所有组件组装在一起构成 YOLO 对象检测算法。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627173818473.png" alt="image-20200627173818473"></p><p>我们先看看如何构造你的训练集，假设你要训练一个算法去检测三种对象，行人、汽车和摩托车，你还需要显式指定完整的背景类别。这里有 3 个类别标签，如果你要用两个 anchor box，那么输出 y就是 3×3×2×8，其中 3×3 表示 3×3 个网格，2 是 anchor box 的数量，你需要遍历 9 个格子，然后构成对应的目标向量y。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627174032970.png" alt="image-20200627174032970"></p><p>最后你要运行一下这个非极大值抑制，为了让内容更有趣一些，我们看看一张新的测试图像，这就是运行非极大值抑制的过程。如果你使用两个 anchor box，那么对于 9 个格子中任何一个都会有两个预测的边界框，其中一个的概率pc很低。但 9 个格子中，每个都有两个预测的边界框，比如说我们得到的边界框是是这样的，注意有一些边界框可以超出所在格子的高度和宽度（编号 1 所示）。接下来你抛弃概率很低的预测，去掉这些连神经网络都说，这里很可能什么都没有，所以你需要抛弃这些（编号 2 所示）</p><p>最后，如果你有三个对象检测类别，你希望检测行人，汽车和摩托车，那么你要做的是，对于每个类别单独运行非极大值抑制，处理预测结果所属类别的边界框，用非极大值抑制来处理行人类别，用非极大值抑制处理车子类别，然后对摩托车类别进行非极大值抑制，运行三次来得到最终的预测结果。</p><h5 id="候选区域（Region-proposals）"><a href="#候选区域（Region-proposals）" class="headerlink" title="候选区域（Region proposals）"></a>候选区域（Region proposals）</h5><p> R-CNN 的算法，意思是带区域的卷积网络，或者说带区域的 CNN。这个算法尝试选出一些区域，在这些区域上运行卷积网络分类器是有意义的，所以这里不再针对每个滑动窗运行检测算法，而是只选择一些窗口，在少数窗口上运行卷积网络分类器。</p><p>选出候选区域的方法是运行图像分割算法，分割的结果是下边的图像，为了找出可能存在对象的区域。比如说，分割算法在这里得到一个色块，所以你可能会选择这样的边界框（编号 1），然后在这个色块上运行分类器，就像这个绿色的东西（编号 2），在这里找到一个色块，接下来我们还会在那个矩形上（编号 2）运行一次分类器，看看有没有东西。在这种情况下，如果在蓝色色块上（编号 3）运行分类器，希望你能检测出一个行人，如果你在青色色块(编号 4)上运行算法，也许你可以发现一辆车，我也不确定。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627174948200.png" alt="image-20200627174948200"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627175024164.png" alt="image-20200627175024164"></p><h4 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h4><p>在人脸识别的相关文献中，人们经常提到人脸验证（face verification）和人脸识别（face recognition）</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200627175855057.png" alt="image-20200627175855057"></p><p>如果你有一张输入图片，以及某人的 ID 或者是名字，人脸验证系统要做的是，验证输入图片是否是这个人。有时候也被称作 1 对 1 问题，只需要弄明白这个人是否和他声称的身份相符。<br>人脸识别问题比人脸验证问题难很多（整理者注：1 对多问题（1:K））</p><p>假设你有一个验证系统，准确率是 99%，还可以。但是现在，假设在识别系统中，K= 100，如果你把这个验证系统应用在 100 个人身上，人脸识别上，你犯错的机会就是 100 倍了。如果每个人犯错的概率是 1%，如果你有一个上百人的数据库，如果你想得到一个可接受的识别误差，你要构造一个验证系统，其准确率为 99.9%或者更高,才能保证有很大几率不出错。</p><h5 id="One-Shot-学习（One-shot-learning-）"><a href="#One-Shot-学习（One-shot-learning-）" class="headerlink" title="One-Shot  学习（One-shot learning ）"></a>One-Shot  学习（One-shot learning ）</h5><p>人脸识别所面临的一个挑战就是你需要解决一次学习问题，这意味着在大多数人脸识别应用中，你需要通过单单一张图片或者单单一个人脸样例就能去识别这个人。而历史上，当深度学习只有一个训练样例时，它的表现并不好。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628114628225.png" alt="image-20200628114628225"></p><p>所以要让人脸识别能够做到一次学习，为了能有更好的效果，你现在要做的应该是学习Similarity 函数。详细地说，你想要神经网络学习这样一个用d表示的函数，它以两张图片作为输入，然后输出这两张图片的差异值。</p><p>要将它应用于识别任务，你要做的是拿这张新图片（编号 6），然后用d函数去比较这两张图片（编号 1 和编号 6），这样可能会输出一个非常大的数字，在该例中，比如说这个数字是 10。之后你再让它和数据库中第二张图（编号 2）片比较，因为这两张照片是同一个人，所以我们希望会输出一个很小的数。然后你再用它与数据库中的其他图片（编号 3、4）进行比较，通过这样的计算，最终你能够知道，这个人确实是 Danielle。</p><h5 id="Siamese-网络（Siamese-network"><a href="#Siamese-网络（Siamese-network" class="headerlink" title="Siamese  网络（Siamese network)"></a>Siamese  网络（Siamese network)</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628114827154.png" alt="image-20200628114827154"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628114934803.png" alt="image-20200628114934803"></p><h5 id="Triplet-损失"><a href="#Triplet-损失" class="headerlink" title="Triplet  损失"></a>Triplet  损失</h5><p>要想通过学习神经网络的参数来得到优质的人脸图片编码，方法之一就是定义三元组损失函数然后应用梯度下降。</p><p>这就是为什么叫做三元组损失，它代表你通常会同时看三张图片，你需要看 Anchor 图片、Postive 图片，还有 Negative 图片</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628115218616.png" alt="image-20200628115218616"></p><h5 id="人脸验证与二分类（-Face-verification-and-binary-classification"><a href="#人脸验证与二分类（-Face-verification-and-binary-classification" class="headerlink" title="人脸验证与二分类（ Face verification and binary classification)"></a>人脸验证与二分类（ Face verification and binary classification)</h5><p>Triplet loss 是一个学习人脸识别卷积网络参数的好方法，还有其他学习参数的方法，让我们看看如何将人脸识别当成一个二分类问题。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628115602408.png" alt="image-20200628115602408"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628115553752.png" alt="image-20200628115553752"></p><p>输入是一对图片，这是你的训练输入x（编号 1、2），输出y是 0 或者 1，取决于你的输入是相似图片还是非相似图片。与之前类似，你正在训练一个Siamese 网络，意味着上面这个神经网络拥有的参数和下面神经网络的相同（编号 3 和 4 所示的网络），两组参数是绑定的，这样的系统效果很好。</p><p>不需要存储原始图像，如果你有一个很大的员工数据库，你不需要为每个员工每次都计算这些编码。这个预先计算的思想，可以节省大量的计算.</p><h4 id="神经风格迁移"><a href="#神经风格迁移" class="headerlink" title="神经风格迁移"></a>神经风格迁移</h4><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628115813846.png" alt="image-20200628115813846"></p><h5 id="深度卷积网络-学习什么（What-are-deep-ConvNetslearning-）"><a href="#深度卷积网络-学习什么（What-are-deep-ConvNetslearning-）" class="headerlink" title="深度卷积网络 学习什么（What are deep ConvNetslearning ）"></a>深度卷积网络 学习什么（What are deep ConvNetslearning ）</h5><p>来看一个例子，假如你训练了一个卷积神经网络，是一个 Alexnet，轻量级网络，你希望将看到不同层之间隐藏单元的计算结果。</p><p>从第一层的隐藏单元开始，假设你遍历了训练集，然后找到那些使得单元激活最大化的一些图片，或者是图片块。换句话说，将你的训练集经过神经网络，然后弄明白哪一张图片最大限度地激活特定的单元。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628120050843.png" alt="image-20200628120050843"></p><p>第一层，你能在输入图片的区域看到，大概是这个角度的边缘,第二层似乎检测到更复杂的形状和模式，比如说这个隐藏单元（编号 1），它会找到有很多垂线的垂直图案.第三层明显，检测到更复杂的模式。似乎开始检测到人类，有的似乎检测特定的图案，蜂窝形状或者方形。第四层，检测到的模式和特征更加复杂，有的学习成了一个狗的检测器。</p><h5 id="代价函数（Cost-function-）"><a href="#代价函数（Cost-function-）" class="headerlink" title="代价函数（Cost function ）"></a>代价函数（Cost function ）</h5><p>记住我们的问题，给你一个内容图像C，给定一个风格图片S，而你的目标是生成一个新图片G。为了实现神经风格迁移，你要做的是定义一个关于G的代价函数J用来评判某个生成图像的好坏，我们将使用梯度下降法去最小化J(G)，以便于生成这个图像。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628120539066.png" alt="image-20200628120539066"></p><h5 id="内容代价函数（Content-cost-function-）"><a href="#内容代价函数（Content-cost-function-）" class="headerlink" title="内容代价函数（Content cost function ）"></a>内容代价函数（Content cost function ）</h5><p>通常l会选择在网络的中间层，既不太浅也不很深，然后用一个预训练的卷积模型，可以是 VGG  网络或者其他的网络也可以。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628120909998.png" alt="image-20200628120909998"></p><h5 id="风格代价函数（Style-cost-function-）"><a href="#风格代价函数（Style-cost-function-）" class="headerlink" title="风格代价函数（Style cost function ）"></a>风格代价函数（Style cost function ）</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628121209972.png" alt="image-20200628121209972"></p><p>相关系数这个概念为你提供了一种去测量这些不同的特征的方法，比如这些垂直纹理，这些橙色或是其他的特征去测量它们在图片中的各个位置同时出现或不同时出现的频率。</p><p>如果我们在通道之间使用相关系数来描述通道的风格，你能做的就是测量你的生成图像中第一个通道（编号 1）是否与第二个通道（编号 2）相关，通过测量，你能得知在生成的图像中垂直纹理和橙色同时出现或者不同时出现的频率，这样你将能够测量生成的图像的风格与输入的风格图像的相似程度。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628121357739.png" alt="image-20200628121357739"></p><p>这就是输入的风格图像所构成的风格矩阵，然后，我们再对生成图像做同样的操作。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628121619706.png" alt="image-20200628121619706"></p><h5 id="一维到三维推广（1D-and-3D-generalizations-of-models）"><a href="#一维到三维推广（1D-and-3D-generalizations-of-models）" class="headerlink" title="一维到三维推广（1D and 3D generalizations of models）"></a>一维到三维推广（1D and 3D generalizations of models）</h5><p>即使我们大部分讨论的图像数据，某种意义上而言都是 2D 数据，考虑到图像如此普遍，许多你所掌握的思想不仅局限于 2D 图像，甚至可以延伸至 1D，乃至 3D 数据。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628122552856.png" alt="image-20200628122552856"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200628122658022.png" alt="image-20200628122658022"></p><h3 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h3><h5 id="为什么选择序列模型？"><a href="#为什么选择序列模型？" class="headerlink" title="为什么选择序列模型？"></a>为什么选择序列模型？</h5><p>我们先看一些例子，这些例子都有效使用了序列模型。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571036986094.png" alt="1571036986094"></p><p>所以这些问题都可以被称作使用标签数据 (x,y)作为训练集的监督学习。但从这一系列例子中你可以看出序列问题有很多不同类型。有些问题里，输入数据 x和输出数据y都是序列，但就算在那种情况下，x和y有时也会不一样长。或者像上图编号 1 所示和上图编号 2 的x和y有相同的数据长度。在另一些问题里，只有 x或者只有y是序列。</p><h5 id="序列模型数学符号"><a href="#序列模型数学符号" class="headerlink" title="序列模型数学符号"></a>序列模型数学符号</h5><p>命名实体识别系统可以用来查找不同类型的文本中的人名、公司名、时间、地点、国家名和货币名等等。现在给定这样的输入数据x，假如你想要一个序列模型输出y，使得输入的每个单词都对应一个输出值，同时这个y能够表明输入的单词是否是人名的一部分。技术上来说这也许不是最好的输出形式，还有更加复杂的输出形式，它不仅能够表明输入词是否是人名的一部分，它还能够告诉你这个人名在这个句子里从哪里开始到哪里结束。</p><p>用x \<t> 来索引这个序列的中间位置。t意味着它们是时序序列，但不论是否是时序序列，我们都将用t来索引序列中的位置。同时我们用T x 来表示输入序列的长度,用T y来表示输出序列的长度.</t></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571037457563.png" alt="1571037457563"></p><p>如果你遇到了一个不在你词表中的单词，答案就是创建一个新的标记，也就是一个叫做 Unknow Word 的伪单词，用\<unk>作为标记，来表示不在词表中的单词.</unk></p><h5 id="循环神经网络模型（Recurrent-Neural-Network-Model"><a href="#循环神经网络模型（Recurrent-Neural-Network-Model" class="headerlink" title="循环神经网络模型（Recurrent Neural Network Model)"></a>循环神经网络模型（Recurrent Neural Network Model)</h5><p>现在我们讨论一下怎样才能建立一个模型，建立一个神经网络来学习X到Y的映射。</p><p>传统标准网络这个方法并不好，主要有两个问题：一、是输入和输出数据在不同例子中可以有不同的长度；二、一个像这样单纯的神经网络结构，它并不共享从文本的不同位置上学到的特征。具体来说，如果神经网络已经学习到了在位置 1 出现的 Harry 可能是人名的一部分，那么如果Harry 出现在其他位置，比如x\<t> 时，它也能够自动识别其为人名的一部分的话，这就很棒了。再次，输入是 10,000 维的 one-hot 向量，那么第一层的权重矩阵就会有着巨量的参数。</t></p><p>那么什么是循环神经网络呢？在每一个时间步中，循环神经网络传递一个激活值到下一个时间步中用于计算。如果你在教材中或是研究论文中看到了右边这种图表的画法（上图编号 2 所示），它可以在心中将这图展开成左图那样。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571037926023.png" alt="1571037926023"></p><p>这个循环神经网络的一个缺点就是它只使用了这个序列中之前的信息来做出预测，并没有使用序列中后部分的信息，如果给定了这个句子，“Teddy Roosevelt was a great President.”，为了判断 Teddy是否是人名的一部分，仅仅知道句中前两个词是完全不够的，还需要知道句中后部分的信息，这也是十分有用的。我们会在之后的双向循环神经网络（BRNN）的视频中处理这个问题。</p><p>用W ax 来表示管理着从x <1> 到隐藏层的连接的一系列参数，每个时间步使用的都是相同的参数W ax 。而激活值也就是水平联系是由参数W aa 决定的，同时每一个时间步都使用相同的参数W aa，同样的输出结果由W ya 决定.</1></p><p>这里是一张清理后的神经网络示意图，和我之前提及的一样，一般开始先输入a <0> ，它是一个零向量。接着就是前向传播过程，先计算激活值a <1> ，然后再计算y<1> 。</1></1></0></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571038257737.png" alt="1571038257737"></p><p>循环神经网络用的激活函数经常是 tanh，不过有时候也会用 ReLU，但是 tanh 是更通常的选择，我们有其他方法来避免梯度消失问题。选用哪个激活函数是取决于你的输出y，如果它是一个二分问题，那么会用 sigmoid 函数作为激活函数，如果是k类别分类问题的话，那么可以选用 softmax 作为激活函数。</p><p>为了帮我们建立更复杂的神经网络，我实际要将这个符号简化一下</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571038816029.png" alt="1571038816029"></p><h5 id="RNN的反向传播"><a href="#RNN的反向传播" class="headerlink" title="RNN的反向传播"></a>RNN的反向传播</h5><p>我们将来了解反向传播是怎样在循环神经网络中运行的。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571038997134.png" alt="1571038997134"></p><p>这就是完整的计算图，在之前的例子中，你已经见过反向传播，所以你应该能够想得到反向传播算法需要在相反的方向上进行计算和传递信息，最终你做的就是把前向传播的箭头都反过来，在这之后你就可以计算出所有合适的量，然后你就可以通过导数相关的参数，用梯度下降法来更新参数。</p><p>RNN 反向传播示意图：</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571039183004.png" alt="1571039183004"></p><h5 id="不同类型的循环神经网络"><a href="#不同类型的循环神经网络" class="headerlink" title="不同类型的循环神经网络"></a>不同类型的循环神经网络</h5><p>现在你已经了解了一种 RNN 结构，它的输入量Tx 等于输出数量Ty 。事实上，对于其他一些应用，Tx  和Ty  并不一定相等。在这个视频里，你会看到更多的 RNN 的结构。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571039446169.png" alt="1571039446169"></p><p>一对一：图片分类；一对多：音乐生成；多对一：文本情感分类；多对多：实体识别，机器翻译。</p><h5 id="语言模型和序列生成"><a href="#语言模型和序列生成" class="headerlink" title="语言模型和序列生成"></a>语言模型和序列生成</h5><p>在自然语言处理中，构建语言模型是最基础的也是最重要的工作之一，并且能用 RNN很好地实现，你将学习用 RNN 构建一个语言模型。</p><p>语言模型所做的就是，它会告诉你某个特定的句子它出现的概率是多少。对于语言模型来说，用来表示这些序列比用x来表示要更好，然后语言模型会估计某个句子序列中各个单词出现的可能性。</p><p>那么如何建立一个语言模型呢？为了使用 RNN 建立出这样的模型，你首先需要一个训练集，包含一个很大的英文文本语料库（corpus）或者其它的语言，你想用于构建模型的语言的语料库。语料库是自然语言处理的一个专有名词，意思就是很长的或者说数量众多的英文句子组成的文本。</p><p>如果你的训练集中有一些词并不在你的字典里，你可以把不在你的字典的词 Mau 替换成一个叫做 UNK 的代表未知词的标志，我们只针对 UNK 建立概率模型，而不是针对这个具体的词 Mau。</p><p>完成标识化的过程后，这意味着输入的句子都映射到了各个标志上，或者说字典中的各个词上。下一步我们要构建一个 RNN 来构建这些序列的概率模型。在下一张幻灯片中会看到的一件事就是最后你会将x \<t> 设为y &lt;t−1&gt;</t></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571040629276.png" alt="1571040629276"></p><p>y^ <1> 的输出是 softmax 的计算结果，它只是预测第一个词的概率，而不去管结果是什么。在我们的例子中，最终会得到单词Cats。然后 RNN 进入下个时间步，在下一时间步中，仍然使用激活项a <1> ，在这步要做的是计算出第二个词会是什么。现在我们依然传给它正确的第一个词，我们会告诉它第一个词就是 Cats，然后在第二个时间步中，输出结果同样经过 softmax 层进行预测，RNN 的职责就是预测这些词的概率（上图编号 3 所示），以此类推，一直到最后。</1></1></p><h5 id="对新序列采样（Sampling-novel-sequences-）"><a href="#对新序列采样（Sampling-novel-sequences-）" class="headerlink" title="对新序列采样（Sampling novel sequences ）"></a>对新序列采样（Sampling novel sequences ）</h5><p>在你训练一个序列模型之后，要想了解到这个模型学到了什么，一种非正式的方法就是进行一次新序列采样，从你的 RNN 语言模型中生成一个随机选择的句子。记住一个序列模型模拟了任意特定单词序列的概率，我们要做的就是对这些概率分布进行采样来生成一个新的单词序列，和原文本有相似的文本风格，如莎士比亚文风，新闻文风等。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571041723310.png" alt="1571041723310"></p><p>那么你要怎样知道一个句子结束了呢？方法之一就是，如果代表句子结尾的标识在你的字典中，你可以一直进行采样直到得到 EOS 标识（上图编号 6 所示），这代表着已经抵达结尾，可以停止采样了。另一种情况是，如果你的字典中没有这个词，你可以决定从 20 个或100 个或其他个单词进行采样，然后一直将采样进行下去直到达到所设定的时间步。</p><p>根据你实际的应用，你还可以构建一个基于字符的 RNN 结构，在这种情况下，你的字典仅包含从 a 到 z 的字母，可能还会有空格符，如果你需要的话，还可以有数字 0 到 9。优点就是你不必担心会出现未知的标识，例如基于字符的语言模型会将 Mau 这样的序列也视为可能性非零的序列。不过基于字符的语言模型一个主要缺点就是你最后会得到太多太长的序列，大多数英语句子只有 10 到 20 个的单词，但却可能包含很多很多字符。并且基于字符的语言模型训练起来计算成本比较高昂。</p><h5 id="循环神经网络的梯度消失（Vanishing-gradients-with-RNNs）"><a href="#循环神经网络的梯度消失（Vanishing-gradients-with-RNNs）" class="headerlink" title="循环神经网络的梯度消失（Vanishing gradients with RNNs）"></a>循环神经网络的梯度消失（Vanishing gradients with RNNs）</h5><p>你已经了解了 RNN 时如何工作的了，并且知道如何应用到具体问题上，比如命名实体识别，比如语言模型，你也看到了怎么把反向传播用于 RNN。其实，基本的 RNN 算法还有一个很大的问题，就是梯度消失的问题。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571042446861.png" alt="1571042446861"></p><p>这个例子中的句子有长期的依赖，最前面的单词单复数对句子后面的单词（was,were)有影响。但是我们目前见到的基本的 RNN 模型（上图编号 3 所示的网络模型），不擅长捕获这种长期依赖效应。</p><p>你应该还记得之前讨论的训练很深的网络，我们讨论了梯度消失的问题。比如说一个很深很深的网络（上图编号 4 所示），100 层，甚至更深，对这个网络从左到右做前向传播然后再反向传播。我们知道如果这是个很深的神经网络，从输出y^ 得到的梯度很难传播回去，很难影响靠前层的权重，很难影响前面层（编号 5 所示的层）的计算。</p><p>对于有同样问题的 RNN，首先从左到右前向传播，然后反向传播。但是反向传播会很困难，因为同样的梯度消失的问题，后面层的输出误差（上图编号 6 所示）很难影响前面层（上图编号 7 所示的层）的计算。上图编号 11 所示的一个数值主要与附近的输入（上图编号 12 所示）有关，上图编号 6 所示的输出，基本上很难受到序列靠前的输入（上图编号 10 所示）的影响.</p><p>尽管我们一直在讨论梯度消失问题，但是，你应该记得我们在讲很深的神经网络时，我们也提到了梯度爆炸，我们在反向传播的时候，随着层数的增多，梯度不仅可能指数型的下降，也可能指数型的上升。梯度爆炸很容易发现，因为参数会大到崩溃，你会看到很多 NaN，或者不是数字的情况，这意味着你的网络计算出现了数值溢出。如果你发现了梯度爆炸的问题，一个解决方法就是用梯度修剪。梯度修剪的意思就是观察你的梯度向量，如果它大于某个阈值，缩放梯度向量，保证它不会太大，这就是通过一些最大值来修剪的方法。</p><h5 id="GRU-单元（Gated-Recurrent-Unit-（GRU-））"><a href="#GRU-单元（Gated-Recurrent-Unit-（GRU-））" class="headerlink" title="GRU  单元（Gated Recurrent Unit （GRU ））"></a>GRU  单元（Gated Recurrent Unit （GRU ））</h5><p>你已经了解了基础的 RNN 模型的运行机制，在本节视频中你将会学习门控循环单元，它改变了 RNN 的隐藏层，使其可以更好地捕捉深层连接，并改善了梯度消失问题.</p><p>RNN 隐藏层的单元的可视化呈现。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571043809693.png" alt="1571043809693"></p><p>当我们从左到右读这个句子，GRU 单元将会有个新的变量称为c，代表细胞（cell），即记忆细胞.记忆细胞的作用是提供了记忆的能力，比如说一只猫是单数还是复数，所以当它看到之后的句子的时候，它仍能够判断句子的主语是单数还是复数。使用不同的符号c和a来表示记忆细胞的值和输出的激活值，即使它们是一样的。我现在使用个标记是因为当我们等会说到LSTMs的时候，这两个会是不同的值，但是现在对于GRU，a\<t> 的值等于c\<t> 的激活值。这些等式表示了 GRU 单元的计算，在每个时间步，我们将用一个候选值重写记忆细胞，即c ̃ \<t> 的值，所以它就是个候选值，替代了c \<t> 的值。</t></t></t></t></p><p>重点来了，在 GRU 中真正重要的思想是我们有一个门,下标为u的大写希腊字母（G），这是一个 0 到 1 之间的值，sigmoid 函数的输出总是非常接近 0 或者非常接近 1。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571043945772.png" alt="1571043945772"></p><p>这就是 GRU 单元或者说是一个简化过的 GRU 单元，它的优点就是通过门决定，当你从左（上图编号 10 所示）到右扫描一个句子的时候，这个时机是要更新某个记忆细胞，还是不更新，不更新（上图编号 11 所示，表示一直不更新）直到你到你真的需要使用记忆细胞的时候（上图编号 12 所示），这可能在句子之前就决定了。</p><p>对于完整的 GRU 单元我要做的一个改变就是在我们计算的第一个式子中给记忆细胞的新候选值加上一个新的项，我要添加一个门 r （下图编号 1 所示），你可以认为r代表相关性（relevance）。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571044930893.png" alt="1571044930893"></p><p>这就是 GRU，即门控循环单元，这是 RNN 的其中之一。这个结构可以更好捕捉非常长范围的依赖，让 RNN 更加有效。</p><h5 id="长短期记忆（LSTM-（long-short-term-memory-）unit-）"><a href="#长短期记忆（LSTM-（long-short-term-memory-）unit-）" class="headerlink" title="长短期记忆（LSTM （long short term memory ）unit ）"></a>长短期记忆（LSTM （long short term memory ）unit ）</h5><p>在上一个视频中你已经学了 GRU（门控循环单元）。它能够让你可以在序列中学习非常深的连接。其他类型的单元也可以让你做到这个，比如 LSTM 即长短时记忆网络，甚至比 GRU更加有效</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571057902547.png" alt="1571057902547"></p><p>这就是 LSTM 主要的式子（上图编号 2 所示），此处c!=a，我们像以前那样有一个更新门Gu和表示更新的参数Wu,一个 LSTM 的新特性是不只有一个更新门控制，这里的这两项（上图编号 6，7 所示），我们将用不同的项来代替它们，要用别的项来取代G u 和1 − Gu ，这里（上图编号 6 所示）我们用Gu 。然后这里（上图编号 7 所示）用遗忘门（the forget gate），我们叫它Gf,,然后我们有一个新的输出门Go(上图9)。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571058201529.png" alt="1571058201529"></p><p>然后这有个有意思的事情，你会注意到上面这里有条线（上图编号 10 所示的线），这条线显示了只要你正确地设置了遗忘门和更新门，LSTM 是相当容易把c<0> 的值（上图编号 11 所示）一直往下传递到右边，比如c<3> =c<0> （上图编号 12 所示）。这就是为什么 LSTM 和 GRU 非常擅长于长时间记忆某个值，对于存在记忆细胞中的某个值，即使经过很长很长的时间步。</0></3></0></p><p>你可能会想到这里和一般使用的版本会有些不同，最常用的版本可能是门值不仅取决于a &lt;t−1&gt; 和x \<t> ，有时候也可以偷窥一下c &lt;t−1&gt; 的值（上图编号 13 所示），这叫做“窥视孔连接”（peephole connection）。<br>LSTM 前向传播图：</t></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571058464967.png" alt="1571058464967"></p><p>GRU 的优点是这是个更加简单的模型，所以更容易创建一个更大的网络，而且它只有两个门，在计算性上也运行得更快，然后它可以扩大模型的规模。但是 LSTM 更加强大和灵活，因为它有三个门而不是两个。如果你想选一个使用，我认为 LSTM 在历史进程上是个更优先的选择，所以如果你必须选一个，我感觉今天大部分的人还是会把 LSTM 作为默认的选择来尝试。</p><h5 id="双向循环神经网络（Bidirectional-RNN-）"><a href="#双向循环神经网络（Bidirectional-RNN-）" class="headerlink" title="双向循环神经网络（Bidirectional RNN ）"></a>双向循环神经网络（Bidirectional RNN ）</h5><p>这个模型可以让你在序列的某点处不仅可以获取之前的信息，还可以获取未来的信息,下面解释双向 RNN 的工作原理。</p><p>我在这上面加个向右的箭头来表示前向的循环单元，并且他们这样连接，我之所以在这些地方画上了箭头是因为我们想要增加一个反向循环层，这个a反向连接就依次反向向前连接。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571059465965.png" alt="1571059465965"></p><p>给定一个句子”He said Teddy Roosevelt…”来预测 Teddy 是不是人名的一部分，你需要同时考虑过去和未来的信息。这就是双向循环神经网络，并且这些基本单元不仅仅是标准 RNN 单元，也可以是 GRU单元或者 LSTM 单元。事实上，很多的 NLP 问题，对于大量有自然语言处理问题的文本，有LSTM 单元的双向 RNN 模型是用的最多的。</p><p>这个双向 RNN网络模型的缺点就是你需要完整的数据的序列，你才能预测任意位置。比如说你要构建一个语音识别系统，那么双向 RNN 模型需要你考虑整个语音表达，但是如果直接用这个去实现的话，你需要等待这个人说完.</p><h5 id="深层循环神经网络（Deep-RNNs-）"><a href="#深层循环神经网络（Deep-RNNs-）" class="headerlink" title="深层循环神经网络（Deep RNNs ）"></a>深层循环神经网络（Deep RNNs ）</h5><p>目前你学到的不同 RNN 的版本，每一个都可以独当一面。但是要学习非常复杂的函数，通常我们会把 RNN 的多个层堆叠在一起构建更深的模型。这节视频里我们会学到如何构建这些更深的 RNN。</p><p>深层的 RNN 网络跟这个有点像，用手画的这个网络（下图左边），然后把它按时间展开就是了deep RNN。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571102283869.png" alt="1571102283869"></p><p>用a [l]\<t> 来表示第 l 层的激活值，这个\<t>表示第t个时间点,第一层第一个时间点的激活值a [1]<1> .</1></t></t></p><p>对于像左边这样标准的神经网络，你可能见过很深的网络，甚至于 100 层深，而对于RNN 来说，有三层就已经不少了。由于时间的维度，RNN 网络会变得相当大，即使只有很少的几层，很少会看到这种网络堆叠到 100 层。但有一种会容易见到，就是在每一个上面堆叠循环层，把这里的输出去掉（上图编号 1 所示），然后换成一些深的层，这些层并不水平连接，只是一个深层的网络，然后用来预测y<1> ,这种结构有三个循环单元，在时间上连接，接着一个网络在后面接一个网络。</1></p><p>通常这些单元（上图编号 3 所示）没必要非是标准的 RNN，最简单的 RNN 模型，也可以是 GRU 单元或者LSTM 单元，并且，你也可以构建深层的双向 RNN 网络。由于深层的 RNN 训练需要很多计算资源，需要很长的时间，尽管看起来没有多少循环层，这个也就是在时间上连接了三个深层的循环层，你看不到多少深层的循环层，不像卷积神经网络一样有大量的隐含层。</p><h3 id="自然语言处理与词嵌入"><a href="#自然语言处理与词嵌入" class="headerlink" title="自然语言处理与词嵌入"></a>自然语言处理与词嵌入</h3><h5 id="词汇表征（Word-Representation-）"><a href="#词汇表征（Word-Representation-）" class="headerlink" title="词汇表征（Word Representation ）"></a>词汇表征（Word Representation ）</h5><p>词嵌入（word embeddings），这是语言表示的一种方式，可以让算法自动的理解一些类似的词，比如男人对女人，比如国王对王后。通过词嵌入的概念你就可以构建 NLP 应用了，即使你的模型标记的训练集相对较小。one-hot表示方法的一大缺点就是它把每个词孤立起来，这样使得算法对相关词的泛化能力不强。这是因为任何两个 one-hot 向量的内积都是 0，如果你取两个向量，比如 king和 queen，然后计算它们的内积，结果就是 0。换一种表示方式会更好，如果我们不用 one-hot 表示，而是用特征化的表示来表示每个词.</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571188216739.png" alt="1571188216739"></p><p>举个例子，对于这些词，比如我们想知道这些词与 Gender（ 性别）的关系。假定男性的性别为-1，女性的性别为+1，那么 man 的性别值可能就是-1，而 woman 就是+1。最终根据经验 king 就是-0.95，queen 是+0.97，apple 和 orange 没有性别可言。所以你可以想很多的特征，为了说明，我们假设有 300 个不同的特征，这样的话你就有了这一列数字（上图编号 1 所示），这里我只写了 4 个，实际上是 300 个数字，这样就组成了一个 300 维的向量来表示 man 这个词。接下来，我想用e5391 这个符号来表示，就像这样(上图编号 2 所示）。如果用这种表示方法来表示 apple 和 orange 这些词，那么 apple 和 orange 的这种表示肯定会非常相似.</p><p>后面的几个视频，我们会找到一个学习词嵌入的方式，这里只是希望你能理解这种高维特征的表示能够比 one-hot 更好的表示不同的单词。而我们最终学习的特征不会像这里一样这么好理解，没有像第一个特征是性别，第二个特征是高贵，第三个特征是年龄等等这些，新的特征表示的东西肯定会更难搞清楚。</p><p>如果我们能够学习到一个 300 维的特征向量，或者说 300 维的词嵌入，通常我们可以做一件事，把这 300 维的数据嵌入到一个二维空间里，这样就可以可视化了。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571188377038.png" alt="1571188377038"></p><p>如果观察这种词嵌入的表示方法，你会发现 man 和 woman 这些词聚集在一块（上图编号 1 所示），king 和<br>queen 聚集在一块（上图编号 2 所示），这些都是人，也都聚集在一起（上图编号 3 所示）。动物都聚集在一起（上图编号 4 所示），水果也都聚集在一起（上图编号 5 所示），像 1、2、3、4 这些数字也聚集在一起（上图编号 6 所示）。如果把这些生物看成一个整体，他们也聚集在一起（上图编号 7 所示）。</p><h5 id="使用词嵌入"><a href="#使用词嵌入" class="headerlink" title="使用词嵌入"></a>使用词嵌入</h5><p>下面是一個命名實體识别的例子</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571188960022.png" alt="1571188960022"></p><p>词嵌入能够达到这种效果，其中一个原因就是学习词嵌入的算法会考察非常大的文本集，也许是从网上找到的，这样你可以考察很大的数据集可以是 1 亿个单词，甚至达到 100 亿也都是合理的，大量的无标签的文本的训练集。你可以发现 orange（ 橙子）和 durian（ 榴莲）相近，farmer（ 农民）和 cultivator（ 培育家）相近。</p><p>总结一下，这是如何用词嵌入做迁移学习的步骤。<br>第一步，先从大量的文本集中学习词嵌入。一个非常大的文本集，或者可以下载网上预训练好的词嵌入模型，网上你可以找到不少，词嵌入模型并且都有许可。<br>第二步，你可以用这些词嵌入模型把它迁移到你的新的只有少量标注训练集的任务中，比如说用这个 300 维的词嵌入来表示你的单词。这样做的一个好处就是你可以用更低维度的特征向量代替原来的 10000 维的 one-hot 向量，现在你可以用一个 300 维更加紧凑的向量。尽管 one-hot 向量很快计算，而学到的用于词嵌入的 300 维的向量会更加紧凑。<br>第三步，当你在你新的任务上训练模型时，在你的命名实体识别任务上，只有少量的标记数据集上，你可以自己选择要不要继续微调，用新的数据调整词嵌入。实际中，只有这个第二步中有很大的数据集你才会这样做，如果你标记的数据集不是很大，通常我不会在微调词嵌入上费力气。</p><h5 id="词嵌入的特性"><a href="#词嵌入的特性" class="headerlink" title="词嵌入的特性"></a>词嵌入的特性</h5><p>词嵌入还有一个迷人的特性就是它还能帮助实现类比推理。假如我提出一个问题，man 如果对应 woman，那么king 应该对应什么？你们应该都能猜到 king 应该对应 queen。能否有一种算法来自动推导出这种关系，下面就是实现的方法,用相似度。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571189765075.png" alt="1571189765075"></p><h5 id="嵌入矩阵（Embedding-Matrix"><a href="#嵌入矩阵（Embedding-Matrix" class="headerlink" title="嵌入矩阵（Embedding Matrix)"></a>嵌入矩阵（Embedding Matrix)</h5><p>当你应用算法来学习词嵌入时，实际上是学习一个嵌入矩阵，假设我们的词汇表含有 10,000 个单词，词汇表里有 a，aaron，orange，zulu，可能还有一个未知词标记\<unk>。我们要做的就是学习一个嵌入矩阵E，它将是一个<br>300×10,000 的矩阵，如果你的词汇表里有 10,000 个，或者加上未知词就是 10,001 维。这个矩阵的各列代表的是词汇表中 10,000 个不同的单词所代表的不同向量。</unk></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571190390469.png" alt="1571190390469"></p><p>把矩阵𝐹和这个one-hot向量相乘，最后得到的其实就是这个300维的列,就是单词 orange 下的这一列，它等于e6257 ，这个符号是我们用来表示这个 300×1 的嵌入向量的符号，它表示的单词是 orange。在实践中你会使用一个专门的函数来单独查找矩阵E的某列，而不是用通常的矩阵乘法来做,例如在 Keras 中就有一个嵌入层，然后我们用这个嵌入层更有效地从嵌入矩阵中提取出你需要的列，而不是对矩阵进行很慢很复杂的乘法运算。</p><h5 id="学习词嵌入"><a href="#学习词嵌入" class="headerlink" title="学习词嵌入"></a>学习词嵌入</h5><p>你将要学习一些具体的算法来学习词嵌入。假如你在构建一个语言模型，并且用神经网络来实现这个模型。于是在训练过程中，你可能想要你的神经网络能够做到比如输入：“I want a glass of orange ___.”，然后预测这句话的下一个词。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571191116845.png" alt="1571191116845"></p><p>下面我将介绍如何建立神经网络来预测序列中的下一个单词,我们从第一个词 I 开始，建立一个 one-hot 向量表示这个单词 I,这是一个 one-hot 向量,它是一个 10,000 维的向量。然后要做的就是生成一个参数矩阵E，然后用E乘以O 4343 ，得到嵌入向量e 4343.然后我们对其他的词也做相同的操作。</p><p>于是现在你有许多 300 维的嵌入向量。我们能做的就是把它们全部放进神经网络中，经过神经网络以后再通过 softmax 层（上图编号 4 所示），这个 softmax也有自己的参数，然后这个 softmax 分类器会在 10,000 个可能的输出中预测结尾这个单词。</p><p>实际上更常见的是有一个固定的历史窗口，举个例子，你总是想预测给定四个单词（上图编号 1 所示）后的下一个单词，注意这里的 4 是算法的超参数。这就是如何适应很长或者很短的句子，方法就是总是只看前 4 个单词，所以说我只用这 4 个单词（上图编号 2 所示）而不去看这几个词（上图编号 3 所示）。這個个模型的参数就是矩阵E，对所有的单词用的都是同一个矩阵E，而不是对应不同的位置上的不同单词用不同的矩阵。然后这些权重（上图编号 5 所示）也都是算法的参数，你可以用反向传播来进行梯度下降来最大化训练集似然，通过序列中给定的 4 个单词去重复地预测出语料库中下一个单词什么。</p><p>如果你的目标是学习一个嵌入向量，研究人员已经尝试过很多不同类型的上下文。如果你要建立一个语言模型，那么一般选取目标词之前的几个词作为上下文。但如果你的目标不是学习语言模型本身的话，那么你可以选择其他的上下文。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571191479373.png" alt="1571191479373"></p><p>你可以提出这样一个学习问题，它的上下文是左边和右边的四个词，你可以把目标词左右各 4 个词作为上下文（上图编号 3 所示这就意味着我们提出了一个这样的问题，算法获得左边 4 个词，也就是 a glass of orange，还有右边四个词 to go along with，然后要求预测出中间这个词（上图编号 4 所示）。提出这样一个问题，这个问题需要将左边的还有右边这 4 个词的嵌入向量提供给神经网络，就像我们之前做的那样来预测中间的单词是什么，来预测中间的目标词，这也可以用来学习词嵌入。</p><p>研究者发现，如果你真想建立一个语言模型，用目标词的前几个单词作为上下文是常见做法（上图编号 9 示）。但如果你的目标是学习词嵌入，那么你就可以用这些其他类型的上下文（上图编号 10 所示），它们也能得到很好的词嵌入。</p><h5 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h5><p>你已经见到了如何学习一个神经语言模型来得到更好的词嵌入，在本视频中你会见到 Word2Vec 算法，这是一种简单而且计算时更加高效的方式来学习这种类型的嵌入。</p><p>于是我们将构造一个监督学习问题，它给定上下文词，要求你预测在这个词正负 10 个词距或者正负 5 个词距内随机选择的某个目标词。假设在训练集中给定了一个这样的句子：“I want a glass of orange juice to go along with my cereal.”，在 Skip-Gram 模型中，我们要做的是抽取上下文和目标词配对，来构造一个监督学习问题。上下文不一定总是目标单词之前离得最近的四个单词，或最近的n个单词。我们要的做的是随机选一个词作为上下文词，比如选 orange 这个词，然后我们要做的是随机在一定词距内选另一个词，比如在上下文词前后 5 个词内或者前后 10 个词内，我们就在这个范围内选择目标词。可能你正好选到了 juice 作为目标词，正好是下一个词（表示 orange的下一个词）也有可能你选到了前面第二个词，所以另一种配对目标词可以是 glass，还可能正好选到了单词 my 作为目标词。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571194211944.png" alt="1571194211944"></p><p>这大体上就是一个可以找到词嵌入的简化模型和神经网络（上图编号 2 所示），其实就是个 softmax 单元。矩阵𝐹将会有很多参数，所以矩阵E有对应所有嵌入向量e c的参数（上图编号 6 所示），softmax 单元也有θt 的参数（上图编号 3 所示）。如果优化这个关于所有这些参数的损失函数，你就会得到一个较好的嵌入向量集，这个就叫做 Skip-Gram模型。它把一个像 orange 这样的词作为输入，并预测这个输入词，从左数或从右数的某个词，预测上下文词的前面一些或者后面一些是什么词。</p><p>实际上使用这个算法会遇到一些问题，首要的问题就是计算速度。这个分母的求和操作是相当慢的，实际10,000 已经是相当慢的了，所以扩大词汇表就更加困难了。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571194415590.png" alt="1571194415590"></p><p>这里有一些解决方案，如分级（hierarchical）的 softmax 分类器和 负采样（Negative Sampling）。使用一个分级（hierarchical）的 softmax 分类器，意思就是说不是一下子就确定到底是属于 10,000 类中的哪一类。想象如果你有一个分类器，它告诉你目标词是在词汇表的前 5000 个中还是在词汇表的后 5000 个词中，一直类推，直到最终你找到一个词准确所在的分类器。</p><p>在实践中分级 softmax 分类器不会使用一棵完美平衡的分类树或者说一棵左边和右边分支的词数相同的对称树。实际上，分级的 softmax分类器会被构造成常用词在顶部，然而不常用的词像 durian 会在树的更深处。因为你想更常见的词会更频繁，所以你可能只需要少量检索就可以获得常用单词像 the 和 of。</p><p>一旦你对上下文 c 进行采样，那么目标词 t 就会在上下文 c 的正负 10 个词距内进行采样。但是你要如何选择上下文c？一种选择是你可以就对语料库均匀且随机地采样，如果你那么做，你会发现有一些词，像 the、of、a，and、to 诸如此类是出现得相当频繁的，你会发现你的上下文到目标词的映射会相当频繁地得到这些种类的词，但是其他词，像 orange、apple 或 durian 就不会那么频繁地出现了。实际上词p(c)的分布并不是单纯的在训练集语料库上均匀且随机的采样得到的，而是采用了不同的分级来平衡更常见的词和不那么常见的词.</p><p>实际上有两个不同版本的 Word2Vec 模型，Skip-Gram 只是其中的一个，另一个叫做CBOW，即连续词袋模型（Continuous Bag-Of-Words Model），它获得中间词两边的的上下文，然后用周围的词去预测中间的词，这个模型也很有效，也有一些优点和缺点。CBOW 是从原始语句推测目标字词；而 Skip-Gram 正好相反，是从目标字词推测出原始语句。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571194871380.png" alt="1571194871380"></p><h5 id="负采样（Negative-Sampling"><a href="#负采样（Negative-Sampling" class="headerlink" title="负采样（Negative Sampling)"></a>负采样（Negative Sampling)</h5><p>你会看到一个改善过的学习问题叫做负采样，它能做到与你刚才看到的 Skip-Gram 模型相似的事情，但是用了一个更加有效的学习算法.我们在这个算法中要做的是构造一个新的监督学习问题，那么问题就是给定一对单词，<br>比如 orange 和 juice，我们要去预测这是否是一对上下文词-目标词（context-target）。</p><p>在这个例子中 orange 和 juice 就是个正样本，那么 orange 和 king 就是个负样本，我们把它标为 0。我们要做的就是采样得到一个上下文词和一个目标词，在这个例子中就是orange 和 juice，我们用 1 作为标记.</p><p>正样本跟上个视频中生成的方式一模一样，先抽取一个上下文词，在一定词距内比如说正负 10 个词距内选一个目标词，这就是生成这个表的第一行，即 orange–juice -1 的过程。然后为了生成一个负样本，你将用相同的上下文词，再在字典中随机选一个词，在这里我随机选了单词 king，标记为 0。还是 orange，再可能正好选到 of这个词，再把这个标记为 0，注意 of 被标记为 0，即使 of 的确出现在 orange 词的前面,只要是在选的，都标为0。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571195653127.png" alt="1571195653127"></p><p>接下来我们将构造一个监督学习问题，其中学习算法输入x,输入这对词,要去预测目标的标签y,因此问题就是给定一对词，像 orange 和 juice，你觉得它们会一起出现么？小数据集的话，K从 5 到 20 比较好。如果你的数据集很大，K就选的小一点。为了定义模型，我们将使用记号c表示上下文词，记号t表示可能的目标词，我再用y表示 0 和 1，表示是否是一对上下文-目标词。</p><p>不使用一个巨大的 10,000 维度的 softmax，因为计算成本很高，而是把它转变为 10,000 个二分类问题，每个都很容易计算，每次迭代我们要做的只是训练它们其中的 5 个，一般而言就是K + 1个，其中K个负样本和 1 个正样本。这也是为什么这个算法计算成本更低，因为只需更新K + 1个逻辑单元，K + 1个二分类问题，相对而言每次迭代的成本比更新 10,000 维的 softmax 分类器成本低</p><p>这个算法有一个重要的细节就是如何选取负样本，即在选取了上下文词 orange 之后，你如何对这些词进行采样生成负样本？一个办法是对中间的这些词进行采样，即候选的目标词，你可以根据其在语料中的经验频率进行采样，就是通过词出现的频率对其进行采样。但问题是这会导致你在 like、the、of、and 诸如此类的词上有很高的频率。另一个极端就是用均匀且随机地抽取负样本.采用公式的方法采样，f(w 𝑗 )是观测到的在语料库中的某个英文词的词频.</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571196350537.png" alt="1571196350537"></p><p>去下载其他人的词向量是很好的方法，在此基础上改进。</p><h5 id="GloVe-词向量（GloVe-Word-Vectors"><a href="#GloVe-词向量（GloVe-Word-Vectors" class="headerlink" title="GloVe  词向量（GloVe Word Vectors)"></a>GloVe  词向量（GloVe Word Vectors)</h5><p>了解了几个计算词嵌入的算法，另一个在 NLP 社区有着一定势头的算法是 GloVe算法，这个算法并不如Word2Vec 或是 Skip-Gram 模型用的多，但是也有人热衷于它.GloVe 代表用词表示的全局变量（global vectors for word representation）。</p><p>假定X ij 是单词i在单词j上下文中出现的次数，那么这里i和j就和t和c的功能一样，所以你可以认为X ij等同于X tc 。对于 GloVe 算法，我们可以定义上下文和目标词为任意两个位置相近的单词，假设是左右各10 词的距离，那么X ij就是一个能够获取单词i和单词j出现位置相近时或是彼此接近的频率的计数器.</p><p>GloVe 模型做的就是进行优化，我们将他们之间的差距进行最小化处理：</p><p>对于这个（下图编号 1 所示）来说，你想要知道的是告诉你这两个单词之间有多少联系,换句话说就是他们同时出现的频率是多少.然后，我们要做的是解决参数θ和e的问题，用梯度下降来最小化上面的公式，你只想要学习一些向量，这样他们的输出能够对这两个单词同时出现的频率进行良好的预测。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571197193342.png" alt="1571197193342"></p><p>如果Xij是等于 0 的话，那log0就是未定义的，是负无穷大的，因此要做的就是添加一个额外的加权项f(Xij)（上图编号 2 所示）。它另一个作用是，有些词在英语里出现十分频繁，比如说 this，is，of，a 等等，有些情况，这叫做 停止词，但是在频繁词和不常用词之间也会有一个连续统（continuum）。即使是像 durion 这样不常用的词，它也能给予大量有意义的运算，同时也能够给像 this，is，of，a 这样在英语里出现更频繁的词更大但不至于过分的权重。</p><p>当你在使用我们了解过的算法的一种来学习一个词嵌入时，例如我们之前的幻灯片里提到的 GloVe 算法，会发生一件事就是你不能保证嵌入向量的独立组成部分是能够理解的，不像前面例子中的gender，size等。</p><h5 id="情感分类（Sentiment-Classification"><a href="#情感分类（Sentiment-Classification" class="headerlink" title="情感分类（Sentiment Classification"></a>情感分类（Sentiment Classification</h5><p>情感分类任务就是看一段文本，然后分辨这个人是否喜欢他们在讨论的这个东西。输入x是一段文本，而输出y是你要预测的相应情感。比如说是一个餐馆评价的星级.如果在很大的训练集上训练E，比如一百亿的单词，这样你就会获得很多知识，甚至从有些不常用的词中获取，然后应用到你的问题上，即使你的标记数据集里没有这些词。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571206219097.png" alt="1571206219097"></p><p>这里用的平均值运算单元，这个算法适用于任何长短的评论，因为即使你的评论是 100个词长，你也可以对这一百个词的特征向量求和或者平均它们，然后得到一个表示一个 300维的特征向量表示，然后把它送进你的 softmax 分类器，所以这个平均值运算效果不错。它实际上会把所有单词的意思给平均起来，或者把你的例子中所有单词的意思加起来就可以用了。<br>这个算法有一个问题就是没考虑词序，尤其是这样一个负面的评价，”Completely lacking in good taste, good service, and good ambiance.”，但是 good 这个词出现了很多次，有 3 个good，你的分类器很可能认为这是一个好的评论，尽管事实上这是一个差评，只有一星的评价。</p><p><img src="/../../132456/blogSource/_posts/n../assets/blogimg/1571206333247.png" alt="1571206333247"></p><p>如果你训练一个这样的算法，最后会得到一个很合适的情感分类的算法。由于你的词嵌入是在一个更大的数据集里训练的，这样效果会更好，更好的泛化一些没有见过的新的单词。</p><h5 id="词嵌入除偏（Debiasing-Word-Embeddings"><a href="#词嵌入除偏（Debiasing-Word-Embeddings" class="headerlink" title="词嵌入除偏（Debiasing Word Embeddings)"></a>词嵌入除偏（Debiasing Word Embeddings)</h5><p>现在机器学习和人工智能算法正渐渐地被信任用以辅助或是制定极其重要的决策，因此我们想尽可能地确保它们不受非预期形式偏见影响，比如说性别歧视、种族歧视等等。本节视频中我会向你展示词嵌入中一些有关减少或是消除这些形式的偏见的办法。</p><p>比如：已经完成学习的词嵌入可能会输出 Man：Computer Programmer，同时输出 Woman：Homemaker，那个结果看起来是错的，并且它执行了一个十分不良的性别歧视。</p><p>偏见趋势可以将它看做 1D 子空间，所以这个无偏见趋势就会是 299D 的子空间。我已经略微简化了，原文章中的描述这个偏见趋势可以比 1 维更高</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571207074320.png" alt="1571207074320"></p><p>1.用一个更加复杂的算法叫做 SVU，也就是奇异值分解，如果你对主成分分析（Principle Component Analysis）很熟悉的话，奇异值分解这个算法的一些方法和主成分分析 (PCA)其实很类似。</p><p>2.中和步骤，所以对于那些定义不确切的词可以将其处理一下，避免偏见。不过也有一些词像 doctor ,babysitter 我们想使之在性别方面是中立的。减少或是消除他们的性别歧视趋势的成分，也就是说减少他们在这个水平方向上的距离</p><p>3.均衡步，意思是说你可能会有这样的词对，grandmother 和 grandfather，或者是 girl和 boy，对于这些词嵌入，你只希望性别是其区别。babysitter和grandmother之间的距离或者说是相似度实际上是小于babysitter和grandfather之间的,在最后的均衡步中，我们想要确保的是像 grandmother 和 grandfather 这样的词都能够有一致的相似度，或者说是相等的距离，和 babysitter 或是 doctor 这样性别中立的词一样。</p><h3 id="序列模型和注意力机制"><a href="#序列模型和注意力机制" class="headerlink" title="序列模型和注意力机制"></a>序列模型和注意力机制</h3><h5 id="序列结构的各种序列"><a href="#序列结构的各种序列" class="headerlink" title="序列结构的各种序列"></a>序列结构的各种序列</h5><p>在这一周，你将会学习 seq2seq（sequence to sequence）模型，从机器翻译到语音识别，它们都能起到很大的作用，从最基本的模型开始。之后你还会学习集束搜索（Beam search）和注意力模型（Attention Model），一直到最后的音频模型，比如语音。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571207799664.png" alt="1571207799664"></p><p>首先，我们先建立一个网络，这个网络叫做编码网络（encoder network）（上图编号 1所示），它是一个 RNN 的结构， RNN 的单元可以是 GRU 也可以是 LSTM。每次只向该网络中输入一个法语单词，将输入序列接收完毕后，这个 RNN 网络会输出一个向量来代表这个输入序列。之后你可以建立一个解码网络，我把它画出来（上图编号 2 所示），它以编码网络的输出作为输入，编码网络是左边的黑色部分（上图编号 1 所示），之后它可以被训练为每次输出一个翻译后的单词，一直到它输出序列的结尾或者句子结尾标记，这个解码网络的工作就结束了。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571207894300.png" alt="1571207894300">还有一个与此类似的结构被用来做图像描述，给出一张图片，比如这张猫的图片（上图编号 1 所示），它能自动地输出该图片的描述，一只猫坐在椅子上.在之前的卷积网络课程中，你已经知道了如何将图片输入到卷积神经网络中，比如一个预训练的 AlexNet 结构（上图编号 2 方框所示），然后让其学习图片的编码，或者学习图片的一系列特征。我们去掉最后的 softmax单元（上图编号 3 所示），这个预训练的 AlexNet 结构会给你一个 4096 维的特征向量，向量表示的就是这只猫的图片，所以这个预训练网络可以是图像的编码网络。接着你可以把这个向量输入到 RNN 中（上图编号 4 方框所示），RNN 要做的就是生成图像的描述，每次生成一个单词.</p><h5 id="选择最可能的句子"><a href="#选择最可能的句子" class="headerlink" title="选择最可能的句子"></a>选择最可能的句子</h5><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571209308057.png" alt="1571209308057"></p><p>机器翻译模型其实和语言模型非常相似，不同在于语言模型总是以零向量（上图编号 4 所示）开始，而 encoder 网络会计算出一系列向量（上图编号 2 所示）来表示输入的句子。当你使用这个模型来进行机器翻译时，你并不是从得到的分布中进行随机取样，而是你要找到一个英语句子y,使得条件概率最大化。</p><p>如果你的字典中有 10,000 个单词，并且你的翻译可能有 10 个词那么长，那么可能的组合就有 10,000 的 10 次方这么多，这仅仅是10 个单词的句子，从这样大一个字典中来挑选单词，所以可能的句子数量非常巨大，不可能去计算每一种组合的可能性。所以这时最常用的办法就是用一个近似的搜索算法，这个近似的搜索算法做的就是它会尽力地，尽管不一定总会成功，但它将挑选出句子y使得条件概率最大化，尽管它不能保证找到的y值一定可以使概率最大化，但这已经足够了,下节课中学习集束搜索。 </p><h5 id="集束搜索（Beam-Search-）"><a href="#集束搜索（Beam-Search-）" class="headerlink" title="集束搜索（Beam Search ）"></a>集束搜索（Beam Search ）</h5><p>这节，你会明白怎么把集束搜索算法应用到你自己的工作中。贪婪算法只会挑出最可能的那一个单词，然后继续。而集束搜索则会考虑多个选择，集束搜索算法会有一个参数 B，叫做集束宽（beam width）。在这个例子中我把这个集束宽设成 3，这样就意味着集束搜索不会只考虑一个可能结果，而是一次会考虑 3 个，比如对第一个单词有不同选择的可能性，最后找到 in、jane、september。</p><p>让我们看看集束搜索算法的第二步，已经选出了 in、jane、september 作为第一个单词三个最可能的选择，集束算法接下来会针对每个第一个单词考虑第二个单词是什么。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571210280755.png" alt="1571210280755"></p><p>在第二步里我们更关心的是要找到最可能的第一个和第二个单词对，所以不仅仅是第二个单词有最大的概率，而是第一个、第二个单词对有最大的概率，按照条件概率的准则，这个可以表示成第一个单词的概率乘以第二个单词的概率。这果集束搜索找到了第一个和第二个单词对最可能的三个选择是“in September”或者“jane is”或者“jane visits”，这就意味着我们去掉了 september 作为英语翻译结果的第一个单词的选择。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571210601665.png" alt="1571210601665"></p><p>然后继续，接着进行集束搜索的第四步，再加一个单词继续，最终这个过程的输出一次增加一个单词，集束搜索最终会找到“Jane visits africa in september”这个句子，终止在句尾符号。</p><h5 id="改进集束搜索"><a href="#改进集束搜索" class="headerlink" title="改进集束搜索"></a>改进集束搜索</h5><p>你已经学到了基本的束搜索算法，这个视频里,我们会学到一些技巧, 能够使算法运行的更好。长度归一化（Length normalization）就是对束搜索算法稍作调整的一种方式，B的选取也至关重要。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571211192176.png" alt="1571211192176"></p><p>前面讲到束搜索就是最大化这个概率，这些符号看起来可能比实际上吓人，但这就是我们之前见到的乘积概率（the product probabilities）。如果计算这些，其实这些概率值都是小于 1 的，通常远小于 1。很多小于 1<br>的数乘起来，会得到很小很小的数字，会造成数值下溢（numerical underflow）。在实践中,我们不会最大化这<br>个乘积，而是取log值。这样我们会得到一个数值上更稳定的算法，不容易出现四舍五入的误差，数值的舍入误差（rounding errors）或者说数值下溢（numerical underflow）。</p><p>如果参照原来的目标函数（this original objective），如果有一个很长的句子，那么这个句子的概率会很低，因为乘了很多项小于 1 的数字来估计句子的概率。所以这个目标函数有一个缺点，它可能不自然地倾向于简短的翻译结果，它更偏向短的输出。我们可以把它归一化，通过除以翻译结果的单词数量，这样就是取每个单词的概率对数值的平均了，这样很明显地减少了对输出长的结果的惩罚，有时会用一个更柔和的方法（a softer approach），在Ty 上加上指数α，α可以等于 0.7。</p><p>最后还有一些实现的细节，如何选择束宽 B。如果束宽很大，你会考虑很多的可能，你会得到一个更好的结果，因为你要考虑很多的选择，但是算法会运行的慢一些，内存占用也会增大，计算起来会慢一点。而如果你用小的束宽，结果会没那么好，因为你在算法运行中，保存的选择更少，但是你的算法运行的更快，内存占用也小。到束宽为 3、到 10，你会看到一个很大的改善。但是当束宽从 1000 增加到 3000 时，效果就没那么明显了。不同于BFS,DFS这些算法，这些都是精确的搜索算法（exact search algorithms），束搜索运行的更快，但是不能保证一定能找到 argmax 的准确的最大值。</p><h5 id="集束搜索的误差分析"><a href="#集束搜索的误差分析" class="headerlink" title="集束搜索的误差分析"></a>集束搜索的误差分析</h5><p>你将会学习到误差分析和束搜索算法是如何相互起作用的，以及你怎样才能发现是束搜索算法出现了问题，需要花时间解决，还是你的 RNN 模型出了问题，要花时间解决。我们先来看看如何对束搜索算法进行误差分析。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571212881333.png" alt="1571212881333"></p><p>再接着你遍历了更多的例子，有时是束搜索算法出现了问题，有时是模型出现了问题，等等。通过这个过程，你就能够执行误差分析，得出束搜索算法和 RNN 模型出错的比例是多少。只有当你发现是束搜索算法造成了大部分错误时，才值得花费努力增大集束宽度。相反地，如果你发现是 RNN 模型出了更多错，那么你可以进行更深层次的分析，来决定是需要增加正则化还是获取更多的训练数据，抑或是尝试一个不同的网络结构，或是其他方案。</p><h5 id="Bleu得分"><a href="#Bleu得分" class="headerlink" title="Bleu得分"></a>Bleu得分</h5><p>机器翻译（machine translation）的一大难题是一个法语句子可以有多种英文翻译而且都同样好，所以当有多个同样好的答案时，怎样评估一个机器翻译系统呢？BLEU  得分做的就是，给定一个机器生成的翻译，它能够自动地计算一个分数来衡量机器翻译的好坏。直觉告诉我们，只要这个机器生成的翻译与任何一个人工翻译的结果足够接近，那么它就会得到一个高的 BLEU 分数。顺便提一下 BLEU 代表 bilingual evaluation understudy (双语评估替补)。</p><p>衡量机器翻译输出质量的方法之一是观察输出结果的每一个词看其是否出现在参考中，这被称做是机器翻译的精确<br>度,但是下面的句子输出7个the，精度为7/7=100%，但输出结果很差。另外，我们在达到上限时截断计数，这就是改良后的精确度评估，为2/7，这些方案都不太好。</p><p>到目前为止，我们都只是关注单独的单词，在 BLEU 得分中，你不想仅仅考虑单个的单词，你也许也想考虑成对的单词，我们定义一下二元词组（bigrams）的 BLEU 得分。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571215752213.png" alt="1571215752213"></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571215985146.png" alt="1571215985146"></p><p>基于我们在一元词组中学到的内容，我们将改良后的一元词组精确度定义为P 1 ，P代表的是精确度。这里的下标 1 的意思是一元词组。你也可以定义P n 为n元词组精确度，用 n-gram 替代掉一元词组。所以这就是机器翻译输出中的n元词组的countclip 之和除以n元词组的出现次数之和。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571216211587.png" alt="1571216211587"></p><p>最后，我们将这些组合一下来构成最终的 BLEU 得分。我们实际上会用额外的一个叫做 BP 的惩罚因子（the BP penalty）来调整这项。BP 的意思是“简短惩罚”（ brevity penalty）。如果你输出了一个非常短的翻译，那么它会更容易得到一个高精确度。因为输出的大部分词可能都出现在参考之中，不过我们并不想要特别短的翻译结果。实践中，很少人会从零实现一个 BLEU 得分（implement a BLEU score from scratch），有很多开源的实现结果，你可以下载下来然后直接用来评估你的系统。</p><h5 id="注意力机制（Attention-Model）"><a href="#注意力机制（Attention-Model）" class="headerlink" title="注意力机制（Attention Model）"></a>注意力机制（Attention Model）</h5><p>注意力模型或者说注意力这种思想（The attention algorithm, the attention idea）已经是深度学习中最重要的思想之一，我们看看它是怎么运作的。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571282972958.png" alt="1571282972958"></p><p>像这样给定一个很长的法语句子，在你的神经网络中，这个绿色的编码器要做的就是读整个句子，然后记忆整个句子，再在感知机中传递，而对于这个紫色的神经网络，即解码网络（the decoder network）将生成英文翻译。人工翻译并不会通过读整个法语句子，再记忆里面的东西，然后从零开始，机械式地翻译成一个英语句子。而人工翻译，首先会做的可能是先翻译出句子的部分，再看下一部分，并翻译这一部分。</p><p>你会通过句子，一点一点地翻译，因为记忆整个的像这样的的句子是非常困难的。你在下面这个编码解码结构中，会看到它对于短句子效果非常好，于是它会有一个相对高的 Bleu 分（Bleu score），但是对于长句子而言，比如说大于 30 或者 40 词的句子，它的表现就会变差。注意力模型，它翻译得很像人类，一次翻译句子的一部分。而且有了注意力模型，机器翻译系统的表现会像这个一样，因为翻译只会翻译句子的一部分，你不会看到这个有一<br>个巨大的下倾（huge dip），这个下倾实际上衡量了神经网络记忆一个长句子的能力。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571283241947.png" alt="1571283241947"></p><p>我们要对单词做的就是，对于句子里的每五个单词，计算一个句子中单词的特征集，也有可能是周围的词，让我们试试，生成英文翻译。我们将使用另一个RNN 生成英文翻译，这是我平时用的 RNN 记号。我不用A来表示感知机（the activation），这是为了避免和这里的感知机（the activations）混淆。我会用另一个不同的记号，我会用S<br>来表示 RNN 的隐藏状态（the hidden state in this RNN).</p><p>当你尝试生成第一个词，即输出，那么我们应该看输入的法语句子的哪个部分？注意力模型就会计算注意力权重（a set of attention weights），我们将用α&lt;1,1&gt; 来表示当你生成第一个词时你应该放多少注意力在这个第一块信息处。然后我们算第二个，这个叫注意力权重，我们应该花多少注意力在输入的第二个词上面。依次类推，当生成一个特定的英文词时，这允许它在每个时间步去看周围词距内的法语词要花多少注意力。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571283564069.png" alt="1571283564069"></p><p>你已经见到了,注意力模型如何让一个神经网络只注意到一部分的输入句子。当它在生成句子的时候，更像人类翻译。让我们把这些想法转化成确切的式子，来实现注意力模型。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571283648650.png" alt="1571283648650"></p><p>我们先假定有一个输入句子，并使用双向的 RNN，或者双向的 GRU或者双向的 LSTM，去计算每个词的特征。对于前向传播（the forward occurrence），你有第一个时间步的前向传播的激活值（a forward occurrence first time step），第一个时间步后向传播的激活值，后向的激活值，以此类推。他们一共向前了五个时间步，也向后了五个时间步，技术上我们把这里设置为 0。a \<t> 就是时间步t上的特征向量。为了保持记号的一致性，我们用第二个，也就是t′，实际上我将用t′来索引法语句子里面的词,接下来我们只进行前向计算，就是说这是个单向的 RNN，用状态S表示生成翻译。所以第一个时间步，它应该生成y <1> ，当你输入上下文C的时候就会这样，如果你想用时间来索引它，你可以写C<1> ，a参数告诉我们上下文有多少取决于我们得到的特征，或者我们从不同时间步中得到的激活值。所以我们定义上下文的方式实际上来源于被注意力权重加权的不同时间步中的特征值。换句话来说，当你在t处生成输出词，你应该花多少注意力在第t′个输入词上面，这是生成输出的其中一步。然后下一个时间步，你会生成第二个输出。</1></1></t></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571284095137.png" alt="1571284095137"></p><p>现在我们如何计算这些e项，一种我们可以用的方式是用下面这样的小的神经网络，s &lt;t−1&gt; 就是神经网络在上个时间步的状态，于是这里我们有一个神经网络,如果你想要生成y \<t> ，那么s &lt;t−1&gt; 就是上一时间步的隐藏状态。然后a &lt;t′&gt; ，即上个时间步的的特征是另一个输入。直观来想就是，如果你想要决定要花多少注意力在t′的激活值上。</t></p><h5 id="语音识别（Speech-recognition-）"><a href="#语音识别（Speech-recognition-）" class="headerlink" title="语音识别（Speech recognition ）"></a>语音识别（Speech recognition ）</h5><p>seq2seq 模型是如何应用于音频数据的（audio data），比如语音（the speech）。现在你有一个音频片段x（an audio clip,x），你的任务是自动地生成文本y。</p><p>不过在 end-to-end 模型中，我们发现这种音位表示法（phonemes representations）已经不再必要了，而是可以构建一个系统，通过向系统中输入音频片段（audio clip），然后直接输出音频的文本（a transcript），而不需要使用这种人工设计的表示方法。</p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571557027383.png" alt="1571557027383"></p><p> CTC 损失函数（CTC cost）来做语音识别。CTC 就是 Connectionist Temporal Classification,假设语音片段内容是某人说：”the quick brown fox”，这时我们使用一个新的网络，结构像这个样子，这里输入𝑦和输出𝑧的数量都是一样的，因为我在这里画的，只是一个简单的单向 RNN 结构。然而在实际中，它有可能是双向的 LSTM 结构，或者双向的 GIU 结构，并且通常是很深的模型。但注意一下这里时间步的数量，它非常地大。在语音识别中，通常输入的时间步数量（the number of input time steps）要比输出的时间步的数量（the number of output time steps）多出很多。</p><p>比如你有一段 10 秒的音频，并且特征（features）是 100 赫兹的，即每秒有 100 个样本，于是这段 10 秒的音频片段就会有 1000 个输入，就是简单地用 100 赫兹乘上 10 秒。所以有 1000 个输入，但可能你的输出就没有 1000 个字母了，或者说没有 1000 个字符。这时要怎么办呢？CTC 损失函数允许 RNN 生成这样的输出：ttt，这是一个特殊的字符，叫做空白符，我们这里用下划线表示，这句话开头的音可表示为h_eee_ _ <em>，然后这里可能有个空格，我们用这个来表示空格，之后是</em> _ _qqq__，这样的输出也被看做是正确的输出。</p><p>CTC  损失函数的一个基本规则是将空白符之间的重复的字符折叠起来，再说清楚一些，我这里用下划线来表示这个特殊的空白符（a special blank character ），它和空格（the space character ）是不一样的。</p><h5 id="触发字检测（Trigger-Word-Detection"><a href="#触发字检测（Trigger-Word-Detection" class="headerlink" title="触发字检测（Trigger Word Detection)"></a>触发字检测（Trigger Word Detection)</h5><p>学习了很多关于深度学习和序列模型的内容，于是我们可以真正去简便地描绘出一个触发字系统（a trigger word system）,触发字系统的例子包括 Amazon echo，它通过单词 Alexa 唤醒；还有百度 DuerOS 设备，通过”小度你好”来唤醒；苹果的 Siri 用 Hey Siri 来唤醒等。</p><p>我们要做的就是把一个 音频片段（an audio clip ）计算出它的声谱图特征（spectrogram features）得到特征向量 ）得到特征向量x<1> , x <2> , x <3> ..，然后把它放到 RNN 中，最后要做的，就是定义我们的目标标签y。</3></2></1></p><p><img src="/../assets/pic/2019-07-25-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1571557303981.png" alt="1571557303981"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;课程概述&quot;&gt;&lt;a href=&quot;#课程概述&quot; class=&quot;headerlink&quot; title=&quot;课程概述&quot;&gt;&lt;/a&gt;课程概述&lt;/h4&gt;&lt;p&gt;在第一门课程中，你将学习如何建立神经网络（包含一个深度神经网络），以及如何在数据上面训练他们。在这门课程的结尾，你将用一个深度神经网络进行辨认猫。&lt;/p&gt;
&lt;p&gt;在第二门课中，你将进行深度学习方面的实践，学习严密地构建神经网络，如何真正让它表现良好，因此你将要学习超参数调整、正则化、诊断偏差和方差以及一些高级优化算法，比如 Momentum 和 Adam 算法，犹如黑魔法一样根据你建立网络的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达机器学习学习笔记汇总1</title>
    <link href="/2019/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>/2019/2019-07-24-机器学习笔记/</id>
    <published>2019-07-24T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h4><h5 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a><strong>机器学习</strong></h5><p>一个程序被认为能从经验 E 中学习，解决任务 T，达到性能度量值P，当且仅当，有了经验 E 后，经过 P 评判，程序在处理 T 时的性能有所提升。</p><h5 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a><strong>监督学习</strong></h5><p>我们数据集中的每个样本都有相应的“正确答案”。再根据这些样本作出预测。主要有回归问题，即推出一个连续的输出；分类问题，其目标是推出一组离散的结果。</p><a id="more"></a><h5 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a><strong>无监督学习</strong></h5><p>没有任何的标签或者是有相同的标签或者就是没标签。它是学习策略，交给算法大量的数据，并让算法为我们从数据中找出某种结构。就是说你要自动地聚类那些个体到各个类</p><h4 id="线性回归（Linear-Regression）"><a href="#线性回归（Linear-Regression）" class="headerlink" title="线性回归（Linear Regression）"></a>线性回归（Linear Regression）</h4><h5 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a><strong>代价函数</strong></h5><p>也被称作平方误差函数，有时也被称为平方误差代价函数。</p><p>我们之所以要求出误差的平方和，是因为误差平方代价函数，对于大多数问题，特别是回归问题，都是一个合理的选择。还有其他的代价函数也能很好地发挥作用，但是平方误差代价函数可能是解决回归问题最常用的手段了。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563951973897.png" alt="1563951973897"></p><h5 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a><strong>梯度下降</strong></h5><p>是一个用来求函数最小值的算法，自动地找出能使代价函数J最小化的参数值。思想是：开始时我们随机选择一个参数的组合(θ0 ,θ1 ,……,θn )，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合，持续这么做直到到到一个局部最小值（local minimum）。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563952706310.png" alt="1563952706310"></p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190201164155586.png" alt="img"></p><h5 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a><strong>特征缩放</strong></h5><p>将所有特征的尺度都尽量缩放到-1 到 1 之间</p><h5 id="正规方程法"><a href="#正规方程法" class="headerlink" title="正规方程法"></a><strong>正规方程法</strong></h5><p>只要特征变量的数目并不大，标准方程是一个很好的计算参数𝜄的替代方法。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563957620861.png" alt="1563957620861"></p><h4 id="逻辑回归（Logistic-Regression）"><a href="#逻辑回归（Logistic-Regression）" class="headerlink" title="逻辑回归（Logistic Regression）"></a>逻辑回归（Logistic Regression）</h4><h5 id="逻辑回归算法"><a href="#逻辑回归算法" class="headerlink" title="逻辑回归算法"></a><strong>逻辑回归算法</strong></h5><p>逻辑回归算法是一种分类算法，它输出变量范围始终在 0 和 1 之间，们将它作为分类算法使用。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563959367003.png" alt="1563959367003"></p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563963025200.png" alt="1563963025200"></p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1567135303089.png" alt="1567135303089"></p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563963222472.png" alt="1563963222472"></p><p>梯度下降，上面求导得到</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563963605441.png" alt="1563963605441"></p><p>除了梯度下降算法以外，还有一些常被用来令代价函数最小的算法，这些算法更加复杂和优越，而且通常不需要人工选择学习率，通常比梯度下降算法要更加快速。这些算法有： <strong>共轭梯度</strong>（Conjugate Gradient）， <strong>局部优化法</strong>(Broyden fletcher goldfarb shann,BFGS)和 <strong>有限内存局部优化法</strong>(LBFGS) </p><h5 id="过拟合-over-fitting"><a href="#过拟合-over-fitting" class="headerlink" title="过拟合(over-fitting)"></a><strong>过拟合(over-fitting)</strong></h5><p>学习得到的假设可能能够非常好地适应训练集（代价函数可能几乎为 0），但是可能会不能推广到新的数据。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563967374118.png" alt="1563967374118"></p><p>丢弃一些不能帮助我们正确预测的特征或者正则化。 保留所有的特征，但是减少参数的大小（magnitude）</p><h5 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a><strong>正则化</strong></h5><p>正则化防止过拟合，对所有的特征进行惩罚，并且让代价函数最优化的软件来选择这些惩罚的程度</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1563967773101.png" alt="1563967773101"></p><h4 id="神经网络-Neural-Networks-Representation"><a href="#神经网络-Neural-Networks-Representation" class="headerlink" title="神经网络(Neural Networks: Representation)"></a>神经网络(Neural Networks: Representation)</h4><p>下图为一个 3 层的神经网络，第一层成为<strong>输入层</strong>（Input Layer），最后一层称为<strong>输出层</strong>（Output Layer），中间一层成为<strong>隐藏层</strong>（Hidden Layers）。我们为每一层都增加一个偏差单位（bias unit）：</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-8369138f7b5e81e83f99b35067e03e7b_hd.jpg" alt="img"></p><p>ai(j) 表示第j层的第i个激活单元，θ(j)表示从第j层到第j+1层时的权重矩阵，其尺寸为：以第 j+1 层的激活单元数量为行数，以第 j 层的激活单元数加一为列数的矩阵。例如：θ(1)的尺寸为3*4。g(x)为Sigmoid函数，hθ(X)就是最后的输出值。对于上图所示的模型，激活单元和输出分别表达为：</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-6c8dd146d7ad3ff89d8f7e377d718c7e_hd.jpg" alt="img"></p><p>为了计算简便一些，我们需要将其向量化。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-81e780d8d0d5ebb4e488ee6cb057bc9b_hd.jpg" alt="img"></p><p>神经网络的权重其实本质上也就是之前多项式的系数，外加的偏置单元也就是常数项。我们可以把a0 ,a1 ,a2 ,a3 看成更为高级的特征值。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564056367601.png" alt="1564056367601"></p><h5 id="神经网络代价函数"><a href="#神经网络代价函数" class="headerlink" title="神经网络代价函数"></a><strong>神经网络代价函数</strong></h5><p>来观察算法预测的结果与真实情况的误差有多大</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564056501562.png" alt="1564056501562"></p><h5 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a><strong>反向传播算法</strong></h5><p>目的是更新权值，重新计算输出。首先计算最后一层的误差，然后再一层一层反向求出各层的误差，直到倒数第二层。</p><p>查看<a href="https://www.cnblogs.com/charlotte77/p/5629865.html和https://www.zybuluo.com/hanbingtao/note/476663了解详情" target="_blank" rel="noopener">https://www.cnblogs.com/charlotte77/p/5629865.html和https://www.zybuluo.com/hanbingtao/note/476663了解详情</a></p><p>接受 dL/dz，即相对于 z 的损失函数的梯度，损失函数中 x 和 y 的梯度可以通过应用链式法则进行计算，如下图所示。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-c96e284f4ab319a02fdd762367b58774_hd.jpg" alt="img"></p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564056750829.png" alt="1564056750829"></p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564057897991.png" alt="1564057897991"></p><h5 id="梯度的数值检验（Numerical-Gradient-Checking）"><a href="#梯度的数值检验（Numerical-Gradient-Checking）" class="headerlink" title="梯度的数值检验（Numerical Gradient Checking）"></a><strong>梯度的数值检验（Numerical Gradient Checking）</strong></h5><p>通过估计梯度值来检验我们计算的导数值是否真的是我们要求的。</p><h5 id="参数随机初始化"><a href="#参数随机初始化" class="headerlink" title="参数随机初始化"></a><strong>参数随机初始化</strong></h5><p>任何优化算法都需要一些初始的参数，初始参数为正负𝜁之间的随机值</p><h4 id="机器学习技巧——训练集，开发集，测试集"><a href="#机器学习技巧——训练集，开发集，测试集" class="headerlink" title="机器学习技巧——训练集，开发集，测试集"></a>机器学习技巧——训练集，开发集，测试集</h4><p>training set：训练集是用来训练模型的。遵循训练集大，开发，测试集小的特点，占了所有数据的绝大部分。</p><p>development set：用来对训练集训练出来的模型进行测试，通过测试结果来不断地优化模型。</p><p>test set：在训练结束后，对训练出的模型进行一次最终的评估所用的数据集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 获得更多的训练实例——解决高方差</span><br><span class="line">2. 尝试减少特征的数量——解决高方差</span><br><span class="line">3. 尝试获得更多的特征——解决高偏差</span><br><span class="line">4. 尝试增加多项式特征——解决高偏差</span><br><span class="line">5. 尝试减少正则化程度 λ——解决高偏差</span><br><span class="line">6. 尝试增加正则化程度 λ——解决高方差</span><br></pre></td></tr></table></figure><p>使用 60%的数据作为训练集，使用 20%的数据作为交叉验证集，使用 20%的数据作为测试集，在交叉验证集上来做误差分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 使用训练集训练出 10 个模型</span><br><span class="line">2. 用 10 个模型分别对交叉验证集计算得出交叉验证误差（代价函数的值）</span><br><span class="line">3. 选取代价函数值最小的模型</span><br><span class="line">4. 用步骤 3 中选出的模型对测试集计算得出推广误差（代价函数的值）</span><br></pre></td></tr></table></figure><h5 id="偏差和方差"><a href="#偏差和方差" class="headerlink" title="偏差和方差"></a><strong>偏差和方差</strong></h5><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564059326314.png" alt="1564059326314"></p><h5 id="选择λ的方法为："><a href="#选择λ的方法为：" class="headerlink" title="选择λ的方法为："></a><strong>选择λ的方法为：</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.使用训练集训练出 12 个不同程度正则化的模型</span><br><span class="line">2.用 12 个模型分别对交叉验证集计算的出交叉验证误差</span><br><span class="line">3.选择得出交叉验证误差 最小的模型</span><br><span class="line">4.运用步骤 3 中选出模型对测试集计算得出推广误差，我们也可以同时将训练集和交叉验证集模型的代价函数误差与 λ 的值绘制在一张图表上：</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564059593223.png" alt="1564059593223"></p><p>通常选择较大的神经网络并采用正则化处理会比采用较小的神经网络效果要好。<br>对于神经网络中的隐藏层的层数的选择，通常从一层开始逐渐增加层数，为了更好地作选择，可以把数据分为训练集、交叉验证集和测试集，针对不同隐藏层层数的神经网络训练神经网络， 然后选择交叉验证集代价最小的神经网络。</p><h5 id="构建一个学习算法的推荐方法为"><a href="#构建一个学习算法的推荐方法为" class="headerlink" title="构建一个学习算法的推荐方法为"></a><strong>构建一个学习算法的推荐方法为</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 从一个简单的能快速实现的算法开始，实现该算法并用交叉验证集数据测试这个算法</span><br><span class="line">2. 绘制学习曲线，决定是增加更多数据，或者添加更多特征，还是其他选择</span><br><span class="line">3. 进行误差分析：人工检查交叉验证集中我们算法中产生预测误差的实例，看看这些实例是否有某种系统化的趋势</span><br></pre></td></tr></table></figure><p>真正能提高性能的，是你能够给一个算法大量的训练数据</p><h5 id="查准率（Precision）和-查全率（Recall）"><a href="#查准率（Precision）和-查全率（Recall）" class="headerlink" title="查准率（Precision）和 查全率（Recall）"></a><strong>查准率（Precision）和 查全率（Recall）</strong></h5><p>我们将算法预测的结果分成四种情况：</p><ol><li>正确肯定（True Positive,TP）：预测为真，实际为真</li><li>正确否定（True Negative,TN）：预测为假，实际为假</li><li>错误肯定（False Positive,FP）：预测为真，实际为假</li><li>错误否定（False Negative,FN）：预测为假，实际为真</li></ol><p>则：查准率=TP/(TP+FP)。例，在所有我们预测有恶性肿瘤的病人中，实际上有恶性肿瘤的病人的百分比，越高越好。<br>查全率=TP/(TP+FN)。例，在所有实际上有恶性肿瘤的病人中，成功预测有恶性肿瘤的病人的百分比，越高越好。</p><h5 id="F1-值（F1-Score）"><a href="#F1-值（F1-Score）" class="headerlink" title="F1  值（F1 Score）"></a><strong>F1  值（F1 Score）</strong></h5><p>其计算公式为：F1=2*(PR)/(P+R)</p><h4 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h4><h5 id="支持向量机-Support-Vector-Machine"><a href="#支持向量机-Support-Vector-Machine" class="headerlink" title="支持向量机(Support Vector Machine)"></a>支持向量机(Support Vector Machine)</h5><p>它努力用一个最大间距来分离样本。因此支持向量机有时被称为 大间距分类器</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564105421766.png" alt="1564105421766"></p><p>如果你有一个正样本，我们会希望z&gt;=1，反之，如果y= 0，我们观察一下，函数cost0 (z)，它只有在z&lt;= −1的区间里函数值为 0</p><p>回顾 C = 1/ λ，因此：<br>C较大时，相当于 λ较小，可能会导致过拟合，高方差。<br>C较小时，相当于 λ较大，可能会导致低拟合，高偏差</p><p>实例：最大化到分类线的距离</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564107819811.png" alt="1564107819811"></p><h5 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h5><p>计算新的特征，我们采用的特征不是训练实例本身的特征，而是通过核函数计算出的新特征f1 ,f2 ,f3 。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564108220089.png" alt="1564108220089"></p><p>𝜎较大时，可能会导致低方差，高偏差；</p><p>𝜎较小时，可能会导致低偏差，高方差</p><h5 id="逻辑回归模型or支持向量机模型"><a href="#逻辑回归模型or支持向量机模型" class="headerlink" title="逻辑回归模型or支持向量机模型"></a>逻辑回归模型or支持向量机模型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">𝑜为特征数，𝑛为训练样本数。</span><br><span class="line">(1)如果相较于𝑛而言，𝑜要大许多，即训练集数据量不够支持我们训练一个复杂的非线性模型，我们选用逻辑回归模型或者不带核函数的支持向量机。</span><br><span class="line">(2)如果𝑜较小，而且𝑛大小中等，例如𝑜在 1-1000 之间，而𝑛在 10-10000 之间，使用高斯核函数的支持向量机。</span><br><span class="line">(3)如果𝑜较小，而𝑛较大，例如𝑜在 1-1000 之间，而𝑛大于 50000，则使用支持向量机会非常慢，解决方案是创造、增加更多的特征，然后使用逻辑回归或不带核函数的支持向量机</span><br></pre></td></tr></table></figure><h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><h5 id="K-Means-Algorithm"><a href="#K-Means-Algorithm" class="headerlink" title="K-Means Algorithm"></a><strong>K-Means Algorithm</strong></h5><p>最普及的聚类算法，算法接受一个未标记的数据集，然后将数据聚类成不同的组。算法分为两个步骤，第一个 for 循环是赋值步骤，即：对于每一个样例i，计算其应该属于的类。第二个 for 循环是聚类中心的移动，即：对于每一个类K，重新计算该类的质心。</p><p>K-均值最小化问题，是要最小化所有的数据点与其所关联的聚类中心点之间的距离之和，因此 K-均值的代价函数（又称 畸变函数 Distortion function）为：</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564130487945.png" alt="1564130487945"></p><p>在运行 K- 均值算法的之前，我们首先要<strong>随机初始化</strong>所有的聚类中心点，没有所谓最好的<strong>选择聚类数</strong>的方法，通常是需要根据不同的问题，人工进行选择的。</p><h5 id="聚类的衡量指标"><a href="#聚类的衡量指标" class="headerlink" title="聚类的衡量指标"></a>聚类的衡量指标</h5><p>(1). 均一性：p<br>类似于精确率，一个簇中只包含一个类别的样本，则满足均一性。其实也可以认为就是正确率(每个聚簇中正确分类的样本数占该聚簇总样本数的比例和)<br>(2). 完整性：r<br>类似于召回率，同类别样本被归类到相同簇中，则满足完整性;(每个聚簇中正确分类的样本数占该类型的总样本数比例的和)</p><p>(3). V-measure: 均一性和完整性的加权平均V =(1 + β <em> β )</em> p r/((β <em> β )</em>p+r)</p><h5 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h5><p>把任何维度的数据降到任何想要的维度，用于数据压缩和数据可视化。</p><h5 id="主成分分析（Principal-Component-Analysis，PCA）"><a href="#主成分分析（Principal-Component-Analysis，PCA）" class="headerlink" title="主成分分析（Principal Component Analysis，PCA）"></a>主成分分析（Principal Component Analysis，PCA）</h5><p>在 PCA 中，我们要做的是找到一个方向向量（Vector direction），当我们把所有的数据都投射到该向量上时，我们希望投射平均均方误差能尽可能地小。投射误差是从特征向量向该方向向量作垂线的长度,完全无参数限制,计算过程中完全不需要人为的设定参数或是根据任何经验模型对计算进行干预，最后的结果只与数据相关.</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1564132382657.png" alt="1564132382657"></p><p>一个常见错误使用主要成分分析的情况是，将其用于减少过拟合（减少了特征的数量）。其次，最好还是从所有原始特征开始，只在有必要的时候（算法运行太慢或者占用太多内存）才考虑采用主要成分分析。</p><h5 id="两个实际案例"><a href="#两个实际案例" class="headerlink" title="两个实际案例"></a>两个实际案例</h5><p>异常检测和推荐系统</p><h4 id="大规模机器学习"><a href="#大规模机器学习" class="headerlink" title="大规模机器学习"></a>大规模机器学习</h4><p>Stochastic Gradient Descent<strong>随机梯度下降法（SGD）</strong>代替批量梯度下降法。</p><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1566206665379.png" alt="1566206665379"></p><p><strong>小批量梯度下降算法</strong>是介于批量梯度下降算法和随机梯度下降算法之间的算法，每计算常数𝑐次训练实例，便更新一次参数 θ。</p><p><strong>在线学习</strong></p><p>一个算法来从中学习的时候来模型化问题在线学习算法指的是对数据流而非离线的静态数据集的学习。许多在线网站都有持续不断的用户流，对于每一个用户，网站希望能在不将数据存储到数据库中便顺利地进行算法学习。</p><p>旦对一个数据的学习完成了，我们便可以丢弃该数据，不需要再存储它了。这种方式的好处在于，我们的算法可以很好的适应用户的倾向性，算法可以针对用户的当前行为不断地更新模型以适应该用户。</p><p><strong>映射化简和数据并行</strong>（Map Reduce and Data Parallelism）对于大规模机器学习问题而言是非常重要的概念。</p><p>如果我们能够将我们的数据集分配给不多台计算机，让每一台计算机处理数据集的一个子集，然后我们将计所的结果汇总在求和。这样的方法叫做映射简化。</p><h5 id="应用实例：图片文字识别"><a href="#应用实例：图片文字识别" class="headerlink" title="应用实例：图片文字识别"></a>应用实例：图片文字识别</h5><p>1.文字侦测（Text detection）——将图片上的文字与其他环境对象分离开来<br>2.字符切分（Character segmentation）——将文字分割成一个个单一的字符<br>3.字符分类（Character classification）——确定每一个字符是什么 可以用任务流程图来</p><p><strong>滑动窗口</strong>是一项用来从图像中抽取对象的技术。假使我们需要在一张图片中识别行人，首先要做的是用许多固定尺寸的图片来训练一个能够准确识别行人的模型。然后我们用之前训练识别行人的模型时所采用的图片尺寸在我们要进行行人识别的图片上进行剪裁，然后将剪裁得到的切片交给模型，让模型判断是否为行人，然后在图片上滑动剪裁区域重新进行剪裁，将新剪裁的切片也交给模型进行判断，如此循环直至将图片全部检测完。</p><p><strong>有关获得更多数据的几种方法：</strong><br>1.人工数据合成<br>2.手动收集、标记数据<br>3.众包</p><p><strong>上限分析</strong></p><p>在机器学习的应用中，我们通常需要通过几个步骤才能进行最终的预测，我们如何能够知道哪一部分最值得我们花时间和精力去改善呢？这个问题可以通过上限分析来回答。</p><h4 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h4><p><img src="/../assets/pic/2019-07-24-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1566207481351.png" alt="1566207481351"></p><h4 id="机器学习数学基础知识"><a href="#机器学习数学基础知识" class="headerlink" title="机器学习数学基础知识"></a>机器学习数学基础知识</h4><div class="row">    <embed src="../../pdf/数学基础.pdf" width="100%" height="800" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h4&gt;&lt;h5 id=&quot;机器学习&quot;&gt;&lt;a href=&quot;#机器学习&quot; class=&quot;headerlink&quot; title=&quot;机器学习&quot;&gt;&lt;/a&gt;&lt;strong&gt;机器学习&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;一个程序被认为能从经验 E 中学习，解决任务 T，达到性能度量值P，当且仅当，有了经验 E 后，经过 P 评判，程序在处理 T 时的性能有所提升。&lt;/p&gt;
&lt;h5 id=&quot;监督学习&quot;&gt;&lt;a href=&quot;#监督学习&quot; class=&quot;headerlink&quot; title=&quot;监督学习&quot;&gt;&lt;/a&gt;&lt;strong&gt;监督学习&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;我们数据集中的每个样本都有相应的“正确答案”。再根据这些样本作出预测。主要有回归问题，即推出一个连续的输出；分类问题，其目标是推出一组离散的结果。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="/2019/2019-07-19-python%E7%88%AC%E8%99%AB/"/>
    <id>/2019/2019-07-19-python爬虫/</id>
    <published>2019-07-19T02:36:00.000Z</published>
    <updated>2020-10-09T13:44:41.854Z</updated>
    
    <content type="html"><![CDATA[<h4 id="爬虫基础"><a href="#爬虫基础" class="headerlink" title="爬虫基础"></a>爬虫基础</h4><p>爬虫是模拟浏览器发送请求，获取响应</p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/image-20200330103508473.png" alt="image-20200330103508473"></p><a id="more"></a><p>都说现在是”大数据时代”，那数据从何而来？</p><ul><li><code>企业产生的用户数据</code>：<a href="http://index.baidu.com" target="_blank" rel="noopener">百度指数</a>、<a href="https://alizs.taobao.com" target="_blank" rel="noopener">阿里指数</a>、<a href="http://tbi.tencent.com" target="_blank" rel="noopener">TBI腾讯浏览指数</a>、<a href="http://data.weibo.com/index" target="_blank" rel="noopener">新浪微博指数</a></li><li><code>数据平台购买数据</code>：<a href="http://www.datatang.com/about/about-us.html" target="_blank" rel="noopener">数据堂</a>、<a href="http://www.moojnn.com/data-market/" target="_blank" rel="noopener">国云数据市场</a>、<a href="http://trade.gbdex.com/trade.web/index.jsp" target="_blank" rel="noopener">贵阳大数据交易所</a></li><li><code>政府/机构公开的数据</code>：<a href="http://data.stats.gov.cn/index.htm" target="_blank" rel="noopener">中华人民共和国国家统计局数据</a>、<a href="http://data.worldbank.org.cn" target="_blank" rel="noopener">世界银行公开数据</a>、<a href="http://data.un.org" target="_blank" rel="noopener">联合国数据</a>、<a href="http://www.nasdaq.com/zh" target="_blank" rel="noopener">纳斯达克</a>。</li><li><code>数据管理咨询公司</code>：<a href="http://www.mckinsey.com.cn" target="_blank" rel="noopener">麦肯锡</a>、<a href="https://www.accenture.com/cn-zh/" target="_blank" rel="noopener">埃森哲</a>、<a href="http://www.iresearch.com.cn" target="_blank" rel="noopener">艾瑞咨询</a></li><li><code>爬取网络数据</code>：如果需要的数据市场上没有，或者不愿意购买，那么可以选择招/做一名爬虫工程师</li></ul><h5 id="复习导图"><a href="#复习导图" class="headerlink" title="复习导图"></a>复习导图</h5><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/day01%E5%A4%8D%E4%B9%A0.png" alt="day01复习"></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/day02%E5%A4%8D%E4%B9%A0.png" alt="day02复习"></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/day03%E5%A4%8D%E4%B9%A0.png" alt="day03复习"></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/day04%E5%A4%8D%E4%B9%A0.png" alt="day04复习"><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/day05%E6%80%BB%E7%BB%93.png" alt="day05总结"></p><h5 id="爬虫实际会遇到的问题"><a href="#爬虫实际会遇到的问题" class="headerlink" title="爬虫实际会遇到的问题"></a>爬虫实际会遇到的问题</h5><p><strong>页面上的数据在哪里</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当前url地址的elements的内容和url的响应不一样，此时页面上的数据在哪里</span><br><span class="line"></span><br><span class="line">- 当前url地址对应的响应中</span><br><span class="line">- 其他的url地址对应的响应中</span><br><span class="line">  - 比如ajax请求中</span><br><span class="line">- js生成的</span><br><span class="line">  - 部分数据在响应中</span><br><span class="line">  - 全部通过js生成</span><br></pre></td></tr></table></figure><p><strong>寻找登录的post地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 在form表单中寻找action对应的url地址</span><br><span class="line">  - post的数据是input标签中name的值作为键，真正的用户名密码作为值的字典，post的url地址就是action对应的url地址</span><br><span class="line"></span><br><span class="line">- 抓包，寻找登录的url地址</span><br><span class="line">  - 勾选perserve log按钮，防止页面跳转找不到url</span><br><span class="line">  - 寻找post数据，确定参数</span><br><span class="line">    - 参数不会变，直接用，比如密码不是动态加密的时候</span><br><span class="line">    - 参数会变</span><br><span class="line">      - 参数在当前的响应中</span><br><span class="line">      - 通过js生成</span><br></pre></td></tr></table></figure><p><strong>定位想要的</strong>js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 选择会触发js时间的按钮，点击event listener，找到js的位置</span><br><span class="line">- 通过chrome中的search all file来搜索url中关键字</span><br><span class="line">- 添加断点的方式来查看js的操作，通过python来进行同样的操作</span><br></pre></td></tr></table></figure><h5 id="HTTP-基础知识"><a href="#HTTP-基础知识" class="headerlink" title="HTTP 基础知识"></a>HTTP 基础知识</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">HTTP 超文本传输协议  默认端口号:<span class="number">80</span></span><br><span class="line">HTTPS HTTP + SSL(安全套接字层) 默认端口号：<span class="number">443</span></span><br><span class="line">HTTPS比HTTP更安全，但是性能更低</span><br><span class="line"></span><br><span class="line">url(Uniform / Universal Resource Locator)形式</span><br><span class="line">    基本格式：scheme://host[:port<span class="comment">#]/path/…/[?query-string][#anchor]</span></span><br><span class="line">    scheme：协议(例如：http, https, ftp)</span><br><span class="line">    host：服务器的IP地址或者域名</span><br><span class="line">    port<span class="comment">#：服务器的端口（如果是走协议默认端口，缺省端口80 or 443）</span></span><br><span class="line">    path：访问资源的路径</span><br><span class="line">    query-string：参数，发送给http服务器的数据</span><br><span class="line">    anchor：锚（跳转到网页的指定锚点位置）</span><br><span class="line">    例如：</span><br><span class="line">        ftp://<span class="number">192.168</span><span class="number">.0</span><span class="number">.116</span>:<span class="number">8080</span>/index</span><br><span class="line">        http://www.baidu.com</span><br><span class="line">        http://item.jd.com/<span class="number">11936238.</span>html<span class="comment">#product-detail</span></span><br><span class="line"></span><br><span class="line">HTTP请求方法</span><br><span class="line">    • GET 向指定的资源发出“显示”请求。使用 GET 方法应该只用在读取数据</span><br><span class="line">    • HEAD 与 GET 方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）</span><br><span class="line">    • POST 向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</span><br><span class="line">    • PUT 向指定资源位置上传其最新内容。</span><br><span class="line">    • DELETE 请求服务器删除 Request-URI 所标识的资源。</span><br><span class="line">    • TRACE 回显服务器收到的请求，主要用于测试或诊断。</span><br><span class="line">                       </span><br><span class="line">HTTP请求示例                       </span><br><span class="line">    GET https://www.baidu.com/ HTTP/<span class="number">1.1</span> <span class="comment">#请求行: 请求方法 URL 协议版本 回车换行</span></span><br><span class="line">    Host: www.baidu.com <span class="comment">#Host (主机和端口号)</span></span><br><span class="line">    Connection: keep-alive <span class="comment"># keep-alive能够重用连接，减少资源消耗，缩短响应时间</span></span><br><span class="line">    Upgrade-Insecure-Requests: <span class="number">1</span> <span class="comment">#升级为HTTPS请求</span></span><br><span class="line">    User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">54.0</span><span class="number">.2840</span><span class="number">.99</span> Safari/<span class="number">537.36</span> <span class="comment">#浏览器名称</span></span><br><span class="line">    Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*/*;q=<span class="number">0.8</span></span><br><span class="line">      <span class="comment"># q是权重系数，q值越大，请求越倾向于获得其类型表示内容</span></span><br><span class="line">        <span class="comment"># Text：文本信息，可以是多种字符集或多种格式；Application：传输应用程序数据或者二进制数据</span></span><br><span class="line">    Referer: http://www.baidu.com/ <span class="comment">#产生请求网页来自于哪个URL</span></span><br><span class="line">    Accept-Encoding: gzip, deflate, sdch, br <span class="comment">#浏览器可接受的编码方式</span></span><br><span class="line">    Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,en;q=<span class="number">0.6</span></span><br><span class="line">    x-requested-<span class="keyword">with</span> :XMLHttpRequest  <span class="comment"># Ajax 异步请求</span></span><br><span class="line">    Cookie: BAIDUID=<span class="number">04E4001</span>F34EA74AD4601512DD3C41A7B:FG=<span class="number">1</span>; BIDUPSID=<span class="number">04E4001</span>F34EA74AD4601512DD3C41A7B; PSTM=<span class="number">1470329258</span>; ........</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/01_request.png" alt="img"></p><p>HTTP响应也由四个部分组成，分别是： <code>状态行</code>、<code>消息报头</code>、<code>空行</code>、<code>响应正文</code></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/01_response.jpg" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP响应示例</span><br><span class="line">    HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">    Server: Tengine <span class="comment">#服务器的信息</span></span><br><span class="line">    Connection: keep-alive <span class="comment">#客户端可以继续使用这个tcp连接发送http请求</span></span><br><span class="line">    Date: Wed, <span class="number">30</span> Nov <span class="number">2016</span> <span class="number">07</span>:<span class="number">58</span>:<span class="number">21</span> GMT <span class="comment">#服务端发送资源时的服务器时间</span></span><br><span class="line">    Cache-Control: no-cache <span class="comment">#不会缓存服务器资源</span></span><br><span class="line">    Content-Type: text/html;charset=UTF<span class="number">-8</span> <span class="comment">#资源文件的类型，还有字符编码</span></span><br><span class="line">    Content-Encoding:gzip <span class="comment">#服务端发送资源采用gzip编码</span></span><br><span class="line">    Keep-Alive: timeout=<span class="number">20</span> </span><br><span class="line">    Vary: Accept-Encoding <span class="comment">#缓存压缩文件和非压缩文件两个版本</span></span><br><span class="line">    Pragma: no-cache <span class="comment">#与Cache-Control等同</span></span><br><span class="line">    X-NWS-LOG-UUID: bd27210a<span class="number">-24e5</span><span class="number">-4740</span><span class="number">-8</span>f6c<span class="number">-25</span>dbafa9c395</span><br><span class="line">    Content-Length: <span class="number">180945</span></span><br><span class="line"></span><br><span class="line">    &lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> ....</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常见状态码：</span><br><span class="line"><span class="number">100</span>~<span class="number">199</span>：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程。</span><br><span class="line"><span class="number">200</span>~<span class="number">299</span>：表示服务器成功接收请求并已完成整个处理过程。常用<span class="number">200</span>（OK 请求成功）。</span><br><span class="line"><span class="number">300</span>~<span class="number">399</span>：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用<span class="number">302</span>（所请求的页面已经临时转移至新的url）、<span class="number">307</span>和<span class="number">304</span>（使用缓存资源）。</span><br><span class="line"><span class="number">400</span>~<span class="number">499</span>：客户端的请求有错误，常用<span class="number">404</span>（服务器无法找到被请求的页面）、<span class="number">403</span>（服务器拒绝访问，权限不够）。</span><br><span class="line"><span class="number">500</span>~<span class="number">599</span>：服务器端出现错误，常用<span class="number">500</span>（请求未完成。服务器遇到不可预知的情况）。</span><br></pre></td></tr></table></figure><h5 id="请求的python代码"><a href="#请求的python代码" class="headerlink" title="请求的python代码"></a>请求的python代码</h5><p>访问 <a href="https://curl.trillworks.com/" target="_blank" rel="noopener">https://curl.trillworks.com/</a></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/newscreenshot.png" alt="screenshot of chrome devtools"></p><h5 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h5><p>禁止所有机器人访问特定目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: / * .php$</span><br><span class="line">Disallow: /images/</span><br></pre></td></tr></table></figure><p>• 人工阅读 robots.txt<br>• 使用 urllib.robotparser</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib.robotparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp = urllib.robotparser.RobotFileParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.set_url(<span class="string">"http://127.0.0.1:8000/robots.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.can_fetch(<span class="string">"Baiduspider"</span>, <span class="string">"http://127.0.0.1:8000/"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h5 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">requests的底层实现就是urllib</span><br><span class="line">requests在python2 和python3中通用，方法完全一样</span><br><span class="line">Requests能够自动帮助我们解压(gzip压缩的等)网页内容</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(’http://httpbin.org/post’, data = &#123;’key’:’value’&#125;)//post</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(’https://api.github.com/user’, auth=(’user’, ’<span class="keyword">pass</span>’))//get</span><br><span class="line"></span><br><span class="line">response的常用方法：</span><br><span class="line">    response.text </span><br><span class="line">    respones.content</span><br><span class="line">    response.status_code</span><br><span class="line">    response.request.headers</span><br><span class="line">    response.headers</span><br><span class="line"></span><br><span class="line"><span class="comment">### requests中解决编解码的方法</span></span><br><span class="line">response.text</span><br><span class="line">    类型：str</span><br><span class="line">    解码类型： 根据HTTP 头部对响应的编码作出有根据的推测，推测的文本编码</span><br><span class="line">    如何修改编码方式：response.encoding=”gbk”</span><br><span class="line">    在你调用response.text 方法时，Requests库首先在 HTTP 头部检测是否存在指定的编码方式</span><br><span class="line">    如果不存在，则会使用 chardet.detect来尝试猜测编码方式（存在误差）</span><br><span class="line">    更推荐使用response.content.deocde()</span><br><span class="line">response.content</span><br><span class="line">    类型：bytes</span><br><span class="line">    解码类型： 没有指定</span><br><span class="line">    如何修改编码方式：response.content.deocde(“utf8”)</span><br><span class="line">    </span><br><span class="line"><span class="comment">### request技巧</span></span><br><span class="line"><span class="number">1</span>、reqeusts.util.dict_from_cookiejar  把cookie对象转化为字典</span><br><span class="line">requests.get(url,cookies=&#123;&#125;)</span><br><span class="line"><span class="number">2</span>、请求 SSL证书验证</span><br><span class="line">如果SSL证书验证不通过，或者不信任服务器的安全证书，则会报出SSLError，解决：</span><br><span class="line">        response = requests.get(<span class="string">"https://www.12306.cn/mormhweb/ "</span>, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="number">3</span>、设置超时</span><br><span class="line">        response = requests.get(url,<span class="number">1</span>)</span><br><span class="line"><span class="number">4</span>、配合状态码判断是否请求成功</span><br><span class="line">       <span class="keyword">assert</span> response.status_code == <span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiebaSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tieba_name)</span>:</span></span><br><span class="line">        self.tieba_name = tieba_name</span><br><span class="line">        self.url_temp = <span class="string">"https://tieba.baidu.com/f?kw="</span> + tieba_name + <span class="string">"&amp;ie=utf-8&amp;pn=&#123;&#125;"</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span><span class="params">(self)</span>:</span>  <span class="comment"># 1.构造url列表</span></span><br><span class="line">        <span class="keyword">return</span> [self.url_temp.format(i * <span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self, url)</span>:</span>  <span class="comment"># 发送请求，获取响应</span></span><br><span class="line">        print(url)</span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> response.content.decode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_html</span><span class="params">(self, html_str, page_num)</span>:</span>  <span class="comment"># 保存html字符串</span></span><br><span class="line">        file_path = <span class="string">"&#123;&#125;—第&#123;&#125;页.html"</span>.format(self.tieba_name, page_num)</span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:  <span class="comment"># "李毅—第4页.html"</span></span><br><span class="line">            f.write(html_str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>  <span class="comment"># 实现主要逻辑</span></span><br><span class="line">        <span class="comment"># 1.构造url列表</span></span><br><span class="line">        url_list = self.get_url_list()</span><br><span class="line">        <span class="comment"># 2.遍历，发送请求，获取响应</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            html_str = self.parse_url(url)</span><br><span class="line">            <span class="comment"># 3.保存</span></span><br><span class="line">            page_num = url_list.index(url) + <span class="number">1</span>  <span class="comment"># 页码数</span></span><br><span class="line">            self.save_html(html_str, page_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tieba_spider = TiebaSpider(<span class="string">"lol"</span>)</span><br><span class="line">    tieba_spider.run()</span><br></pre></td></tr></table></figure><h5 id="headers-和-查询参数"><a href="#headers-和-查询参数" class="headerlink" title="headers 和 查询参数"></a>headers 和 查询参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟浏览器，欺骗服务器，获取和浏览器一致的内容</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">kw = &#123;<span class="string">'wd'</span>:<span class="string">'长城'</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/s?"</span>, params = kw, headers = headers)</span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line"><span class="keyword">print</span> (response.text)</span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据，用来保存图片等二进制文件。</span></span><br><span class="line"><span class="keyword">print</span> (response.content)</span><br><span class="line"><span class="comment"># 查看完整url地址 'http://www.baidu.com/s?wd=%E9%95%BF%E5%9F%8E'</span></span><br><span class="line"><span class="keyword">print</span> (response.url) </span><br><span class="line"><span class="comment"># 查看响应头部字符编码 'utf-8'</span></span><br><span class="line"><span class="keyword">print</span> (response.encoding)</span><br><span class="line"><span class="comment"># 查看响应码 200</span></span><br><span class="line"><span class="keyword">print</span> (response.status_code)</span><br></pre></td></tr></table></figure><h5 id="获取网络上图片"><a href="#获取网络上图片" class="headerlink" title="获取网络上图片"></a>获取网络上图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#很多时候，数据读写不一定是文件，也可以在内存中读写。</span></span><br><span class="line"><span class="comment">#StringIO顾名思义就是在内存中读写str。</span></span><br><span class="line"><span class="comment">#BytesIO 就是在内存中读写bytes类型的二进制数据</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO,StringIO</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img_url = <span class="string">"https://www.lgstatic.com/lg-www-fed/common/widgets/un_login_banner/img/logo_41a2761.png"</span></span><br><span class="line">response = requests.get(img_url)</span><br><span class="line">f = BytesIO(response.content)</span><br><span class="line">img = Image.open(f)</span><br><span class="line">print(img.size) <span class="comment">#(500, 262)</span></span><br><span class="line"><span class="comment">#保存本地</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"a.png"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><h5 id="POST请求（data参数）"><a href="#POST请求（data参数）" class="headerlink" title="POST请求（data参数）"></a>POST请求（data参数）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 百度翻译，使用手机版发请求直接解析返回的json</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">query_string = <span class="string">"你好"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'authority'</span>: <span class="string">'fanyi.baidu.com'</span>,</span><br><span class="line">    <span class="string">'sec-fetch-dest'</span>: <span class="string">'empty'</span>,</span><br><span class="line">    <span class="string">'x-requested-with'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'</span>,</span><br><span class="line">    <span class="string">'dnt'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">    <span class="string">'origin'</span>: <span class="string">'https://fanyi.baidu.com'</span>,</span><br><span class="line">    <span class="string">'sec-fetch-site'</span>: <span class="string">'same-origin'</span>,</span><br><span class="line">    <span class="string">'sec-fetch-mode'</span>: <span class="string">'cors'</span>,</span><br><span class="line">    <span class="string">'referer'</span>: <span class="string">'https://fanyi.baidu.com/'</span>,</span><br><span class="line">    <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">    <span class="string">'cookie'</span>: <span class="string">'PSTM=1583771189; BAIDUID=82AB26D9946778044363D81EB480758B:FG=1; BIDUPSID=D55F1C368A38A86C0C8D634251D84604; BDUSS=FwR01LbGM5SWtiUUYwdEYwMWZNVGpyUHBrUWVZRkFnTnc2NUpYM3ZYbWlPcGRlRVFBQUFBJCQAAAAAAAAAAAEAAABQ8c1y1Ma1rVdlYrfnx-UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKKtb16irW9eND; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1585541063; from_lang_often=%5B%7B%22value%22%3A%22en%22%2C%22text%22%3A%22%u82F1%u8BED%22%7D%2C%7B%22value%22%3A%22zh%22%2C%22text%22%3A%22%u4E2D%u6587%22%7D%5D; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; to_lang_often=%5B%7B%22value%22%3A%22zh%22%2C%22text%22%3A%22%u4E2D%u6587%22%7D%2C%7B%22value%22%3A%22en%22%2C%22text%22%3A%22%u82F1%u8BED%22%7D%5D; __yjsv5_shitong=1.0_7_964ef489256a9c4161d0c7e88d69396bb315_700_1585541463801_115.239.231.206_c4722203; Hm_lvt_afd111fa62852d1f37001d1f980b6800=1585541762; yjs_js_security_passport=909599cd2d7c0ed00d05bc5dab30cd79750a049e_1585541763_js; Hm_lpvt_afd111fa62852d1f37001d1f980b6800=1585541772; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1585541772'</span>,</span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">'query'</span>: query_string,</span><br><span class="line">  <span class="string">'from'</span>: <span class="string">'zh'</span>,</span><br><span class="line">  <span class="string">'to'</span>: <span class="string">'en'</span>,</span><br><span class="line">  <span class="string">'token'</span>: <span class="string">'9440ed16669f345f99b892813315d08c'</span>,</span><br><span class="line">  <span class="string">'sign'</span>: <span class="string">'232427.485594'</span></span><br><span class="line">&#125;</span><br><span class="line">post_url = <span class="string">"https://fanyi.baidu.com/basetrans"</span></span><br><span class="line">r = requests.post(post_url,data=data,headers=headers)</span><br><span class="line"><span class="comment"># print(r.content.decode())</span></span><br><span class="line">dict_ret = json.loads(r.content.decode())</span><br><span class="line">ret = dict_ret[<span class="string">"trans"</span>][<span class="number">0</span>][<span class="string">"dst"</span>]</span><br><span class="line">print(<span class="string">"result is :"</span>,ret)</span><br></pre></td></tr></table></figure><h5 id="使用代理ip（proxies参数）"><a href="#使用代理ip（proxies参数）" class="headerlink" title="使用代理ip（proxies参数）"></a>使用代理ip（proxies参数）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">让服务器以为不是同一个客户端在请求</span><br><span class="line">防止我们的真实地址被泄露，防止被追究</span><br><span class="line">用法：requests.get(<span class="string">"http://www.baidu.com"</span>, proxies = proxies)</span><br><span class="line"></span><br><span class="line">- 准备一堆的ip地址，组成ip池，随机选择一个ip来时用</span><br><span class="line">- 如何随机选择代理ip，让使用次数较少的ip地址有更大的可能性被用到</span><br><span class="line">  - &#123;<span class="string">"ip"</span>:ip,<span class="string">"times"</span>:<span class="number">0</span>&#125;</span><br><span class="line">  - [&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;],对这个ip的列表进行排序，按照使用次数进行排序</span><br><span class="line">  - 选择使用次数较少的<span class="number">10</span>个ip，从中随机选择一个</span><br><span class="line">- 检查ip的可用性</span><br><span class="line">  - 可以使用requests添加超时参数，判断ip地址的质量</span><br><span class="line">  - 在线代理ip质量检测的网站</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 根据协议类型，选择不同的代理</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"http://12.34.56.79:9527"</span>,</span><br><span class="line">  <span class="string">"https"</span>: <span class="string">"http://12.34.56.79:9527"</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com"</span>, proxies = proxies)</span><br><span class="line"><span class="keyword">print</span> response.text</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/image-20200330122726131.png" alt="image-20200330122726131"></p><p>免费的开放代理获取基本没有成本，我们可以在一些代理网站上收集这些免费代理，测试后如果可以用，就把它收集起来用在爬虫上面。免费短期代理网站举例：</p><ul><li><a href="http://www.xicidaili.com/" target="_blank" rel="noopener">西刺免费代理IP</a></li><li><a href="http://www.kuaidaili.com/free/inha/" target="_blank" rel="noopener">快代理免费代理</a></li><li><a href="http://www.proxy360.cn/default.aspx" target="_blank" rel="noopener">Proxy360代理</a></li><li><a href="http://www.goubanjia.com/free/index.shtml" target="_blank" rel="noopener">全网代理IP</a></li></ul><h5 id="cookie-session-cookies参数"><a href="#cookie-session-cookies参数" class="headerlink" title="cookie/session(cookies参数)"></a>cookie/session(cookies参数)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cookie、session区别</span><br><span class="line">cookie数据存放在客户的浏览器上，session数据放在服务器上。</span><br><span class="line">    cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗。</span><br><span class="line">session对象是一个非常常用的对象，这个对象代表一次用户会话</span><br><span class="line">    session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。</span><br><span class="line">    单个cookie保存的数据不能超过<span class="number">4</span>K，很多浏览器都限制一个站点最多保存<span class="number">20</span>个cookie。</span><br><span class="line"></span><br><span class="line">带上cookie、session的好处：</span><br><span class="line">能够请求到登录之后的页面</span><br><span class="line">携带一堆cookie进行请求，把cookie组成cookie池</span><br><span class="line"></span><br><span class="line">带上cookie、session的弊端：</span><br><span class="line">一套cookie和session往往和一个用户对应</span><br><span class="line">请求太快，请求次数太多，容易被服务器识别为爬虫</span><br><span class="line"></span><br><span class="line">不需要cookie的时候尽量不去使用cookie</span><br><span class="line">但是为了获取登录之后的页面，我们必须发送带有cookies的请求</span><br><span class="line"></span><br><span class="line">cookies字符串转dic</span><br><span class="line">cookies = &#123;i.split(<span class="string">"="</span>)[<span class="number">0</span>]:i.split(<span class="string">"="</span>)[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> cookies.split(<span class="string">"; "</span>)&#125;</span><br></pre></td></tr></table></figure><h5 id="获取登录后页面"><a href="#获取登录后页面" class="headerlink" title="获取登录后页面"></a>获取登录后页面</h5><ul><li>实例化session，使用session发送post请求，在使用他获取登陆后的页面</li><li>headers中添加cookie键，值为cookie字符串</li><li>在请求方法中添加cookies参数，接收字典形式的cookie。字典形式的cookie中的键是cookie的name对应的值，值是cookie的value对应的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 使用requests提供的session类来请求登陆之后的网站</span></span><br><span class="line">session = requests.session()</span><br><span class="line">post_url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">post_data = &#123;<span class="string">"email"</span>:<span class="string">"mr_mao_hacker@163.com"</span>, <span class="string">"password"</span>:<span class="string">"alarmchime"</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#使用session发送post请求，cookie保存在其中</span></span><br><span class="line">session.post(post_url,data=post_data,headers=headers)</span><br><span class="line"><span class="comment">#在使用session进行请求登陆之后才能访问的地址</span></span><br><span class="line">r = session.get(<span class="string">"http://www.renren.com/327550029/profile"</span>,headers=headers)</span><br><span class="line"><span class="comment">#保存页面</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"renren1.html"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在请求方法中添加cookies参数</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#列表推导式处理cookies</span></span><br><span class="line">cookies=<span class="string">"anonymid=j3jxk555-nrn0wh; _r01_=1; _ga=GA1.2.1274811859.1497951251; _de=BF09EE3A28DED52E6B65F6A4705D973F1383380866D39FF5; ln_uact=mr_mao_hacker@163.com; depovince=BJ; jebecookies=54f5d0fd-9299-4bb4-801c-eefa4fd3012b|||||; JSESSIONID=abcI6TfWH4N4t_aWJnvdw; ick_login=4be198ce-1f9c-4eab-971d-48abfda70a50; p=0cbee3304bce1ede82a56e901916d0949; first_login_flag=1; ln_hurl=http://hdn.xnimg.cn/photos/hdn421/20171230/1635/main_JQzq_ae7b0000a8791986.jpg; t=79bdd322e760beae79c0b511b8c92a6b9; societyguester=79bdd322e760beae79c0b511b8c92a6b9; id=327550029; xnsid=2ac9a5d8; loginfrom=syshome; ch_id=10016; wp_fold=0"</span></span><br><span class="line">cookies = &#123;i.split(<span class="string">"="</span>)[<span class="number">0</span>]:i.split(<span class="string">"="</span>)[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> cookies.split(<span class="string">"; "</span>)&#125;</span><br><span class="line">print(cookies)</span><br><span class="line">r = requests.get(<span class="string">"http://www.renren.com/327550029/profile"</span>,headers=headers,cookies=cookies)</span><br></pre></td></tr></table></figure><p><strong>web客户端验证</strong></p><p>如果是Web客户端验证，需要添加 auth = (账户名, 密码)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">auth=(<span class="string">'test'</span>, <span class="string">'123456'</span>)</span><br><span class="line">response = requests.get(<span class="string">'http://192.168.199.107'</span>, auth = auth)</span><br><span class="line"><span class="keyword">print</span> (response.text)</span><br></pre></td></tr></table></figure><h5 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向指定的url发送请求，并返回服务器响应的类文件对象</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="comment"># 类文件对象支持文件对象的操作方法，如read()方法读取文件全部内容，返回字符串</span></span><br><span class="line">html = response.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#IE 9.0 的 User-Agent</span></span><br><span class="line">header = &#123;<span class="string">"User-Agent"</span> : <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;"</span>&#125;</span><br><span class="line">request = urllib.request.Request(url, headers = header)</span><br><span class="line"><span class="comment">#也可以通过调用Request.add_header() 添加/修改一个特定的header</span></span><br><span class="line">request.add_header(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</span><br><span class="line"><span class="comment"># 也可以通过调用Request.get_header()来查看header信息</span></span><br><span class="line"><span class="comment"># request.get_header(header_name="Connection")</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="keyword">print</span> (response.code) <span class="comment">#可以查看响应状态码</span></span><br><span class="line">html = response.read().decode()</span><br><span class="line"><span class="keyword">print</span> (html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过urllib.urlencode()方法，将字典键值对按URL编码转换，从而能被web服务器接受。</span></span><br><span class="line">In [<span class="number">3</span>]: urllib.parse.urlencode(word)  </span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">"wd=%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2"</span></span><br><span class="line"><span class="comment"># 通过urllib.unquote()方法，把 URL编码字符串，转换回原先字符串。</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> urllib.parse.unquote(<span class="string">"wd=%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2"</span>)</span><br><span class="line">wd=传智播客</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建一个HTTPHandler 处理器对象，支持处理HTTP请求</span></span><br><span class="line">http_handler = urllib.request.HTTPHandler()</span><br><span class="line"><span class="comment"># 构建一个HTTPHandler 处理器对象，支持处理HTTPS请求</span></span><br><span class="line"><span class="comment"># http_handler = urllib.request.HTTPSHandler()</span></span><br><span class="line"><span class="comment"># 调用urllib.request.build_opener()方法，创建支持处理HTTP请求的opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(http_handler)</span><br><span class="line"><span class="comment"># 构建 Request请求</span></span><br><span class="line">request = urllib.request.Request(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># 调用自定义opener对象的open()方法，发送request请求</span></span><br><span class="line">response = opener.open(request)</span><br><span class="line"><span class="comment"># 获取服务器响应内容</span></span><br><span class="line"><span class="keyword">print</span> (response.read().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建了代理Handler</span></span><br><span class="line">httpproxy_handler = urllib.request.ProxyHandler(&#123;<span class="string">"http"</span> : <span class="string">"124.88.67.81:80"</span>&#125;)</span><br><span class="line">opener = urllib.request.build_opener(httpproxy_handler)</span><br><span class="line"></span><br><span class="line">cookiejar模块：主要作用是提供用于存储cookie的对象</span><br><span class="line">HTTPCookieProcessor处理器：主要作用是处理这些cookie对象，并构建handler对象。</span><br></pre></td></tr></table></figure><h4 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h4><h5 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">lxml是一款高性能Python HTML/XML 解析器，可以利用XPath来快速的定位特定元素以及获取节点信息</span><br><span class="line">XPath (XML Path Language) 是一门在 HTML\XML 文档中查找信息的语言，可用来在 HTML\XML 文档中对元素和属性进行遍历。</span><br><span class="line">使用chrome插件选择标签时候，选中时，选中的标签会添加属性class="xh-highlight"</span><br><span class="line">lxml使用入门：</span><br><span class="line">    导入lxml 的 etree 库 </span><br><span class="line">        <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">    利用etree.HTML，将字符串转化为Element对象</span><br><span class="line">    Element对象具有xpath的方法</span><br><span class="line">        html = etree.HTML(text) </span><br><span class="line">        </span><br><span class="line">- 使用xpath helper或者是chrome中的copy xpath都是从element中提取的数据，但是爬虫获取的是url对应的响应，往往和elements不一样</span><br><span class="line">- 获取文本</span><br><span class="line">  - `a/text()` 获取a下的文本</span><br><span class="line">  - `a//text()` 获取a下的所有标签的文本</span><br><span class="line">  - `//a[text()=<span class="string">'下一页'</span>]` 选择文本为下一页三个字的a标签</span><br><span class="line"></span><br><span class="line">- `@符号`</span><br><span class="line">  - `a/@href`</span><br><span class="line">  - `//ul[@id=<span class="string">"detail-list"</span>]`</span><br><span class="line"></span><br><span class="line">- `//`</span><br><span class="line">  - 在xpath最前面表示从当前html中任意位置开始选择</span><br><span class="line">  - `li//a` 表示的是li下任何一个标签</span><br><span class="line"></span><br><span class="line">- xpath的包含</span><br><span class="line">- //div[contains(@class,'i')]</span><br></pre></td></tr></table></figure><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点,可选匹配孙子节点</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><table><thead><tr><th>表达式</th><th>路径表达式</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点。</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore/book</td><td>选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>//@lang</td><td>选取名为 lang 的所有属性</td></tr></tbody></table><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/image-20200404181710776.png" alt="image-20200404181710776"></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/image-20200404182026176.png" alt="image-20200404182026176"></p><p><img src="/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/image-20200404182136384.png" alt="image-20200404182136384"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiubaiSpdier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url_temp = <span class="string">"https://www.qiushibaike.com/8hr/page/&#123;&#125;/"</span></span><br><span class="line"></span><br><span class="line">        self.headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.url_temp.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">14</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        print(url)</span><br><span class="line">        response = requests.get(url,headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> response.content.decode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content_list</span><span class="params">(self,html_str)</span>:</span> <span class="comment">#提取数据</span></span><br><span class="line">        html = etree.HTML(html_str)</span><br><span class="line">        div_list = html.xpath(<span class="string">"//div[@class='recommend-article']//li"</span>)  <span class="comment">#分组</span></span><br><span class="line">        content_list = []</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            item= &#123;&#125;</span><br><span class="line">            item[<span class="string">"content"</span>] = div.xpath(<span class="string">".//div[@class='recmd-right']/a[@class='recmd-content']/text()"</span>)</span><br><span class="line">            item[<span class="string">"content"</span>] = [i.replace(<span class="string">"\n"</span>,<span class="string">""</span>) <span class="keyword">for</span> i <span class="keyword">in</span> item[<span class="string">"content"</span>]]</span><br><span class="line">            item[<span class="string">"href"</span>] = div.xpath(<span class="string">".//div[@class='recmd-right']/a[@class='recmd-content']/@href"</span>)</span><br><span class="line">            item[<span class="string">"href"</span>]=<span class="string">"https://www.qiushibaike.com"</span>+item[<span class="string">"href"</span>][<span class="number">0</span>] <span class="keyword">if</span> len(item[<span class="string">"href"</span>])&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">            item[<span class="string">"content_img"</span>] = div.xpath(<span class="string">".//a[contains(@class,'recmd-left')]/img/@src"</span>)</span><br><span class="line">            item[<span class="string">"content_img"</span>] = <span class="string">"https:"</span>+item[<span class="string">"content_img"</span>][<span class="number">0</span>] <span class="keyword">if</span> len(item[<span class="string">"content_img"</span>])&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">            item[<span class="string">"author_img"</span>] = div.xpath(<span class="string">".//a[@class='recmd-user']/img/@src"</span>)</span><br><span class="line">            item[<span class="string">"author_img"</span>] = <span class="string">"https:"</span>+item[<span class="string">"author_img"</span>][<span class="number">0</span>] <span class="keyword">if</span> len(item[<span class="string">"author_img"</span>])&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">            item[<span class="string">"stats_vote"</span>] = div.xpath(<span class="string">".//div[@class='recmd-num']/span/text()"</span>)</span><br><span class="line">            item[<span class="string">"stats_vote"</span>] = item[<span class="string">"stats_vote"</span>][<span class="number">0</span>] <span class="keyword">if</span> len(item[<span class="string">"stats_vote"</span>])&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">            content_list.append(item)</span><br><span class="line">        <span class="keyword">return</span> content_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_content_list</span><span class="params">(self,content_list)</span>:</span> <span class="comment">#保存</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> content_list:</span><br><span class="line">            print(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span> <span class="comment">#实现主要逻辑</span></span><br><span class="line">        <span class="comment">#1.url_list</span></span><br><span class="line">        url_list = self.get_url_list()</span><br><span class="line">        <span class="comment">#2.遍历，发送请求，获取响应</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            html_str = self.parse_url(url)</span><br><span class="line">            <span class="comment">#3.提取数据</span></span><br><span class="line">            content_list = self.get_content_list(html_str)</span><br><span class="line">            <span class="comment">#4.保存</span></span><br><span class="line">            self.save_content_list(content_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    qiubai = QiubaiSpdier()</span><br><span class="line">    qiubai.run()</span><br></pre></td></tr></table></figure><h5 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h5><p>和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，将复杂 HTML 文档转换成一个复杂的树形结构, 每个节点都是 Python 对象</p><p>所有对象可以归纳为 4 种: Tag , NavigableString ,BeautifulSoup , Comment </p><blockquote><p>lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。</p></blockquote><table><thead><tr><th style="text-align:center">抓取工具</th><th style="text-align:center">速度</th><th style="text-align:center">使用难度</th><th style="text-align:center">安装难度</th></tr></thead><tbody><tr><td style="text-align:center">正则</td><td style="text-align:center">最快</td><td style="text-align:center">困难</td><td style="text-align:center">无（内置）</td></tr><tr><td style="text-align:center">BeautifulSoup</td><td style="text-align:center">慢</td><td style="text-align:center">最简单</td><td style="text-align:center">简单</td></tr><tr><td style="text-align:center">lxml</td><td style="text-align:center">快</td><td style="text-align:center">简单</td><td style="text-align:center">一般</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line">soup = BeautifulSoup(html)</span><br><span class="line"><span class="comment">#格式化输出 soup 对象的内容 html文档</span></span><br><span class="line"><span class="keyword">print</span> soup.prettify() </span><br><span class="line"></span><br><span class="line">对于 Tag，它有两个重要的属性，是 name 和 attrs</span><br><span class="line">每个 tag 都有自己的名字, 通过.name 来获取:</span><br><span class="line">一个 tag 可能有很多个属性 &lt;b class="boldest"&gt; 有一个“class”的属性, 值为“boldest”</span><br><span class="line">也可以直接”点”取属性, 比如: .attrs eg: soup.p.attrs</span><br><span class="line">用 .string 即可获取标签内部的文字 </span><br><span class="line">tag 的 .content 属性可以将tag的子节点以列表的方式输出</span><br><span class="line"><span class="comment">#通过点取属性的方式只能获得当前名字的第一个 tag:</span></span><br><span class="line">soup.a</span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/elsie" &gt;</span></span><br><span class="line"><span class="keyword">print</span> type(soup.p)</span><br><span class="line"><span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line"><span class="keyword">print</span> soup.name</span><br><span class="line"><span class="comment"># [document] #soup 对象本身比较特殊，它的 name 即为 [document]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要得到所有的 &lt;a&gt; 标签, 或是通过名字得到比一个 tag 更多的内容的时候 find_all()</span></span><br><span class="line">soup.find_all(’a’)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/tillie"id="link3"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以直接”点”取属性, 比如: .attrs 。把 p 标签的所有属性打印输出了出来，得到的类型是一个字典</span></span><br><span class="line"><span class="keyword">print</span> soup.p.attrs</span><br><span class="line"><span class="comment"># &#123;'class': ['title'], 'name': 'dromouse'&#125;</span></span><br><span class="line"><span class="keyword">print</span> soup.p[<span class="string">'class'</span>] <span class="comment"># soup.p.get('class')</span></span><br><span class="line"><span class="comment"># ['title'] #还可以利用get方法，传入属性的名称，二者是等价的</span></span><br><span class="line">soup.p[<span class="string">'class'</span>] = <span class="string">"newClass"</span></span><br><span class="line"><span class="keyword">print</span> soup.p <span class="comment"># 可以对这些属性和内容等等进行修改</span></span><br><span class="line"><span class="comment"># &lt;p class="newClass" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="keyword">del</span> soup.p[<span class="string">'class'</span>] <span class="comment"># 还可以对这个属性进行删除</span></span><br><span class="line"><span class="keyword">print</span> soup.p</span><br><span class="line"><span class="comment"># &lt;p name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 既然我们已经得到了标签的内容，要想获取标签内部的文字怎么办呢？很简单，用 .string 即可</span></span><br><span class="line"><span class="keyword">print</span> soup.p.string</span><br><span class="line"><span class="comment"># The Dormouse's story</span></span><br><span class="line">如果一个标签里面没有标签了，那么 .string 就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么 .string 也会返回最里面的内容。</span><br><span class="line"><span class="keyword">print</span> soup.head.string</span><br><span class="line"><span class="comment">#The Dormouse's story</span></span><br><span class="line"><span class="keyword">print</span> soup.title.string</span><br><span class="line"><span class="comment">#The Dormouse's story</span></span><br><span class="line"><span class="keyword">print</span> type(soup.p.string)</span><br><span class="line"><span class="comment"># In [13]: &lt;class 'bs4.element.NavigableString'&gt;</span></span><br><span class="line"><span class="keyword">print</span> soup.a.string</span><br><span class="line"><span class="comment"># Elsie </span></span><br><span class="line"><span class="keyword">print</span> type(soup.a.string)</span><br><span class="line"><span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></span><br><span class="line">a 标签里的内容实际上是注释，但是如果我们利用 .string 来输出它的内容时，注释符号已经去掉了。</span><br><span class="line"></span><br><span class="line"><span class="comment"># tag 的 .content 属性可以将tag的子节点以列表的方式输出</span></span><br><span class="line"><span class="keyword">print</span> soup.head.contents </span><br><span class="line"><span class="comment">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">• .descendants 表示子节点</span><br><span class="line">• .next_element 表示下一个节点</span><br><span class="line">• .next_sibling 表示下一个兄弟</span><br><span class="line">• .get_text() 返回文本</span><br><span class="line"></span><br><span class="line">通过tag的.children, 它返回的不是一个list，是一个list生成器对象,不过我们可以通过遍历获取所有子节点。</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> title_tag.children:</span><br><span class="line">print(child)</span><br><span class="line"><span class="comment"># The Dormouse’s story</span></span><br><span class="line"></span><br><span class="line">继续分析文档树, 每个 tag 或字符串都有父节点: 被包含在某个 tag 中通过.parent 属性来获取某个元素的父节点. </span><br><span class="line">title_tag = soup.title</span><br><span class="line">title_tag</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse’s story&lt;/title&gt;</span></span><br><span class="line">title_tag.parent</span><br><span class="line"><span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse’s story&lt;/title&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Beautiful Soup 支持大部分的 CSS 选择器, 在 Tag 或 BeautifulSoup 对象的.select() 方法中传入字符串参数, 即可使用 CSS 选择器的语法找到tag:</span><br><span class="line">soup.select(<span class="string">"title"</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse’s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line">通过tag标签名逐层查找:</span><br><span class="line"><span class="number">1.</span> 后代选择器</span><br><span class="line">* 语法： (<span class="string">"A B"</span>) 选择A元素内部的所有B元素,包括子元素的子元素</span><br><span class="line"><span class="number">2.</span> 子选择器</span><br><span class="line">* 语法： (<span class="string">"A &gt; B"</span>) 选择父元素为A元素的B元素</span><br><span class="line">soup.select(<span class="string">"html head title"</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse’s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line">通过 CSS 的类名查找:</span><br><span class="line">soup.select(<span class="string">".sister"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">通过 tag 的 id 查找:</span><br><span class="line">soup.select(<span class="string">"#link1"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line">soup.select(<span class="string">"a#link2"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">通过是否存在某个属性来查找:</span><br><span class="line">soup.select(’a[href]’)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">通过属性的值来查找:</span><br><span class="line">soup.select(’a[href=<span class="string">"http://example.com/elsie"</span>]’)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line">soup.select(’a[href^=<span class="string">"http://example.com/"</span>]’)</span><br><span class="line">soup.select(’a[href * =<span class="string">".com/el"</span>]’)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">获取内容</span><br><span class="line">以上的 select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容。</span><br><span class="line">soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text()</span><br></pre></td></tr></table></figure><h5 id="find-all-选择器"><a href="#find-all-选择器" class="headerlink" title="find_all() 选择器"></a>find_all() 选择器</h5><p><code>find_all(name, attrs, recursive, text, **kwargs)</code></p><p>find_all() 方法搜索当前 tag 的所有 tag 子节点, 并判断是否符合过滤器的条件. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">name 参数可以查找所有名字为 name 的 tag, 字符串对象会被自动忽略掉.传字符串,传正则表达式,传列表</span><br><span class="line">soup.find_all(<span class="string">"title"</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse’s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># keyword 参数</span></span><br><span class="line">soup.find_all(id=<span class="string">"link2"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">如果传入 href 参数,Beautiful Soup 会搜索每个 tag 的”href”属性:</span><br><span class="line">soup.find_all(href=re.compile(<span class="string">"elsie"</span>))</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">使用多个指定名字的参数可以同时过滤 tag 的多个属性:</span><br><span class="line">soup.find_all(href=re.compile(<span class="string">"elsie"</span>), id=’link1’)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">可以通过 find_all() 方法的 attrs 参数定义一个字典参数来搜索包含特殊属性的 tag:</span><br><span class="line">data_soup.find_all(attrs=&#123;<span class="string">"data-foo"</span>: <span class="string">"value"</span>&#125;)</span><br><span class="line"><span class="comment"># [&lt;div data-foo="value"&gt;foo!&lt;/div&gt;]</span></span><br><span class="line"></span><br><span class="line">按照CSS类名搜索tag的功能非常实用, 但class在Python中是保留字, 会导致语法错误.</span><br><span class="line">从Beautiful Soup 的 <span class="number">4.1</span><span class="number">.1</span> 版本开始, 可以通过 class_ 参数搜索有指定CSS 类名的 tag</span><br><span class="line">soup.find_all(<span class="string">"a"</span>, class_=<span class="string">"sister"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">tag 的 class 属性是多值属性. 按照 CSS 类名搜索 tag 时, 可以分别搜索tag 中的每个 CSS 类名:</span><br><span class="line">css_soup = BeautifulSoup(’&lt;p class="body strikeout"&gt;&lt;/p&gt;’)</span><br><span class="line">css_soup.find_all(<span class="string">"p"</span>, class_=<span class="string">"strikeout"</span>)</span><br><span class="line"><span class="comment"># [&lt;p class="body strikeout"&gt;&lt;/p&gt;]</span></span><br><span class="line"></span><br><span class="line">通过 text 参数可以搜搜文档中的字符串内容.</span><br><span class="line">text 参数接受字符串, 正则表达式, 列表, <span class="keyword">True</span> . 看例子:</span><br><span class="line">soup.find_all(text=[<span class="string">"Tillie"</span>, <span class="string">"Elsie"</span>, <span class="string">"Lacie"</span>])</span><br><span class="line"><span class="comment"># [u’Elsie’, u’Lacie’, u’Tillie’]</span></span><br><span class="line">soup.find_all(text=re.compile(<span class="string">"Dormouse"</span>))</span><br><span class="line">[<span class="string">u"The Dormouse’s story"</span>, <span class="string">u"The Dormouse’s story"</span>]</span><br><span class="line"></span><br><span class="line">搜索内容里面包含“Elsie”的 &lt;a&gt; 标签:</span><br><span class="line">soup.find_all(<span class="string">"a"</span>, text=<span class="string">"Elsie"</span>)</span><br><span class="line"><span class="comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">find_all() 和 find() 只搜索当前节点的所有子节点, 孙子节点等.</span><br><span class="line">find_parents() 和 find_parent() 用来搜索当前节点的父辈节点</span><br><span class="line">a_string = soup.find(text=<span class="string">"Lacie"</span>) <span class="comment"># u’Lacie’</span></span><br><span class="line">a_string.find_parents(<span class="string">"a"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h5 id="selenium使用"><a href="#selenium使用" class="headerlink" title="selenium使用"></a>selenium使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 配置好chromedriver</span><br><span class="line">打开chrome 输入 “chrome://version/”来查看chrome版本</span><br><span class="line">访问 http://chromedriver.storage.googleapis.com/index.html 选择合适版本的driver </span><br><span class="line">将下载好的驱动放止python的安装目录下即可，anaconda注意要放到对应环境env的目录下</span><br></pre></td></tr></table></figure><h5 id="爬虫项目案例"><a href="#爬虫项目案例" class="headerlink" title="爬虫项目案例"></a>爬虫项目案例</h5><p>给定搜索词集合，爬取谷歌图片和其相关图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">'http'</span>: <span class="string">'http://127.0.0.1:1080'</span>,</span><br><span class="line">            <span class="string">'https'</span>: <span class="string">'https://127.0.0.1:1080'</span></span><br><span class="line">        &#125;</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/56.0.2924.87 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'referer'</span>: <span class="string">'https://www.google.com/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url, proxies=proxies, headers=headers, timeout=<span class="number">30</span>)</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f'error while downloading page <span class="subst">&#123;url&#125;</span>'</span>)</span><br><span class="line">        print(e)</span><br><span class="line">        <span class="comment"># 返回空串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析出各二级标签</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(first, url, src)</span>:</span></span><br><span class="line">    path = <span class="string">f'<span class="subst">&#123;src&#125;</span>/<span class="subst">&#123;first&#125;</span>'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    soup = BeautifulSoup(download_page(url), <span class="string">'lxml'</span>)</span><br><span class="line">    second_list = soup.select(<span class="string">'div.EDblX.DAVP1 &gt; a'</span>)</span><br><span class="line">    <span class="keyword">for</span> second_a <span class="keyword">in</span> second_list:</span><br><span class="line">        span = second_a.select(<span class="string">'span'</span>)</span><br><span class="line">        second = span[<span class="number">0</span>].string.strip()</span><br><span class="line">        href = <span class="string">'https://www.google.com'</span> + second_a[<span class="string">'href'</span>]</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> parse_second(src, first, second, href):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'All Finised!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析二级标签详细页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_second</span><span class="params">(src, first, second, url)</span>:</span></span><br><span class="line">    print(second)</span><br><span class="line">    soup = BeautifulSoup(download_page(url), <span class="string">'lxml'</span>)</span><br><span class="line">    divs = soup.select(<span class="string">'div#rg_s div.rg_meta.notranslate'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(divs) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">        img = json.loads(div.string.strip())</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        data[<span class="string">'first'</span>] = first</span><br><span class="line">        data[<span class="string">'second'</span>] = second</span><br><span class="line">        data[<span class="string">'img_url'</span>] = img[<span class="string">'ou'</span>]</span><br><span class="line">        data[<span class="string">'img_desc'</span>] = img[<span class="string">'pt'</span>]</span><br><span class="line">        data[<span class="string">'imgsrc_url'</span>] = img[<span class="string">'ru'</span>]</span><br><span class="line">        <span class="comment"># XHR</span></span><br><span class="line">        data[<span class="string">'relative_url'</span>] = \</span><br><span class="line">            <span class="string">"https://www.google.com/async/imgrc?"</span> \</span><br><span class="line">                <span class="string">f"imgurl=<span class="subst">&#123;img[<span class="string">'ou'</span>]&#125;</span>"</span> \</span><br><span class="line">                <span class="string">f"&amp;imgrefurl=<span class="subst">&#123;img[<span class="string">'ru'</span>]&#125;</span>"</span> \</span><br><span class="line">                <span class="string">f"&amp;tbnid=<span class="subst">&#123;img[<span class="string">'id'</span>]&#125;</span>"</span> \</span><br><span class="line">                <span class="string">f"&amp;docid=<span class="subst">&#123;img[<span class="string">'rid'</span>]&#125;</span>"</span> \</span><br><span class="line">                <span class="string">f"&amp;imgdii=<span class="subst">&#123;img[<span class="string">'id'</span>]&#125;</span>"</span> \</span><br><span class="line">            <span class="string">"&amp;async=cidx:1,saved:0,iptc:1,iu:0,lp:1,_fmt:prog,_id:irc_imgrc1,_jsfs:Ffpdje"</span></span><br><span class="line">        print(data, <span class="string">'\n'</span>)</span><br><span class="line">        append_write(<span class="string">f'<span class="subst">&#123;src&#125;</span>/<span class="subst">&#123;first&#125;</span>/<span class="subst">&#123;second&#125;</span>.txt'</span>, json.dumps(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行从第一步中抽取，然后解析相关性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_relative</span><span class="params">(src, dst)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dst):</span><br><span class="line">        os.makedirs(dst)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(src):</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">f'<span class="subst">&#123;src&#125;</span>/<span class="subst">&#123;file&#125;</span>'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                parse_relative_img(line, dst)</span><br><span class="line">                <span class="comment"># time.sleep(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_relative_img</span><span class="params">(json_obj, dst)</span>:</span></span><br><span class="line">    data = json.loads(json_obj)</span><br><span class="line">    second = data[<span class="string">'second'</span>]</span><br><span class="line">    print(second)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 相关页</span></span><br><span class="line">    html = download_page(data[<span class="string">'relative_url'</span>])</span><br><span class="line">    relative_list = re.findall(<span class="string">'&lt;div.*?notranslate"&gt;(.*?)&lt;/div&gt;'</span>, html)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> relative <span class="keyword">in</span> relative_list:</span><br><span class="line">        img = json.loads(relative)</span><br><span class="line">        tmp = &#123;</span><br><span class="line">            <span class="string">'img_url'</span>: img[<span class="string">'ou'</span>],</span><br><span class="line">            <span class="string">'img_desc'</span>: img[<span class="string">'pt'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(tmp)</span><br><span class="line">    data[<span class="string">'relative_img'</span>] = res</span><br><span class="line">    data.pop(<span class="string">'relative_url'</span>, <span class="keyword">None</span>)</span><br><span class="line">    print(data, <span class="string">'\n'</span>)</span><br><span class="line">    append_write(<span class="string">f"<span class="subst">&#123;dst&#125;</span>/<span class="subst">&#123;second&#125;</span>.txt"</span>, json.dumps(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析图片描述</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_img_desc</span><span class="params">(url)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(download_page(url), <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        h1s = soup.select(<span class="string">'h1'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(h1s) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        res = list(h1s[<span class="number">0</span>].strings)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> res.strip()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;url&#125;</span> h1 problem'</span>)</span><br><span class="line">        print(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_write</span><span class="params">(dst, txt)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(dst, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(txt)</span><br><span class="line">        f.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    field = <span class="string">'navy'</span></span><br><span class="line">    search_words = [</span><br><span class="line">        <span class="string">'aircraft carrier'</span>,</span><br><span class="line">        <span class="string">'military destroyer'</span>,</span><br><span class="line">        <span class="string">'military corvette'</span>,</span><br><span class="line">        <span class="string">'military battleship'</span>,</span><br><span class="line">        <span class="string">'cruiser ship'</span>,</span><br><span class="line">        <span class="string">'missile boat'</span>,</span><br><span class="line">        <span class="string">'submarine'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    src = <span class="string">f'tmp/<span class="subst">&#123;field&#125;</span>'</span></span><br><span class="line">    dst = <span class="string">f'output/<span class="subst">&#123;field&#125;</span>'</span></span><br><span class="line">    pool = Pool(multiprocessing.cpu_count())</span><br><span class="line">    <span class="keyword">for</span> search_word <span class="keyword">in</span> search_words:</span><br><span class="line">        url = <span class="string">f'https://www.google.com/search?q=<span class="subst">&#123;search_word&#125;</span>&amp;source=lnms&amp;tbm=isch'</span></span><br><span class="line">        <span class="comment"># 拆分任务</span></span><br><span class="line">        <span class="comment"># 第一步：解析页面和二级标签</span></span><br><span class="line">        parse_page(search_word, url, src)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二步：解析相关性</span></span><br><span class="line">        <span class="comment"># parse_relative(f'&#123;src&#125;/&#123;search_word&#125;', f'&#123;dst&#125;/&#123;search_word&#125;')</span></span><br><span class="line">        pool.apply_async(parse_relative, args=(<span class="string">f'<span class="subst">&#123;src&#125;</span>/<span class="subst">&#123;search_word&#125;</span>'</span>, <span class="string">f'<span class="subst">&#123;dst&#125;</span>/<span class="subst">&#123;search_word&#125;</span>'</span>))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(<span class="string">'All Finished!'</span>)</span><br></pre></td></tr></table></figure><h4 id="反爬策略-vs-爬虫策略"><a href="#反爬策略-vs-爬虫策略" class="headerlink" title="反爬策略 vs 爬虫策略"></a>反爬策略 vs 爬虫策略</h4><p>反爬虫是使用技术手段 防止爬虫程序的方法</p><p>反爬：成功率越高成本越大，拦截率越高，误伤率越高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">存在误伤，即 反爬技术 将普通用户识别为爬虫</span><br><span class="line">如果误伤高 --- 效果再好也不能使用</span><br><span class="line"></span><br><span class="line">比如 限制 ip  === 用户的ip 一般都是 局域网内动态分配的，</span><br><span class="line">    一个爬虫的ip 可能分配给 另一个 非爬虫的用户</span><br><span class="line">    有效的方法： 可以在一段时间内 限制 ip，过一段时间 再把 ip释放</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.监控 某个时间 访问突然增加，ip相同，user-agent不是浏览器；限制 ip访问 (注意：不能封ip)</span><br><span class="line">（1）user-agent模拟，ip代理(ip代理池)</span><br><span class="line"></span><br><span class="line">2 发现 ip 变化， 要求登录访问</span><br><span class="line">(2) 注册 账号, 每次请求 带 cookie</span><br><span class="line"></span><br><span class="line">3  开发健全的账号体系，每个账号 权限不同</span><br><span class="line">(3) 多个账号 联合爬虫(维护账号池)</span><br><span class="line"></span><br><span class="line">4 访问频繁 ,限制 ip频率</span><br><span class="line">(4) 模仿人的请求速度</span><br><span class="line"></span><br><span class="line">5  弹出 验证码</span><br><span class="line">(5) 识别验证码</span><br><span class="line"></span><br><span class="line">6  增加网页 内容的动态填充 ajax向后台请求</span><br><span class="line">(6) selenium + phantomJs 完全模拟浏览器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;爬虫基础&quot;&gt;&lt;a href=&quot;#爬虫基础&quot; class=&quot;headerlink&quot; title=&quot;爬虫基础&quot;&gt;&lt;/a&gt;爬虫基础&lt;/h4&gt;&lt;p&gt;爬虫是模拟浏览器发送请求，获取响应&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../assets/pic/2019-07-19-python%E7%88%AC%E8%99%AB/image-20200330103508473.png&quot; alt=&quot;image-20200330103508473&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础复习整理</title>
    <link href="/2019/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>/2019/2019-07-18-python开源基础复习整理/</id>
    <published>2019-07-18T02:36:00.000Z</published>
    <updated>2020-08-27T06:51:37.403Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h4><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><p><strong>开源许可证选择</strong></p><a id="more"></a><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200226142717986.png" alt="image-20200226142717986"></p><p><strong>编译型语言执行速度快,解释型语言跨平台性好</strong></p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/001_%E7%BC%96%E8%AF%91%E5%9E%8B%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%B7%A5%E4%BD%9C%E5%AF%B9%E6%AF%94.png" alt="001_编译型和解释型语言工作对比-w360"></p><p><strong>Pyc 文件</strong></p><blockquote><p><code>C</code> 是 <code>compiled</code> <strong>编译过</strong> 的意思</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">浏览程序目录会发现一个 `__pycache__` 的目录</span><br><span class="line">目录下会有一个 `hm_10_分隔线模块.cpython-35.pyc` 文件，`cpython-35` 表示 `Python` 解释器的版本</span><br><span class="line"></span><br><span class="line">字节码</span><br><span class="line">* Python 在解释源程序时是分成两个步骤的</span><br><span class="line">  1. 首先处理源代码，编译 生成一个二进制 字节码</span><br><span class="line">  2. 再对 字节码 进行处理，才会生成 CPU 能够识别的 机器码</span><br><span class="line">* 有了模块字节码文件后，下一次运行程序时，如果在 上次保存字节码之后 没有修改过源代码，Python 将会加载 .pyc 文件并跳过编译这个步骤</span><br><span class="line">* 当Python重编译时，它会自动检查源文件和字节码文件的时间戳</span><br><span class="line">* 如果你又修改了源代码，下次程序运行时，字节码将自动重新创建</span><br></pre></td></tr></table></figure><h5 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">• 不可变数据（<span class="number">3</span> 个）：Number（数字）、String（字符串）、Tuple（元组）；</span><br><span class="line">• 数字包括int、float、bool、complex（复数）</span><br><span class="line">• 可变数据（<span class="number">3</span> 个）：List（列表）、Dictionary（字典）、Set（集合）。</span><br><span class="line">• 给 Python 文件起名时，不能以数字开头,无法在PyCharm中通过导入这个模块</span><br><span class="line">• 除法/返回浮点型</span><br><span class="line">• 整数除法用//</span><br><span class="line">• 幂运算用 ** <span class="comment">#print(2**3) 8</span></span><br><span class="line">• 混用整数浮点数类型提升 print(type(<span class="number">2.0</span>+<span class="number">3</span>)) <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line">• 无穷大 float(<span class="string">"inf"</span>) 与 无穷小 float(<span class="string">"-inf"</span>)</span><br><span class="line">• 类型转换 a=<span class="string">'123'</span> b=int(a)</span><br><span class="line">• 输入输出：</span><br><span class="line">a = input(<span class="string">"提示信息："</span>)</span><br><span class="line">print(<span class="string">"苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元"</span> % (price, weight, money))</span><br><span class="line">print(<span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>))</span><br><span class="line">print(<span class="string">"\r%.2f...(%s)"</span> % (copy_rate, file_name) + <span class="string">" "</span>*<span class="number">50</span>, end=<span class="string">""</span>) <span class="comment">#类似上传文件进度的显示形式</span></span><br><span class="line">print()会依次打印每个字符串，遇到逗号“,”会输出一个空格</span><br><span class="line"></span><br><span class="line">• 交互模式下 _ 是特殊变量，上一次计算的结果，类似 bash 的 $? 或 cmd 的%errorlevel%,非交互模式不能用</span><br><span class="line">• 默认交互环境（非ipython）下赋值会覆盖</span><br><span class="line">• id()函数可查看变量的内存地址 print(<span class="string">"%d 内存地址是 %x"</span> % (num, id(num)))</span><br><span class="line">• os.system(<span class="string">"终端命令"</span>)</span><br><span class="line">• eval() 函数十分强大 —— 将字符串 当成 有效的表达式 来求值 并 返回计算结果</span><br><span class="line">• <span class="keyword">is</span> 用于判断 两个变量 引用对象是否为同一个</span><br><span class="line">• == 用于判断 引用变量的值 是否相等</span><br></pre></td></tr></table></figure><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠符号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>横向制表符: <strong>垂直方向</strong> 按列对齐文本</td></tr><tr><td>\r</td><td>回车</td></tr></tbody></table><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是第一个单行注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是一个多行注释</span></span><br><span class="line"><span class="string">在多行注释之间，可以写很多很多的内容……</span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#文档注释 一个函数必须要有文档字符串, 除非它满足以下条件:外部不可见 非常短小 简单明了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></span><br><span class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class="line"><span class="string">    represented by big_table. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        big_table: An open Bigtable Table instance.</span></span><br><span class="line"><span class="string">        keys: A sequence of strings representing the key of each table row</span></span><br><span class="line"><span class="string">            to fetch.</span></span><br><span class="line"><span class="string">        other_silly_variable: Another optional variable, that has a much</span></span><br><span class="line"><span class="string">            longer name than the other args, and which does nothing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A dict mapping keys to the corresponding table row data</span></span><br><span class="line"><span class="string">        fetched. Each row is represented as a tuple of strings. For</span></span><br><span class="line"><span class="string">        example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class="line"><span class="string">         'Zim': ('Irk', 'Invader'),</span></span><br><span class="line"><span class="string">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a key from the keys argument is missing from the dictionary,</span></span><br><span class="line"><span class="string">        then that row was not found in the table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">• <span class="keyword">None</span>/<span class="keyword">False</span>/<span class="number">0</span>/”/()/[]/&#123;&#125; 会判定为假</span><br><span class="line">• 可以有任意多个 <span class="keyword">elif</span> 分支</span><br><span class="line">• range 左闭右开</span><br><span class="line">• range 在 Python3 中不返回列表，可用 list(range()) 习语</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_2_num</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    result = num1 + num2    </span><br><span class="line">    print(<span class="string">"%d + %d = %d"</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line">sum_2_num(<span class="number">50</span>, <span class="number">20</span>)</span><br><span class="line">• 在函数调用位置，使用快捷键 CTRL + Q 可以查看函数的说明信息</span><br><span class="line">• 默认参数：在需要默认参数的地方用 = 号给定即可, 但要注意所有的默认参数都不能出现在非默认参数前。</span><br><span class="line">• 如果在函数中需要修改全局变量，需要使用 `<span class="keyword">global</span>` 进行声明</span><br><span class="line">• 函数的 实参/返回值 都是是靠 引用 来传递来的</span><br><span class="line">• 只要针对参数使用赋值语句，会在 函数内部修改局部变量的引用，不会影响到 外部变量的引用</span><br><span class="line">• 如果传递的参数是可变类型，在函数内部，使用方法修改了数据的内容，同样会影响到外部的数据</span><br><span class="line">num=<span class="number">100</span></span><br><span class="line">b=<span class="number">100</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">d=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num+=<span class="number">100</span></span><br><span class="line">    b=<span class="number">100</span></span><br><span class="line">    b+=<span class="number">2</span></span><br><span class="line">    a.append(<span class="number">23</span>)</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">3</span></span><br><span class="line">num： <span class="number">100</span></span><br><span class="line">a: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b: <span class="number">100</span></span><br><span class="line">d: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">调用test函数后</span><br><span class="line">num： <span class="number">200</span></span><br><span class="line">a: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">23</span>]</span><br><span class="line">b: <span class="number">100</span></span><br><span class="line">d: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    </span><br><span class="line">函数名其实就是指向函数的变量！对于abs()这个函数，完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数！</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs</span><br><span class="line">&lt;built-<span class="keyword">in</span> function abs&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = abs</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-10</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">既然变量可以指向函数，函数的参数能接收变量，函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line">函数作为返回值,高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</span><br><span class="line">lazy_sum不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</span><br><span class="line">调用函数f时，才真正计算求和的结果：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f() <span class="comment">#25</span></span><br><span class="line">当我们调用lazy_sum()时，每次调用都会返回一个新函数，即使传入相同参数：f1()和f2()调用结果互不影响。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>);f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1==f2<span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">偏函数</span><br><span class="line">假设要转换大量的二进制字符串，每次都传入int(x, base=<span class="number">2</span>)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=<span class="number">2</span>传进去：</span><br><span class="line">简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br><span class="line">functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>) <span class="comment"># 64</span></span><br></pre></td></tr></table></figure><p><strong>函数可变参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*args是可变参数，args接收的是一个tuple；</span><br><span class="line">**kw是关键字参数，kw接收的是一个dict。</span><br><span class="line">可变参数既可以直接传入：func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)，又可以先组装list或tuple，再通过*args传入：func(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))；</span><br><span class="line">关键字参数既可直接传入：func(a=<span class="number">1</span>, b=<span class="number">2</span>)，又可先组装dict，再通过**kw传入：func(**&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)。</span><br><span class="line">参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">(name, *grades)</span>:</span><span class="comment">#参数名前增加一个 `*`可以接收元组</span></span><br><span class="line">    total_grade = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> grade <span class="keyword">in</span> grades:</span><br><span class="line">        total_grade += grade</span><br><span class="line">    print(name, <span class="string">'total grade is '</span>, total_grade)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">portrait</span><span class="params">(name, **kw)</span>:</span><span class="comment">#参数名前增加两个 `*` 可以接收 字典</span></span><br><span class="line">    print(<span class="string">'name is'</span>, name)</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> kw.items():</span><br><span class="line">        print(k, v)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"><span class="comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class="line">gl_nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">gl_xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面code会把 num_tuple 和 xiaoming 作为元组传递给 args，kwargs无法传值</span></span><br><span class="line"><span class="comment"># demo(gl_nums, gl_xiaoming)</span></span><br><span class="line"><span class="comment"># 可以使用 拆包，简化参数的传递，**拆包** 的方式是</span></span><br><span class="line"><span class="comment"># 在 元组变量前，增加 一个 `*`</span></span><br><span class="line"><span class="comment"># 在 字典变量前，增加 两个 `*`</span></span><br><span class="line">demo(*gl_nums, **gl_xiaoming)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Complex</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, realpart, imagpart)</span>:</span></span><br><span class="line">            self.r = realpart</span><br><span class="line">            self.i = imagpart</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Complex(<span class="number">3.0</span>, <span class="number">-4.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.r, x.i <span class="comment">#(3.0, -4.5)</span></span><br><span class="line">• 在__init__函数中用 self 初始化的是属性,self类似java中的this</span><br><span class="line">• 属性和方法可以动态添加和删除</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 动态给实例绑定一个属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span> <span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line"><span class="meta">... </span>    self.age = age</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age(<span class="number">25</span>) <span class="comment"># 调用实例方法</span></span><br><span class="line">• 特殊的__slots__变量，来限制该<span class="class"><span class="keyword">class</span>实例能添加的属性</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">    </span><br><span class="line">• 必要时用 hasattr 判断是否包含某属性， setattr 添加属性</span><br><span class="line">• 在 定义属性或方法时，在 属性名或者方法名前 增加 两个下划线__，定义的就是 私有 属性或方法</span><br><span class="line">• 私有实际是对 名称 做了一些特殊处理，使得外界无法访问到,_类名__名称可访问</span><br><span class="line">• @property广泛应用在类的定义中，可以用类似属性这样简单方式来访问类变量，同时保证对参数进行必要的检查</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._birth = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br><span class="line">    </span><br><span class="line">• isinstance(b, A) 判断a是否是A或A的子类</span><br><span class="line">• 要获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list</span><br><span class="line">• <span class="keyword">is</span> 与 == 区别：</span><br><span class="line">    <span class="keyword">is</span> 用于判断 两个变量 引用对象是否为同一个</span><br><span class="line">    == 用于判断 引用变量的值 是否相等</span><br><span class="line"></span><br><span class="line">当调用不存在的属性时，Python解释器会试图调用__getattr__()来尝试获得属性，这样就会返回score值：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">'age'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">'\'Student\' object has no attribute \'%s\''</span> % attr)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">方法名</th><th style="text-align:center">类型</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">01</td><td style="text-align:center"><code>__new__</code></td><td style="text-align:center">方法</td><td style="text-align:left"><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td style="text-align:center">02</td><td style="text-align:center"><code>__init__</code></td><td style="text-align:center">方法</td><td style="text-align:left"><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td style="text-align:center">03</td><td style="text-align:center"><code>__del__</code></td><td style="text-align:center">方法</td><td style="text-align:left"><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td></tr><tr><td style="text-align:center">04</td><td style="text-align:center"><code>__str__</code></td><td style="text-align:center">方法</td><td style="text-align:left">返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td></tr><tr><td style="text-align:center">05</td><td style="text-align:center"><code>__iter__</code></td><td style="text-align:center">方法</td><td style="text-align:left">返回一个迭代对象，该类被用于<code>for ... in</code>循环</td></tr><tr><td style="text-align:center">06</td><td style="text-align:center"><code>__call__()</code></td><td style="text-align:center">方法</td><td style="text-align:left"><code>instance.method()</code>来调用实例方法，call方法可直接对实例进行调用</td></tr></tbody></table><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/022_%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="022_对象分配空间和初始化"></p><p>封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</span><br><span class="line">xx: 公有变量</span><br><span class="line">_x: 单前置下划线,私有化属性或方法，<span class="keyword">from</span> somemodule <span class="keyword">import</span> *禁止导入,类对象和子类可以访问</span><br><span class="line">__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</span><br><span class="line">__xx__:双前后下划线,用户名字空间的魔法对象或属性。例如:__init__ , __ 不要自己发明这样的名字</span><br><span class="line">xx_:单后置下划线,用于避免与Python关键词的冲突</span><br></pre></td></tr></table></figure><p>继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">super() 就是使用 super 类创建出来的对象</span><br><span class="line">Python 中针对 类 提供了一个 内置属性 __mro__ 可以查看 方法 搜索顺序</span><br><span class="line">MRO 是 method resolution order，主要用于 在多继承时判断 方法、属性 的调用 路径</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"in A::foo"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">b = B()</span><br><span class="line">b.foo()</span><br><span class="line">多继承</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal, Runnable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>多态：在程序执行时，传入不同的 <strong>狗对象</strong> 实参，就会产生不同的执行效果</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/016_%E5%A4%9A%E6%80%81.png" alt="016_多态"></p><p>单例——让 类 创建的对象，在系统中 只有 唯一的一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="keyword">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="comment"># 3. 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MusicPlayer.init_flag:</span><br><span class="line">            print(<span class="string">"初始化音乐播放器"</span>)</span><br><span class="line">            MusicPlayer.init_flag = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/023_%E5%8D%95%E4%BE%8B%E6%B5%81%E7%A8%8B.png" alt="023_单例流程"></p><h5 id="类对象-类属性-类方法"><a href="#类对象-类属性-类方法" class="headerlink" title="类对象/类属性/类方法"></a>类对象/类属性/类方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在程序运行时，类 同样 会被加载到内存</span><br><span class="line">在 Python 中，类 是一个特殊的对象 —— 类对象</span><br><span class="line">在程序运行时，类对象 在内存中 只有一份，使用 一个类 可以创建出 很多个对象实例</span><br><span class="line">除了封装 实例 的 属性 和 方法外，类对象 还可以拥有自己的 属性 和 方法</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/017_%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BEII.png" alt="017_类的结构示意图II"></p><p>属性的获取机制</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/019_%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E7%B1%BB%E5%B1%9E%E6%80%A7.png" alt="019_通过对象访问类属性"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">实例属性属于各个实例所有，互不干扰；</span><br><span class="line">类属性属于类所有，所有实例共享一个属性；</span><br><span class="line">类属性 就是针对 类对象 定义的属性</span><br><span class="line">    类属性 用于记录 与这个类相关 的特征</span><br><span class="line">类方法 就是针对 类对象 定义的方法</span><br><span class="line">在 类方法 内部可以直接访问 类属性 或者调用其他的 类方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span>        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_tool_count</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""显示工具对象的总数"""</span></span><br><span class="line">        print(<span class="string">"工具对象的总数 %d"</span> % cls.count)</span><br><span class="line"></span><br><span class="line">静态方法 需要用 修饰器 @staticmethod 来标识，告诉解释器这是一个静态方法</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span>        </span><br><span class="line">        <span class="comment"># 不需要访问实例属性也不需要访问类属性的方法</span></span><br><span class="line">        print(<span class="string">"狗在跑..."</span>)</span><br></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">• 加号拼接字符串</span><br><span class="line">• 乘号重复字符串</span><br><span class="line">• 字符串常量直接拼接</span><br><span class="line">• 字符串可下标</span><br><span class="line">• <span class="number">0</span> 起始，<span class="number">-1</span> 最后</span><br><span class="line">• : 用于切片，左闭右开</span><br><span class="line">• Python 字符串是不可变的，与 Java 类似</span><br><span class="line">• len 返回长度，类比 strlen</span><br><span class="line">• str.strip([chars]);方法用于移除字符串头尾指定的字符（默认为空格）</span><br><span class="line">• string.find(str, start=<span class="number">0</span>, end=len(string))检查str是否包含在指定范围内，如果是返回开始的索引值，否则返回<span class="number">-1</span></span><br><span class="line">• string.index(str, start=<span class="number">0</span>, end=len(string)) 也是，但是不存在会报错</span><br><span class="line">• string.replace(old_str, new_str, num=string.count(old))把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</span><br><span class="line">• string.split(str=<span class="string">""</span>, num)以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + <span class="number">1</span> 个子字符串，str 默认包含 <span class="string">'\r'</span>, <span class="string">'\t'</span>, <span class="string">'\n'</span> 和空格</span><br><span class="line">• re.split(<span class="string">r'[或,，]'</span>, str)  多个分隔符</span><br><span class="line">• string.title()把字符串的每个单词首字母大写</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>*’un’ + ’ium’</span><br><span class="line">’unununium’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">2</span>:<span class="number">5</span>] <span class="comment"># python from position 2 (included) to 5 (excluded)</span></span><br><span class="line">’tho’</span><br><span class="line">print(<span class="string">'aabbccabc'</span>.find(<span class="string">'ab'</span>, <span class="number">3</span>, len(<span class="string">'aabbccabc'</span>)))  <span class="comment"># 从下标3开始查找</span></span><br><span class="line">&gt;&gt; <span class="number">6</span></span><br><span class="line">print(<span class="string">'aabbccabc'</span>.find(<span class="string">'abd'</span>))</span><br><span class="line">&gt;&gt; <span class="number">-1</span></span><br><span class="line">print(<span class="string">'aabbccabc'</span>.index(<span class="string">'abd'</span>))</span><br><span class="line">&gt;&gt; ValueError: substring <span class="keyword">not</span> found</span><br><span class="line"><span class="comment"># 9. 字符串的逆序（面试题）</span></span><br><span class="line">print(num_str[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p><strong>字符串格式化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arg=<span class="string">"123"</span></span><br><span class="line">str2=<span class="string">"789&#123;&#125;798"</span>.format(arg)</span><br><span class="line">print(<span class="string">"123%d456"</span>%(<span class="number">789</span>))</span><br><span class="line"><span class="comment"># 3.6+</span></span><br><span class="line">str=<span class="string">f"789<span class="subst">&#123;arg&#125;</span>798"</span></span><br></pre></td></tr></table></figure><p><strong>str<-->bytes</--></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str 使用encode方法转化为 bytes</span><br><span class="line">bytes通过decode转化为str</span><br><span class="line">str1=<span class="string">'人生苦短，我用Python!'</span></span><br><span class="line">b=str1.encode()</span><br><span class="line"><span class="string">b'\xe4\xba\xba\xe7\x94\x9f\xe8\x8b\xa6\xe7\x9f\xa\xe7\x94\xa8Python!'</span></span><br><span class="line">b.decode()</span><br><span class="line"><span class="string">'人生苦短，我用Python!'</span></span><br><span class="line">    </span><br><span class="line">bytearray和bytes不一样的地方在于，bytearray是可变的。</span><br><span class="line">b1=bytearray(str1.encode())</span><br><span class="line">b1[:<span class="number">6</span>]=bytearray(<span class="string">'生命'</span>.encode())</span><br><span class="line">b1.decode()</span><br><span class="line"><span class="string">'生命苦短，我用Python!'</span></span><br></pre></td></tr></table></figure><p><strong>str<-->list</--></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mystring = <span class="string">"The quick brown fox"</span></span><br><span class="line">mylist = mystring.split(<span class="string">' '</span>)</span><br><span class="line">print(mylist)</span><br><span class="line"><span class="comment"># ['The', 'quick', 'brown', 'fox']</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="string">'The'</span>, <span class="string">'quick'</span>, <span class="string">'brown'</span>, <span class="string">'fox'</span>]</span><br><span class="line">mystring = <span class="string">" "</span>.join(mylist)</span><br><span class="line">print(mystring)</span><br><span class="line"><span class="comment"># 'The quick brown fox'</span></span><br></pre></td></tr></table></figure><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><p><a href="http://tool.oschina.net/regex/" target="_blank" rel="noopener">正则表达式测试网址</a></p><p><img src="../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/5.1.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">• [a-zA-Z] 匹配某个字符</span><br><span class="line">• ˆ和 $ 匹配首尾</span><br><span class="line">• \ˆ和\$ 字面值</span><br><span class="line">• . 匹配任意字符，点号默认情况匹配不到`\n` ,\. 匹配点号</span><br><span class="line">• \b 匹配单词边界</span><br><span class="line">• \w 匹配非空字符</span><br><span class="line">• \s 匹配空格 不仅仅包含空格，还有`\t|\r\n`</span><br><span class="line">• 中文的 unicode 编码范围 主要在 [u4e00-u9fa5]</span><br><span class="line">• 原始字符串前加上r，待匹配字符串中有反斜杠的时候，使用r能够忽视反斜杠带来的转义的效果</span><br><span class="line"></span><br><span class="line">• * 表示任意次数，\* 表示字面值</span><br><span class="line">• + 表示 <span class="number">1</span> 次或多次，\+ 表示字面值</span><br><span class="line">• &#123;<span class="number">3</span>&#125; 和 &#123;<span class="number">4</span>,<span class="number">6</span>&#125; 表示重复 <span class="number">3</span> 次和 <span class="number">4</span>–<span class="number">6</span> 次</span><br><span class="line"></span><br><span class="line">Python里数量词默认是贪婪的。</span><br><span class="line">abbb使用贪婪的数量词的正则表达式 ab* ，匹配结果： abbb。</span><br><span class="line">* 决定了尽可能多匹配 b，所以a后面所有的 b 都出现了。</span><br><span class="line">abbb使用非贪婪的数量词的正则表达式ab*?，匹配结果： a。</span><br><span class="line">即使前面有 *，但是 ? 决定了尽可能少匹配 b，所以没有 b。</span><br><span class="line"></span><br><span class="line">常用正则表达式的方法：</span><br><span class="line">re.compile（编译，生成一个 Pattern 对象）</span><br><span class="line">pattern.match（从头找一个，只要找到了一个匹配的结果就返回）</span><br><span class="line">pattern.search（找一个，查找字符串的任何位置）</span><br><span class="line">pattern.findall（找所有子串，返回全部能匹配的子串）</span><br><span class="line">    pattern.finditer(跟 findall 的行为类似,返回一个顺序访问每一个匹配结果（Match 对象）的迭代器)</span><br><span class="line">pattern.sub（替换）</span><br><span class="line">        p = re.compile(<span class="string">r'(\w+) (\w+)'</span>) <span class="comment"># \w = [A-Za-z0-9]</span></span><br><span class="line">        <span class="keyword">print</span> (p.sub(<span class="string">r'hello world'</span>, <span class="string">'hello 123, hello 456'</span>)) <span class="comment">#hello world替换后面</span></span><br><span class="line">        <span class="keyword">print</span> (p.sub(<span class="string">r'\2 \1'</span>, <span class="string">'hello 123, hello 456'</span>)) <span class="comment"># 引用分组 \2表示匹配到的第二个</span></span><br><span class="line">        <span class="comment"># hello world, hello world</span></span><br><span class="line">        <span class="comment"># 123 hello, 456 hello</span></span><br><span class="line">    pattern.split 按照能够匹配的子串将字符串分割后返回列表</span><br><span class="line">        &gt;&gt;&gt; re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)<span class="comment">#['a', 'b', 'c', 'd']</span></span><br><span class="line">    </span><br><span class="line">Grouping 分组捕获，不分组时匹配的是全部，分组后匹配的是组内的内容</span><br><span class="line">• () 表示分组</span><br><span class="line">• \数字进行引用 要几个</span><br><span class="line">&gt;&gt;&gt; re.match(r’(abc)|(def)’, ’abc’).group() # 使用|表示 或，\|表 示 字 面 值</span><br><span class="line">’abc’</span><br><span class="line"></span><br><span class="line">re.findall(<span class="string">"a(.*?)b"</span>,<span class="string">"str"</span>),能够返回括号中的内容,括号前后的内容起到定位和过滤的效果</span><br><span class="line">re.findall(r“a.*bc”,”a\nbc”,re.DOTALL)  <span class="comment">#a\nbc</span></span><br><span class="line">re.findall(r“a(.*)bc”,”a\nbc”,re.DOTALL) <span class="comment">#\n</span></span><br><span class="line">无（）时匹配的是全部，分组后(有括号)匹配的是组内的内容</span><br><span class="line">    &gt;&gt;&gt; re.findall(r’\bf[a-z] * ’, ’which foot <span class="keyword">or</span> hand fell fastest’)</span><br><span class="line">    [’foot’, ’fell’, ’fastest’]</span><br><span class="line">    &gt;&gt;&gt; re.findall(<span class="string">"href=’(. * ?)’"</span>, html) <span class="comment">#查找所有HTML链接</span></span><br><span class="line">    [’a.html’, ’b.html’]</span><br><span class="line">    &gt;&gt;&gt; re.findall(r’(.)\<span class="number">1</span>’, ’明 明 亮 亮 蛋 蛋’)</span><br><span class="line">    [’明’, ’亮’, ’蛋’]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'([a-z]+) ([a-z]+)'</span>, re.I)  <span class="comment"># re.I 表示忽略大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'Hello World Wide Web'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (m)     <span class="comment"># 匹配成功，返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10bea83e8</span>&gt;</span><br><span class="line"><span class="comment">#group([group1, ...]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)  <span class="comment"># 返回匹配成功的整个子串</span></span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)   <span class="comment"># 返回匹配成功的整个子串的索引</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)  <span class="comment"># 返回第二个分组匹配成功的子串</span></span><br><span class="line"><span class="string">'World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">2</span>)   <span class="comment"># 返回第二个分组匹配成功的子串</span></span><br><span class="line">(<span class="number">6</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()  <span class="comment"># 等价于 (m.group(1), m.group(2), ...)</span></span><br><span class="line">(<span class="string">'Hello'</span>, <span class="string">'World'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pattern.finditer | m1.group(), m1.span()</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line">result_iter1 = pattern.finditer(<span class="string">'hello 123456 789'</span>)</span><br><span class="line"><span class="keyword">for</span> m1 <span class="keyword">in</span> result_iter1:   <span class="comment"># m1 是 Match 对象</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'matching string: &#123;&#125;, position: &#123;&#125;'</span>.format(m1.group(), m1.span()))</span><br><span class="line"><span class="comment"># matching string: 123456, position: (6, 12)</span></span><br><span class="line"><span class="comment"># matching string: 789, position: (13, 16)</span></span><br></pre></td></tr></table></figure><p><img src="../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/5.2.png" alt="img"></p><h5 id="列表-’a’-’b’-’c’"><a href="#列表-’a’-’b’-’c’" class="headerlink" title="列表 [’a’, ’b’, ’c’]"></a>列表 [’a’, ’b’, ’c’]</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">• Python数据类型最常见的是列表,与数组类似</span><br><span class="line">• 允许元素类型不同</span><br><span class="line">• 和字符串类似，可下标可切片</span><br><span class="line">• 加法和乘法也和字符串类似</span><br><span class="line">• len 返回长度</span><br><span class="line">• 与字符串不同的，列表是可变的</span><br><span class="line">• append 方法用于追加</span><br><span class="line">• 多维数组用嵌套列表实现</span><br><span class="line">• 列表转str print(<span class="string">' '</span>.join([<span class="string">'das'</span>,<span class="string">'da'</span>,<span class="string">'dsa'</span>]))</span><br><span class="line">• 列表变量调用 `+=` 本质上是在执行列表变量的 `extend` 方法，不会修改变量的引用</span><br><span class="line">• 列表list合并</span><br><span class="line">方法<span class="number">1</span>: 直接使用<span class="string">"+"</span>号合并列表 cList = aList + bList </span><br><span class="line">    方法<span class="number">2</span>: 使用extend方法 aList.extend(bList)</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/001_%E5%88%97%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_列表示意图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">前<span class="number">10</span>个数，每两个取一个：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">所有数，每<span class="number">5</span>个取一个：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares[<span class="number">-3</span>:] <span class="comment"># slicing returns a new list</span></span><br><span class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares + [<span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [’a’, ’b’, ’c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[’a’, ’b’, ’c’], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">’b’</span><br></pre></td></tr></table></figure><h5 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 ：Python的lambda表达 式 不 能 换 行</span></span><br><span class="line"><span class="comment"># 关键字lambda表示匿名函数，冒号前面的x表示函数参数。</span></span><br><span class="line">inc = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line">add = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">inc(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h5 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">[i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">colours = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">things = [<span class="string">"house"</span>, <span class="string">"car"</span>, <span class="string">"tree"</span>]</span><br><span class="line">combined = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> colours <span class="keyword">for</span> y <span class="keyword">in</span> things]</span><br></pre></td></tr></table></figure><h5 id="Map-Filter-Reduce-Sorted"><a href="#Map-Filter-Reduce-Sorted" class="headerlink" title="Map/Filter/Reduce/Sorted"></a>Map/Filter/Reduce/Sorted</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</span></span><br><span class="line">map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, range(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</span></span><br><span class="line">filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>,map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, range(<span class="number">10</span>)))</span><br><span class="line"><span class="comment">#reduce把结果继续和序列的下一个元素做累积计算，其效果就是：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x + y,filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>,map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>,range(<span class="number">10</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted()函数就可以对list进行排序：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br><span class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</span><br><span class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</span><br><span class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_score</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">1</span>]</span><br><span class="line">L2 = sorted(L, key=by_score)</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><h5 id="字典-’jack’-4098-’sape’-4139"><a href="#字典-’jack’-4098-’sape’-4139" class="headerlink" title="字典{’jack’: 4098, ’sape’: 4139}"></a>字典{’jack’: 4098, ’sape’: 4139}</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• 字典类似其他语言中散列表、关联数组，按键值方式组织</span><br><span class="line">• 不像列表元组可以用下标随机访问</span><br><span class="line">• 任何不可变对象均可作为键（元组亦可，但不能包含可变元素）</span><br><span class="line">• 空字典用 &#123;&#125; 构造；非空字典在 &#123;&#125; 内逗号分割的键: 值对表示</span><br><span class="line">• list(d.keys()) 返回所有键。如需有序，使用 sorted(d.keys())</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/002_%E5%AD%97%E5%85%B8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="002_字典示意图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel = &#123;’jack’: <span class="number">4098</span>, ’sape’: <span class="number">4139</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[’guido’] = <span class="number">4127</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel</span><br><span class="line">&#123;’sape’: <span class="number">4139</span>, ’guido’: <span class="number">4127</span>, ’jack’: <span class="number">4098</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[’jack’]</span><br><span class="line"><span class="number">4098</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tel[’sape’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[’irv’] = <span class="number">4127</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel</span><br><span class="line">&#123;’guido’: <span class="number">4127</span>, ’irv’: <span class="number">4127</span>, ’jack’: <span class="number">4098</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(tel.keys())</span><br><span class="line">[’irv’, ’guido’, ’jack’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tel.keys())</span><br><span class="line">[’guido’, ’irv’, ’jack’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>’guido’ <span class="keyword">in</span> tel</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>’jack’ <span class="keyword">not</span> <span class="keyword">in</span> tel</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>])] = <span class="number">6</span></span><br><span class="line">TypeError: unhashable type: ’list’</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">• 字典还可以由二元组列表初始化</span><br><span class="line">• 字典推导与列表推导类似</span><br><span class="line">• 字典键为字符串时，可以用关键字参数设定</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict([(’sape’, <span class="number">4139</span>),(’guido’, <span class="number">4127</span>),(’jack’, <span class="number">4098</span>)])</span><br><span class="line">&#123;’sape’: <span class="number">4139</span>, ’jack’: <span class="number">4098</span>, ’guido’: <span class="number">4127</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">&#123;’sape’: <span class="number">4139</span>, ’jack’: <span class="number">4098</span>, ’guido’: <span class="number">4127</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>多字典去重py3.5+</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123; <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span> &#125;</span><br><span class="line">dict2 = &#123; <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">4</span> &#125;</span><br><span class="line">merged = &#123; **dict1, **dict2 &#125;</span><br><span class="line"><span class="keyword">print</span> (merged)</span><br><span class="line"><span class="comment"># &#123;'a': 1, 'b': 3, 'c': 4&#125;</span></span><br></pre></td></tr></table></figure><h5 id="集合-’apple’-’orange’-’apple’"><a href="#集合-’apple’-’orange’-’apple’" class="headerlink" title="集合{’apple’, ’orange’, ’apple’}"></a>集合{’apple’, ’orange’, ’apple’}</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">• 集合是无序无重复的数据结构</span><br><span class="line">• 支持成员测试、添加、删除等操作</span><br><span class="line">• 支持交集、并集、差等集合操作</span><br><span class="line">• 初始化用 &#123;&#125; 括住的逗号分割元素序列</span><br><span class="line">• 空集合用 set()，而不是 &#123;&#125;</span><br><span class="line">• 集合推导同样支持</span><br><span class="line">• set中添加list 使用 set.update() <span class="keyword">or</span> |=</span><br><span class="line">• set去重list和str</span><br><span class="line">    mylist = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">print</span> (set(mylist))</span><br><span class="line">    <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">    <span class="keyword">print</span> (set(<span class="string">"aaabbbcccdddeeefff"</span>))</span><br><span class="line">    <span class="comment"># &#123;'a', 'b', 'c', 'd', 'e', 'f'&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = &#123;’apple’, ’orange’, ’apple’, ’pear’, ’orange’, ’banana’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(basket) <span class="comment"># show that duplicates have been removed</span></span><br><span class="line">&#123;’orange’, ’banana’, ’pear’, ’apple’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>’orange’ <span class="keyword">in</span> basket <span class="comment"># fast membership testing</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>’crabgrass’ <span class="keyword">in</span> basket</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Demonstrate set operations on unique letters from two words</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(’abracadabra’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(’alacazam’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="comment"># unique letters in a</span></span><br><span class="line">&#123;’a’, ’r’, ’b’, ’c’, ’d’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b <span class="comment"># letters in a but not in b</span></span><br><span class="line">&#123;’r’, ’d’, ’b’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b <span class="comment"># letters in a or b or both</span></span><br><span class="line">&#123;’a’, ’c’, ’r’, ’d’, ’b’, ’m’, ’z’, ’l’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b <span class="comment"># letters in both a and b</span></span><br><span class="line">&#123;’a’, ’c’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b <span class="comment"># letters in a or b but not both</span></span><br><span class="line">&#123;’r’, ’d’, ’b’, ’m’, ’z’, ’l’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> ’abracadabra’ <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> ’abc’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;’r’, ’d’&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'e'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a |= set(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'e'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>, <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="元组-12345-54321-’hello-’"><a href="#元组-12345-54321-’hello-’" class="headerlink" title="元组(12345, 54321, ’hello!’)"></a>元组(12345, 54321, ’hello!’)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• 元组与列表类似，都是线性数据结构</span><br><span class="line">• 元组内容不可变</span><br><span class="line">• 元组可以嵌套</span><br><span class="line">• 构造空元组使用 ()</span><br><span class="line">• 构造单元素元组用 (a,)</span><br><span class="line">• 如果元组元素是可变的，则可以修改（有坑）</span><br><span class="line">• 元组也可出现在赋值左部（lhs）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, ’hello!’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>]</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">12345</span>, <span class="number">54321</span>, ’hello!’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Tuples may be nested嵌套:</span></span><br><span class="line"><span class="meta">... </span>u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line">((<span class="number">12345</span>, <span class="number">54321</span>, ’hello!’), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Tuples are immutable:</span></span><br><span class="line"><span class="meta">... </span>t[<span class="number">0</span>] = <span class="number">88888</span></span><br><span class="line">TypeError: ’tuple’ object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># but they can contain mutable objects:</span></span><br><span class="line"><span class="meta">... </span>v = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>singleton = ’hello’, <span class="comment"># &lt;-- note trailing comma</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(empty)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(singleton)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>singleton</span><br><span class="line">(’hello’,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = t</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = y, x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">3</span>] += [<span class="number">6</span>]</span><br><span class="line">TypeError: ’tuple’ object does <span class="keyword">not</span> support item assignment，但加入成功了</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><p><strong>元组和列表之间的转换</strong></p><ul><li><p>使用 <code>list</code> 函数可以把元组转换成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(元组)</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>tuple</code> 函数可以把列表转换成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple(列表)</span><br></pre></td></tr></table></figure></li></ul><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">3</span>, 错误类型<span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    print(<span class="string">"无论是否有异常，都会执行的代码"</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span><span class="params">()</span>:</span></span><br><span class="line">    pwd = input(<span class="string">"请输入密码："</span>)</span><br><span class="line">    <span class="comment"># 2. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line">    <span class="comment"># 3. 密码长度不够，需要抛出异常</span></span><br><span class="line">    <span class="comment"># 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span></span><br><span class="line">    ex = Exception(<span class="string">"密码长度不够"</span>)</span><br><span class="line">    <span class="comment"># 2&gt; 抛出异常对象</span></span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_pwd = input_password()</span><br><span class="line">    print(user_pwd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"发现错误：%s"</span> % result)</span><br><span class="line">    </span><br><span class="line">Python内置的logging模块可以非常容易地记录错误信息：程序打印完错误信息后会继续执行，并正常退出</span><br><span class="line">logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别</span><br><span class="line">当我们指定level=INFO时，logging.debug就不起作用了。</span><br><span class="line">这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。：</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bar(<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">main()</span><br><span class="line">print(<span class="string">'END'</span>)</span><br><span class="line"></span><br><span class="line">凡是用print()来辅助查看的地方，都可以用断言（<span class="keyword">assert</span>）来替代：</span><br><span class="line"><span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></span><br></pre></td></tr></table></figure><h5 id="路径与模块导入"><a href="#路径与模块导入" class="headerlink" title="路径与模块导入"></a>路径与模块导入</h5><p>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></p><p>导入之后不需要通过 <code>模块名.</code>可以直接使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></p><p>如果 <strong>两个模块</strong>，存在<strong>同名的函数</strong>，那么 <strong>后导入模块的函数</strong>，会 <strong>覆盖掉先导入的函数</strong></p><p><code>__name__</code>属性可以做到，测试模块的代码 只在测试情况下被运行，而在 被导入时不会被执行！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:如果在其他地方导入该模块时，<span class="keyword">if</span>判断将失败,后面代码不执行</span><br></pre></td></tr></table></figure><p><code>Python</code> 的解释器在 <strong>导入模块</strong> 时，会：</p><ol><li><p>搜索 <strong>当前目录</strong> 指定模块名的文件，<strong>如果有就直接导入</strong></p></li><li><p>如果没有，再按顺序搜索路径,它在Python编译或安装时确定，存储在sys模块中的path变量中</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-213011@2x.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(<span class="string">'/home/itcast/xxx'</span>) <span class="comment">#os.getcwd()，不用相对路径</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">'/home/itcast/xxx'</span>)  <span class="comment"># 可以确保先搜索这个路径</span></span><br></pre></td></tr></table></figure></li></ol><p>​    3.模块被导入后，<code>import module</code>不能重新导入模块，重新导入需用<code>reload</code><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-214038@2x.png" alt="img"></p><blockquote><p>在开发时，给文件起名，不要和 <strong>系统的模块文件</strong> <strong>重名</strong></p></blockquote><ul><li><strong>包</strong> 是一个 <strong>包含多个模块</strong> 的 <strong>特殊目录</strong></li><li>包目录下有一个 <strong>特殊的文件</strong> <code>__init__.py</code></li><li>使用 <code>import 包名</code> 可以一次性导入 <strong>包</strong> 中 <strong>所有的模块</strong></li><li>要在外界使用 <strong>包</strong> 中的模块，需要在 <code>__init__.py</code> 中指定 <strong>对外界提供的模块列表</strong></li><li>如果<code>__init__.py</code> 存在一个叫做<code>__all__</code>的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有模块作为包内容导入。 </li><li>from…import…会在内存中创建并加载该模块工具的副本，当有另外一个程序导入时，会在内存中创建另一个副本进行加载，不会共用一个副本。所以程序进行的修改不会影响到被导入的原模块，且不同程序之间不会互相影响。</li><li>import…方法导入模块会在内存中直接加载该模块的全部属性。当出现多个程序导入该模块时,会共用一个模块，程序之间会互相影响，包括原模块。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 当前目录 导入 模块列表 </span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br><span class="line">或者</span><br><span class="line">__all__ = [<span class="string">"send_message"</span>, <span class="string">"receive_message"</span>]</span><br></pre></td></tr></table></figure><p>一、<strong>同级目录下的调用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- test1.py</span><br><span class="line">若在程序test1.py中导入模块mod1, 则直接使用</span><br><span class="line">import mod1 或 from mod1 import *;</span><br></pre></td></tr></table></figure><p>二、<strong>调用子目录下的模块</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- lib</span><br><span class="line">    |    |-- mod2.py</span><br><span class="line">    |-- test1.py</span><br><span class="line">如果想在程序test1.py中导入模块mod2.py ，可以在lib件夹中建立空文件__init__.py文件</span><br><span class="line">from lib.mod2 import *或 import lib.mod2.</span><br></pre></td></tr></table></figure><p>三、<strong>调用上级目录下的文件</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- lib</span><br><span class="line">    |    |-- mod2.py</span><br><span class="line">    |-- sub</span><br><span class="line">    |    |-- test2.py</span><br><span class="line">想要实现test2.py调用mod1.py和mod2.py ，先跳到src目录下面，直接可以调用mod1，然后在lib上当下建一个空文件__init__.py ，就可以像第二步调用子目录下的模块一样，通过import  lib.mod2进行调用了。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">import</span> mod1</span><br><span class="line"><span class="keyword">import</span> lib.mod2</span><br></pre></td></tr></table></figure><p>python项目在IDE中能直接执行，在命令行下提示no module named xxxx 解决办法</p><p>原因：</p><p>PyCharm会自动添加项目路径到sys.path,但ß 在命令行模式下项目路径并没有加入到当前 python运行环境中，所以会提示异常。其实我们只需要将自定义的 module 加入到当前环境中</p><h5 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h5><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200417181044706.png" alt="image-20200417181044706"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">2.</span>x 默认使用 ASCII 编码格式</span><br><span class="line">在 Python <span class="number">2.</span>x 文件的 第一行 增加以下代码，解释器会以 utf<span class="number">-8</span> 编码来处理 python 文件</span><br><span class="line">    <span class="comment"># *-* coding:utf8 *-*</span></span><br><span class="line">    <span class="comment"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span></span><br><span class="line">    hello_str = <span class="string">u"你好世界"</span></span><br><span class="line">Python <span class="number">3.</span>x 默认使用 UTF<span class="number">-8</span> 编码格式</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path=<span class="string">''</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">把两个路径合成一个时，不要直接拼字符串，而要os.path.join()，这样可以正确处理不同操作系统路径分隔符。</span><br><span class="line">要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">'/Users/michael/testdir/file.txt'</span>)</span><br><span class="line">(<span class="string">'/Users/michael/testdir'</span>, <span class="string">'file.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建多级目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">os.makedirs(path)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 列出当前目录所有的.py文件：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.path.isfile(x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>]==<span class="string">'.py'</span>]</span><br><span class="line">[<span class="string">'apis.py'</span>, <span class="string">'config.py'</span>, <span class="string">'models.py'</span>, <span class="string">'pymonitor.py'</span>, <span class="string">'test_db.py'</span>]</span><br><span class="line"><span class="comment"># 列出当前目录及其子目录下所有的.anns文件：</span></span><br><span class="line">[x <span class="keyword">for</span> file <span class="keyword">in</span> imutils.paths.list_files(src, validExts=(<span class="string">'.anns'</span>,))]</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名 删除</span></span><br><span class="line">os.rename( <span class="string">"test1.txt"</span>, <span class="string">"test2.txt"</span> )</span><br><span class="line">os.remove(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示当前工作目录</span></span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#改变当前目录</span></span><br><span class="line">os.chdir(<span class="string">"newdir"</span>)</span><br><span class="line"></span><br><span class="line">返回指定目录下的所有文件和目录名</span><br><span class="line">os.listdir(path)</span><br><span class="line"></span><br><span class="line">判断是否是文件夹</span><br><span class="line">os.path.isdir(path)</span><br><span class="line"></span><br><span class="line">判断是否存在</span><br><span class="line">os.path.exists(<span class="string">'d:/assist'</span>)</span><br><span class="line"></span><br><span class="line">删除目录</span><br><span class="line">os.rmdir(“dir”) 只能删除空目录</span><br><span class="line">shutil.rmtree(“dir”) 空目录、有内容的目录都可以删</span><br><span class="line"></span><br><span class="line">复制文件：</span><br><span class="line">shutil.copyfile(“oldfile”,”newfile”) oldfile和newfile都只能是文件</span><br><span class="line">shutil.copy(“oldfile”,”newfile”) oldfile只能是文件夹，newfile可以是文件，也可以是目标目录</span><br><span class="line">复制文件夹：</span><br><span class="line">shutil.copytree(“olddir”,”newdir”) olddir和newdir都只能是目录，且newdir必须不存在</span><br><span class="line"></span><br><span class="line">文件操作</span><br><span class="line">f.seek(<span class="number">0</span>):回到文件的开头,  f.seek(<span class="number">1</span>):返回文件的当前位置,  f.seek(<span class="number">2</span>):到文件的末尾</span><br><span class="line">fp.read([size]) <span class="comment">#size为读取的长度，以byte为单位</span></span><br><span class="line">fp.readline([size])  <span class="comment">#读一行，如果定义了size，有可能返回的只是一行的一部分,会从文件中读取单独的一行。换行符为 '\n'。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。</span></span><br><span class="line">fp.readlines([size])  <span class="comment">#把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。</span></span><br><span class="line">fp.write(str)    <span class="comment">#把str写到文件中，write()并不会在str后加上一个换行符</span></span><br><span class="line">fp.writelines(seq)  <span class="comment">#把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。</span></span><br><span class="line">fp.close()    <span class="comment">#关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError</span></span><br><span class="line">fp.flush()   <span class="comment">#把缓冲区的内容写入硬盘</span></span><br><span class="line"></span><br><span class="line">文件名和后缀</span><br><span class="line">获取路径名：os.path.dirname()</span><br><span class="line">获取文件名：os.path.basename()</span><br><span class="line">file_path = <span class="string">"D:/test/test.py"</span></span><br><span class="line">(filepath,tempfilename) = os.path.split(file_path)</span><br><span class="line">(filename,extension) = os.path.splitext(tempfilename)</span><br><span class="line">filepath为文件的目录,即D:/test</span><br><span class="line">filename为文件的名字,即test</span><br><span class="line">extension为文件的扩展名,即.py</span><br><span class="line"></span><br><span class="line">运行shell命令: os.system(cmd)</span><br><span class="line">修改文件权限与时间戳：os.chmod（file）</span><br></pre></td></tr></table></figure><p>打开文件，不存在则创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">open(file, mode=’rb’, buffering=<span class="number">-1</span>, encoding=<span class="keyword">None</span>,errors=<span class="string">'ignore'</span>, newline=<span class="keyword">None</span>,closefd=<span class="keyword">True</span>, opener=<span class="keyword">None</span>) <span class="keyword">as</span> f</span><br><span class="line">errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</span><br><span class="line">’r’ 读（默认）</span><br><span class="line">’w’ 写（覆盖）</span><br><span class="line">’x’ 排他性创建</span><br><span class="line">’a’ 写（追加） (从 EOF 开始, 必要时创建新文件)</span><br><span class="line">’b’ 二进制模式</span><br><span class="line">’t’ 文本模式（默认）</span><br><span class="line">’+’ 更新（读写）</span><br><span class="line">’U’ 统一 newlines 模式（过时）</span><br></pre></td></tr></table></figure><p><strong>StringIO/BytesIO</strong></p><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可</p><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'world!'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())<span class="comment">#getvalue()方法用于获得写入后的str。</span></span><br><span class="line">hello world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">把变量从内存中变成可存储或传输的过程称之为序列化</span><br><span class="line">在Python中叫pickling，其他语言中也被称为serialization，marshalling，flattening等等</span><br><span class="line">把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line"><span class="comment">#pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps(d)</span><br><span class="line"><span class="string">b'\x80\x03&#125;q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.'</span></span><br><span class="line"><span class="comment">#另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'dump.txt'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(d, f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="comment">#用pickle.loads()方法反序列化出对象，也可用pickle.load()方法从一个file-like Object中直接反序列化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'dump.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pickle.load(f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'score'</span>: <span class="number">88</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="json"><a href="#json" class="headerlink" title="json"></a>json</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">具有read()或者write()方法的对象就是类文件对象</span><br><span class="line">f = open(“a.txt”,”r”) f就是类文件对象</span><br><span class="line"></span><br><span class="line">str = <span class="string">"你好"</span></span><br><span class="line"><span class="keyword">print</span> (json.dumps(str,ensure_ascii=<span class="keyword">False</span>))</span><br><span class="line"></span><br><span class="line">json使用注意点</span><br><span class="line">    - json中的字符串都是双引号引起来的</span><br><span class="line">      - 如果不是双引号</span><br><span class="line">        - eval：能实现简单的字符串和python类型的转化</span><br><span class="line">        - replace：把单引号替换为双引号</span><br><span class="line">    - 往一个文件中写入多个json串，不再是一个json串，不能直接读取</span><br><span class="line">      - 一行写一个json串，按照行来读取</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200404175034357.png" alt="image-20200404175034357"></p><h5 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.socket(AddressFamily, Type)</span><br><span class="line">Address Family：可以选择 AF_INET（用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET</span><br><span class="line">Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）</span><br><span class="line"></span><br><span class="line">UDP</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""获取键盘数据，并将其发送给对方"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 1. 从键盘输入数据</span></span><br><span class="line">        msg = input(<span class="string">"\n请输入要发送的数据:"</span>)</span><br><span class="line">        <span class="comment"># 2. 输入对方的ip地址</span></span><br><span class="line">        dest_ip = input(<span class="string">"\n请输入对方的ip地址:"</span>)</span><br><span class="line">        <span class="comment"># 3. 输入对方的port</span></span><br><span class="line">        dest_port = int(input(<span class="string">"\n请输入对方的port:"</span>))</span><br><span class="line">        <span class="comment"># 4. 发送数据</span></span><br><span class="line">        udp_socket.sendto(msg.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据并显示"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 1. 接收数据</span></span><br><span class="line">        recv_msg = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 2. 解码</span></span><br><span class="line">        recv_ip = recv_msg[<span class="number">1</span>]</span><br><span class="line">        recv_msg = recv_msg[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="comment"># 3. 显示接收到的数据</span></span><br><span class="line">        print(<span class="string">"&gt;&gt;&gt;%s:%s"</span> % (str(recv_ip), recv_msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2. 绑定本地信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 3. 创建一个子线程用来接收数据</span></span><br><span class="line">    t = threading.Thread(target=recv_msg, args=(udp_socket,))</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment"># 4. 让主线程用来检测键盘数据并且发送</span></span><br><span class="line">    send_msg(udp_socket)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line">TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）</span><br><span class="line">TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议</span><br><span class="line">TCP客户端</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">server_ip = input(<span class="string">"请输入服务器ip:"</span>)</span><br><span class="line">server_port = int(input(<span class="string">"请输入服务器port:"</span>))</span><br><span class="line"><span class="comment"># 链接服务器</span></span><br><span class="line">tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"><span class="comment"># 提示用户输入数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据："</span>)</span><br><span class="line">tcp_client_socket.send(send_data.encode(<span class="string">"gbk"</span>))</span><br><span class="line"><span class="comment"># 接收对方发送过来的数据，最大接收1024个字节</span></span><br><span class="line">recvData = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recvData.decode(<span class="string">'gbk'</span>))</span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line">TCP服务器</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 本地信息</span></span><br><span class="line">address = (<span class="string">''</span>, <span class="number">7788</span>)</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">tcp_server_socket.bind(address)</span><br><span class="line"><span class="comment"># 使用socket创建的套接字默认的属性是主动的，使用listen将其变为被动的，这样就可以接收128个的链接了</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"><span class="comment"># 如果有新的客户端来链接服务器，那么就产生一个新的套接字专门为这个客户端服务</span></span><br><span class="line"><span class="comment"># client_socket用来为这个客户端服务</span></span><br><span class="line"><span class="comment"># tcp_server_socket就可以省下来专门等待其他新客户端的链接</span></span><br><span class="line">client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line"><span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recv_data.decode(<span class="string">'gbk'</span>))</span><br><span class="line"><span class="comment"># 发送一些数据到客户端</span></span><br><span class="line">client_socket.send(<span class="string">"thank you !"</span>.encode(<span class="string">'gbk'</span>))</span><br><span class="line"><span class="comment"># 关闭为这个客户端服务的套接字，只要关闭了，就意味着为不能再为这个客户端服务了</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="img"></p><h5 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h5><p>一封电子邮件的旅程就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">发件人 -&gt; MUA -&gt; MTA -&gt; MTA -&gt; 若干个MTA -&gt; MDA &lt;- MUA &lt;- 收件人</span><br><span class="line">MUA：Mail User Agent——邮件用户代理</span><br><span class="line">MTA：Mail Transfer Agent——邮件传输代理，就是那些Email服务提供商，比如网易、新浪</span><br><span class="line">MTA会把Email投递到邮件的最终目的地MDA：Mail Delivery Agent——邮件投递代理。</span><br><span class="line">发邮件时，MUA和MTA使用的协议就是SMTP：Simple Mail Transfer Protocol，后面的MTA到另一个MTA也是用SMTP协议。</span><br><span class="line">收邮件时，MUA和MDA使用的协议有两种：POP：Post Office Protocol，目前版本是3，俗称POP3；IMAP：Internet Message Access Protocol，目前版本是4，优点是不但能取邮件，还可以直接操作MDA上存储的邮件，比如从收件箱移到垃圾箱，等等。</span><br><span class="line">邮件客户端软件在发邮件时，会让你先配置SMTP服务器，也就是你要发到哪个MTA上。假设你正在使用163的邮箱，你就不能直接发到新浪的MTA上，因为它只服务新浪的用户，所以，你得填163提供的SMTP服务器地址：smtp.163.com，为了证明你是163的用户，SMTP服务器还要求你填写邮箱地址和邮箱口令，这样，MUA才能正常地把Email通过SMTP协议发送到MTA。</span><br><span class="line">从MDA收邮件时，MDA服务器也要求验证你的邮箱口令，确保不会有人冒充你收取你的邮件，所以，Outlook之类的邮件客户端会要求你填写POP3或IMAP服务器地址、邮箱地址和口令，这样，MUA才能顺利地通过POP或IMAP协议从MDA取到邮件。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</span><br><span class="line"><span class="keyword">import</span> smtplib    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></span><br><span class="line">    name, addr = parseaddr(s)</span><br><span class="line">    <span class="keyword">return</span> formataddr((Header(name, <span class="string">'utf-8'</span>).encode(), addr))</span><br><span class="line"></span><br><span class="line">from_addr = input(<span class="string">'From: '</span>)</span><br><span class="line">password = input(<span class="string">'Password: '</span>)</span><br><span class="line">to_addr = input(<span class="string">'To: '</span>)</span><br><span class="line">smtp_server = input(<span class="string">'SMTP server: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件对象:</span></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'Python爱好者 &lt;%s&gt;'</span> % from_addr)</span><br><span class="line">msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'管理员 &lt;%s&gt;'</span> % to_addr)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">'来自SMTP的问候……'</span>, <span class="string">'utf-8'</span>).encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件正文是MIMEText:</span></span><br><span class="line"><span class="comment">#第一个参数就是邮件正文，第二个参数是MIME的subtype，传入'plain'表示纯文本</span></span><br><span class="line">msg.attach(MIMEText(<span class="string">'send with file...'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># 添加附件就是加上一个MIMEBase，从本地读取一个图片:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/michael/Downloads/test.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 设置附件的MIME和文件名，这里是png类型:</span></span><br><span class="line">    mime = MIMEBase(<span class="string">'image'</span>, <span class="string">'png'</span>, filename=<span class="string">'test.png'</span>)</span><br><span class="line">    <span class="comment"># 加上必要的头信息:</span></span><br><span class="line">    mime.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'test.png'</span>)</span><br><span class="line">    mime.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</span><br><span class="line">    mime.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="comment"># 把附件的内容读进来:</span></span><br><span class="line">    mime.set_payload(f.read())</span><br><span class="line">    <span class="comment"># 用Base64编码:</span></span><br><span class="line">    encoders.encode_base64(mime)</span><br><span class="line">    <span class="comment"># 添加到MIMEMultipart:</span></span><br><span class="line">    msg.attach(mime)</span><br><span class="line">    </span><br><span class="line">server = smtplib.SMTP(smtp_server, <span class="number">25</span>)</span><br><span class="line">server.set_debuglevel(<span class="number">1</span>)</span><br><span class="line">server.login(from_addr, password)</span><br><span class="line">server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">构造一个邮件对象就是一个Messag对象，如果构造一个MIMEText对象，就表示一个文本邮件对象，如果构造一个MIMEImage对象，就表示一个作为附件的图片，要把多个对象组合起来，就用MIMEMultipart对象，而MIMEBase可以表示任何对象。它们的继承关系如下：</span><br><span class="line">Message</span><br><span class="line">+- MIMEBase</span><br><span class="line">   +- MIMEMultipart</span><br><span class="line">   +- MIMENonMultipart</span><br><span class="line">      +- MIMEMessage</span><br><span class="line">      +- MIMEText</span><br><span class="line">      +- MIMEImage</span><br></pre></td></tr></table></figure><p>POP3收取邮件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> poplib</span><br><span class="line"><span class="comment"># 输入邮件地址, 口令和POP3服务器地址:</span></span><br><span class="line">email = input(<span class="string">'Email: '</span>)</span><br><span class="line">password = input(<span class="string">'Password: '</span>)</span><br><span class="line">pop3_server = input(<span class="string">'POP3 server: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到POP3服务器:</span></span><br><span class="line">server = poplib.POP3(pop3_server)</span><br><span class="line"><span class="comment"># 可以打开或关闭调试信息:</span></span><br><span class="line">server.set_debuglevel(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 可选:打印POP3服务器的欢迎文字:</span></span><br><span class="line">print(server.getwelcome().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份认证:</span></span><br><span class="line">server.user(email)</span><br><span class="line">server.pass_(password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stat()返回邮件数量和占用空间:</span></span><br><span class="line">print(<span class="string">'Messages: %s. Size: %s'</span> % server.stat())</span><br><span class="line"><span class="comment"># list()返回所有邮件的编号:</span></span><br><span class="line">resp, mails, octets = server.list()</span><br><span class="line"><span class="comment"># 可以查看返回的列表类似[b'1 82923', b'2 2184', ...]</span></span><br><span class="line">print(mails)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最新一封邮件, 注意索引号从1开始:</span></span><br><span class="line">index = len(mails)</span><br><span class="line">resp, lines, octets = server.retr(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lines存储了邮件的原始文本的每一行,</span></span><br><span class="line"><span class="comment"># 可以获得整个邮件的原始文本:</span></span><br><span class="line">msg_content = <span class="string">b'\r\n'</span>.join(lines).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 稍后解析出邮件:</span></span><br><span class="line">msg = Parser().parsestr(msg_content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以根据邮件索引号直接从服务器删除邮件:</span></span><br><span class="line"><span class="comment"># server.dele(index)</span></span><br><span class="line"><span class="comment"># 关闭连接:</span></span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">当调用start()时，才会真正的创建线程，并且开始执行</span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line">    t1 = threading.Thread(target=sing)<span class="comment">#没有括号</span></span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        length = len(threading.enumerate())</span><br><span class="line">        print(<span class="string">'当前运行的线程数为：%d'</span>%length)</span><br><span class="line">        <span class="keyword">if</span> length&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#另外一种多线程实现方式</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line">线程共享全局变量，下面code线程间共享变量</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(nums)</span>:</span></span><br><span class="line">    nums.append(<span class="number">44</span>)</span><br><span class="line">    print(<span class="string">"----in work1---"</span>,nums)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment">#延时一会，保证t1线程中的事情做完</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"----in work2---"</span>,nums)</span><br><span class="line">g_nums = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">t1 = Thread(target=work1, args=(g_nums,))</span><br><span class="line">t1.start()</span><br><span class="line">t2 = Thread(target=work2, args=(g_nums,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line">一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。</span><br><span class="line">可以理解为全局变量local_school是一个dict，以thread自身作为key获得线程对应的Student对象</span><br><span class="line">全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。</span><br><span class="line"><span class="keyword">import</span> threading    </span><br><span class="line"><span class="comment"># 创建全局ThreadLocal对象:</span></span><br><span class="line">local_school = threading.local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前线程关联的student:</span></span><br><span class="line">    std = local_school.student</span><br><span class="line">    print(<span class="string">'Hello, %s (in %s)'</span> % (std, threading.current_thread().name))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_thread</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 绑定ThreadLocal的student:</span></span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(<span class="string">'Alice'</span>,), name=<span class="string">'Thread-A'</span>)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(<span class="string">'Bob'</span>,), name=<span class="string">'Thread-B'</span>)<span class="comment">#name线程名</span></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">Hello, Alice (<span class="keyword">in</span> Thread-A)</span><br><span class="line">Hello, Bob (<span class="keyword">in</span> Thread-B)</span><br></pre></td></tr></table></figure><p><strong>互斥锁</strong></p><p>当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制</p><p>同步就是协同步调，按预定的先后次序进行运行。如:你说完，我再说。</p><p>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。</p><p>互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span>%g_num)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span>%g_num)</span><br><span class="line"><span class="comment"># 创建一个互斥锁</span></span><br><span class="line"><span class="comment"># 默认是未上锁的状态</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 创建2个线程，让他们各自对g_num加1000000次</span></span><br><span class="line">p1 = threading.Thread(target=test1, args=(<span class="number">1000000</span>,))</span><br><span class="line">p1.start()</span><br><span class="line">p2 = threading.Thread(target=test2, args=(<span class="number">1000000</span>,))</span><br><span class="line">p2.start()</span><br><span class="line"><span class="comment"># 等待计算完成</span></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><h5 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])</span><br><span class="line">    target：如果传递了函数的引用，可以任务这个子进程就执行这里的代码</span><br><span class="line">    args：给target指定的函数传递的参数，以元组的方式传递</span><br><span class="line">    kwargs：给target指定的函数传递命名参数</span><br><span class="line">    name：给进程设定一个名字，可以不设定</span><br><span class="line">    group：指定进程组，大多数情况下用不到</span><br><span class="line">    </span><br><span class="line">Process创建的实例对象的常用方法：</span><br><span class="line">    start()：启动子进程实例（创建子进程）</span><br><span class="line">    is_alive()：判断进程子进程是否还在活着</span><br><span class="line">    join([timeout])：是否等待子进程执行结束，或等待多少秒</span><br><span class="line">    terminate()：不管任务是否完成，立即终止子进程</span><br><span class="line">    </span><br><span class="line">Process创建的实例对象的常用属性：</span><br><span class="line">    name：当前进程的别名，默认为Process-N，N为从<span class="number">1</span>开始递增的整数</span><br><span class="line">    pid：当前进程的pid（进程号）</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/Snip20160830_3.png" alt="img"></p><p><strong>Queue</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q=Queue(<span class="number">3</span>) <span class="comment">#初始化一个Queue对象，最多可收三条put消息,若无值或为负值，可收消息量无上限（到内存尽头）</span></span><br><span class="line">q.put(<span class="string">"消息1"</span>) </span><br><span class="line">q.put(<span class="string">"消息2"</span>)</span><br><span class="line">print(q.full())  <span class="comment">#False</span></span><br><span class="line">q.put(<span class="string">"消息3"</span>)</span><br><span class="line">print(q.full()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">"消息4"</span>,<span class="keyword">True</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize()) <span class="comment">#消息列队已满，现有消息数量:3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize()) <span class="comment">#消息列队已满，现有消息数量:3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#推荐的方式，先判断消息列队是否已满，再写入</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取消息时，先判断消息列队是否为空，再读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(q.get_nowait())</span><br></pre></td></tr></table></figure><p><strong>进程间通信</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(q)</span>:</span></span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        res+=i+i**<span class="number">2</span>+i**<span class="number">3</span></span><br><span class="line">    q.put(res)    <span class="comment">#queue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment">#Queue的功能是将每个核或线程的运算结果放在队里中， 等到每个线程或核运行完毕后再从队列中取出结果， 继续加载运算。原因很简单, 多线程调用的函数不能有返回值, 所以使用Queue存储多个线程运算的结果</span></span><br><span class="line">    q = mp.Queue()</span><br><span class="line"><span class="comment">#定义两个线程函数，用来处理同一个任务, args 的参数只要一个值的时候，参数后面需要加一个逗号，表示args是可迭代的，后面可能还有别的参数，不加逗号会出错</span></span><br><span class="line">    p1 = mp.Process(target=job,args=(q,))</span><br><span class="line">    p2 = mp.Process(target=job,args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join() <span class="comment"># 主进程等待p1结束</span></span><br><span class="line">    p2.join()</span><br><span class="line">    res1 = q.get()</span><br><span class="line">    res2 = q.get()</span><br><span class="line">    print(res1+res2)</span><br></pre></td></tr></table></figure><p><strong>进程池</strong></p><ol><li><code>Pool</code>默认调用是CPU的核数，传入<code>processes</code>参数可自定义CPU核数</li><li><code>map()</code> 放入迭代参数，返回多个结果的列表</li><li><code>apply_async()</code>只能放入一组参数，并返回一个结果，若想要类似<code>map()</code>的效果，需要通过迭代</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multicore</span><span class="params">()</span>:</span></span><br><span class="line">    pool = mp.Pool()</span><br><span class="line">    res = pool.map(job, range(<span class="number">10</span>))</span><br><span class="line">    print(res) <span class="comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">    res = pool.apply_async(job,(<span class="number">2</span>,))  <span class="comment"># 使用非阻塞方式调用func（并执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</span></span><br><span class="line">    <span class="comment"># 用get获得结果</span></span><br><span class="line">    print(res.get()) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multicore2</span><span class="params">()</span>:</span></span><br><span class="line">    pool = mp.Pool()</span><br><span class="line">    res = pool.map(job, range(<span class="number">10</span>)) </span><br><span class="line">    print(res) <span class="comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">    res = pool.apply_async(job, (<span class="number">2</span>,))</span><br><span class="line">    <span class="comment"># 用get获得结果</span></span><br><span class="line">    print(res.get()) <span class="comment"># 2</span></span><br><span class="line">    <span class="comment"># 迭代器，i=0时apply一次，i=1时apply一次等等</span></span><br><span class="line">    multi_res = [pool.apply_async(job, (i,)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="comment"># 从迭代器中取出</span></span><br><span class="line">    print([res.get() <span class="keyword">for</span> res <span class="keyword">in</span> multi_res]) <span class="comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>进程池中的Queue</p><p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError: Queue objects should only be shared between processes through inheritance.</span><br></pre></td></tr></table></figure><p><strong>进程锁</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(v, num, l)</span>:</span></span><br><span class="line">    l.acquire() <span class="comment"># 锁住</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>) </span><br><span class="line">        v.value += num <span class="comment"># 获取共享内存</span></span><br><span class="line">        print(v.value)</span><br><span class="line">    l.release() <span class="comment"># 释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multicore</span><span class="params">()</span>:</span></span><br><span class="line">    l = mp.Lock() <span class="comment"># 定义一个进程锁</span></span><br><span class="line">    v = mp.Value(<span class="string">'i'</span>, <span class="number">0</span>) <span class="comment"># 定义共享内存</span></span><br><span class="line">    p1 = mp.Process(target=job, args=(v,<span class="number">1</span>,l)) <span class="comment"># 需要将lock传入</span></span><br><span class="line">    p2 = mp.Process(target=job, args=(v,<span class="number">3</span>,l)) </span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multicore()</span><br></pre></td></tr></table></figure><p><strong>分布式进程</strong></p><p>Python的<code>multiprocessing</code>模块不但支持多进程，其中<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。由于<code>managers</code>模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。</p><p>举个例子：如果我们已经有一个通过<code>Queue</code>通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁重，希望把发送任务的进程和处理任务的进程分布到两台机器上。怎么用分布式进程实现？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────────────────────────────────┐     ┌──────────────────────────────────────┐</span><br><span class="line">│task_master.py                           │  │  │task_worker.py                        │</span><br><span class="line">│                                         │     │                                      │</span><br><span class="line">│  task = manager.get_task_queue()        │  │  │  task = manager.get_task_queue()     │</span><br><span class="line">│  result = manager.get_result_queue()    │     │  result = manager.get_result_queue() │</span><br><span class="line">│              │                          │  │  │              │                       │</span><br><span class="line">│              │                          │     │              │                       │</span><br><span class="line">│              ▼                          │  │  │              │                       │</span><br><span class="line">│  ┌─────────────────────────────────┐    │     │              │                       │</span><br><span class="line">│  │QueueManager                     │    │  │  │              │                       │</span><br><span class="line">│  │ ┌────────────┐ ┌──────────────┐ │    │     │              │                       │</span><br><span class="line">│  │ │ task_queue │ │ result_queue │ │&lt;───┼──┼──┼──────────────┘                       │</span><br><span class="line">│  │ └────────────┘ └──────────────┘ │    │     │                                      │</span><br><span class="line">│  └─────────────────────────────────┘    │  │  │                                      │</span><br><span class="line">└─────────────────────────────────────────┘     └──────────────────────────────────────┘</span><br><span class="line">                                          Network</span><br></pre></td></tr></table></figure><p>先看服务进程，服务进程负责启动Queue，把Queue注册到网络上，然后往Queue里面写入任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task_master.py</span></span><br><span class="line"><span class="keyword">import</span> random, time, queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送任务的队列:</span></span><br><span class="line">task_queue = queue.Queue()</span><br><span class="line"><span class="comment"># 接收结果的队列:</span></span><br><span class="line">result_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从BaseManager继承的QueueManager:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把两个Queue都注册到网络上, callable参数关联了Queue对象:</span></span><br><span class="line">QueueManager.register(<span class="string">'get_task_queue'</span>, callable=<span class="keyword">lambda</span>: task_queue)</span><br><span class="line">QueueManager.register(<span class="string">'get_result_queue'</span>, callable=<span class="keyword">lambda</span>: result_queue)</span><br><span class="line"><span class="comment"># 绑定端口5000, 设置验证码'abc':保证两台机器正常通信，不被其他机器恶意干扰</span></span><br><span class="line">manager = QueueManager(address=(<span class="string">''</span>, <span class="number">5000</span>), authkey=<span class="string">b'abc'</span>)</span><br><span class="line"><span class="comment"># 启动Queue:</span></span><br><span class="line">manager.start()</span><br><span class="line"><span class="comment"># 获得通过网络访问的Queue对象:</span></span><br><span class="line">task = manager.get_task_queue()</span><br><span class="line">result = manager.get_result_queue()</span><br><span class="line"><span class="comment"># 放几个任务进去:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    n = random.randint(<span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line">    print(<span class="string">'Put task %d...'</span> % n)</span><br><span class="line">    task.put(n)</span><br><span class="line"><span class="comment"># 从result队列读取结果:</span></span><br><span class="line">print(<span class="string">'Try get results...'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    r = result.get(timeout=<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">'Result: %s'</span> % r)</span><br><span class="line"><span class="comment"># 关闭:</span></span><br><span class="line">manager.shutdown()</span><br><span class="line">print(<span class="string">'master exit.'</span>)</span><br></pre></td></tr></table></figure><p>在另一台机器上启动任务进程（本机上启动也可以）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task_worker.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, sys, queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类似的QueueManager:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字:</span></span><br><span class="line">QueueManager.register(<span class="string">'get_task_queue'</span>)</span><br><span class="line">QueueManager.register(<span class="string">'get_result_queue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器，也就是运行task_master.py的机器:</span></span><br><span class="line">server_addr = <span class="string">'127.0.0.1'</span></span><br><span class="line">print(<span class="string">'Connect to server %s...'</span> % server_addr)</span><br><span class="line"><span class="comment"># 端口和验证码注意保持与task_master.py设置的完全一致:</span></span><br><span class="line">m = QueueManager(address=(server_addr, <span class="number">5000</span>), authkey=<span class="string">b'abc'</span>)</span><br><span class="line"><span class="comment"># 从网络连接:</span></span><br><span class="line">m.connect()</span><br><span class="line"><span class="comment"># 获取Queue的对象:</span></span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"><span class="comment"># 从task队列取任务,并把结果写入result队列:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = task.get(timeout=<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'run task %d * %d...'</span> % (n, n))</span><br><span class="line">        r = <span class="string">'%d * %d = %d'</span> % (n, n, n*n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        result.put(r)</span><br><span class="line">    <span class="keyword">except</span> Queue.Empty:</span><br><span class="line">        print(<span class="string">'task queue is empty.'</span>)</span><br><span class="line"><span class="comment"># 处理结束:</span></span><br><span class="line">print(<span class="string">'worker exit.'</span>)</span><br></pre></td></tr></table></figure><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200426174101298.png" alt="image-20200426174101298"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。</span><br><span class="line">迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</span><br><span class="line">可通过<span class="keyword">for</span>.<span class="keyword">in</span>.语句迭代读取一条数据的对象称之为可迭代对象（Iterable）,它具备了__iter__方法</span><br><span class="line">可迭代对象通过__iter__方法提供一个迭代器，先获取该对象提供的迭代器，后通过迭代器来依次获取对象中数据</span><br><span class="line">迭代器是用来帮助我们记录每次迭代访问到的位置</span><br><span class="line">在使用迭代器next()函数的时候，调用的就是迭代器对象的__next__方法，返回它所记录位置的下一个位置的数据</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> Iterable 循环的本质就是先通过iter()函数获取可迭代对象Iterable的迭代器，然后对获取到的迭代器不断调用next()方法来获取下一个值并将其赋值给item，当遇到StopIteration的异常后循环结束。</span><br><span class="line"><span class="comment">#也可以在myList中实现__next__()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""自定义的一个可迭代对象"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.items.append(val)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        myiterator = MyIterator(self)</span><br><span class="line">        <span class="keyword">return</span> myiterator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""自定义的供上面可迭代对象使用的一个迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mylist)</span>:</span></span><br><span class="line">        self.mylist = mylist</span><br><span class="line">        <span class="comment"># current用来记录当前访问到的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; len(self.mylist.items):</span><br><span class="line">            item = self.mylist.items[self.current]</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(<span class="number">1</span>)</span><br><span class="line">    mylist.add(<span class="number">2</span>)</span><br><span class="line">    mylist.add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> mylist:</span><br><span class="line">        print(num)</span><br><span class="line">     </span><br><span class="line">除了<span class="keyword">for</span>循环能接收可迭代对象，list、tuple等也能接收。</span><br><span class="line">    li = list(FibIterator(<span class="number">15</span>))</span><br><span class="line">    print(li)</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200426173446340.png" alt="image-20200426173446340"></p><h5 id="生成器和yield"><a href="#生成器和yield" class="headerlink" title="生成器和yield"></a>生成器和yield</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line"><span class="meta">... </span>    print(n)</span><br><span class="line">生成器(generator)。生成器是一类特殊的迭代器</span><br><span class="line">对于生成器G，我们可以按照迭代器的使用方法来使用，即可以通过next()函数、<span class="keyword">for</span>循环、list()等方法使用</span><br><span class="line">只要在<span class="function"><span class="keyword">def</span>中有<span class="title">yield</span>关键字的 就称为 生成器</span></span><br><span class="line"><span class="function">按调函数方式使用生成器就不再是执行函数体了，而是会返回一个生成器对象，就可以按使用迭代器方式来使用生成器了</span></span><br><span class="line"><span class="function"><span class="title">yield</span>关键字有两点作用：</span></span><br><span class="line"><span class="function">    保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</span></span><br><span class="line"><span class="function">    将<span class="title">yield</span>关键字后面表达式的值作为返回值返回，此时可以理解为起到了<span class="title">return</span>的作用</span></span><br><span class="line"><span class="function">    可使用<span class="title">next</span><span class="params">()</span>函数让生成器从断点处继续执行，即唤醒生成器（函数），从<span class="title">yield</span>处开始执行，而非开始处执行</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">除了可以使用<span class="title">next</span><span class="params">()</span>函数来唤醒生成器继续执行外，还可以使用<span class="title">send</span><span class="params">()</span>函数来唤醒执行。使用<span class="title">send</span><span class="params">()</span>函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据。</span></span><br><span class="line">temp = yield i</span><br><span class="line">f.send(<span class="string">'haha'</span>) <span class="comment">#此时haha会传给temp</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200426175250683.png" alt="image-20200426175250683"></p><p>如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(fpath)</span>:</span> </span><br><span class="line">    BLOCK_SIZE = <span class="number">1024</span> </span><br><span class="line">    <span class="keyword">with</span> open(fpath, <span class="string">'rb'</span>) <span class="keyword">as</span> f: </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>: </span><br><span class="line">            block = f.read(BLOCK_SIZE) </span><br><span class="line">            <span class="keyword">if</span> block: </span><br><span class="line">                <span class="keyword">yield</span> block </span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h5 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">协程，又称微线程，协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元</span><br><span class="line">通俗的理解：在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定</span><br><span class="line">线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。每个线程都有自己缓存Cache等数据，操作系统还会帮你做这些数据的恢复操作。</span><br><span class="line">线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"----work1---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"----work2---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        next(w1)</span><br><span class="line">        next(w2)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"---A--"</span></span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"---B--"</span></span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"><span class="comment">#切换到gr1中运行</span></span><br><span class="line">gr1.switch()</span><br><span class="line"></span><br><span class="line">greenlet已经实现了协程，但是这个还的人工切换</span><br><span class="line">能够自动切换任务的模块gevent，其原理是当一个greenlet遇到IO(比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()  <span class="comment"># 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine_work</span><span class="params">(coroutine_name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work1"</span>),</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work2"</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>进程线程协程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">进程是资源分配的单位</span><br><span class="line">线程是操作系统调度的单位</span><br><span class="line">进程切换需要的资源很最大，效率很低</span><br><span class="line">线程切换需要的资源一般，效率一般（当然了在不考虑GIL的情况下）</span><br><span class="line">协程切换任务资源很小，效率高</span><br><span class="line">多进程、多线程根据cpu核数不一样可能是并行的，但是协程是在一个线程中 所以是并发</span><br></pre></td></tr></table></figure><h5 id="GIL（全局解释器锁）"><a href="#GIL（全局解释器锁）" class="headerlink" title="GIL（全局解释器锁）"></a>GIL（全局解释器锁）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。</span><br><span class="line">GIL（Global Interpreter Lock）面试题如下</span><br><span class="line">描述Python GIL的概念， 以及它对python多线程的影响？编写一个多线程抓取网页的程序，并阐明多线程抓取程序是否可比单线程性能有提升，并解释原因。</span><br><span class="line">Python语言和GIL没有半毛钱关系。仅仅是由于历史原因在Cpython虚拟机(解释器)，难以移除GIL。</span><br><span class="line">GIL：全局解释器锁。每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码。</span><br><span class="line">线程释放GIL锁的情况： 在IO操作等可能会引起阻塞的system call之前,可以暂时释放GIL,但在执行完毕后,必须重新获取GIL Python 3.x使用计时器（执行时间达到阈值后，当前线程释放GIL）或Python 2.x，tickets计数达到100</span><br><span class="line">Python使用多进程是可以利用多核的CPU资源的。</span><br><span class="line">多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁</span><br></pre></td></tr></table></figure><h5 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h5><p>浅拷贝是对于一个对象的顶层拷贝，通俗的理解是：拷贝了引用，并没有拷贝内容</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-204000@2x.png" alt="img"></p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20170420-071018@2x.png" alt="img"></p><p>深拷贝是对于一个对象所有层次的拷贝(递归)</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-205139@2x.png" alt="img"></p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171024-074247@2x.png" alt="img"></p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-210821@2x.png" alt="img"></p><p><strong>浅拷贝对不可变类型和可变类型的</strong>copy不同</p><ol><li>copy.copy对于可变类型，会进行浅拷贝</li><li>copy.copy对于不可变类型，不会拷贝，仅仅是指向</li></ol><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20170420-071926@2x.png" alt="img"></p><p><strong>copy.copy和copy.deepcopy的区别</strong></p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-211713@2x.png" alt="img"></p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/QQ20171023-212701@2x.png" alt="img"></p><h5 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h5><ul><li>如果希望自己开发的模块，<strong>分享</strong> 给其他人，可以按照以下步骤操作</li></ul><p>1) 创建 setup.py</p><ul><li><code>setup.py</code> 的文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">"hm_message"</span>,  <span class="comment"># 包名</span></span><br><span class="line">      version=<span class="string">"1.0"</span>,  <span class="comment"># 版本</span></span><br><span class="line">      description=<span class="string">"itheima's 发送和接收消息模块"</span>,  <span class="comment"># 描述信息</span></span><br><span class="line">      long_description=<span class="string">"完整的发送和接收消息模块"</span>,  <span class="comment"># 完整描述信息</span></span><br><span class="line">      author=<span class="string">"itheima"</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">"itheima@itheima.com"</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">"www.itheima.com"</span>,  <span class="comment"># 主页</span></span><br><span class="line">      py_modules=[<span class="string">"hm_message.send_message"</span>,</span><br><span class="line">                  <span class="string">"hm_message.receive_message"</span>])</span><br></pre></td></tr></table></figure><p>有关字典参数的详细信息，可以参阅<a href="https://docs.python.org/2/distutils/apiref.html" target="_blank" rel="noopener">官方网站</a></p><p>2) 构建模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py build</span><br></pre></td></tr></table></figure><p>3) 生成发布压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py sdist</span><br></pre></td></tr></table></figure><blockquote><p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p></blockquote><p><strong>安装模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf hm_message-1.0.tar.gz </span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p><strong>卸载模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">直接从安装目录下，把安装模块的 **目录** 删除就可以</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages/</span><br><span class="line">$ sudo rm -r hm_message*</span><br></pre></td></tr></table></figure><h5 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h5><ul><li>pip install retrying</li><li>下载源码解码，进入解压后的目录，<figure class="highlight python"><figcaption><span>setup.py install```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- `***.whl` 安装方法 `pip install ***.whl`</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 直接运行py文件</span></span><br><span class="line"></span><br><span class="line">能不能像.exe文件那样直接运行`.py`文件呢？在Windows上是不行的，但是，在Mac和Linux上是可以的，方法是在`.py`文件的第一行加上一个特殊的注释：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">print(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>然后，通过命令给<code>hello.py</code>以执行权限：最后执行./hello.py</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod a+x hello.py</span><br></pre></td></tr></table></figure><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</span><br><span class="line"></span><br><span class="line">本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义如下：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">观察上面的log，因为它是一个decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助Python的@语法，把decorator置于函数的定义处：</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br><span class="line">调用now()函数，不仅会运行now()函数本身，还会在运行now()函数前打印一行日志：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">call now():</span><br><span class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@函数名 是python的一种语法糖。把@log放到now()函数的定义处，相当于执行了语句：</span></span><br><span class="line">首先执行log函数 ，并将 @log 下面的函数作为log函数的参数，即：@log 等价于 log(now) </span><br><span class="line">其次将执行完的log函数返回值 赋值 给@log下面的函数的函数名now 即将log的返回值再重新赋值给 now,now = log(now)</span><br><span class="line">由于log()是一个decorator，返回一个函数，所以，原来的now()函数仍然存在，只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数</span><br><span class="line"></span><br><span class="line">一个完整的decorator的写法如下：</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">或者针对带参数的decorator：</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><h4 id="内建及三方模块"><a href="#内建及三方模块" class="headerlink" title="内建及三方模块"></a>内建及三方模块</h4><h5 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h5><p>datetime是Python处理日期和时间的标准库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now() <span class="comment"># 获取当前datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(now)</span><br><span class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-18</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">07.198690</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(now))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">datetime</span>.<span class="title">datetime</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(dt)</span><br><span class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt.timestamp() <span class="comment"># 把datetime转换为timestamp</span></span><br><span class="line"><span class="number">1429417200.0</span><span class="comment">#多少秒</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">1429417200.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.fromtimestamp(t)) <span class="comment"># 本地时间</span></span><br><span class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.utcfromtimestamp(t)) <span class="comment"># UTC时间 格林威治标准时间</span></span><br><span class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">04</span>:<span class="number">20</span>:<span class="number">00</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># str转换为datetime，需要一个日期和时间的格式化字符串：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cday = datetime.strptime(<span class="string">'2015-6-1 18:19:59'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(cday)</span><br><span class="line"><span class="number">2015</span><span class="number">-06</span><span class="number">-01</span> <span class="number">18</span>:<span class="number">19</span>:<span class="number">59</span></span><br><span class="line"><span class="comment"># datetime转换为str，同样需要一个日期和时间的格式化字符串：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(now.strftime(<span class="string">'%a, %b %d %H:%M'</span>))</span><br><span class="line">Mon, May <span class="number">05</span> <span class="number">16</span>:<span class="number">28</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>)</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到UTC时间，并强制设置时区为UTC+0:00:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(utc_dt)</span><br><span class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-18</span> <span class="number">09</span>:<span class="number">05</span>:<span class="number">12.377316</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="comment"># astimezone()将转换时区为北京时间:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(bj_dt)</span><br><span class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-18</span> <span class="number">17</span>:<span class="number">05</span>:<span class="number">12.377316</span>+<span class="number">08</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200504115212284.png" alt="image-20200504115212284"></p><h5 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h5><p>collections是Python内建的一个集合模块，提供了许多有用的集合类</p><p><strong>namedtuple</strong></p><p><code>namedtuple</code>是一个函数，它用来创建一个自定义的<code>tuple</code>对象，并且规定了<code>tuple</code>元素的个数，并可以用属性而不是索引来引用<code>tuple</code>的某个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, tuple)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><strong>deque</strong></p><p>deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">'x'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">'y'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="string">'y'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</span><br><span class="line">x</span><br></pre></td></tr></table></figure><h5 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h5><p>二进制数据进行处理，每3个字节一组，一共是<code>3x8=24</code>bit，划为4组，每组正好6个bit：</p><p><img src="/../assets/pic/2019-07-18-python开源基础复习整理/949444125467040.png" alt="base64-encode"></p><p>这样我们得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串。</p><p>Base64是一种任意二进制到文本字符串的编码方法，常用于在URL、Cookie、网页中传输少量二进制数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">b'binary\x00string'</span>)</span><br><span class="line"><span class="string">b'YmluYXJ5AHN0cmluZw=='</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">b'YmluYXJ5AHN0cmluZw=='</span>)</span><br><span class="line"><span class="string">b'binary\x00string'</span></span><br></pre></td></tr></table></figure><h5 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in python hashlib?'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(md5.hexdigest())</span><br><span class="line">计算结果如下：</span><br><span class="line">d26a53750bc40b38b65a520292f69306</span><br><span class="line"><span class="comment">#另一种常见的摘要算法是SHA1，调用SHA1和调用MD5完全类似</span></span><br></pre></td></tr></table></figure><p>hmac模块实现了标准的Hmac算法，它利用一个key对message计算“杂凑”后的hash，使用hmac算法比标准hash算法更安全，因为针对相同的message，不同的key会产生不同的hash。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hmac</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">b'Hello, world!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="string">b'secret'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = hmac.new(key, message, digestmod=<span class="string">'MD5'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 如果消息很长，可以多次调用h.update(msg)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h.hexdigest()</span><br><span class="line"><span class="string">'fa4ee7d173f2d97ee79022d1a7355bcf'</span></span><br><span class="line">可见使用hmac和普通hash算法非常类似。hmac输出的长度和原始哈希算法的长度一致。需要注意传入的key和message都是bytes类型，str类型需要首先编码为bytes。</span><br></pre></td></tr></table></figure><h5 id="DOM-vs-SAX"><a href="#DOM-vs-SAX" class="headerlink" title="DOM vs SAX"></a>DOM vs SAX</h5><p>操作XML有两种方法：DOM和SAX。DOM会把整个XML读入内存，解析为树，因此占用内存大，解析慢，优点是可以任意遍历树的节点。SAX是流模式，边读边解析，占用内存小，解析快，缺点是我们需要自己处理事件。</p><h5 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h5><p>PIL：Python Imaging Library，已经是Python平台事实上的图像处理标准库了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 打开一个jpg图像文件，注意是当前路径:</span></span><br><span class="line">im = Image.open(<span class="string">'test.jpg'</span>)</span><br><span class="line"><span class="comment"># 获得图像尺寸:</span></span><br><span class="line">w, h = im.size</span><br><span class="line">print(<span class="string">'Original image size: %sx%s'</span> % (w, h))</span><br><span class="line"><span class="comment"># 缩放到50%:</span></span><br><span class="line">im.thumbnail((w//<span class="number">2</span>, h//<span class="number">2</span>))</span><br><span class="line">print(<span class="string">'Resize image to: %sx%s'</span> % (w//<span class="number">2</span>, h//<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 把缩放后的图像用jpeg格式保存:</span></span><br><span class="line">im.save(<span class="string">'thumbnail.jpg'</span>, <span class="string">'jpeg'</span>)</span><br><span class="line"><span class="comment"># 打开一个jpg图像文件，注意是当前路径:</span></span><br><span class="line">im = Image.open(<span class="string">'test.jpg'</span>)</span><br><span class="line"><span class="comment"># 应用模糊滤镜:</span></span><br><span class="line">im2 = im.filter(ImageFilter.BLUR)</span><br><span class="line">im2.save(<span class="string">'blur.jpg'</span>, <span class="string">'jpeg'</span>)</span><br><span class="line"></span><br><span class="line">生成验证码</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 随机字母:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndChar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> chr(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line"><span class="comment"># 随机颜色1:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>))</span><br><span class="line"><span class="comment"># 随机颜色2:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>))</span><br><span class="line"><span class="comment"># 240 x 60:</span></span><br><span class="line">width = <span class="number">60</span> * <span class="number">4</span></span><br><span class="line">height = <span class="number">60</span></span><br><span class="line">image = Image.new(<span class="string">'RGB'</span>, (width, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"><span class="comment"># 创建Font对象:</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">'Arial.ttf'</span>, <span class="number">36</span>)</span><br><span class="line"><span class="comment"># 创建Draw对象:</span></span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"><span class="comment"># 填充每个像素:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">        draw.point((x, y), fill=rndColor())</span><br><span class="line"><span class="comment"># 输出文字:</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    draw.text((<span class="number">60</span> * t + <span class="number">10</span>, <span class="number">10</span>), rndChar(), font=font, fill=rndColor2())</span><br><span class="line"><span class="comment"># 模糊:</span></span><br><span class="line">image = image.filter(ImageFilter.BLUR)</span><br><span class="line">image.save(<span class="string">'code.jpg'</span>, <span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure><h5 id="chardet"><a href="#chardet" class="headerlink" title="chardet"></a>chardet</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当我们拿到一个bytes时，就可以对其检测编码。用chardet检测编码，只需要一行代码：</span><br><span class="line">&gt;&gt;&gt; chardet.detect(b&apos;Hello, world!&apos;)</span><br><span class="line">&#123;&apos;encoding&apos;: &apos;ascii&apos;, &apos;confidence&apos;: 1.0, &apos;language&apos;: &apos;&apos;&#125;</span><br></pre></td></tr></table></figure><h5 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">日志一共分成<span class="number">5</span>个等级，从低到高分别是：</span><br><span class="line">DEBUG：详细的信息,通常只出现在诊断问题上</span><br><span class="line">INFO：确认一切按预期运行</span><br><span class="line">WARNING：一个迹象表明,一些意想不到的事情发生了,或表明一些问题在不久的将来(例如。磁盘空间低”)。这个软件还能按预期工作。</span><br><span class="line">ERROR：更严重的问题,软件没能执行一些功能</span><br><span class="line">CRITICAL：一个严重的错误,这表明程序本身可能无法继续运行</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(level=logging.WARNING,  </span><br><span class="line">                    filename=<span class="string">'./log.txt'</span>,  </span><br><span class="line">                    filemode=<span class="string">'w'</span>,  </span><br><span class="line">                    format=<span class="string">'%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s'</span>)  </span><br><span class="line"><span class="comment"># use logging  </span></span><br><span class="line">logging.info(<span class="string">'这是 loggging info message'</span>)  </span><br><span class="line">logging.debug(<span class="string">'这是 loggging debug message'</span>)  </span><br><span class="line">logging.warning(<span class="string">'这是 loggging a warning message'</span>)  </span><br><span class="line">logging.error(<span class="string">'这是 an loggging error message'</span>)  </span><br><span class="line">logging.critical(<span class="string">'这是 loggging critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###控制台文件都输出日志</span></span><br><span class="line"><span class="comment"># 第一步，创建一个logger  </span></span><br><span class="line">logger = logging.getLogger()  </span><br><span class="line">logger.setLevel(logging.INFO)  <span class="comment"># Log等级总开关  </span></span><br><span class="line"><span class="comment"># 第二步，创建一个handler，用于写入日志文件  </span></span><br><span class="line">logfile = <span class="string">'./log.txt'</span>  </span><br><span class="line">fh = logging.FileHandler(logfile, mode=<span class="string">'a'</span>)  <span class="comment"># open的打开模式这里可以进行参考</span></span><br><span class="line">fh.setLevel(logging.DEBUG)  <span class="comment"># 输出到file的log等级的开关  </span></span><br><span class="line"><span class="comment"># 第三步，再创建一个handler，用于输出到控制台  </span></span><br><span class="line">ch = logging.StreamHandler()  </span><br><span class="line">ch.setLevel(logging.WARNING)   <span class="comment"># 输出到console的log等级的开关</span></span><br><span class="line"><span class="comment"># 第四步，定义handler的输出格式  </span></span><br><span class="line">formatter = logging.Formatter(<span class="string">"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s"</span>)  </span><br><span class="line">fh.setFormatter(formatter)  </span><br><span class="line">ch.setFormatter(formatter)  </span><br><span class="line"><span class="comment"># 第五步，将logger添加到handler里面  </span></span><br><span class="line">logger.addHandler(fh)  </span><br><span class="line">logger.addHandler(ch)</span><br></pre></td></tr></table></figure><h4 id="code规范"><a href="#code规范" class="headerlink" title="code规范"></a>code规范</h4><h5 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">命名：项目和类驼峰，其余小写下划线</span><br><span class="line"><span class="number">1.</span>项目名称</span><br><span class="line">首字母大写+大写式驼峰，</span><br><span class="line">ProjectName</span><br><span class="line"><span class="number">2.</span>模块名和包名</span><br><span class="line">全部小写+下划线驼峰</span><br><span class="line">module_name  package_name</span><br><span class="line"><span class="number">3.</span>类名称，异常</span><br><span class="line">首字母大写+大写式驼峰，</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span>   ExceptionName</span><br><span class="line"><span class="number">4.</span>全局变量、常量</span><br><span class="line">全部使用大写字母+下划线驼峰</span><br><span class="line">GLOBAL_VAR_NAME，CONSTANT_NAME</span><br><span class="line"><span class="number">5.</span>方法名，函数名，其余变量，参数，实例</span><br><span class="line">全部小写+下划线驼峰，私有函数在函数前加一个下划线_</span><br><span class="line">method_name，function_name，instance_var_name, function_parameter_name, local_var_name，</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="number">6.</span>处理计数器外，不使用单字母命名</span><br></pre></td></tr></table></figure><h5 id="行"><a href="#行" class="headerlink" title="行"></a>行</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不要在行尾加分号, 也不要用分号将两条命令放在同一行.</span><br><span class="line">每行不超过<span class="number">80</span>个字符</span><br><span class="line">Python会将 圆括号, 中括号和花括号中的行隐式的连接起来</span><br><span class="line">Yes: foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="keyword">None</span>, x=<span class="string">'foo'</span>,</span><br><span class="line">             emphasis=<span class="keyword">None</span>, highlight=<span class="number">0</span>)</span><br><span class="line">顶级定义之间空两行, 比如函数或者类定义. </span><br><span class="line">方法定义, 类定义与第一个方法之间, 都应该空一行</span><br></pre></td></tr></table></figure><h5 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">用<span class="number">4</span>个空格来缩进代码，绝对不要用tab, 也不要tab和空格混用.</span><br><span class="line">括号内不要有空格.</span><br><span class="line">Yes: spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])</span><br><span class="line">不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</span><br><span class="line">Yes: <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">         <span class="keyword">print</span> x, y</span><br><span class="line">     x, y = y, x</span><br><span class="line">参数列表, 索引或切片的左括号前不应加空格.</span><br><span class="line">Yes: spam(<span class="number">1</span>)</span><br><span class="line">不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, <span class="comment">#, =等):</span></span><br><span class="line">Yes: foo = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">     long_name = <span class="number">2</span>  <span class="comment"># comment that should not be aligned</span></span><br><span class="line">     dictionary = &#123;</span><br><span class="line">         <span class="string">"foo"</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h5 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如无特殊情况, 文件一律使用 UTF-8 编码</span><br><span class="line">如无特殊情况, 文件头部必须加入<span class="comment">#--coding:utf-8--标识                              </span></span><br><span class="line">大部分.py文件不必以<span class="comment">#!作为文件的开始. 但main文件应该以#!/usr/bin/python3开始.</span></span><br><span class="line"><span class="comment">#!用于帮助内核找Python解释器, 但在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入#!.</span></span><br></pre></td></tr></table></figure><h5 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. </span><br><span class="line">导入应该按照从最通用到最不通用的顺序分组:</span><br><span class="line">    标准库导入</span><br><span class="line">    第三方库导入</span><br><span class="line">    应用程序指定导入</span><br><span class="line">每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</span><br><span class="line"><span class="keyword">import</span>语句应该使用 absolute <span class="keyword">import</span></span><br><span class="line">Yes: <span class="keyword">from</span> foo.bar <span class="keyword">import</span> Bar</span><br><span class="line">No: <span class="keyword">from</span> ..bar <span class="keyword">import</span> Bar</span><br></pre></td></tr></table></figure><h5 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用%操作符或者格式化方法格式化字符串.少使用+</span><br><span class="line">Yes: x = a + b</span><br><span class="line">     x = <span class="string">'%s, %s!'</span> % (imperative, expletive)</span><br><span class="line">     x = <span class="string">'&#123;&#125;, &#123;&#125;!'</span>.format(imperative, expletive)</span><br><span class="line">     x = <span class="string">'name: %s; score: %d'</span> % (name, n)</span><br><span class="line">     x = <span class="string">'name: &#123;&#125;; score: &#123;&#125;'</span>.format(name, n)</span><br><span class="line">No: x = <span class="string">'%s%s'</span> % (a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = <span class="string">'&#123;&#125;&#123;&#125;'</span>.format(a, b)  <span class="comment"># use + in this case</span></span><br><span class="line">    x = imperative + <span class="string">', '</span> + expletive + <span class="string">'!'</span></span><br><span class="line">    x = <span class="string">'name: '</span> + name + <span class="string">'; score: '</span> + str(n)                             </span><br><span class="line">避免在循环中用+和+=操作符来累加字符串</span><br><span class="line">由于字符串是不可变的, 这样做会创建不必要的临时对象, 可以将每个子串加入列表, 用 .join 连接列表. </span><br><span class="line">也可以将每个子串写入一个 cStringIO.StringIO 缓存中.</span><br><span class="line">Yes: items = [<span class="string">'&lt;table&gt;'</span>]</span><br><span class="line">     <span class="keyword">for</span> last_name, first_name <span class="keyword">in</span> employee_list:</span><br><span class="line">         items.append(<span class="string">'&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;'</span> % (last_name, first_name))</span><br><span class="line">     items.append(<span class="string">'&lt;/table&gt;'</span>)</span><br><span class="line">     employee_table = <span class="string">''</span>.join(items)                           </span><br><span class="line">为多行字符串使用三重双引号”“”而非三重单引号’‘’. 不过通常用隐式行连接更清晰</span><br><span class="line">Yes:<span class="keyword">print</span> (<span class="string">"This is much nicer.\n"</span></span><br><span class="line">           <span class="string">"Do it this way.\n"</span>)</span><br></pre></td></tr></table></figure><h5 id="数据类3-7"><a href="#数据类3-7" class="headerlink" title="数据类3.7+"></a>数据类3.7+</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegularCard</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rank, suit)</span>:</span></span><br><span class="line">        self.rank = rank</span><br><span class="line">        self.suit = suit</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">f'<span class="subst">&#123;self.__class__.__name__&#125;</span>'</span></span><br><span class="line">                <span class="string">f'(rank=<span class="subst">&#123;self.rank!r&#125;</span>, suit=<span class="subst">&#123;self.suit!r&#125;</span>)'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> <span class="keyword">not</span> self.__class__:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> (self.rank, self.suit) == (other.rank, other.suit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数据类 data class</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span>:</span></span><br><span class="line">    rank: str</span><br><span class="line">    suit: str = <span class="string">"hearts"</span> <span class="comment"># 位置参数， 设置默认值</span></span><br><span class="line">card = Card(<span class="string">"Q"</span>, <span class="string">"hearts"</span>)</span><br><span class="line">print(card == card)</span><br><span class="line">print(card.__eq__(card))</span><br><span class="line">print(card.__repr__())  <span class="comment"># Card(rank='Q', suit='hearts') __repr__</span></span><br></pre></td></tr></table></figure><h5 id="控制台文本加色"><a href="#控制台文本加色" class="headerlink" title="控制台文本加色"></a>控制台文本加色</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install colorama</span></span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore, Back, Style</span><br><span class="line">print(Fore.RED + <span class="string">'some red text'</span>)</span><br><span class="line">print(Back.GREEN + <span class="string">'and with a green background'</span>)</span><br><span class="line">print(Style.DIM + <span class="string">'and in dim text'</span>)</span><br><span class="line">print(Style.RESET_ALL)</span><br><span class="line">print(<span class="string">'back to normal now'</span>)</span><br></pre></td></tr></table></figure><h5 id="enum替代数字字面量"><a href="#enum替代数字字面量" class="headerlink" title="enum替代数字字面量"></a>enum替代数字字面量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用enum 避免直接使用 数字字面量</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TripSource</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line">    FROM_WEBSITE = <span class="number">11</span></span><br><span class="line">    FROM_IOS_CLIENT = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_trip_as_featured</span><span class="params">(trip)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> trip.source == TripSource.FROM_WEBSITE:</span><br><span class="line">        do_some_thing(trip)</span><br><span class="line">    <span class="keyword">elif</span> trip.source == TripSource.FROM_IOS_CLIENT:</span><br><span class="line">        do_some_other_thing(trip)</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="数据读写与保存"><a href="#数据读写与保存" class="headerlink" title="数据读写与保存"></a>数据读写与保存</h4><h5 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>students = [[’name’, ’gender’, ’age’],</span><br><span class="line"><span class="meta">... </span>[’zhangsan’, ’male’, <span class="number">13</span>],</span><br><span class="line"><span class="meta">... </span>[’lisi’, ’female’, <span class="number">14</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handle = open(’students.csv’, ’w’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer = csv.writer(handle)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>writer.writerows(students)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handle.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handle = open(’students.csv’, ’r’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reader = csv.reader(handle)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line"><span class="meta">... </span>print(row)</span><br></pre></td></tr></table></figure><h5 id="xls"><a href="#xls" class="headerlink" title="xls"></a>xls</h5><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/20180819025656924.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> xlrd  <span class="comment">#引入模块</span></span><br><span class="line"> <span class="comment">#打开文件，获取excel文件的workbook（工作簿）对象</span></span><br><span class="line">workbook=xlrd.open_workbook(<span class="string">"DataSource/Economics.xls"</span>)  <span class="comment">#文件路径</span></span><br><span class="line"><span class="string">'''对workbook对象进行操作'''</span></span><br><span class="line"><span class="comment">#获取所有sheet的名字</span></span><br><span class="line">names=workbook.sheet_names()</span><br><span class="line">print(names) <span class="comment">#['各省市', '测试表']  输出所有的表名，以列表的形式</span></span><br><span class="line"><span class="comment">#通过sheet索引获得sheet对象</span></span><br><span class="line">worksheet=workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">print(worksheet)  <span class="comment">#&lt;xlrd.sheet.Sheet object at 0x000001B98D99CFD0&gt;</span></span><br><span class="line"><span class="comment">#通过sheet名获得sheet对象</span></span><br><span class="line">worksheet=workbook.sheet_by_name(<span class="string">"各省市"</span>)</span><br><span class="line">print(worksheet) <span class="comment">#&lt;xlrd.sheet.Sheet object at 0x000001B98D99CFD0&gt;</span></span><br><span class="line"><span class="comment">#由上可知，workbook.sheet_names() 返回一个list对象，可以对这个list对象进行操作</span></span><br><span class="line">sheet0_name=workbook.sheet_names()[<span class="number">0</span>]  <span class="comment">#通过sheet索引获取sheet名称</span></span><br><span class="line">print(sheet0_name)  <span class="comment">#各省市</span></span><br><span class="line"><span class="string">'''对sheet对象进行操作'''</span></span><br><span class="line">name=worksheet.name  <span class="comment">#获取表的姓名</span></span><br><span class="line">print(name) <span class="comment">#各省市 </span></span><br><span class="line">nrows=worksheet.nrows  <span class="comment">#获取该表总行数</span></span><br><span class="line">print(nrows)  <span class="comment">#32</span></span><br><span class="line">ncols=worksheet.ncols  <span class="comment">#获取该表总列数</span></span><br><span class="line">print(ncols) <span class="comment">#13</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(nrows): <span class="comment">#循环打印每一行</span></span><br><span class="line">    print(worksheet.row_values(i))  <span class="comment">#以列表形式读出，列表中的每一项是str类型</span></span><br><span class="line"><span class="comment">#['各省市', '工资性收入', '家庭经营纯收入', '财产性收入', ………………]</span></span><br><span class="line"><span class="comment">#['北京市', '5047.4', '1957.1', '678.8', '592.2', '1879.0，…………]</span></span><br><span class="line">col_data=worksheet.col_values(<span class="number">0</span>)  <span class="comment">#获取第一列的内容</span></span><br><span class="line">print(col_data)</span><br><span class="line"><span class="comment">#通过坐标读取表格中的数据</span></span><br><span class="line">cell_value1=sheet0.cell_value(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">cell_value2=sheet0.cell_value(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">print(cell_value1)  <span class="comment">#各省市</span></span><br><span class="line">print(cell_value2)   <span class="comment">#北京市</span></span><br><span class="line">cell_value1=sheet0.cell(<span class="number">0</span>,<span class="number">0</span>).value</span><br><span class="line">print(cell_value1) <span class="comment">#各省市</span></span><br><span class="line">cell_value1=sheet0.row(<span class="number">0</span>)[<span class="number">0</span>].value</span><br><span class="line">print(cell_value1)  <span class="comment">#各省市 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入xlwt模块</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="comment">#创建一个Workbook对象，相当于创建了一个Excel文件</span></span><br><span class="line">book=xlwt.Workbook(encoding=<span class="string">"utf-8"</span>,style_compression=<span class="number">0</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Workbook类初始化时有encoding和style_compression参数</span></span><br><span class="line"><span class="string">encoding:设置字符编码，一般要这样设置：w = Workbook(encoding='utf-8')，就可以在excel中输出中文了。默认是ascii。</span></span><br><span class="line"><span class="string">style_compression:表示是否压缩，不常用。</span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line"><span class="comment"># 创建一个sheet对象，一个sheet对象对应Excel文件中的一张表格。</span></span><br><span class="line">sheet = book.add_sheet(<span class="string">'test01'</span>, cell_overwrite_ok=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 其中的test是这张表的名字,cell_overwrite_ok，表示是否可以覆盖单元格，其实是Worksheet实例化的一个参数，默认值是False</span></span><br><span class="line"><span class="comment"># 向表test中添加数据</span></span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'各省市'</span>)  <span class="comment"># 其中的'0-行, 0-列'指定表中的单元，'各省市'是向该单元写入的内容</span></span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">'工资性收入'</span>)</span><br><span class="line"><span class="comment"># 最后，将以上操作保存到指定的Excel文件中</span></span><br><span class="line">book.save(<span class="string">'DataSource\\test1.xls'</span>)</span><br></pre></td></tr></table></figure><h5 id="sqlite3"><a href="#sqlite3" class="headerlink" title="sqlite3"></a>sqlite3</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入SQLite驱动:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment"># 连接到SQLite数据库</span></span><br><span class="line"><span class="comment"># 数据库文件是test.db</span></span><br><span class="line"><span class="comment"># 如果文件不存在，会自动在当前目录创建:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line"><span class="comment"># 创建一个Cursor:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 执行一条SQL语句，创建user表:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.execute(<span class="string">'create table user (id varchar(20) primary key, name varchar(20))'</span>)</span><br><span class="line">&lt;sqlite3.Cursor object at <span class="number">0x10f8aa260</span>&gt;</span><br><span class="line"><span class="comment"># 继续执行一条SQL语句，插入一条记录:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.execute(<span class="string">'insert into user (id, name) values (\'1\', \'Michael\')'</span>)</span><br><span class="line">&lt;sqlite3.Cursor object at <span class="number">0x10f8aa260</span>&gt;</span><br><span class="line"><span class="comment"># 通过rowcount获得插入的行数:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.rowcount</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 关闭Cursor:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.close()</span><br><span class="line"><span class="comment"># 提交事务:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.commit()</span><br><span class="line"><span class="comment"># 关闭Connection:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.close()</span><br><span class="line"></span><br><span class="line">我们再试试查询记录：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 执行查询语句:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.execute(<span class="string">'select * from user where id=?'</span>, (<span class="string">'1'</span>,))</span><br><span class="line">&lt;sqlite3.Cursor object at <span class="number">0x10f8aa340</span>&gt;</span><br><span class="line"><span class="comment"># 获得查询结果集:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = cursor.fetchall()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values</span><br><span class="line">[(<span class="string">'1'</span>, <span class="string">'Michael'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.close()</span><br><span class="line"></span><br><span class="line">如果SQL语句带有参数，那么需要把参数按照位置传递给execute()方法，有几个?占位符就必须对应几个参数，防止sql注入，例如：</span><br><span class="line">cursor.execute(<span class="string">'select * from user where name=? and pwd=?'</span>, (<span class="string">'abc'</span>, <span class="string">'password'</span>))</span><br></pre></td></tr></table></figure><p><strong>执行sql脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat a.sql</span><br><span class="line">create table news (id integer, score integer, title text, href text);</span><br><span class="line">insert into news values (<span class="number">1</span>, <span class="number">8</span>, <span class="string">"hello world"</span>, <span class="string">"http://oscar-lab.org"</span>);</span><br><span class="line">insert into news values (<span class="number">2</span>, <span class="number">2</span>, <span class="string">"hello charlie"</span>, <span class="string">"http://www.dlut.edu.cn"</span>);</span><br><span class="line">$ python3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = sqlite3.connect(’a.db’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = conn.cursor()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.executescript(open(’a.sql’).read())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.execute(’select * <span class="keyword">from</span> news’))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">8</span>, ’hello world’, ’http://oscar-lab.org’),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, ’hello charlie’, ’http://www.dlut.edu.cn’)]</span><br></pre></td></tr></table></figure><p><strong>Row Objects</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.row_factory = sqlite3.Row</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = conn.cursor()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.execute(’select* <span class="keyword">from</span> stocks’)</span><br><span class="line">&lt;sqlite3.Cursor object at <span class="number">0x7f4e7dd8fa80</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = c.fetchone()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(r)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> ’<span class="title">sqlite3</span>.<span class="title">Row</span>’&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">tuple</span><span class="params">(r)</span></span></span><br><span class="line"><span class="class"><span class="params">(’<span class="number">2006</span><span class="number">-01</span><span class="number">-05</span>’, ’BUY’, ’RHAT’, <span class="number">100.0</span>, <span class="number">35.14</span>)</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">len</span><span class="params">(r)</span></span></span><br><span class="line"><span class="class">5</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">r</span>[2]</span></span><br><span class="line"><span class="class">’<span class="title">RHAT</span>’</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">for</span> <span class="title">row</span> <span class="title">in</span> <span class="title">c</span>.<span class="title">execute</span><span class="params">(’SELECT * FROM stocks ORDER BY price’)</span>:</span></span><br><span class="line">print(row)</span><br><span class="line">(’<span class="number">2006</span><span class="number">-01</span><span class="number">-05</span>’, ’BUY’, ’RHAT’, <span class="number">100</span>, <span class="number">35.14</span>)</span><br><span class="line">(’<span class="number">2006</span><span class="number">-03</span><span class="number">-28</span>’, ’BUY’, ’IBM’, <span class="number">1000</span>, <span class="number">45.0</span>)</span><br><span class="line">(’<span class="number">2006</span><span class="number">-04</span><span class="number">-06</span>’, ’SELL’, ’IBM’, <span class="number">500</span>, <span class="number">53.0</span>)</span><br><span class="line">(’<span class="number">2006</span><span class="number">-04</span><span class="number">-05</span>’, ’BUY’, ’MSFT’, <span class="number">1000</span>, <span class="number">72.0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python type ——SQLite type</span><br><span class="line">None ——NULL</span><br><span class="line">int—— INTEGER</span><br><span class="line">float ——REAL</span><br><span class="line">str ——TEXT</span><br><span class="line">bytes—— BLOB</span><br></pre></td></tr></table></figure><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入MySQL驱动:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="comment"># 注意把password设为你的root口令:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = mysql.connector.connect(user=<span class="string">'root'</span>, password=<span class="string">'password'</span>, database=<span class="string">'test'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 创建user表:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.execute(<span class="string">'create table user (id varchar(20) primary key, name varchar(20))'</span>)</span><br><span class="line"><span class="comment"># 插入一行记录，注意MySQL的占位符是%s:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.execute(<span class="string">'insert into user (id, name) values (%s, %s)'</span>, [<span class="string">'1'</span>, <span class="string">'Michael'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.rowcount</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 提交事务:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.close()</span><br><span class="line"><span class="comment"># 运行查询:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor = conn.cursor()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.execute(<span class="string">'select * from user where id = %s'</span>, (<span class="string">'1'</span>,))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = cursor.fetchall()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values</span><br><span class="line">[(<span class="string">'1'</span>, <span class="string">'Michael'</span>)]</span><br><span class="line"><span class="comment"># 关闭Cursor和Connection:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cursor.close()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.close()</span><br></pre></td></tr></table></figure><h5 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h5><p>在Python中，最有名的ORM（“Object Relational Mapping”，即对象-关系映射）框架是SQLAlchemy。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入:</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象的基类:</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义User对象:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="comment"># 表的名字:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表的结构:</span></span><br><span class="line">    id = Column(String(<span class="number">20</span>), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库连接:</span></span><br><span class="line">engine = create_engine(<span class="string">'mysql+mysqlconnector://root:password@localhost:3306/test'</span>)</span><br><span class="line"><span class="comment"># 创建DBSession类型:</span></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新User对象:</span></span><br><span class="line">new_user = User(id=<span class="string">'5'</span>, name=<span class="string">'Bob'</span>)</span><br><span class="line"><span class="comment"># 添加到session:</span></span><br><span class="line">session.add(new_user)</span><br><span class="line"><span class="comment"># 提交即保存到数据库:</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session:</span></span><br><span class="line">session.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Session:</span></span><br><span class="line">session = DBSession()</span><br><span class="line"><span class="comment"># 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:</span></span><br><span class="line">user = session.query(User).filter(User.id==<span class="string">'5'</span>).one()</span><br><span class="line"><span class="comment"># 打印类型和对象的name属性:</span></span><br><span class="line">print(<span class="string">'type:'</span>, type(user))</span><br><span class="line">print(<span class="string">'name:'</span>, user.name)</span><br><span class="line"><span class="comment"># 关闭Session:</span></span><br><span class="line">session.close()</span><br><span class="line">运行结果如下：</span><br><span class="line">type: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">User</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">name</span>:</span> Bob</span><br></pre></td></tr></table></figure><h4 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h4><h5 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h5><p>WSGI接口(Web Server Gateway Interface)定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。底层代码不需要我们自己编写，我们只负责在更高层次上考虑如何响应请求就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="comment">#start_response()函数接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>]</span><br></pre></td></tr></table></figure><p>再编写一个<code>server.py</code>，负责启动WSGI服务器，加载<code>application()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="comment"># 从wsgiref模块导入:</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="comment"># 导入我们自己编写的application函数:</span></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务器，IP地址为空，端口是8000，处理函数是application:</span></span><br><span class="line">httpd = make_server(<span class="string">''</span>, <span class="number">8000</span>, application)</span><br><span class="line">print(<span class="string">'Serving HTTP on port 8000...'</span>)</span><br><span class="line"><span class="comment"># 开始监听HTTP请求:</span></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure><h5 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(’/’)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> ’Hello, World!’</span><br></pre></td></tr></table></figure><p><strong>启动服务器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用--host=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> 使能跨 IP 访问</span><br><span class="line">$ export FLASK_APP=hello.py (run set FLASK_APP=hello.py on Windows)</span><br><span class="line">$ flask run</span><br><span class="line">*Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/</span><br></pre></td></tr></table></figure><p><strong>路由</strong></p><p>有时候需要接收URL中的参数变量，可以把参数标记为一个变量<code>&lt;变量名&gt;</code>，这个部分将会作为命名参数传递给函数。同时还可以限制参数变量的类型<code>&lt;类型:变量名&gt;</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(’/hello’)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> ’Hello, World’</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(’/user/&lt;username&gt;’)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> ’User %s’ % username</span><br><span class="line"><span class="meta">@app.route(’/post/&lt;int:post_id&gt;’)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span><span class="params">(post_id)</span>:</span></span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> ’Post %d’ % post_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#redirect</span></span><br><span class="line"><span class="meta">@app.route(’/’)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(’login’))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="meta">@app.route(’/login’, methods=[’GET’, ’POST’])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.method == ’POST’:</span><br><span class="line">do_the_login()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">show_the_login_form()</span><br></pre></td></tr></table></figure><p><strong>使用模板</strong></p><p><img src="/../assets/pic/2019-07-18-python开源基础复习整理/951383573211136.png" alt="mvc-seq"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="meta">@app.route(’/hello/’)</span></span><br><span class="line"><span class="meta">@app.route(’/hello/&lt;name&gt;’)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=None)</span>:</span></span><br><span class="line"><span class="keyword">return</span> render_template(’hello.html’, name=name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/signin', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.form[<span class="string">'username'</span>]</span><br><span class="line">    password = request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> username==<span class="string">'admin'</span> <span class="keyword">and</span> password==<span class="string">'password'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'signin-ok.html'</span>, username=username)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'form.html'</span>, message=<span class="string">'Bad username or password'</span>, username=username)</span><br></pre></td></tr></table></figure><p><strong>接收前端传来数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    dict = request.args[<span class="string">'name'</span>]</span><br><span class="line">    print(dict)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formdata</span><span class="params">()</span>:</span></span><br><span class="line">    dict = request.form[<span class="string">'name'</span>]</span><br><span class="line">    print(dict)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span><span class="params">()</span>:</span></span><br><span class="line">    dict = request.files[<span class="string">'file'</span>]</span><br><span class="line">    print(dict)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json</span><span class="params">()</span>:</span></span><br><span class="line">    dict = request.get_json()</span><br><span class="line">    print(dict)</span><br></pre></td></tr></table></figure><h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p>画图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• 使用 plt.plot(x, y) 和 plot.show() 画图（推荐 jupyter）</span><br><span class="line">• 使用 plt.xlabel(”)，plt.ylabel(”)，plt.title(”) 设置标题</span><br><span class="line">• 使用 plt.savefig(fname, dpi) 保存图片</span><br><span class="line">• 使用 fig, ax = plt.subplots() 返回图片句柄和坐标轴</span><br><span class="line">• fig.savefig() 保存图片</span><br><span class="line">• ax.plot 画图</span><br><span class="line">• ax.set(xlabel=“x”, ylabel=“y”, title=“title”)</span><br></pre></td></tr></table></figure><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">print(<span class="string">"常见绘图"</span>)</span><br><span class="line">X=np.linspace(-np.pi,np.pi,<span class="number">256</span>,endpoint=<span class="keyword">True</span>)<span class="comment">#-π to+π的256个值</span></span><br><span class="line">C,S=np.cos(X),np.sin(X)</span><br><span class="line">plt.plot(X,C,<span class="string">'r--'</span>,label=<span class="string">"$sin(x)$"</span>)</span><br><span class="line">plt.scatter(X,C,color=<span class="string">'g'</span>)</span><br><span class="line">plt.plot(X,S,<span class="string">'b'</span>,label=<span class="string">"$cos(x)$"</span>)</span><br><span class="line">plt.xlim(-np.pi,np.pi)</span><br><span class="line"><span class="comment">#图像标签说明,设置label的都显示(loc=2位于第二个角洛)</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"多图画在一起"</span>)</span><br><span class="line">x=np.arange(<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi,<span class="number">0.1</span>*np.pi)</span><br><span class="line">y=np.sin(x)</span><br><span class="line">y2=np.cos(x)</span><br><span class="line">fig,(ax,ax1)=plt.subplots(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#指定曲线的颜色和线性，如‘b--’表示蓝色虚线（b：蓝色，-：虚线）</span></span><br><span class="line">ax.plot(x,y,<span class="string">'r--'</span>,label=<span class="string">"$sin(x)$"</span>)</span><br><span class="line">ax1.plot(x,y2,<span class="string">'g'</span>)</span><br><span class="line"><span class="comment">#将$包围的内容渲染为数学公式</span></span><br><span class="line">ax.set(xlabel=<span class="string">"x"</span>,ylabel=<span class="string">"$sin(x)$"</span>)</span><br><span class="line">ax.set_title(<span class="string">"sin(x)图像"</span>)</span><br><span class="line">ax1.set(xlabel=<span class="string">"x"</span>,ylabel=<span class="string">"sin(x)"</span>)</span><br><span class="line">ax1.set_title(<span class="string">"cos(x)图像"</span>)</span><br><span class="line">ax.grid()</span><br><span class="line">ax1.grid()</span><br><span class="line">ax.axis([<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi,<span class="number">-1</span>,<span class="number">1</span>])</span><br><span class="line">ax1.axis([<span class="number">-2</span>*np.pi,<span class="number">2</span>*np.pi,<span class="number">-1</span>,<span class="number">1</span>])</span><br><span class="line">ax.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#折线图</span></span><br><span class="line">x = [<span class="number">10</span>,<span class="number">100</span>,<span class="number">180</span>,<span class="number">310</span>,<span class="number">400</span>,<span class="number">500</span>]<span class="comment">#点的横坐标</span></span><br><span class="line">Sparrow=[<span class="number">0</span>,<span class="number">180</span>,<span class="number">310</span>,<span class="number">560</span>,<span class="number">630</span>,<span class="number">750</span>]</span><br><span class="line">ZkCheck=[<span class="number">0</span>,<span class="number">110</span>,<span class="number">200</span>,<span class="number">310</span>,<span class="number">400</span>,<span class="number">590</span>]</span><br><span class="line">CSA=[<span class="number">0</span>,<span class="number">210</span>,<span class="number">420</span>,<span class="number">780</span>,<span class="number">1030</span>,<span class="number">1180</span>]</span><br><span class="line">Clouseau=[<span class="number">0</span>,<span class="number">200</span>,<span class="number">360</span>,<span class="number">605</span>,<span class="number">800</span>,<span class="number">1005</span>]</span><br><span class="line">plt.grid(linestyle=<span class="string">'-.'</span>)</span><br><span class="line">plt.plot(x,Sparrow,<span class="string">'s--'</span>,color = <span class="string">'b'</span>,label=<span class="string">"Sparrow"</span>)<span class="comment">#s-:方形</span></span><br><span class="line">plt.plot(x,CSA,<span class="string">'^-.'</span>,color = <span class="string">'k'</span>,label=<span class="string">"CSA"</span>)<span class="comment">#s-:方形</span></span><br><span class="line">plt.plot(x,Clouseau,<span class="string">'+:'</span>,color = <span class="string">'g'</span>,label=<span class="string">"Clouseau"</span>)<span class="comment">#s-:方形</span></span><br><span class="line">plt.plot(x,ZkCheck,<span class="string">'o-'</span>,color = <span class="string">'r'</span>,label=<span class="string">"ZkCheck"</span>)<span class="comment">#o-:圆形</span></span><br><span class="line">plt.xlabel(<span class="string">"code Quantity/Kloc"</span>)<span class="comment">#横坐标名字</span></span><br><span class="line">plt.ylabel(<span class="string">"Detection Time/s"</span>)<span class="comment">#纵坐标名字</span></span><br><span class="line">plt.legend(loc = <span class="string">"best"</span>)<span class="comment">#图例</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=============    ===============================</span><br><span class="line">character        description</span><br><span class="line">=============    ===============================</span><br><span class="line">``&apos;-&apos;``          solid line style 实线</span><br><span class="line">``&apos;--&apos;``         dashed line style 虚线</span><br><span class="line">``&apos;-.&apos;``         dash-dot line style 点画线</span><br><span class="line">``&apos;:&apos;``          dotted line style 点线</span><br><span class="line">=============    ===============================</span><br></pre></td></tr></table></figure><p>附颜色表</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200827144703701.png" alt="image-20200827144703701"></p><p>Marker常见参数</p><p><img src="/../assets/pic/2019-07-18-python%E5%BC%80%E6%BA%90%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/image-20200827144728129.png" alt="image-20200827144728129"></p><h5 id="histogram-hist-function直方图"><a href="#histogram-hist-function直方图" class="headerlink" title="histogram (hist) function直方图"></a>histogram (hist) function直方图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">np.random.seed(<span class="number">19680801</span>)</span><br><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"><span class="comment"># the histogram of the data</span></span><br><span class="line">n, bins, patches = plt.hist(x, <span class="number">50</span>, normed=<span class="number">1</span>, facecolor=’g’, alpha=<span class="number">0.75</span>)</span><br><span class="line">plt.xlabel(’Smarts’)</span><br><span class="line">plt.ylabel(’Probability’)</span><br><span class="line">plt.title(’Histogram of IQ’)</span><br><span class="line">plt.axis([<span class="number">40</span>, <span class="number">160</span>, <span class="number">0</span>, <span class="number">0.03</span>])</span><br><span class="line">plt.grid(<span class="keyword">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="Basic-pie-chart"><a href="#Basic-pie-chart" class="headerlink" title="Basic pie chart"></a>Basic pie chart</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># Pie chart, where the slices will be ordered and plotted counter-clockwise:</span></span><br><span class="line">labels = ’Frogs’, ’Hogs’, ’Dogs’, ’Logs’</span><br><span class="line">sizes = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">10</span>]</span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment"># only "explode" the 2nd slice (i.e. ’Hogs’)</span></span><br><span class="line">fig1, ax1 = plt.subplots()</span><br><span class="line">ax1.pie(sizes, explode=explode, labels=labels, autopct=’%<span class="number">1.1</span>f%%’,</span><br><span class="line">shadow=<span class="keyword">True</span>, startangle=<span class="number">90</span>)</span><br><span class="line">ax1.axis(’equal’) <span class="comment"># Equal aspect ratio ensures that pie is drawn as a circle.</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h4><p>主要处理类似于数据表的二维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=list(<span class="string">'ABCD'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#描述</span></span><br><span class="line">print(df.head())</span><br><span class="line">print(df.tail(<span class="number">3</span>))</span><br><span class="line">print(df.index,df.columns,df.values)</span><br><span class="line">print(df.describe())</span><br><span class="line">print(df.T)</span><br><span class="line">print(df.sort_values(by=<span class="string">"A"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#选取</span></span><br><span class="line">print(df.A)</span><br><span class="line">print(df[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(df.loc[:,[<span class="string">"A"</span>,<span class="string">"B"</span>]])</span><br><span class="line">print(df.iloc[<span class="number">3</span>:<span class="number">5</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print( df.iloc[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line">print(df.iat[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#条件筛选</span></span><br><span class="line">print( df[df.A &gt; <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改</span></span><br><span class="line">df2 = df.copy()</span><br><span class="line">df2[<span class="string">'E'</span>] = list(<span class="string">"123456"</span>)</span><br><span class="line">print(df2)</span><br><span class="line">df.at[dates[<span class="number">0</span>],<span class="string">"E"</span>] = <span class="number">0</span></span><br><span class="line">df.iat[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">df.loc[:,<span class="string">'D'</span>] = np.array([<span class="number">5</span>] * len(df))</span><br><span class="line">print(df)</span><br><span class="line">print(df.mean())</span><br><span class="line">print(df.mean(<span class="number">1</span>))</span><br><span class="line">s = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">7</span>, size=<span class="number">10</span>))</span><br><span class="line">print(s)</span><br><span class="line">print(s.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment">#拼接合并分组</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">print(df)</span><br><span class="line">pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]</span><br><span class="line">print(pieces[<span class="number">0</span>])</span><br><span class="line">print(pieces[<span class="number">1</span>])</span><br><span class="line">print(pd.concat(pieces))</span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</span><br><span class="line">print(left,right)</span><br><span class="line">dd=pd.merge(left, right, on=<span class="string">'key'</span>)</span><br><span class="line">print(dd)</span><br><span class="line">print(dd.groupby(<span class="string">'key'</span>).sum())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读写</span></span><br><span class="line">df.to_csv(<span class="string">'foo.csv'</span>)</span><br><span class="line">print(pd.read_csv(<span class="string">'foo.csv'</span>))</span><br></pre></td></tr></table></figure><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p>NoSQL 是对不同于传统的关系数据库的数据库管理系统的统称。两者存在许多显著的不同点，其中最重要的是 NoSQL 不使用 SQL 作为查询语言。其数据存储可以不需要固定的表格模式，也经常会避免使用 SQL的 JOIN 操作，一般有水平可扩展性的特征。<br>NoSQL 的结构通常提供弱一致性的保证，如最终一致性，或交易仅限于单个的数据项。<br>• 图形关系存储：Neo4J、ArangoDB<br>• 键-值存储：Redis、MemcacheD、BerkeleyDB<br>• 列存储: HBase、Cassandra<br>• 文档存储: MongoDB、CouchDB</p><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--dbpath arg   directory for datafiles - defaults to /data/db</span><br><span class="line">--port arg     specify port number - 27017 by default</span><br><span class="line">--replSet arg  arg is &lt;setname&gt;</span><br><span class="line">--configsvr    declare this is a config db of a cluster;</span><br><span class="line">               default port 27019; default dir /data/configdb</span><br><span class="line">--journal      enable journaling</span><br><span class="line">--nojournal    disable journaling (journaling is on by default for 64 bit)</span><br><span class="line">--logpath arg  log file to send write to instead of stdout - has to be a file, not                  directory</span><br></pre></td></tr></table></figure><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令行下运行 MongoDB 服务器</span><br><span class="line">从 MongoDB 目录的 bin 目录中执行 mongod.exe 文件。</span><br><span class="line">C:\mongodb\bin\mongod --dbpath c:\data\db</span><br><span class="line"></span><br><span class="line">连接MongoDB</span><br><span class="line">在命令窗口中运行 mongo.exe 命令即可连接上 MongoDB，执行如下命令：</span><br><span class="line">C:\mongodb\bin\mongo.exe</span><br></pre></td></tr></table></figure><h5 id="MongoDB-数据结构"><a href="#MongoDB-数据结构" class="headerlink" title="MongoDB 数据结构"></a>MongoDB 数据结构</h5><p>JSON<br>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c 制定的 js 规范) 的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">导入json文件</span><br><span class="line">mongoimport --db db_demo --collection users --file 文件路径</span><br></pre></td></tr></table></figure><p>BSON<br>BSON( Binary Serialized Document Format) 是一种二进制形式的存储格式，采用了类似于 C 语言结构体的名称、对表示方法，支持内嵌的文档对象和数组对象，具有轻量性、可遍历性、高效性的特点，可以有效描述非结构化数据和结构化数据。</p><h5 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CRUD (<span class="number">1</span>): Create</span><br><span class="line"><span class="comment">#choose db</span></span><br><span class="line">&gt;use test</span><br><span class="line"><span class="comment">#insert json object into collection</span></span><br><span class="line">&gt;db.students.insert(&#123;<span class="string">"id"</span>: <span class="number">123</span>, <span class="string">"name"</span>: <span class="string">"zhangsan"</span>, <span class="string">"age"</span>: <span class="number">19</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line">CRUD (<span class="number">2</span>): Retrieve</span><br><span class="line"><span class="comment">#choose db</span></span><br><span class="line">&gt;use test</span><br><span class="line">&gt; db.students.find(&#123;<span class="string">"id"</span>: <span class="number">123</span>&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"..."</span>), <span class="string">"id"</span> : <span class="number">123</span>, <span class="string">"name"</span> : <span class="string">"zhangsan"</span>, <span class="string">"age"</span> : <span class="number">19</span> &#125;</span><br><span class="line"></span><br><span class="line">CRUD (<span class="number">3</span>): Update</span><br><span class="line">&gt; db.students.update(&#123;<span class="string">"id"</span>:<span class="number">123</span>&#125;, &#123;<span class="string">"$inc"</span>: &#123;<span class="string">"age"</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : <span class="number">1</span>, <span class="string">"nUpserted"</span> : <span class="number">0</span>, <span class="string">"nModified"</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; db.students.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"..."</span>), <span class="string">"id"</span> : <span class="number">123</span>, <span class="string">"name"</span> : <span class="string">"zhangsan"</span>, <span class="string">"age"</span> : <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line">CRUD (<span class="number">4</span>): Delete</span><br><span class="line">&gt; db.students.deleteMany(&#123;<span class="string">"id"</span>:<span class="number">123</span>&#125;)</span><br><span class="line">&#123; <span class="string">"acknowledged"</span> : true, <span class="string">"deletedCount"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="pymongo-安装"><a href="#pymongo-安装" class="headerlink" title="pymongo 安装"></a>pymongo 安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">• via pip</span><br><span class="line">$pip install pymongo</span><br><span class="line">• via distro (e.g., apt)</span><br><span class="line">$sudo apt-get install python-pymongo</span><br></pre></td></tr></table></figure><h5 id="pymongo-API-使用"><a href="#pymongo-API-使用" class="headerlink" title="pymongo API 使用"></a>pymongo API 使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line"><span class="comment"># Get the sampleDB database</span></span><br><span class="line">db = client.sampleDB</span><br><span class="line"><span class="comment"># equivalently, use db = client[’sampleDB’]</span></span><br><span class="line">coll = db.sampleCollection</span><br><span class="line"><span class="comment"># equivalently, use coll = db[’sampleCollection’]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CRUD: Create</span></span><br><span class="line">coll.insert_one(&#123;<span class="string">"id"</span>: <span class="number">123</span>, <span class="string">"name"</span>: <span class="string">"zhangsan"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;)</span><br><span class="line">coll.insert_one(&#123;<span class="string">"id"</span>: <span class="number">124</span>, <span class="string">"name"</span>: <span class="string">"lisi"</span>, <span class="string">"age"</span>: <span class="number">17</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CRUD: Retrieve</span></span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> coll.find():</span><br><span class="line">print(<span class="string">"id: %d, name: %s, age: %d"</span> %</span><br><span class="line">(entry[’id’], entry[’name’], entry[’age’])</span><br><span class="line"></span><br><span class="line"><span class="comment">#CRUD: Update</span></span><br><span class="line">col.update(&#123;<span class="string">"age"</span>: &#123;<span class="string">"$lt"</span>: <span class="number">20</span>&#125;&#125;, &#123;<span class="string">"$inc"</span>: &#123;<span class="string">"age"</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line"><span class="comment">#&#123;u’n’: 1, u’nModified’: 1, u’ok’: 1, ’updatedExisting’: True&#125;</span></span><br><span class="line">col.update(&#123;<span class="string">"age"</span>: &#123;<span class="string">"$lt"</span>: <span class="number">20</span>&#125;&#125;, &#123;<span class="string">"$inc"</span>: &#123;<span class="string">"age"</span>: <span class="number">1</span>&#125;&#125;, multi=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#&#123;u’n’: 2, u’nModified’: 2, u’ok’: 1, ’updatedExisting’: True&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CRUD: Delete</span></span><br><span class="line">col.remove(&#123;<span class="string">"age"</span>: &#123;<span class="string">"$gt"</span>: <span class="number">10</span>&#125;&#125;)</span><br><span class="line"><span class="comment">#&#123;u’n’: 2, u’ok’: 1&#125;</span></span><br><span class="line">coll.insert_one(&#123;<span class="string">"id"</span>: <span class="number">123</span>, <span class="string">"name"</span>: <span class="string">"zhangsan"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;)</span><br><span class="line">coll.insert_one(&#123;<span class="string">"id"</span>: <span class="number">124</span>, <span class="string">"name"</span>: <span class="string">"lisi"</span>, <span class="string">"age"</span>: <span class="number">17</span>&#125;)</span><br><span class="line">col.remove(&#123;<span class="string">"age"</span>: &#123;<span class="string">"$gt"</span>: <span class="number">10</span>&#125;&#125;, multi=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment">#&#123;u’n’: 1, u’ok’: 1&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h4&gt;&lt;h5 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;开源许可证选择&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="复习" scheme="/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>环境安装及相关配置</title>
    <link href="/2019/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>/2019/2019-07-17-环境安装及相关配置/</id>
    <published>2019-07-17T02:36:00.000Z</published>
    <updated>2020-07-11T05:35:13.121Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生产力脚本"><a href="#生产力脚本" class="headerlink" title="生产力脚本"></a>生产力脚本</h4><a id="more"></a><h5 id="UTF-8-with-BOM-与UTF-8相互转换"><a href="#UTF-8-with-BOM-与UTF-8相互转换" class="headerlink" title="UTF-8(with BOM)与UTF-8相互转换"></a>UTF-8(with BOM)与UTF-8相互转换</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#将UTF-8带BOM编码的文件转化为UTF-8无BOM格式</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$1</span>"</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'用法：./rmbom.sh [folder | file]'</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'将UTF-8编码的文件转化为UTF-8无BOM格式'</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">path=<span class="variable">$1</span></span><br><span class="line">find <span class="variable">$path</span> -<span class="built_in">type</span> f -name <span class="string">"*"</span> -<span class="built_in">print</span> | xargs -i sed -i <span class="string">'1 s/^\xef\xbb\xbf//'</span> &#123;&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Convert finish"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">UTF-8无BOM转UTF-8带BOM：</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#将UTF-8无BOM编码的文件转化为UTF-8带BOM格式 </span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">$1</span>"</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'用法：./addbom.sh [folder | file]'</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'将UTF-8无BOM格式编码的文件转化为UTF-8带BOM'</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">path=<span class="variable">$1</span></span><br><span class="line">find <span class="variable">$path</span> -<span class="built_in">type</span> f -name <span class="string">"*"</span> -<span class="built_in">print</span> | xargs -i sed -i <span class="string">'1 s/^/\xef\xbb\xbf&amp;/'</span> &#123;&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Convert finish"</span></span><br></pre></td></tr></table></figure><h4 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h4><p>最好用conda install，不行就pip install，再不行就到官网自己下载第三方库</p><h5 id="虚拟环境管理"><a href="#虚拟环境管理" class="headerlink" title="虚拟环境管理"></a>虚拟环境管理</h5><p>查看当前存在的虚拟环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line">conda info -e</span><br></pre></td></tr></table></figure><p><strong>创建虚拟环境</strong>，指定环境名称为tensorflow，python版本为python2.7（如果本机内没有安装这个版本的python，就会自动下载安装），创建的虚拟环境路径一般为F:\Anaconda2\envs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow python=3.5</span><br></pre></td></tr></table></figure><p><strong>激活虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate tensorflow</span><br></pre></td></tr></table></figure><p><strong>退出虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate tensorflow</span><br></pre></td></tr></table></figure><p><strong>移除虚拟环境</strong><br>使用命令conda remove -n your_env_name(虚拟环境名称) –all， 即可删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n tensorflow --all</span><br></pre></td></tr></table></figure><p><strong>导入导出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p><strong>安装卸载包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br><span class="line">conda update xxx   #更新xxx文件包</span><br><span class="line">conda uninstall xxx   #卸载xxx文件包</span><br><span class="line">pip uninstall xxx</span><br><span class="line"></span><br><span class="line">pip install &lt;包名&gt; </span><br><span class="line">python -m pip install --upgrade pip</span><br><span class="line"># pip 两种均可</span><br><span class="line">pip install --upgrade &lt;包名&gt; </span><br><span class="line">pip install -U &lt;包名&gt; </span><br><span class="line"></span><br><span class="line">批量更新</span><br><span class="line">conda update --all</span><br><span class="line">pip  install --upgrade xxx</span><br></pre></td></tr></table></figure><h5 id="清理anaconda缓存"><a href="#清理anaconda缓存" class="headerlink" title="清理anaconda缓存"></a>清理anaconda缓存</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda clean -p      <span class="comment"># 删除没有用的包 --packages</span></span><br><span class="line">conda clean -t      <span class="comment"># 删除tar打包 --tarballs</span></span><br><span class="line">conda clean -y -all <span class="comment"># 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包)</span></span><br></pre></td></tr></table></figure><p><strong>在pycharm中使用虚拟环境</strong></p><p>File-&gt;setting-&gt;Project:XXXX-&gt;Project Interperter<br>可以新建一个，也可以选择上面所创建的虚拟环境。</p><h5 id="jupyter-notebook默认工作目录设置"><a href="#jupyter-notebook默认工作目录设置" class="headerlink" title="jupyter notebook默认工作目录设置"></a><strong>jupyter notebook默认工作目录设置</strong></h5><p>1）在Anaconda Prompt终端中输入下面命令，查看你的notebook配置文件在哪里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br><span class="line"></span><br><span class="line"># 会生成文件C:\Users\用户\.jupyter\jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p>2）打开jupyter_notebook_config.py文件通过搜索关键词：c.NotebookApp.notebook_dir，修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.notebook_dir = &apos;E:\\tf_models&apos;     //修改到自定义文件夹</span><br></pre></td></tr></table></figure><p>3）然后重启notebook服务器就可以了</p><h5 id="添加了新的conda环境"><a href="#添加了新的conda环境" class="headerlink" title="添加了新的conda环境"></a>添加了新的conda环境</h5><p>需要在新环境下使用jupyter notebook,解决：</p><p>1.激活conda环境</p><blockquote><p>source activate your_env_name</p></blockquote><p>2.安装ipykernel</p><blockquote><p>conda install ipykernel  </p></blockquote><p>3.将环境写入notebook的kernel中</p><blockquote><p>python -m ipykernel install –user –name your_env_name –display-name your_env_name </p></blockquote><p>4.打开notebook</p><blockquote><p>jupyter notebook  </p></blockquote><h5 id="无法链接到链接库问题"><a href="#无法链接到链接库问题" class="headerlink" title="无法链接到链接库问题"></a>无法链接到链接库问题</h5><p>进入Anaconda\DLLS目录，查看libssl-1_1-x64.dll的日期<img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/20190826092235717.png" alt="在这里插入图片描述"><br>进入Anaconda\Library\bin目录，比较两者日期<br><img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/20190826092143470.png" alt="在这里插入图片描述"></p><p>如果不一致，将DLLS中的替换bin中的<br><img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/20190826092426972.png" alt="在这里插入图片描述"></p><h5 id="pip下载慢"><a href="#pip下载慢" class="headerlink" title="pip下载慢"></a>pip下载慢</h5><p>Linux下，修改 ~/.pip/pip.conf (没有就创建一个，文件夹要加“.”，表示是隐藏文件夹)。</p><p>Windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，xx一般表示用户名，新建文件pip.ini。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h4 id="CUDA安装"><a href="#CUDA安装" class="headerlink" title="CUDA安装"></a>CUDA安装</h4><p>检查电脑是否有合适的GPU<br>在桌面上右击如果能找到NVIDA控制面板，则说明该电脑有GPU。控制面板如下，并通过查看系统信息获取支持的Cuda版本</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113225102250.png" alt="img"></p><p>点击 帮助-&gt;点击 系统信息 弹出下面的对话框，在驱动程序版本那一栏就能看到该计算机使用的驱动版本。</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113225257439.png" alt="img"></p><p>下载Cuda<br>官网：<a href="https://developer.nvidia.com/cuda-10.1-download-archive-update2" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-10.1-download-archive-update2</a></p><p>在<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html" target="_blank" rel="noopener">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a> 这里可以查询到我们应该下载哪个版本</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113225720493.png" alt="img"></p><p>然后，根据实际情况选择合适的版本</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113225542262.png" alt="img"></p><p>下载CuDNN 注意与cuda对应版本<br>官网 <a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a></p><p>安装Cuda<br>1.与安装其他的软件类似</p><p>2.安装结束后将  ~/nvcc/bin(因为版本的不同可能在不同的地方) 目录添加到环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要添加下面两个路径，这就是说为什么要记住你的安装路径了，我使用的是默认的安装路径。</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\lib\x64</span><br></pre></td></tr></table></figure><p>3.在命令行下输入 nvcc -V, 出现下列信息说明Cuda安装成功</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113231019660.png" alt="img"></p><p>4.将CuDNN压缩包解压后，下面的三个文件夹复制到Cuda的安装目录下</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113231317736.png" alt="img"></p><p>5.然后执行Demo, 如果Demo中显示PASS则说明安装成功</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113231553334.png" alt="img"></p><h5 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h5><p>官网 <a href="https://download.pytorch.org/whl/torch_stable.html" target="_blank" rel="noopener">https://download.pytorch.org/whl/torch_stable.html</a> 选择合适的版本</p><p>torch/torchvision 都需要安装</p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113232934378.png" alt="img"></p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113235245900.png" alt="img"></p><p><img src="/../assets/pic/2019-07-17-环境安装及相关配置/20200113235303581.png" alt="img"></p><p>验证Pytorch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch    <span class="comment"># 如正常则静默</span></span><br><span class="line">a = torch.Tensor([<span class="number">1.</span>])    <span class="comment"># 如正常则静默</span></span><br><span class="line">a.cuda()    <span class="comment"># 如正常则返回"tensor([ 1.], device='cuda:0')"</span></span><br><span class="line"><span class="keyword">from</span> torch.backends <span class="keyword">import</span> cudnn <span class="comment"># 如正常则静默</span></span><br><span class="line">cudnn.is_acceptable(a.cuda())    <span class="comment"># 如正常则返回 "True"</span></span><br></pre></td></tr></table></figure><h4 id="常见安装问题"><a href="#常见安装问题" class="headerlink" title="常见安装问题"></a>常见安装问题</h4><h5 id="1-Tensorfolw-中ImportError-DLL-load-failed-找不到指定的程序。"><a href="#1-Tensorfolw-中ImportError-DLL-load-failed-找不到指定的程序。" class="headerlink" title="1 Tensorfolw 中ImportError: DLL load failed: 找不到指定的程序。"></a>1 Tensorfolw 中ImportError: DLL load failed: 找不到指定的程序。</h5><p><strong>解决办法</strong></p><p>没有注意到protobuf已经更新。 在自动安装了tensorflow时， protobuf安装的是最新版本3.6.1， 出现了不兼容的问题。更换为 protobuf 3.6.0即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install protobuf==3.6.0</span><br></pre></td></tr></table></figure><h5 id="2-Pycharm-新版本打开md文件卡死"><a href="#2-Pycharm-新版本打开md文件卡死" class="headerlink" title="2 Pycharm 新版本打开md文件卡死"></a>2 Pycharm 新版本打开md文件卡死</h5><p>原因：自带的Markdowm插件有问题</p><p>解决办法</p><p>Project-settings-Plugins-Installed</p><p>去掉Markdowm support插件的勾选</p><p><img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/823984-20190618193944359-723991337.png" alt="img"></p><p>兼容插件：Markdowm Navigator</p><h5 id="3-pillow-ImportError-cannot-import-name-‘PILLOW-VERSION"><a href="#3-pillow-ImportError-cannot-import-name-‘PILLOW-VERSION" class="headerlink" title="3 pillow ImportError: cannot import name ‘PILLOW_VERSION"></a>3 pillow ImportError: cannot import name ‘PILLOW_VERSION</h5><p>解决方法：</p><p>卸载原来的pillow:　　pip uninstall pillow</p><p>重新安装5.2.0版本的：　　pip install pillow==5.2.0</p><p>原因：在 7.0.0 后的版本就没有 PILLOW_VERSION 这个值了</p><h5 id="4-bert-as-service-安装"><a href="#4-bert-as-service-安装" class="headerlink" title="4 bert_as_service 安装"></a>4 bert_as_service 安装</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">pip install bert-serving-server==<span class="number">1.9</span><span class="number">.1</span></span><br><span class="line">pip install bert-serving-client==<span class="number">1.9</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">启动server</span><br><span class="line">  server的启动非常简单，只需如下命令即可:</span><br><span class="line"></span><br><span class="line">bert-serving-start -model_dir /path/to/your/model -num_worker=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">参数-model_dir用来指定上步解压的模型路径，参数num_worker=<span class="number">2</span>表示启动了两个worker，可以同时处理<span class="number">2</span>个请求，因此如果用一台配置较高的机器单独做为bert的server，可以通过设定该参数提供高并发支持。</span><br><span class="line"></span><br><span class="line"><span class="number">4.1</span> 本地直接调用:</span><br><span class="line">     <span class="keyword">from</span> bert_serving.client <span class="keyword">import</span> BertClient</span><br><span class="line">     bc = BertClient()</span><br><span class="line">     bc.encode([<span class="string">'我 喜欢 你们'</span>, <span class="string">'我 喜 欢 你 们'</span>])</span><br><span class="line"> <span class="number">4.2</span>  远程请求服务</span><br><span class="line">     post服务：</span><br><span class="line">      curl -X POST http://**.*.*<span class="number">.68</span>:<span class="number">8125</span>/encode -H <span class="string">'content-type: application/json'</span> -d <span class="string">'&#123;"id": 123,"texts": ["hello world"], "is_tokenized": false&#125;'</span></span><br><span class="line">       返回结果：</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"id"</span>:<span class="number">123</span>,</span><br><span class="line">                 <span class="string">"result"</span>: [[<span class="number">-0.00980051327496767</span>,<span class="number">0.05821939557790756</span>,<span class="number">-0.06836936622858047</span>,</span><br><span class="line">                                      <span class="number">-0.4723478853702545</span>,<span class="number">0.48761454224586487</span>,<span class="number">-1.4105712175369263</span>, </span><br><span class="line">                                      ...</span><br><span class="line">                                      ...</span><br><span class="line">                                      ,<span class="number">-0.10073700547218323</span>,<span class="number">-0.17246723175048828</span>]],</span><br><span class="line">                <span class="string">"status"</span>:<span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="number">4.3</span>、在一个GPU服务器(**.*.*<span class="number">.68</span>)上部署bert服务，在另外一台cpu服务器(**.*.*<span class="number">.67</span>)调用这个服务：</span><br><span class="line">        step1: 调用前先在(**.*.*<span class="number">.68</span>)上安装client：</span><br><span class="line">              pip install bert-serving-client</span><br><span class="line">        </span><br><span class="line">        step2: 调用服务demo</span><br><span class="line">            <span class="comment"># on another CPU machine</span></span><br><span class="line">            <span class="keyword">from</span> bert_serving.client <span class="keyword">import</span> BertClient</span><br><span class="line">            bc = BertClient(ip=<span class="string">'xx.xx.xx.xx'</span>)  <span class="comment"># ip address of the GPU machine</span></span><br><span class="line">            bc.encode([<span class="string">'First do it'</span>, <span class="string">'then do it right'</span>, <span class="string">'then do it better'</span>])</span><br><span class="line"></span><br><span class="line">代码启动</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf_ver = tf.__version__</span><br><span class="line">print(tf_ver)</span><br><span class="line"><span class="keyword">from</span> bert_serving.server.helper <span class="keyword">import</span> get_args_parser</span><br><span class="line"><span class="keyword">from</span> bert_serving.server <span class="keyword">import</span> BertServer</span><br><span class="line">print(<span class="string">'start bert-service'</span>)</span><br><span class="line">args = get_args_parser().parse_args([<span class="string">'-model_dir'</span>, <span class="string">'D:\CODE\python\chinese_L-12_H-768_A-12\chinese_L-12_H-768_A-12'</span>,</span><br><span class="line">                                     <span class="string">'-port'</span>, <span class="string">'5555'</span>,</span><br><span class="line">                                     <span class="string">'-port_out'</span>, <span class="string">'5556'</span>,</span><br><span class="line">                                     <span class="string">'-max_seq_len'</span>, <span class="string">'NONE'</span>,</span><br><span class="line">                                     <span class="string">'-mask_cls_sep'</span>,</span><br><span class="line">                                     <span class="string">'-gpu'</span>])</span><br><span class="line">server = BertServer(args)</span><br><span class="line">server.start()</span><br></pre></td></tr></table></figure><p>5 安装tensorflow-gpu</p><p><a href="https://blog.csdn.net/j879159541/article/details/93199150" target="_blank" rel="noopener">https://blog.csdn.net/j879159541/article/details/93199150</a></p><p>6 keras 预训练模型的使用方法</p><p>使用预训练模型可以事先下载好模型</p><p><a href="https://github.com/fchollet/deep-learning-models/releases/" target="_blank" rel="noopener">https://github.com/fchollet/deep-learning-models/releases/</a></p><p>下载好的模型要放在本地目录：</p><pre><code>Linux下是放在“~/.keras/models/”中Win下则放在Python的“user/.keras/models/”中</code></pre><p>之后就可以脱机使用</p><h4 id="常见配置问题"><a href="#常见配置问题" class="headerlink" title="常见配置问题"></a>常见配置问题</h4><h5 id="1-pycharm设置Tab为4空格-并显示空格"><a href="#1-pycharm设置Tab为4空格-并显示空格" class="headerlink" title="1 pycharm设置Tab为4空格,并显示空格"></a>1 pycharm设置Tab为4空格,并显示空格</h5><p>设置开始:</p><p>如图:   File -&gt; Settings -&gt; Editor -&gt; Code Style &gt; Python-&gt; Tabs and indents</p><p><img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/20180909152602325.png" alt="img"></p><p>显示出空格</p><p>如图:    File -&gt; Settings -&gt; Editor -&gt; General -&gt; Appearance -&gt; Show whitespaces</p><p><img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/20180909152633430.png" alt="img"></p><h5 id="2-typora-写博客时的配置"><a href="#2-typora-写博客时的配置" class="headerlink" title="2 typora 写博客时的配置"></a>2 typora 写博客时的配置</h5><p><img src="/../assets/pic/2019-07-17-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/image-20200428101724458.png" alt="image-20200428101724458"></p><h5 id="3-Pycharm新建模板默认添加个人信息"><a href="#3-Pycharm新建模板默认添加个人信息" class="headerlink" title="3 Pycharm新建模板默认添加个人信息"></a>3 Pycharm新建模板默认添加个人信息</h5><p>选择File-Settings -&gt;Editor –&gt; File and Code Templates –&gt; Python Script</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author:$&#123;USER&#125;</span></span><br><span class="line"><span class="comment"># datetime:$&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"># software: $&#123;PRODUCT_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">$&#123;PROJECT_NAME&#125; - 当前项目的名称。</span><br><span class="line">$&#123;NAME&#125; - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。</span><br><span class="line">$&#123;USER&#125; - 当前用户的登录名。</span><br><span class="line">$&#123;DATE&#125; - 当前的系统日期。</span><br><span class="line">$&#123;TIME&#125; - 当前系统时间。</span><br><span class="line">$&#123;YEAR&#125; - 今年。</span><br><span class="line">$&#123;MONTH&#125; - 当月。</span><br><span class="line">$&#123;DAY&#125; - 当月的当天。</span><br><span class="line">$&#123;HOUR&#125; - 目前的小时。</span><br><span class="line">$&#123;MINUTE&#125; - 当前分钟。</span><br><span class="line">$&#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。</span><br><span class="line">$&#123;MONTH_NAME_SHORT&#125; - 月份名称的前<span class="number">3</span>个字母。 示例：一月，二月等</span><br><span class="line">$&#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：一月，二月等</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;生产力脚本&quot;&gt;&lt;a href=&quot;#生产力脚本&quot; class=&quot;headerlink&quot; title=&quot;生产力脚本&quot;&gt;&lt;/a&gt;生产力脚本&lt;/h4&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="python" scheme="/tags/python/"/>
    
      <category term="安装" scheme="/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>项目介绍之基于协同过滤电影推荐平台</title>
    <link href="/2019/2019-06-28-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%BD%B1%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    <id>/2019/2019-06-28-项目之电影协同过滤推荐系统/</id>
    <published>2019-06-28T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目背景</strong>：项目是本科毕业设计，时间较紧，做的比较粗糙，需求是设计一个能够个性化推荐的平台。</p><p><strong>项目内容</strong>：了解了协同过滤推荐算法的相关理论，开发一套基于协同过滤的电影推荐平台，能够收集用户的评分数据，挖掘出用户的隐藏需求，预测出用户对未看电影的评分，个性化快速准确推荐给用户喜爱的电影，基本实现类似豆瓣电影的相关功能，如登录注册、评分、影评、推荐和预测等功能。</p><a id="more"></a><p><strong>用到的技术</strong>:  为了方便，只用了普通javaWeb和SpringMVC，Mahout</p><p><strong>Github:</strong> <a href="https://github.com/siyuanzhou/movie_recommender" target="_blank" rel="noopener">https://github.com/siyuanzhou/movie_recommender</a></p><p><img src="/../assets/pic/2019-06-28-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%BD%B1%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/image-20191229215007041.png" alt="image-20191229215007041"></p><p><img src="/../assets/pic/2019-06-28-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%BD%B1%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/image-20191229215409095.png" alt="image-20191229215409095"></p><p><img src="/../assets/pic/2019-06-28-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%BD%B1%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/image-20191229215449862.png" alt="image-20191229215449862"></p><p><img src="/../assets/pic/2019-06-28-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%BD%B1%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/image-20191229215518761.png" alt="image-20191229215518761"></p><p><img src="/../assets/pic/2019-06-28-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E7%94%B5%E5%BD%B1%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/image-20200228175345274.png" alt="image-20200228175345274"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;项目背景&lt;/strong&gt;：项目是本科毕业设计，时间较紧，做的比较粗糙，需求是设计一个能够个性化推荐的平台。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目内容&lt;/strong&gt;：了解了协同过滤推荐算法的相关理论，开发一套基于协同过滤的电影推荐平台，能够收集用户的评分数据，挖掘出用户的隐藏需求，预测出用户对未看电影的评分，个性化快速准确推荐给用户喜爱的电影，基本实现类似豆瓣电影的相关功能，如登录注册、评分、影评、推荐和预测等功能。&lt;/p&gt;
    
    </summary>
    
      <category term="项目简介" scheme="/categories/project/"/>
    
    
      <category term="项目" scheme="/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux相关命令</title>
    <link href="/2018/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>/2018/2018-11-06-Linux相关命令/</id>
    <published>2018-11-06T02:36:00.000Z</published>
    <updated>2020-08-02T08:09:43.538Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h4><h5 id="Linux-内核版本"><a href="#Linux-内核版本" class="headerlink" title="Linux 内核版本"></a>Linux 内核版本</h5><ul><li><strong>内核（kernel）</strong>是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层，通常只有一份</li><li>Linux 内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环<ul><li><strong>稳定版</strong>：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序</li><li><strong>开发版</strong>：由于要试验各种解决方案，所以变化很快</li></ul></li></ul><a id="more"></a><h5 id="Linux-发行版本"><a href="#Linux-发行版本" class="headerlink" title="Linux 发行版本"></a>Linux 发行版本</h5><ul><li><strong>Linux 发行版（也被叫做 GNU/Linux 发行版）</strong>通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">常见的发行版本如下：</span><br><span class="line">Ubuntu</span><br><span class="line">Redhat</span><br><span class="line">Fedora</span><br><span class="line">openSUSE</span><br><span class="line">Linux Mint</span><br><span class="line">Debian</span><br><span class="line">Manjaro</span><br><span class="line">Mageia</span><br><span class="line">CentOS</span><br><span class="line">Arch</span><br></pre></td></tr></table></figure><h5 id="单用户和多用户操作系统"><a href="#单用户和多用户操作系统" class="headerlink" title="单用户和多用户操作系统"></a>单用户和多用户操作系统</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单用户操作系统：指一台计算机在同一时间 只能由一个用户 使用，一个用户独自享用系统的全部硬件和软件资源</span><br><span class="line">Windows XP 之前的版本都是单用户操作系统</span><br><span class="line">多用户操作系统：指一台计算机在同一时间可以由 多个用户 使用，多个用户共同享用系统的全部硬件和软件资源</span><br><span class="line">Unix 和 Linux 的设计初衷就是多用户操作系统</span><br></pre></td></tr></table></figure><h5 id="Linux-系统启动过程"><a href="#Linux-系统启动过程" class="headerlink" title="Linux 系统启动过程"></a>Linux 系统启动过程</h5><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/bg2013081707.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">内核引导</span><br><span class="line">当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</span><br><span class="line">操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</span><br><span class="line"></span><br><span class="line">运行init</span><br><span class="line">init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。</span><br><span class="line">init 程序首先是需要读取配置文件 /etc/inittab。</span><br><span class="line"></span><br><span class="line">运行级别</span><br><span class="line">许多程序需要开机启动。它们在Windows叫做"服务"（service），在Linux就叫做"守护进程"（daemon）。</span><br><span class="line">init进程的一大任务，就是去运行这些开机启动的程序。</span><br><span class="line">Linux允许为不同的场合，分配不同的开机启动程序，这就叫做"运行级别"（runlevel）。</span><br><span class="line">启动时根据"运行级别"，确定要运行哪些程序。</span><br><span class="line">    运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</span><br><span class="line">    运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</span><br><span class="line">    运行级别2：多用户状态(没有NFS)</span><br><span class="line">    运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</span><br><span class="line">    运行级别4：系统未使用，保留</span><br><span class="line">    运行级别5：X11控制台，登陆后进入图形GUI模式</span><br><span class="line">    运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</span><br><span class="line"> </span><br><span class="line">系统初始化</span><br><span class="line">在init的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit　它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</span><br><span class="line">它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</span><br><span class="line"></span><br><span class="line">建立终端</span><br><span class="line">rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</span><br><span class="line">init接下来会打开6个终端，以便用户登录系统。</span><br></pre></td></tr></table></figure><h5 id="Linux-主要目录"><a href="#Linux-主要目录" class="headerlink" title="Linux 主要目录"></a><code>Linux</code> 主要目录</h5><p><code>Ubuntu</code> 没有盘符这个概念，只有一个根目录 <code>/</code>，所有文件都在它下面</p><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/003-Linux%E7%9A%84%E6%A0%91%E5%BD%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003-Linux的树形示意图"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/：根目录，一般根目录下只存放目录，在 linux 下有且只有一个根目录，所有的东西都是从这里开始</span><br><span class="line">当在终端里输入 /home，其实是在告诉电脑，先从 /（根目录）开始，再进入到 home 目录</span><br><span class="line">/bin、/usr/bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等</span><br><span class="line">/boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub</span><br><span class="line">/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt</span><br><span class="line">/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有</span><br><span class="line">    /etc/inittab</span><br><span class="line">    /etc/fstab</span><br><span class="line">    /etc/init.d</span><br><span class="line">    /etc/X11</span><br><span class="line">    /etc/sysconfig</span><br><span class="line">    /etc/xinetd.d</span><br><span class="line">/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下</span><br><span class="line">    ~ 表示当前用户的家目录</span><br><span class="line">    ~edu 表示用户 edu 的家目录</span><br><span class="line">/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</span><br><span class="line">/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下</span><br><span class="line">/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载</span><br><span class="line">/opt：给主机额外安装软件所摆放的目录</span><br><span class="line">/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等</span><br><span class="line">/root：系统管理员root的家目录</span><br><span class="line">/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能"查看"而不能设置和使用</span><br><span class="line">/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下</span><br><span class="line">/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内</span><br><span class="line">/usr：应用程序存放目录</span><br><span class="line">    /usr/bin：存放应用程序</span><br><span class="line">    /usr/share：存放共享数据</span><br><span class="line">    /usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</span><br><span class="line">    /usr/local：存放软件升级包</span><br><span class="line">    /usr/share/doc：系统说明文件存放目录</span><br><span class="line">    /usr/share/man：程序说明文件存放目录</span><br><span class="line">/var：放置系统执行过程中经常变化的文件</span><br><span class="line">    /var/log：随时更改的日志文件</span><br><span class="line">    /var/spool/mail：邮件存放的目录</span><br><span class="line">    /var/run：程序或服务启动后，其 PID 存放在该目录下</span><br></pre></td></tr></table></figure><h5 id="查阅命令帮助信息"><a href="#查阅命令帮助信息" class="headerlink" title="查阅命令帮助信息"></a>查阅命令帮助信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">command --help</span><br><span class="line">man command</span><br><span class="line">man 是 manual 的缩写，是 Linux 提供的一个 手册</span><br><span class="line">    空格键显示手册页的下一屏</span><br><span class="line">    Enter 键一次滚动手册页的一行</span><br><span class="line">    b回滚一屏</span><br><span class="line">    f前滚一屏</span><br><span class="line">    q退出</span><br><span class="line">    /word搜索 word 字符串</span><br></pre></td></tr></table></figure><h5 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command [-options] [parameter]</span><br><span class="line">    command：命令名，相应功能的英文单词或单词的缩写</span><br><span class="line">    [-options]：选项，可用来对命令进行控制，也可以省略</span><br><span class="line">    parameter：传给命令的参数，可以是 零个、一个 或者 多个</span><br><span class="line">    [] 代表可选</span><br></pre></td></tr></table></figure><h5 id="文件常用命令"><a href="#文件常用命令" class="headerlink" title="文件常用命令"></a>文件常用命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux 下文件和目录的特点</span><br><span class="line">    Linux 文件 或者 目录 名称最长可以有 256 个字符</span><br><span class="line">    以 . 开头的文件为隐藏文件，需要用 -a 参数才能显示</span><br><span class="line">    . 代表当前目录</span><br><span class="line">    .. 代表上一级目录</span><br></pre></td></tr></table></figure><ul><li><code>ctrl + shift + =</code> <strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + -</code> <strong>缩小</strong>终端窗口的字体显示</li><li>clear 清屏</li><li>pwd （print wrok directory）显示当前目录地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">ls 查看目录内容</span><br><span class="line">    -a显示指定目录下所有子目录与文件，包括隐藏文件</span><br><span class="line">    -l以列表方式显示文件的详细信息</span><br><span class="line">    -h配合 -l 以人性化的方式显示文件大小</span><br><span class="line">    通配符：</span><br><span class="line">        *代表任意个数个字符</span><br><span class="line">        ?代表任意一个字符，至少 1 个</span><br><span class="line">        []表示可以匹配字符组中的任一一个</span><br><span class="line">        [abc]匹配 a、b、c 中的任意一个</span><br><span class="line">        [a-f]匹配从 a 到 f 范围内的的任意一个字符</span><br><span class="line">        ^a行首，搜寻以 a 开头的行</span><br><span class="line"><span class="meta">ke$</span>行尾，搜寻以 ke 结束的行</span><br><span class="line">        </span><br><span class="line">cd [目录名] (change directory)切换目录</span><br><span class="line">相对路径 在输入路径时，最前面不是 / 或者 ~，表示相对 当前目录 所在的目录位置</span><br><span class="line">绝对路径 在输入路径时，最前面是 / 或者 ~，表示从 根目录/家目录 开始的具体目录位置</span><br><span class="line">cd切换到当前用户的主目录(/home/用户目录)</span><br><span class="line">    cd ~切换到当前用户的主目录(/home/用户目录)</span><br><span class="line">    cd ..切换到上级目录</span><br><span class="line">    cd -可以在最近两次工作目录之间来回切换</span><br><span class="line">    </span><br><span class="line">touch [文件名] 创建文件或修改文件时间</span><br><span class="line">    如果文件 不存在，可以创建一个空白文件</span><br><span class="line">    如果文件 已经存在，可以修改文件的末次修改日期</span><br><span class="line">    </span><br><span class="line">mkdir [文件名] 创建一个新的目录,新建目录的名称 不能与当前目录中 已有的目录或文件 同名</span><br><span class="line">-p可以递归创建目录</span><br><span class="line"></span><br><span class="line">rm [文件名] 删除文件或目录,使用 rm 命令要小心，因为文件删除后不能恢复</span><br><span class="line">    -f强制删除，忽略不存在的文件，无需提示</span><br><span class="line">    -r递归地删除目录下的内容，删除文件夹 时必须加此参数</span><br><span class="line"></span><br><span class="line">tree [目录名] 命令可以以树状图列出文件目录结构</span><br><span class="line">-d只显示目录</span><br><span class="line"></span><br><span class="line">cp 源文件 目标文件 复制文件或者目录</span><br><span class="line">-i覆盖文件前提示</span><br><span class="line">-r若给出源文件是目录，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</span><br><span class="line"></span><br><span class="line">mv 源文件 目标文件移动文件或者目录／文件或者目录重命名</span><br><span class="line">-i覆盖文件前提示</span><br><span class="line"></span><br><span class="line">cat 文件名查看文件内容、创建文件、文件合并、追加文件内容等功能,适合 查看内容较少 的文本文件</span><br><span class="line">-b对非空输出行编号</span><br><span class="line">-n对输出的所有行编号</span><br><span class="line"></span><br><span class="line">more 文件名 分屏显示文件内容，每次只显示一页内容,适合于 查看内容较多的文本文件</span><br><span class="line"></span><br><span class="line">grep 搜索文本 文件名 一种强大的文本搜索工具</span><br><span class="line">    -n显示匹配行及行号</span><br><span class="line">    -v显示不包含匹配文本的所有行（相当于求反）</span><br><span class="line">    -i忽略大小写</span><br><span class="line">    常用的两种模式查找</span><br><span class="line">    ^a行首，搜寻以 a 开头的行</span><br><span class="line">    ke$行尾，搜寻以 ke 结束的行</span><br><span class="line"></span><br><span class="line">echo 文字内容 会在终端中显示参数指定的文字，通常会和 重定向 联合使用</span><br><span class="line"></span><br><span class="line">重定向 &gt; 和 &gt;&gt;   将本应显示在终端上的内容 输出／追加 到指定文件中</span><br><span class="line">    &gt; 表示输出，会覆盖文件原有的内容</span><br><span class="line">    &gt;&gt; 表示追加，会将内容追加到已有文件的末尾</span><br><span class="line">    ll &gt; a.txt</span><br><span class="line"></span><br><span class="line">管道 | Linux 允许将 一个命令的输出 可以通过管道 做为 另一个命令的输入</span><br><span class="line">ls -lh | more</span><br><span class="line"></span><br><span class="line">find 命令功能非常强大，通常用来在 特定的目录下 搜索 符合条件的文件</span><br><span class="line">find [路径] -name "*.py"查找指定路径下扩展名是 .py 的文件，包括子目录</span><br><span class="line">    find -name "*.txt" 搜索当前目录下，所有以 .txt 为扩展名的文件</span><br><span class="line">    </span><br><span class="line">head 查看前几行  head -n 5  文件名</span><br></pre></td></tr></table></figure><h5 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ln -s 被链接的源文件 链接文件建立文件的软链接，用通俗的方式讲类似于 Windows 下的快捷方式</span><br><span class="line">    没有 -s 选项建立的是一个 硬链接文件</span><br><span class="line">    两个文件占用相同大小的硬盘空间，工作中几乎不会建立文件的硬链接</span><br><span class="line">    源文件要使用绝对路径，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</span><br><span class="line"></span><br><span class="line">在 Linux 中，文件名 和 文件的数据 是分开存储的</span><br><span class="line">在 Linux 中，只有文件的 硬链接数 == 0 才会被删除</span><br><span class="line">使用 ls -l 可以查看一个文件的硬链接的数量</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/001_%E6%96%87%E4%BB%B6%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_文件软硬链接示意图"></p><h5 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h5><p><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong>，<code>gzip</code>和 <code>bzip2</code> 是压缩解压缩工具</p><p><strong>打包 ／ 解包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 打包文件</span><br><span class="line">tar -cvf 打包文件.tar 被打包的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 解包文件</span><br><span class="line">tar -xvf 打包文件.tar</span><br><span class="line">    c生成档案文件，创建打包文件</span><br><span class="line">    x解开档案文件</span><br><span class="line">    v列出归档解档的详细过程，显示进度</span><br><span class="line">    f指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</span><br><span class="line">    注意：f 选项必须放在最后，其他选项顺序可以随意</span><br></pre></td></tr></table></figure><p><strong>压缩／解压缩</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tar 与 gzip 命令结合可以使用实现文件 打包和压缩</span><br><span class="line">    tar 只负责打包文件，但不压缩</span><br><span class="line">    用 gzip 压缩 tar 打包后的文件，其扩展名一般用 xxx.tar.gz</span><br><span class="line">在 Linux 中，最常见的压缩文件格式就是 xxx.tar.gz</span><br><span class="line">在 tar 命令中有一个选项 -z 可以调用 gzip，从而可以方便的实现压缩和解压缩的功能</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 压缩文件</span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</span><br><span class="line"><span class="meta">#</span> 解压缩文件</span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"><span class="meta">#</span> 解压缩到指定路径</span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br><span class="line">-C解压缩到指定目录，注意：要解压缩的目录必须存在</span><br><span class="line"></span><br><span class="line">在 tar 命令中有一个选项 -j 可以调用 bzip2，从而可以方便的实现压缩和解压缩的功能</span><br><span class="line"><span class="meta">#</span> 压缩文件</span><br><span class="line">tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...</span><br><span class="line"><span class="meta">#</span> 解压缩文件</span><br><span class="line">tar -jxvf 打包文件.tar.bz2</span><br></pre></td></tr></table></figure><h5 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt 是 Advanced Packaging Tool，是 Linux 下的一款安装包管理工具</span><br><span class="line">可以在终端中方便的 安装／卸载／更新软件包</span><br><span class="line"><span class="meta">#</span> 1. 安装软件</span><br><span class="line"><span class="meta">$</span> sudo apt install 软件包</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2. 卸载软件</span><br><span class="line"><span class="meta">$</span> sudo apt remove 软件名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3. 更新已安装的包</span><br><span class="line"><span class="meta">$</span> sudo apt upgrade</span><br></pre></td></tr></table></figure><h5 id="远程管理常用命令"><a href="#远程管理常用命令" class="headerlink" title="远程管理常用命令"></a>远程管理常用命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 CTRL + C</span><br><span class="line"></span><br><span class="line">shutdown 选项 时间关机／重新启动</span><br><span class="line">-r重新启动</span><br><span class="line">不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。</span><br><span class="line">不指定选项和参数，默认表示 1 分钟之后 关闭电脑</span><br><span class="line"><span class="meta">#</span> 重新启动操作系统，其中 now 表示现在</span><br><span class="line">    $ shutdown -r now</span><br><span class="line">    # 立刻关机，其中 now 表示现在</span><br><span class="line">    $ shutdown now</span><br><span class="line">    # 系统在今天的 20:25 会关机</span><br><span class="line">    $ shutdown 20:25</span><br><span class="line">    # 系统再过十分钟后自动关机</span><br><span class="line">    $ shutdown +10</span><br><span class="line">    # 取消之前指定的关机计划</span><br><span class="line">    $ shutdown -c</span><br><span class="line"></span><br><span class="line">ifconfig查看/配置计算机当前的网卡配置信息</span><br><span class="line"><span class="meta">#</span> 查看网卡对应的 IP 地址</span><br><span class="line"><span class="meta">$</span> ifconfig | grep inet</span><br><span class="line"></span><br><span class="line">ping ip地址检测到目标 ip地址 的连接是否正常,数值越大，速度越慢</span><br><span class="line"> ssh [-p port] user@remote  远程登录,eg：ssh -p 22 zsy@172.20.13.124</span><br><span class="line">ssh（Secure Shell）传输是压缩加密的</span><br><span class="line">    user 是在远程机器上的用户名，如果不指定的话默认为当前用户</span><br><span class="line">    remote 是远程机器的地址，可以是 IP／域名，或者是 后面会提到的别名</span><br><span class="line">    port 是 SSH Server 监听的端口，如果不指定，就为默认值 22</span><br><span class="line">        SSH 服务器22</span><br><span class="line">        Web 服务器80</span><br><span class="line">        HTTPS443</span><br><span class="line">        FTP 服务器21</span><br><span class="line">配置别名</span><br><span class="line">    每次都输入 ssh -p port user@remote，时间久了会觉得很麻烦</span><br><span class="line">    特别是当 user, remote 和 port 都得输入，而且还不好记忆</span><br><span class="line">而 配置别名 可以让我们进一步偷懒，譬如用：ssh mac 来替代上面这么一长串</span><br><span class="line">那么就在 ~/.ssh/config 里面追加以下内容：</span><br><span class="line">        Host mac</span><br><span class="line">            HostName ip地址</span><br><span class="line">            User itheima</span><br><span class="line">            Port 22</span><br><span class="line">保存之后，即可用 ssh mac 实现远程登录了，scp 同样可以使用 </span><br><span class="line">    </span><br><span class="line">scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径（secure copy）远程复制文件</span><br><span class="line">    -r若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</span><br><span class="line">    -P若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</span><br><span class="line"><span class="meta">#</span> 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span><br><span class="line">        # 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span><br><span class="line">        scp -P port 01.py user@remote:Desktop/01.py</span><br><span class="line">        # 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span><br><span class="line">        scp -P port user@remote:Desktop/01.py 01.py</span><br><span class="line">        # 加上 -r 选项可以传送文件夹</span><br><span class="line">        # 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktop</span><br><span class="line">        scp -r demo user@remote:Desktop</span><br><span class="line">        # 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span><br><span class="line">        scp -r user@remote:Desktop demo</span><br></pre></td></tr></table></figure><h5 id="ssh免密码登录"><a href="#ssh免密码登录" class="headerlink" title="ssh免密码登录"></a>ssh免密码登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置公钥</span><br><span class="line">本地执行 ssh-keygen 即可生成 SSH 钥匙，一路回车即可</span><br><span class="line">上传公钥到服务器</span><br><span class="line">执行 ssh-copy-id -p port user@remote，可以让远程服务器记住我们的公钥</span><br><span class="line"> ssh -p 26749 root@newvalue.site 登录</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/003_SSH%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_SSH 免密码示意图"></p><p><strong>配置别名</strong></p><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p><p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host mac</span><br><span class="line">    HostName ip地址</span><br><span class="line">    User itheima</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><p>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</p><h5 id="用户权限相关命令"><a href="#用户权限相关命令" class="headerlink" title="用户权限相关命令"></a>用户权限相关命令</h5><ul><li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li><li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li><li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li><li>组 为了方便用户管理，提出了组的概念,可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li><li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li><li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li><li>对 <strong>文件／目录</strong> 的权限包括：</li></ul><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/002_%E6%9D%83%E9%99%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="002_权限示意图"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su 是 substitute user 的缩写，表示 使用另一个用户的身份</span><br><span class="line">sudo 命令用来以其他身份来执行命令，预设的身份为 root</span><br><span class="line">用户使用 sudo 时，必须先输入密码，之后有 5 分钟的有效期限，超过期限则必须重新输入密码</span><br><span class="line">若其未经授权的用户企图使用 sudo，则会发出警告邮件给管理员</span><br></pre></td></tr></table></figure><h5 id="chmod-chown-chgrp"><a href="#chmod-chown-chgrp" class="headerlink" title="chmod|chown|chgrp"></a>chmod|chown|chgrp</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">chown修改拥有者</span><br><span class="line">chgrp修改组</span><br><span class="line">chmod修改权限</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改文件|目录的拥有者</span><br><span class="line">chown 用户名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 递归修改文件|目录的组</span><br><span class="line">chgrp -R 组名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 递归修改文件权限</span><br><span class="line">chmod -R 755 文件名|目录名</span><br><span class="line"></span><br><span class="line">chmod +/-rwx 文件名|目录名 修改 用户／组 对 文件／目录 的权限</span><br><span class="line">目录如果没有x权限，无法创建文件，没有r权限，无法ll</span><br><span class="line"></span><br><span class="line">chmod 在设置权限时，可以简单地使用三个数字分别对应 拥有者 ／ 组 和 其他 用户的权限</span><br><span class="line">r:4 w:2 x:1</span><br></pre></td></tr></table></figure><h5 id="组命令"><a href="#组命令" class="headerlink" title="组命令"></a>组命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组信息保存在 /etc/group 文件中</span><br><span class="line">/etc 目录是专门用来保存 系统配置信息 的目录</span><br><span class="line">实际应用中，可以预先针对组设置好权限，然后 将不同的用户添加到对应的组中，从而不用依次为每一个用户设置权限</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">01</td><td style="text-align:left">groupadd 组名</td><td style="text-align:left">添加组</td></tr><tr><td style="text-align:left">02</td><td style="text-align:left">groupdel 组名</td><td style="text-align:left">删除组</td></tr><tr><td style="text-align:left">03</td><td style="text-align:left">cat /etc/group</td><td style="text-align:left">确认组信息</td></tr><tr><td style="text-align:left">04</td><td style="text-align:left">chgrp -R 组名 文件/目录名</td><td style="text-align:left">递归修改文件/目录的所属组</td></tr></tbody></table><h5 id="创建删除切换用户"><a href="#创建删除切换用户" class="headerlink" title="创建删除切换用户"></a>创建删除切换用户</h5><ul><li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li><li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li><li>用户信息保存在 <code>/etc/passwd</code> 文件中</li></ul><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">命令</th><th style="text-align:left">作用</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">01</td><td style="text-align:left">useradd -m -g 组 新建用户名</td><td style="text-align:left">添加新用户</td><td style="text-align:left">-m 自动建立用户家目录-g 指定用户所在的组，否则会建立一个和同名的组</td></tr><tr><td style="text-align:left">02</td><td style="text-align:left">passwd 用户名</td><td style="text-align:left">设置用户密码</td><td style="text-align:left">如果是普通用户，直接用 passwd 可以修改自己的账户密码</td></tr><tr><td style="text-align:left">03</td><td style="text-align:left">userdel -r 用户名</td><td style="text-align:left">删除用户</td><td style="text-align:left">-r 选项会自动删除用户家目录</td></tr><tr><td style="text-align:left">04</td><td style="text-align:left">cat /etc/passwd \</td><td style="text-align:left">grep 用户名</td><td style="text-align:left">确认用户信息</td><td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id [用户名] 查看用户 UID 和 GID 信息</span><br><span class="line">who 查看当前所有登录的用户列表</span><br><span class="line">whoami 查看当前登录用户的账户名</span><br></pre></td></tr></table></figure><p><strong>切换用户</strong></p><ul><li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li><li><code>exit</code> 示意图如下：</li></ul><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/003_su%E5%92%8Cexit%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_su和exit示意图"></p><h5 id="passwd-文件"><a href="#passwd-文件" class="headerlink" title="passwd 文件"></a>passwd 文件</h5><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号</li><li>家目录</li><li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li></ol><h5 id="usermod-设置用户的组"><a href="#usermod-设置用户的组" class="headerlink" title="usermod 设置用户的组"></a>usermod 设置用户的组</h5><p><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></p><p><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提示：设置了用户的附加组之后，需要重新登录才能生效！</span></span><br><span class="line"><span class="comment"># 修改用户的主组（passwd 中的 GID）</span></span><br><span class="line">usermod -g 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户的附加组</span></span><br><span class="line">usermod -G 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户登录 Shell（默认dash),使其更美观，有颜色</span></span><br><span class="line">usermod -s /bin/bash 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认使用useradd添加的用户是没有权限使用sudo来以root身份执行命令的，以下命令，将用户添加到sudo附加组</span></span><br><span class="line">usermod -G sudo 用户名</span><br></pre></td></tr></table></figure><h5 id="which-查看执行命令所在位置"><a href="#which-查看执行命令所在位置" class="headerlink" title="which 查看执行命令所在位置"></a>which 查看执行命令所在位置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ls</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /bin/ls</span></span><br><span class="line"><span class="built_in">which</span> useradd</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /usr/sbin/useradd</span></span><br></pre></td></tr></table></figure><h5 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h5><ul><li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li><li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li><li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li><li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li><li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li></ul><blockquote><p>cd 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 which 无法找到cd 命令的位置</p></blockquote><h5 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">日期和时间</span><br><span class="line">date查看系统时间</span><br><span class="line">    calcalendar 查看日历，-y 选项可以查看一年的日历</span><br><span class="line"></span><br><span class="line">磁盘信息</span><br><span class="line">df -hdisk free 显示磁盘剩余空间</span><br><span class="line">du -h [目录名]disk usage 显示目录下的文件大小</span><br><span class="line">-h 以人性化的方式显示文件大小</span><br><span class="line"></span><br><span class="line">进程信息</span><br><span class="line">ps auxprocess status 查看进程的详细状况</span><br><span class="line">ps 默认只会显示当前用户通过终端启动的应用程序</span><br><span class="line">a显示终端上的所有进程，包括其他用户的进程</span><br><span class="line">        u显示进程的详细状态</span><br><span class="line">        x显示没有控制终端的进程</span><br><span class="line">top动态显示运行中的进程并且排序</span><br><span class="line">kill [-9] 进程代号终止指定代号的进程，-9 表示强行终止</span><br></pre></td></tr></table></figure><h5 id="查看网络-端口-状况-（net-status）"><a href="#查看网络-端口-状况-（net-status）" class="headerlink" title="查看网络(端口)状况 （net status）"></a>查看网络(端口)状况 （net status）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -apn 查看所有端口</span><br><span class="line">    an，按一定顺序排列输出</span><br><span class="line">    p，表示显示哪个进程在调用</span><br></pre></td></tr></table></figure><h5 id="uname-查看系统"><a href="#uname-查看系统" class="headerlink" title="uname 查看系统"></a>uname 查看系统</h5><p>-m 查看系统是几位操作系统<br>-r 查看系统的内核版本<br>-a 查看详细的系统内核版本和系统的操作系统</p><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">service iptables status 查看状态</span><br><span class="line">开启：service iptables start 关机后在开启后防火墙还会开启</span><br><span class="line">关闭：service iptables stop</span><br><span class="line">永久关闭防火墙</span><br><span class="line">开启：chkconfig iptables on </span><br><span class="line">关闭：chkconfig iptables off</span><br></pre></td></tr></table></figure><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。</p><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/vim-vi-workmodel.png" alt="img"></p><p><img src="/../assets/pic/2018-11-06-Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/vi-vim-cheat-sheet-sch.gif" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">hjkl左下上右</span><br><span class="line">移动</span><br><span class="line">• gg: goto first line</span><br><span class="line">• G: goto last line</span><br><span class="line">• 0: goto first column</span><br><span class="line">• ˆ: goto first non-blank column</span><br><span class="line">• $: goto last column</span><br><span class="line">• w: next word</span><br><span class="line">• W: next Word</span><br><span class="line">• e: end of word</span><br><span class="line">• E: end of Word</span><br><span class="line">• fa: find a in current line</span><br><span class="line">• Fa: find a in current line backward</span><br><span class="line">• ta: find till before a</span><br><span class="line">• Ta: find till before a backward</span><br><span class="line">单独使用命令</span><br><span class="line">• i: insert</span><br><span class="line">• I: insert at front</span><br><span class="line">• a: append</span><br><span class="line">• A: append after end</span><br><span class="line">• o: append new line</span><br><span class="line">• O: insert new line</span><br><span class="line">命令</span><br><span class="line">• c: Change</span><br><span class="line">• d: Delete</span><br><span class="line">• y: Yank</span><br><span class="line">• gU: Upper case</span><br><span class="line">• gu: Lower case ...</span><br><span class="line">文本对象</span><br><span class="line">• aw: a word</span><br><span class="line">• iw: inner word</span><br><span class="line">• ab: a bracket</span><br><span class="line">• ib: inner bracket</span><br><span class="line">• at: a tag</span><br><span class="line">命令 +移动/文本对象</span><br><span class="line">• dj: delete current and the next lines</span><br><span class="line">• y0: copy to the line head</span><br><span class="line">• ciw: change inner word</span><br><span class="line">• dab: delete a bracket</span><br><span class="line">• gUit: change inner tag to lower case</span><br><span class="line">相对高阶功能</span><br><span class="line">• :%s/re.pattern/replace/g 全局替换</span><br><span class="line">• :g/re.pattern/d 删除匹配行</span><br><span class="line">• :h! E478 Don’t panic</span><br><span class="line">• :h 42</span><br></pre></td></tr></table></figure><h4 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</span><br><span class="line">Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。</span><br><span class="line">Bash 也是大多数Linux 系统默认的 Shell</span><br><span class="line"><span class="meta">#</span><span class="bash">! 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh，它同样也可以改为 <span class="comment">#!/bin/bash。</span></span></span><br><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">定义变量时，变量名不加美元符号（$，PHP语言中变量需要）</span><br><span class="line">使用一个定义过的变量，只要在变量名前面加美元符号即可</span><br><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br><span class="line">    myUrl=<span class="string">"http://www.google.com"</span></span><br><span class="line">    <span class="built_in">readonly</span> myUrl<span class="comment">#只读变量</span></span><br><span class="line">    <span class="built_in">unset</span> myUrl <span class="comment">#unset 命令可以删除变量</span></span><br></pre></td></tr></table></figure><h5 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</span><br><span class="line">双引号的优点：双引号里可以有变量；双引号里可以出现转义字符</span><br><span class="line">your_name=<span class="string">"runoob"</span></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line">greeting_1=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span>  <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">'hello, '</span><span class="variable">$your_name</span><span class="string">' !'</span></span><br><span class="line">greeting_3=<span class="string">'hello, $&#123;your_name&#125; !'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br><span class="line">输出结果为：</span><br><span class="line">hello, runoob ! hello, runoob !</span><br><span class="line">hello, runoob ! hello, <span class="variable">$&#123;your_name&#125;</span> !</span><br><span class="line"></span><br><span class="line">获取字符串长度</span><br><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br><span class="line"></span><br><span class="line">提取子字符串</span><br><span class="line">以下实例从字符串第 2 个字符开始截取 4 个字符：</span><br><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br><span class="line"></span><br><span class="line">查找子字符串</span><br><span class="line">查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：</span><br><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> io`  <span class="comment"># 输出 4</span></span><br><span class="line">注意： 以上脚本中 ` 是反引号，而不是单引号 <span class="string">'，不要看错了哦。</span></span><br></pre></td></tr></table></figure><h5 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</span><br><span class="line">expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</span><br><span class="line">表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2</span><br><span class="line">乘号(*)前边必须加反斜杠(\)才能实现乘法运算；</span><br><span class="line">在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 <span class="string">"*"</span> 不需要转义符号 <span class="string">"\" </span></span><br><span class="line"><span class="string">例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ')：</span></span><br><span class="line"><span class="string">    #!/bin/bash</span></span><br><span class="line"><span class="string">    val=`expr 2 + 2`</span></span><br><span class="line"><span class="string">    echo "</span>两数之和为 : <span class="variable">$val</span><span class="string">"</span></span><br><span class="line"><span class="string">    val=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>`</span></span><br><span class="line"><span class="string">echo "</span>a * b : <span class="variable">$val</span><span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">!非运算，表达式为 true 则返回 false，否则返回 true。[ ! false ] 返回 true。</span></span><br><span class="line"><span class="string">-o或运算，有一个表达式为 true 则返回 true。[ <span class="variable">$a</span> -lt 20 -o <span class="variable">$b</span> -gt 100 ] 返回 true。</span></span><br><span class="line"><span class="string">-a与运算，两个表达式都为 true 才返回 true。[ <span class="variable">$a</span> -lt 20 -a <span class="variable">$b</span> -gt 100 ] 返回 false。</span></span><br><span class="line"><span class="string">&amp;&amp;逻辑的 AND[[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]] 返回 false</span></span><br><span class="line"><span class="string">||逻辑的 OR[[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]] 返回 true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">字符串运算符</span></span><br><span class="line"><span class="string">下表列出了常用的字符串运算符，假定变量 a 为 "</span>abc<span class="string">"，变量 b 为 "</span>efg<span class="string">"：</span></span><br><span class="line"><span class="string">=检测两个字符串是否相等，相等返回 true。[ <span class="variable">$a</span> = <span class="variable">$b</span> ] 返回 false。</span></span><br><span class="line"><span class="string">!=检测两个字符串是否相等，不相等返回 true。[ <span class="variable">$a</span> != <span class="variable">$b</span> ] 返回 true。</span></span><br><span class="line"><span class="string">-z检测字符串长度是否为0，为0返回 true。[ -z <span class="variable">$a</span> ] 返回 false。</span></span><br><span class="line"><span class="string">-n检测字符串长度是否不为 0，不为 0 返回 true。[ -n "</span><span class="variable">$a</span><span class="string">" ] 返回 true。</span></span><br><span class="line"><span class="string">$检测字符串是否为空，不为空返回 true。[ <span class="variable">$a</span> ] 返回 true。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Shell test 命令</span></span><br><span class="line"><span class="string">Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printf </span></span><br><span class="line"><span class="string">    # format-string为双引号     </span></span><br><span class="line"><span class="string">    printf "</span>%d %s\n<span class="string">" 1 "</span>abc<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 单引号与双引号效果一样   </span></span><br><span class="line"><span class="string">    printf '%d %s\n' 1 "</span>abc<span class="string">" </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 没有引号也可以输出 </span></span><br><span class="line"><span class="string">    printf %s abcdef</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用 </span></span><br><span class="line"><span class="string">    printf %s abc def</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    printf "</span>%s\n<span class="string">" abc def</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    printf "</span>%s %s %s\n<span class="string">" a b c d e f g h i j</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></span><br><span class="line"><span class="string">    printf "</span>%s and %d \n<span class="string">" </span></span><br><span class="line"><span class="string">    执行脚本，输出结果如下所示：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1 abc</span></span><br><span class="line"><span class="string">    1 abc</span></span><br><span class="line"><span class="string">    abcdefabcdefabc</span></span><br><span class="line"><span class="string">    def</span></span><br><span class="line"><span class="string">    a b c</span></span><br><span class="line"><span class="string">    d e f</span></span><br><span class="line"><span class="string">    g h i</span></span><br><span class="line"><span class="string">    j  </span></span><br><span class="line"><span class="string">     and 0</span></span><br></pre></td></tr></table></figure><h5 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</span><br><span class="line">定义数组</span><br><span class="line">在 Shell 中，用括号来表示数组，数组元素用<span class="string">"空格"</span>符号分割开。</span><br><span class="line">定义数组的一般形式为：数组名=(值1 值2 ... 值n)</span><br><span class="line">    还可以单独定义数组的各个分量：</span><br><span class="line">    array_name[0]=value0</span><br><span class="line">    array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br><span class="line"></span><br><span class="line">读取数组</span><br><span class="line">读取数组元素值的一般格式是： <span class="variable">$&#123;数组名[下标]&#125;</span></span><br><span class="line">    valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br><span class="line">    使用 @ 符号可以获取数组中的所有元素，例如：</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure><h5 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a>Shell 注释</h5><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="comment"># author：菜鸟教程</span></span><br><span class="line"><span class="comment"># site：www.runoob.com</span></span><br><span class="line"><span class="comment"># slogan：学的不仅是技术，更是梦想！</span></span><br><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line">如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</span><br><span class="line">每一行加个<span class="comment">#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</span></span><br><span class="line">多行注释</span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br><span class="line">EOF 也可以使用其他符号:</span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">'</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h5 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<span class="variable">$n</span>。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Shell 传递参数实例！"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"执行的文件名：<span class="variable">$0</span>"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第一个参数为：<span class="variable">$1</span>"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第二个参数为：<span class="variable">$2</span>"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第三个参数为：<span class="variable">$3</span>"</span>;</span><br><span class="line">    $ chmod +x test.sh </span><br><span class="line">    $ ./test.sh 1 2 3</span><br><span class="line">    Shell 传递参数实例！</span><br><span class="line">    执行的文件名：./test.sh</span><br><span class="line">    第一个参数为：1</span><br><span class="line">    第二个参数为：2</span><br><span class="line">    第三个参数为：3</span><br><span class="line">    <span class="variable">$#</span>传递到脚本的参数个数</span><br><span class="line">    $*以一个单字符串显示所有向脚本传递的参数。</span><br><span class="line">    如<span class="string">"$*"</span>用「<span class="string">"」括起来的情况、以"</span><span class="variable">$1</span> <span class="variable">$2</span> … <span class="variable">$n</span><span class="string">"的形式输出所有参数。</span></span><br><span class="line"><span class="string">    $$脚本运行的当前进程ID号</span></span><br><span class="line"><span class="string">    $!后台运行的最后一个进程的ID号</span></span><br><span class="line"><span class="string">    <span class="variable">$@</span>与$*相同，但是使用时加引号，并在引号中返回每个参数。</span></span><br><span class="line"><span class="string">    如"</span><span class="variable">$@</span><span class="string">"用「"</span>」括起来的情况、以<span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span> … <span class="string">"<span class="variable">$n</span>"</span> 的形式输出所有参数。</span><br><span class="line">    $-显示Shell使用的当前选项，与<span class="built_in">set</span>命令功能相同。</span><br><span class="line">    $?显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</span><br></pre></td></tr></table></figure><h5 id="shell-流程控制"><a href="#shell-流程控制" class="headerlink" title="shell 流程控制"></a>shell 流程控制</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#条件</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 等于 b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 大于 b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 小于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"没有符合的条件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value is: <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#for循环2</span></span><br><span class="line"><span class="keyword">for</span>((i=1;i&lt;=5;i++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这是第 <span class="variable">$i</span> 次调用"</span>;</span><br><span class="line"><span class="keyword">done</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#while循环</span></span><br><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">"int++"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#case</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'输入 1 到 4 之间的数字:'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'你输入的数字为:'</span></span><br><span class="line"><span class="built_in">read</span> aNum</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">'你选择了 1'</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">'你选择了 2'</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">'你选择了 3'</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">'你选择了 4'</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">'你没有输入 1 到 4 之间的数字'</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h5 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">    action;</span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br><span class="line">1、可以带<span class="keyword">function</span> fun() 定义，也可以直接fun() 定义,不带任何参数。</span><br><span class="line">2、参数返回，可以显示加：<span class="built_in">return</span> 返回，如果不加，将以最后一条命令运行结果，作为返回值。 <span class="built_in">return</span>后跟数值n(0-255)</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这个函数会对输入的两个数字进行相加运算..."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第一个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第二个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !"</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="comment">#函数返回值在调用该函数后通过 $? 来获得。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"输入的两个数字之和为 $? !"</span></span><br></pre></td></tr></table></figure><h5 id="shell-重定向"><a href="#shell-重定向" class="headerlink" title="shell 重定向"></a>shell 重定向</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</span><br><span class="line">标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</span><br><span class="line">标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</span><br><span class="line">标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息</span><br><span class="line">    <span class="built_in">command</span> &gt; file将输出重定向到 file。</span><br><span class="line">    <span class="built_in">command</span> &lt; file将输入重定向到 file。</span><br><span class="line">    <span class="built_in">command</span> &gt;&gt; file将输出以追加的方式重定向到 file。</span><br><span class="line">    n &gt; file将文件描述符为 n 的文件重定向到 file。</span><br><span class="line">    n &gt;&gt; file将文件描述符为 n 的文件以追加的方式重定向到 file。</span><br><span class="line">    n &gt;&amp; m将输出文件 m 和 n 合并。</span><br><span class="line">    n &lt;&amp; m将输入文件 m 和 n 合并。</span><br><span class="line">    &lt;&lt; tag将开始标记 tag 和结束标记 tag 之间的内容作为输入。</span><br><span class="line">    如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</span><br><span class="line">$ <span class="built_in">command</span> &gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h5 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</span><br><span class="line"></span><br><span class="line">Shell 文件包含的语法格式如下：</span><br><span class="line">. filename   <span class="comment"># 注意点号(.)和文件名中间有一空格</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">source</span> filename</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#使用 . 号来引用test1.sh 文件</span></span><br><span class="line">. ./test1.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用以下包含文件代码</span></span><br><span class="line"><span class="comment"># source ./test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"菜鸟教程官网地址：<span class="variable">$url</span>"</span></span><br></pre></td></tr></table></figure><h4 id="SS搭建整理"><a href="#SS搭建整理" class="headerlink" title="SS搭建整理"></a>SS搭建整理</h4><h5 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget — no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>V2ray</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubuntu/debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -y</span><br><span class="line">centos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y</span><br><span class="line"></span><br><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><h5 id="1-依次输入如下命令（输入-后的命令不输入-）："><a href="#1-依次输入如下命令（输入-后的命令不输入-）：" class="headerlink" title="1.依次输入如下命令（输入#后的命令不输入#）："></a>1.依次输入如下命令（输入#后的命令不输入#）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update                              // 更新源中包列表</span><br><span class="line">apt-get install python-pip                  // 安装pip</span><br><span class="line">pip install --upgrade pip                   // 更新pip</span><br><span class="line">apt-get install git                         // 安装git</span><br><span class="line">pip install git+https://github.com/shadowsocks/shadowsocks.git@master   // 安装SS</span><br></pre></td></tr></table></figure><!--more--><h5 id="2-安装chacha20加密："><a href="#2-安装chacha20加密：" class="headerlink" title="2.安装chacha20加密："></a>2.安装chacha20加密：</h5><p>虽然shadowsocks的作者推荐使用<code>aes-256-cfb</code>的加密算法，但是这个算法对手机或者openwrt路由器的压力还是不小的，于是后来Google推出的<code>chacha20</code>算法因为其安全性和惊人的速度被现在更多人使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential</span><br><span class="line">wget https://github.com/jedisct1/libsodium/releases/download/1.0.8/libsodium-1.0.8.tar.gz</span><br><span class="line">tar xf libsodium-1.0.8.tar.gz &amp;&amp; cd libsodium-1.0.8</span><br><span class="line">./configure &amp;&amp; make -j2</span><br><span class="line">make install</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><h5 id="服务器端配置（参照：Configuration-via-Config-File）"><a href="#服务器端配置（参照：Configuration-via-Config-File）" class="headerlink" title="服务器端配置（参照：Configuration via Config File）"></a>服务器端配置（参照：Configuration via Config File）</h5><p>再创建文件shadowsocks.json并写入内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>写入以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"104.248.213.60"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>: &#123;</span><br><span class="line"></span><br><span class="line">                               <span class="attr">"443"</span>: <span class="string">"159357a"</span>, </span><br><span class="line">                               <span class="attr">"8388"</span>: <span class="string">"159357a"</span></span><br><span class="line">                               &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改加密方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;method&quot;:&quot;chacha20&quot;</span><br></pre></td></tr></table></figure><p>最后启动shadowsocks：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop //关闭</span><br></pre></td></tr></table></figure><h5 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h5><blockquote><p>bbr是google在4.9版本之后加入的tcp阻塞算法，可以很好的为ss加速。</p></blockquote><blockquote><p>4.9以下内核版本可<a href="https://heimo-he.github.io/youknow/2018/03/30/shadowsocks-serverSpeeder/" target="_blank" rel="noopener"> » 安装锐速</a>为ss加速。</p></blockquote><h5 id="检查内核"><a href="#检查内核" class="headerlink" title="检查内核"></a>检查内核</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.9.0-4-amd64</span><br></pre></td></tr></table></figure><p>检查内核版本大于4.9即可</p><h5 id="修改系统变量"><a href="#修改系统变量" class="headerlink" title="修改系统变量"></a>修改系统变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 65535</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure><h5 id="执行修改"><a href="#执行修改" class="headerlink" title="执行修改"></a>执行修改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure><h5 id="检查是否开启"><a href="#检查是否开启" class="headerlink" title="检查是否开启"></a>检查是否开启</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp_bbr                20480  0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Linux基础&quot;&gt;&lt;a href=&quot;#Linux基础&quot; class=&quot;headerlink&quot; title=&quot;Linux基础&quot;&gt;&lt;/a&gt;Linux基础&lt;/h4&gt;&lt;h5 id=&quot;Linux-内核版本&quot;&gt;&lt;a href=&quot;#Linux-内核版本&quot; class=&quot;headerlink&quot; title=&quot;Linux 内核版本&quot;&gt;&lt;/a&gt;Linux 内核版本&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内核（kernel）&lt;/strong&gt;是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层，通常只有一份&lt;/li&gt;
&lt;li&gt;Linux 内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定版&lt;/strong&gt;：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发版&lt;/strong&gt;：由于要试验各种解决方案，所以变化很快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="Linux" scheme="/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>摄影知识学习</title>
    <link href="/2018/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
    <id>/2018/l_2018-10-01-摄影知识学习/</id>
    <published>2018-10-01T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="焦距和镜头"><a href="#焦距和镜头" class="headerlink" title="焦距和镜头"></a>焦距和镜头</h4><p>成像中心到焦平面的距离</p><a id="more"></a><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565576243145.png" alt="1565576170601"></p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565576170601.png" alt="1565576170601"></p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/v2-e6567fcd39418497768c38f041ec193e_hd.jpg" alt="img"></p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/%E7%84%A6%E8%B7%9D.jpg" alt="img"></p><h4 id="曝光"><a href="#曝光" class="headerlink" title="曝光"></a>曝光</h4><p>曝光：”相机每一次照片的拍摄就是一次让光线涌入相机，并进行记录的过程”。 </p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565579904223.png" alt="1565579904223"></p><h5 id="曝光三因素"><a href="#曝光三因素" class="headerlink" title="曝光三因素"></a>曝光三因素</h5><p>1.光圈（大小）-类似于瞳孔，若光圈小，所进光少，反之。总之，光圈控制进光的多少。数值越小表示实际光圈越大。光圈就是开孔孔径的控制。孔径越大，进光量越大，画面越亮；孔径越小，进光量越小，画面越暗。对应到数值上就是 1.2、1.4、1.8、2.8、5.6，甚至到 64 等这些数值，但是注意，在这里数值越大意味着光圈越小（因为本质上，上面的数值是倒数，即 1/1.2，只不过为了书写方便，省去了），也就是画面越暗。</p><p>2.快门（速度）-类似窗帘，若设置快门时间短，则快门幕帘将快速度打开或关闭，那么此时光线照射时间感光时间也短，反之。总之，快门影响光线照射时间的长短。快门速度越快意味着能够凝固短暂的瞬间，快门速度越慢意味着会记录下物体运动的轨迹，慢快门实现动感表达，如流水，水面，运动；快快门实现瞬间定格。</p><p>3.感光度（高低）- 感光元件对光的敏感程度，越低表示对光线反应越慢 ，而数值越高，也就意味着对光越敏感，反映到这一张照片就是其他参数相同的时候，感光值越高画面越亮。感光值增高会使得画面的质量下降，噪点增多，所以，在光线充足情况下感光值越低越好。</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565580239076.png" alt="1565580239076"></p><p>光圈快门互易律</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565580020056.png" alt="1565580020056"></p><h5 id="安全快门"><a href="#安全快门" class="headerlink" title="安全快门"></a>安全快门</h5><p>经验上讲，手持快门的速度不能低于镜头焦距的倒数，例如你的焦距是 50mm，那么你手持拍摄最好不要低于 1/50s，这就是安全快门。但一般来说，想要获得足够清晰的画面，还是要再快一些，安全快门并不是绝对安全的。</p><h5 id="拍摄类型（曝光模式）"><a href="#拍摄类型（曝光模式）" class="headerlink" title="拍摄类型（曝光模式）"></a>拍摄类型（曝光模式）</h5><p>AV/M 光圈优先,TV/S 快门优先</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565602514004.png" alt="1565602514004"></p><h5 id="测光模式"><a href="#测光模式" class="headerlink" title="测光模式"></a>测光模式</h5><p><strong>测光</strong>：首先我们要给相机一个标杆，就是告诉相机哪一个亮是正确的。于是，通过经验计算等等，我们得到一个基本上自然界亮度的平均值，这个值有一个名字叫 18% 灰。</p><p>首先我们要给相机一个标杆，就是告诉相机哪一个亮是正确的。于是，通过经验计算等等，我们得到一个基本上自然界亮度的平均值，这个值有一个名字叫 18% 灰。</p><p>如果我们中间点是画面中最亮的，那整个画面就会偏暗，如果中间点是画面最暗的，那整个画面就会很亮。（这也是，手机为什么点击画面亮的部分，就会变暗的原因）。</p><p>相机测光表可能把测光区域测在较暗的地方，然后会将整体亮度调高，使其他地方过爆。由光比大小决定（一般选矩陣測光和評價測光，慎用点测光）</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1568899468824.png" alt="1568899468824"></p><h5 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h5><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1568901748205.png" alt="1568901748205"></p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565705149020.png" alt="1565705149020"></p><p>+表示更亮，-表示更暗</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565880677579.png" alt="1565880677579"></p><h5 id="曝光锁定"><a href="#曝光锁定" class="headerlink" title="曝光锁定"></a>曝光锁定</h5><p>采用点测光，调整测光区域到亮暗中间区域，然后按AEL(曝光锁定），可以达到亮的很亮，暗部很暗。（也可用平均测光，经焦距拉倒需要测光的区域）（自动曝光模式下参数不变AEL）</p><h4 id="对焦"><a href="#对焦" class="headerlink" title="对焦"></a>对焦</h4><h5 id="景深（浅，大）"><a href="#景深（浅，大）" class="headerlink" title="景深（浅，大）"></a>景深（浅，大）</h5><p>就是背景虚化的强弱，主要受光圈，焦距，拍摄距离影响，光圈大（数值小），焦距长，拍摄距离近，则背景虚化好，属于浅景深。</p><p>景深是一个清晰的范围，这个清晰范围越短，我们就叫浅景深，那么背景的模糊（也就是虚化）越明显。这也回答了为什么大光圈拍人像会有背景虚化。因为，光圈越大，景深也就越浅，也就是越容易虚化。</p><p>光圈：光圈越大，景深越小；光圈越小，景深越大。</p><p>焦距：焦距越长，景深越小；焦距越短，景深越大。</p><p>对焦距离：在其他条件相同情况下，对焦越近，景深越小。</p><p>相机画幅：画幅越大，景深越小。这也是为什么，全画幅好于残幅的一个原因</p><p>这也为是为什么 85mm，70-200mm 等焦距适合人像的原因，因为虚化好。同时也是手机虚化不够好的原因，因为手机的等效焦距是 20mm 以下。（双镜头的虚化是算法，不是光学）</p><p>如何能够在拍摄人像的时候更好的虚化？答案是使用尽可能的大光圈，使用尽可能长的焦距，尽可能的走近模特，以及使用全画幅相机。</p><h5 id="对焦区域"><a href="#对焦区域" class="headerlink" title="对焦区域"></a>对焦区域</h5><p>给相机圈定对焦区域的方式控制清晰的范围。我们可以圈定一个范围，这个范围有面积的大小，例如是一个点，还是一个区域还是全局（广域）。更重要的是，这些区域可以进行移动，例如点可以在画面中间，也可以在画面边缘。区域可以在画面中间，也可以在画面边缘。</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/image-20200113202354894.png" alt="image-20200113202354894"></p><h5 id="对焦模式"><a href="#对焦模式" class="headerlink" title="对焦模式"></a>对焦模式</h5><p>对焦模式主要是针对动态，静态，以及极限环境下的手动对焦（因为，并不是任何情况都可以对焦，弱光，或者没有强的对比参照物，例如在白纸上对焦都很难）。</p><p>「AF-S」，也就自动单点锁定对焦，选定一个对焦后，移动相机对焦点不更改。这时候，就是我们最为经典的「先对焦，再构图」的方式。使用单点中间对焦，半按快门锁定对焦，在移动相机（平行于焦平面，也就是左右移动，不要前后移动）进行构图，再按下快门进行拍摄。</p><p>针对运动物体，以及”不听话”的人，或者你不能指挥的人（活动，婚礼），建议使用连续自动对焦，也就是 AF-C。这个对焦方式是说相机会跟随画面中移动的主体进行移动，然后进行拍摄。为什么旗舰单反像素不高但是很贵？就是因为他们连续对焦和追焦的能力十分强悍，很容易抓拍。</p><p>针对一些极限环境，例如对焦精度要求极高，以及弱光环境，我们就需要手动对焦。所有镜头前都有手动对焦环，调节对焦环就可以调节物体的清晰范围。但是，要说明的是，我们可以让无穷远处非常清晰，但是不能无限近，所有镜头本身有着最近的对焦距离（一般来说，焦段越长，最短距离越长）。</p><p>手动对焦的方式是，首先选择到相机的手动对焦，然后选择你想要的对焦区域，再通过显示屏放大画面（索尼相机可以设置自动放大），然后转动镜头调焦环，直到清晰。</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565586580731.png" alt="1565586580731"></p><h5 id="对焦锁定"><a href="#对焦锁定" class="headerlink" title="对焦锁定"></a>对焦锁定</h5><p>(AFL 半按快门然后平移相机)</p><p>调整到单次对焦，用中心的对焦点对焦，先半按快门，然后平移相机（不要前后移动），焦点不会改变。</p><h4 id="色温和白平衡"><a href="#色温和白平衡" class="headerlink" title="色温和白平衡"></a>色温和白平衡</h4><p>「白平衡的调节就是调节画面的冷暖调，最重要的影响就是色彩的发色」。</p><p>索尼黄，就是一种白平衡色彩倾向的问题，我们可以通过在自动白平衡中进行下图的设置，白平衡向左下各飘移一个点，变为 B1M1 就可以解决这个问题：</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565881250100.png" alt="1565881250100"></p><p>预设白平衡</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1565881867194.png" alt="1565881867194"></p><p>环境色温=相机设置色温，标准色温（不偏色）。环境色温&lt;相机设置色温，则图片呈现暖色调（色调跟相机设置一致）。基本都調到白光，不要设置自动白平衡</p><p>灰卡可以矫正白平衡：曝光模式：自动；手动对焦；无曝光补偿；低感光度；自定义白平衡</p><p>冷色调：悲伤，孤独，难过</p><h4 id="拍摄过程"><a href="#拍摄过程" class="headerlink" title="拍摄过程"></a>拍摄过程</h4><p>在拍摄一张照片的时候，人和相机都是怎么工作的？</p><p>首先，摄影师对焦在物体上，然后半按快门，这个时候相机进行对焦和测光，完成后相机会提示，通过提示音或者画面上提示光点。接下来，平行画面移动构图（幅度不要大，不要前后移动），然后不要松手完全按下快门，拍摄结束。拍摄过程中，尤其是快门速度不快时要保持稳定。</p><p>曝光问题：拍摄类型，测光模式，曝光补偿</p><p>拍虚了：镜头（自动or手动），对焦模式（单次，连续），对焦区域（快速物体：对焦区域大），光圈，手抖（快门慢）</p><p>噪点多：感光度太高</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1568900168247.png" alt="1568900168247"></p><p>在三脚架上应关闭防抖功能</p><p><img src="/../assets/pic/l_2018-10-01-%E6%91%84%E5%BD%B1%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/1568900443762.png" alt="1568900443762"></p><p>raw格式比JPG格式更好后期，最好两种格式都生成</p><p>人像裁剪：不要裁剪在各个关节处</p><h5 id="各种滤镜"><a href="#各种滤镜" class="headerlink" title="各种滤镜"></a>各种滤镜</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uv镜：保护镜头，配与不配问题不大</span><br><span class="line">偏振镜：反光和倒影去掉，饱和度提升，需要加点曝光补偿</span><br><span class="line">ND镜：减少光线进入相机，类似墨镜，减少曝光</span><br><span class="line">渐变灰镜：改变光比</span><br></pre></td></tr></table></figure><h4 id="后期"><a href="#后期" class="headerlink" title="后期"></a>后期</h4><p>认识颜色：明度（亮度），色相（色调），饱和度</p><p>配色方案：单色，相邻色，三色，对比色，分裂对比色，四色</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;焦距和镜头&quot;&gt;&lt;a href=&quot;#焦距和镜头&quot; class=&quot;headerlink&quot; title=&quot;焦距和镜头&quot;&gt;&lt;/a&gt;焦距和镜头&lt;/h4&gt;&lt;p&gt;成像中心到焦平面的距离&lt;/p&gt;
    
    </summary>
    
      <category term="生活随笔" scheme="/categories/thinking/"/>
    
    
      <category term="摄影" scheme="/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识</title>
    <link href="/2018/2018-07-09-Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-09-Vue基础知识/</id>
    <published>2018-07-09T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue概述"><a href="#Vue概述" class="headerlink" title="Vue概述"></a>Vue概述</h3><p>Vue.js是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑<br>定和组合的视图组件。它不仅易于上手，还便于与第三方库或既有项目整合。</p><h5 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h5><p>MVVM是Model-View-ViewModel的简写。</p><p>MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开，分离视图（View）和模型（Model）</p><p><img src="/../assets/pic/2018-07-09-Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/mvvm.png" alt="mvvm"></p><p><strong>Model</strong>代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。<br><strong>View</strong> 代表UI 组件，它负责将数据模型转化成UI 展现出来。<br><strong>ViewModel</strong> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。<br>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。</p><p><img src="/../assets/pic/2018-07-09-Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200302125716002.png" alt="image-20200302125716002"></p><h5 id="Vue的快速入门"><a href="#Vue的快速入门" class="headerlink" title="Vue的快速入门"></a>Vue的快速入门</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">        el:'#app', //表示当前vue对象接管了div区域</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            message:'hello world' //注意不要写分号结尾</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="CDN引入Vue"><a href="#CDN引入Vue" class="headerlink" title="CDN引入Vue"></a>CDN引入Vue</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.5.16/vue.common.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue的语法"><a href="#Vue的语法" class="headerlink" title="Vue的语法"></a>Vue的语法</h3><h4 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h4><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值，Mustache 标签将会被替代为对应数据对象上属性的值。无论何时，绑定的数据对象上属性发生了改变，插值处的内容都会更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;</span><br><span class="line">下面不支持</span><br><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h4><p> <strong>v-on</strong>可以用  v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码</p><h5 id="v-on-click"><a href="#v-on-click" class="headerlink" title="v-on:click"></a>v-on:click</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理 v-on示例1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"fun1('good')"</span>&gt;</span>点击改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            message:<span class="string">'hello world'</span> <span class="comment">//注意不要写分号结尾</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            fun1:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.message=msg;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on-keydown"><a href="#v-on-keydown" class="headerlink" title="v-on:keydown"></a>v-on:keydown</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理 v-on示例2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keydown</span>=<span class="string">"fun2('good',$event)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            fun2:<span class="function"><span class="keyword">function</span>(<span class="params">msg,event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(!((event.keyCode&gt;=<span class="number">48</span>&amp;&amp;event.keyCode&lt;=<span class="number">57</span>)</span></span><br><span class="line"><span class="undefined">                             ||event.keyCode==8||event.keyCode==46))&#123;</span></span><br><span class="line"><span class="javascript">                    event.preventDefault();<span class="comment">//防止链接打开 URL</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on-mouseover"><a href="#v-on-mouseover" class="headerlink" title="v-on:mouseover"></a>v-on:mouseover</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理 v-on示例3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:mouseover</span>=<span class="string">"fun1"</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-on:mouseover</span>=<span class="string">"fun2($event)"</span>&gt;</span>这是一个文件域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            fun1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            fun2:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"textarea"</span>);</span></span><br><span class="line"><span class="javascript">                event.stopPropagation();<span class="comment">//阻止 click 事件冒泡到父元素</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或event.stopPropagation()。Vue.js通过由点(.)表示的指令后缀来调用修饰符。可以用@表示v-on</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.stop</span><br><span class="line">.prevent</span><br><span class="line">.capture</span><br><span class="line">.self</span><br><span class="line">.once</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-on 事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span> <span class="attr">action</span>=<span class="string">"http://www.itcast.cn"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"fun1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span> <span class="attr">href</span>=<span class="string">"http://www.itcast.cn"</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            fun1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"hello itcast"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符,全部的按键别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获 &quot;删除&quot; 和 &quot;退格&quot; 键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-on 按钮修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.11/vue.common.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"fun1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            fun1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"你按了回车"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据的显示"><a href="#数据的显示" class="headerlink" title="数据的显示"></a>数据的显示</h4><h5 id="v-text与v-html"><a href="#v-text与v-html" class="headerlink" title="v-text与v-html"></a>v-text与v-html</h5><p>v-text展示效果： \</p><h1>传智黑马\</h1> ; v-html展示效果： <strong>传智黑马</strong><p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-html与v-text<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="xml">        message:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>传智黑马<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h5><p>插值语法不能作用在 HTML 特性(属性）上，遇到这种情况应该使用 v-bind指令，可以用：简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-bind<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">v-bind:color</span>=<span class="string">"ys1"</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">:color</span>=<span class="string">"ys2"</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind</span>=<span class="string">&#123;href:</span>"<span class="attr">http:</span>//<span class="attr">www.itcast.cn</span>/<span class="attr">index</span>/"+<span class="attr">id</span>&#125;&gt;</span>itcast<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            ys1:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">            ys2:<span class="string">"green"</span>,</span></span><br><span class="line"><span class="undefined">            id:1</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><p>用于从表单封装对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">v-model</span>=<span class="string">"user.username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"user.password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"fun"</span> <span class="attr">value</span>=<span class="string">"获取"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            user:&#123;<span class="attr">username</span>:<span class="string">""</span>,<span class="attr">password</span>:<span class="string">""</span>&#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            fun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="keyword">this</span>.user.username+<span class="string">" "</span>+<span class="keyword">this</span>.user.password);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.user.username=<span class="string">"tom"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.user.password=<span class="string">"11111111"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="逻辑判断和循环输出"><a href="#逻辑判断和循环输出" class="headerlink" title="逻辑判断和循环输出"></a>逻辑判断和循环输出</h4><h5 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    数组</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span>&gt;</span>&#123;&#123;item+" "+index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    对象</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in product"</span>&gt;</span>&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            list:[1,2,3,4,5,6],</span></span><br><span class="line"><span class="javascript">            product:&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">pname</span>:<span class="string">"电视机"</span>,<span class="attr">price</span>:<span class="number">6000</span>&#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-if与v-show"><a href="#v-if与v-show" class="headerlink" title="v-if与v-show"></a>v-if与v-show</h5><p>v-if是根据表达式的值来决定是否渲染元素<br>v-show是根据表达式的值来切换元素的display css属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-if与v-show<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>, <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            flag:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            toggle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.flag=!<span class="keyword">this</span>.flag;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h3><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程.Vue有8个生命周期的执行点，4个基本的，4个特殊的。</p><p>从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</p><p><img src="/../assets/pic/2018-07-09-Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/lifecycle.png" alt="lifecycle"></p><p><strong>beforeCreate</strong>（创建前） 在数据观测和初始化事件还未开始<br><strong>created</strong>（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来<br><strong>beforeMount</strong>（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。<br><strong>mounted</strong>（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。<br><strong>beforeUpdate</strong>（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br><strong>updated</strong>（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。<br><strong>beforeDestroy</strong>（销毁前） 在实例销毁之前调用。实例仍然完全可用。<br><strong>destroyed</strong>（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>vuejs生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vuejs-2.5.16.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">data: &#123;</span></span><br><span class="line"><span class="javascript">message: <span class="string">'hello world'</span></span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'创建vue实例前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'创建vue实例后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'挂载到dom前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'挂载到dom后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">beforeUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'数据变化更新前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">updated: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'数据变化更新后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">vm.test = <span class="string">"3333"</span>;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'vue实例销毁前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">destroyed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">showData(<span class="string">'vue实例销毁后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">realDom</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'真实dom结构：'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showData</span>(<span class="params">process, obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(process);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'data 数据：'</span> + obj.message)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'挂载的对象：'</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(obj.$el)</span></span><br><span class="line"><span class="undefined">realDom();</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'------------------'</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'------------------'</span>)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//vm.message = "good...";</span></span></span><br><span class="line"><span class="undefined">vm.$destroy(); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="axios的ajax异步请求"><a href="#axios的ajax异步请求" class="headerlink" title="axios的ajax异步请求"></a>axios的ajax异步请求</h3><p>它和jquery的ajax比较相似;vue-resource是Vue.js的插件提供了使用XMLHttpRequest或JSONP进行Web请求和处理响应的服务。 当vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过给定的ID来发送请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//以上请求也可以通过这种方式来发送</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>,&#123;</span><br><span class="line">params:&#123;</span><br><span class="line">    ID:<span class="number">12345</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>,&#123;</span><br><span class="line">    firstName:<span class="string">'Fred'</span>,</span><br><span class="line">    lastName:<span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="其他请求"><a href="#其他请求" class="headerlink" title="其他请求"></a>其他请求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url[, config])</span><br><span class="line">axios.delete(url[, config])</span><br><span class="line">axios.head(url[, config])</span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure><h3 id="综合案例-Vue-SSM的CRUD"><a href="#综合案例-Vue-SSM的CRUD" class="headerlink" title="综合案例: Vue+SSM的CRUD"></a>综合案例: Vue+SSM的CRUD</h3><p>实现用户的查询列表和更新操作，前端：Vue；后端：ssm</p><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`PASSWORD`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">9</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'33'</span>, <span class="string">'张老师'</span>, <span class="string">'123'</span>, <span class="string">'zzz@itcast.cn'</span>, <span class="string">'男 '</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'31'</span>, <span class="string">'刘老师'</span>, <span class="string">'123'</span>, <span class="string">'lll@itcast.cn'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'17'</span>, <span class="string">'赵工'</span>, <span class="string">'213'</span>, <span class="string">'zg@itcast.cn'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'40'</span>, <span class="string">'高管'</span>, <span class="string">'213'</span>, <span class="string">'gg@itcast.cn'</span>, <span class="string">'female'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'28'</span>, <span class="string">'李总'</span>, <span class="string">'312'</span>, <span class="string">'lz@jxjt.com'</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'34'</span>, <span class="string">'王董'</span>, <span class="string">'312'</span>, <span class="string">'wd@jxjt.com'</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'55'</span>, <span class="string">'孙老板'</span>, <span class="string">'4321'</span>, <span class="string">'slb@xzjt.com'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'19'</span>, <span class="string">'陈秘书'</span>, <span class="string">'4321'</span>, <span class="string">'cms@xzjt.com'</span>, <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure><h5 id="POM-XML"><a href="#POM-XML" class="headerlink" title="POM.XML"></a>POM.XML</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>code01JavaWeb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>site.newvalue<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day09Vue<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>vuejsDemo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>vuejsDemo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be</span></span><br><span class="line"><span class="comment">moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-</span></span><br><span class="line"><span class="comment">                bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 手动指定 spring 配置文件位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置 spring 提供的监听器，用于启动服务时加载容器 。该间监听器只能加载 WEB-INF 目录中名称为 applicationContext.xml 的配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置 spring mvc 的核心控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvcDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化参数，用于读取 springmvc 的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 servlet 的对象的创建时间点：应用加载时创建。取值只能是非 0 正整数，表示启动顺 序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvcDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置 springMVC 编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置过滤器中的属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置创建 spring 容器要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.newvalue"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller 注解的 JAVA 类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 spring 创建容器时要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.newvalue"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--制定扫包规则，不扫描@Controller 注解的 JAVA 类，其他的还是要扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 MyBatis 的 Session 工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Mapper 扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"site.newvalue.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* site.newvalue.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://newvalue.site:3306/vuejsdemo</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><h5 id="site-newvalue-domain-User类"><a href="#site-newvalue-domain-User类" class="headerlink" title="site.newvalue.domain.User类"></a>site.newvalue.domain.User类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    省略getter/setter</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h5 id="site-newvalue-dao-IUserDao类"><a href="#site-newvalue-dao-IUserDao类" class="headerlink" title="site.newvalue.dao.IUserDao类"></a>site.newvalue.dao.IUserDao类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;username&#125;,password=#&#123;password&#125;,sex=#&#123;sex&#125;,age=#&#123;age&#125;,email=#&#123;email&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="site-newvalue-service-IUserService类"><a href="#site-newvalue-service-IUserService类" class="headerlink" title="site.newvalue.service.IUserService类"></a>site.newvalue.service.IUserService类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="site-newvalue-controller-UserController类"><a href="#site-newvalue-controller-UserController类" class="headerlink" title="site.newvalue.controller.UserController类"></a>site.newvalue.controller.UserController类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        userService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="user-js"><a href="#user-js" class="headerlink" title="user.js"></a>user.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        user:&#123;</span><br><span class="line">            id:<span class="string">""</span>,</span><br><span class="line">            username:<span class="string">""</span>,</span><br><span class="line">            password:<span class="string">""</span>,</span><br><span class="line">            email:<span class="string">""</span>,</span><br><span class="line">            age:<span class="string">""</span>,</span><br><span class="line">            sex:<span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        userList:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        findAll:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//在当前方法中定义一个变量，表明是vue对象</span></span><br><span class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            axios.get(<span class="string">'/day09Vue_war_exploded/user/findAll.do'</span>)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    _this.userList = response.data;<span class="comment">//响应数据给userList赋值</span></span><br><span class="line">                    <span class="built_in">console</span>.log(response);</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(error);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        findById:<span class="function"><span class="keyword">function</span> (<span class="params">userid</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//在当前方法中定义一个变量，表明是vue对象</span></span><br><span class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            axios.get(<span class="string">'/day09Vue_war_exploded/user/findById.do'</span>,&#123;<span class="attr">params</span>:&#123;<span class="attr">id</span>:userid&#125;&#125;)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    _this.user = response.data;<span class="comment">//响应数据给userList赋值</span></span><br><span class="line">                    $(<span class="string">"#myModal"</span>).modal(<span class="string">"show"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(error);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        update:<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;<span class="comment">//post请求</span></span><br><span class="line">            <span class="comment">//在当前方法中定义一个变量，表明是vue对象</span></span><br><span class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            axios.post(<span class="string">'/day09Vue_war_exploded/user/updateUser.do'</span>, _this.user)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    _this.findAll();</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//当我们页面加载的时候触发请求，查询所有</span></span><br><span class="line">        <span class="keyword">this</span>.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="user-html"><a href="#user-html" class="headerlink" title="user.html"></a>user.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"u in userList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"ids"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;u.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;u.username&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;u.password&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;u.sex&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;u.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>&#123;&#123;u.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn bg-olive btn-xs"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn bg-olive btn-xs"</span> @<span class="attr">click</span>=<span class="string">"findById(u.id)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue概述&quot;&gt;&lt;a href=&quot;#Vue概述&quot; class=&quot;headerlink&quot; title=&quot;Vue概述&quot;&gt;&lt;/a&gt;Vue概述&lt;/h3&gt;&lt;p&gt;Vue.js是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应
      
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础知识</title>
    <link href="/2018/2018-07-08-Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-08-Redis基础知识/</id>
    <published>2018-07-08T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>redis概念： redis是一款高性能的NOSQL系列的非关系型数据库</p><p>关系型和非关系型数据库比较</p><p><img src="../assets/pic/2018-07-08-Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E5%85%B3%E7%B3%BB%E5%9E%8B%E5%92%8C%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AF%94%E8%BE%83.bmp" alt="1.关系型和非关系型数据库比较"></p><pre><code>1.1.什么是NOSQL    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。    随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。    1.1.1.    NOSQL和关系型数据库比较        优点：            1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。            2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。            3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。            4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。        缺点：            1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。            2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。            3）不提供关系型数据库对事务的处理。    1.1.2.    非关系型数据库的优势：        1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。        2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。    1.1.3.    关系型数据库的优势：        1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。        2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。    1.1.4.    总结        关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，        让NoSQL数据库对关系型数据库的不足进行弥补。        一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据1.2.主流的NOSQL产品    •    键值(Key-Value)存储数据库            相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB            典型应用： 内容缓存，主要用于处理大量数据的高访问负载。             数据模型： 一系列键值对            优势： 快速查询            劣势： 存储的数据缺少结构化    •    列存储数据库            相关产品：Cassandra, HBase, Riak            典型应用：分布式的文件系统            数据模型：以列簇式存储，将同一列数据存在一起            优势：查找速度快，可扩展性强，更容易进行分布式扩展            劣势：功能相对局限    •    文档型数据库            相关产品：CouchDB、MongoDB            典型应用：Web应用（与Key-Value类似，Value是结构化的）            数据模型： 一系列键值对            优势：数据结构要求不严格            劣势： 查询性能不高，而且缺乏统一的查询语法    •    图形(Graph)数据库            相关数据库：Neo4J、InfoGrid、Infinite Graph            典型应用：社交网络            数据模型：图结构            优势：利用图结构相关算法。            劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。1.3 什么是Redis    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：        1) 字符串类型 string        2) 哈希类型 hash        3) 列表类型 list        4) 集合类型 set        5) 有序集合类型 sortedset    1.3.1 redis的应用场景        •    缓存（数据查询、短连接、新闻内容、商品内容等等）        •    聊天室的在线好友列表        •    任务队列。（秒杀、抢购、12306等等）        •    应用排行榜        •    网站访问统计        •    数据过期处理（可以精确到毫秒        •    分布式集群架构中的session分离</code></pre><h5 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h5><p>redis数据结构</p><p><img src="../assets/pic/2018-07-08-Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.bmp" alt="2.redis数据结构"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>. 下载安装</span><br><span class="line"><span class="number">1</span>. 官网：https:<span class="comment">//redis.io</span></span><br><span class="line"><span class="number">2</span>. 中文网：http:<span class="comment">//www.redis.net.cn/</span></span><br><span class="line"><span class="number">3</span>. 解压直接可以使用：</span><br><span class="line">* redis.windows.conf：配置文件</span><br><span class="line">* redis-cli.exe：redis的客户端</span><br><span class="line">* redis-server.exe：redis服务器端</span><br><span class="line">打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行：</span><br><span class="line">redis-server.exe redis.windows.conf</span><br><span class="line">    另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。切换到 redis 目录下运行:</span><br><span class="line">redis-cli.exe -h <span class="number">127.0</span>.0.1 -p <span class="number">6379</span>   </span><br><span class="line">        </span><br><span class="line"><span class="number">3</span>. 命令操作</span><br><span class="line"><span class="number">1</span>. redis的数据结构：</span><br><span class="line">* redis存储的是：key,value格式的数据，其中key都是字符串，value有<span class="number">5</span>种不同的数据结构</span><br><span class="line">* value的数据结构：</span><br><span class="line"><span class="number">1</span>) 字符串类型 string</span><br><span class="line"><span class="number">2</span>) 哈希类型 hash ： map格式  </span><br><span class="line"><span class="number">3</span>) 列表类型 list ： linkedlist格式。支持重复元素</span><br><span class="line"><span class="number">4</span>) 集合类型 set  ： 不允许重复元素</span><br><span class="line"><span class="number">5</span>) 有序集合类型 sortedset：不允许重复元素，且元素有顺序</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 字符串类型 string</span><br><span class="line"><span class="number">1</span>. 存储： set key value</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; set username zhangsan</span><br><span class="line">OK</span><br><span class="line"><span class="number">2</span>. 获取： get key</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; get username</span><br><span class="line"><span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">3</span>. 删除： del key</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; del age</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">3</span>. 哈希类型 hash</span><br><span class="line"><span class="number">1</span>. 存储： hset key field value</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; hset myhash username lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; hset myhash password <span class="number">123</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">2</span>. 获取： </span><br><span class="line">* hget key field: 获取指定的field对应的值</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; hget myhash username</span><br><span class="line"><span class="string">"lisi"</span></span><br><span class="line">* hgetall key：获取所有的field和value</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; hgetall myhash</span><br><span class="line"><span class="number">1</span>) <span class="string">"username"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"password"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 删除： hdel key field</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; hdel myhash username</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）</span><br><span class="line"><span class="number">1</span>. 添加：</span><br><span class="line"><span class="number">1</span>. lpush key value: 将元素加入列表左表</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. rpush key value：将元素加入列表右边</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpush myList a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lpush myList b</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; rpush myList c</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">2</span>. 获取：</span><br><span class="line">* lrange key start end ：范围获取</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; lrange myList <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">3</span>. 删除：</span><br><span class="line">* lpop key： 删除列表最左边的元素，并将元素返回</span><br><span class="line">* rpop key： 删除列表最右边的元素，并将元素返回</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 集合类型 set ： 不允许重复元素</span><br><span class="line"><span class="number">1</span>. 存储：sadd key value</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sadd myset a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; sadd myset a</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">2</span>. 获取：smembers key:获取set集合中所有元素</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; smembers myset</span><br><span class="line"><span class="number">1</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">3</span>. 删除：srem key value:删除set集合中的某个元素</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; srem myset a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">                </span><br><span class="line"><span class="number">6</span>. 有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个<span class="keyword">double</span>类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</span><br><span class="line"><span class="number">1</span>. 存储：zadd key score value</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zadd mysort <span class="number">60</span> zhangsan</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zadd mysort <span class="number">50</span> lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zadd mysort <span class="number">80</span> wangwu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">2</span>. 获取：zrange key start end [withscores]</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrange mysort <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrange mysort <span class="number">0</span> -<span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"zhangsan"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"60"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"80"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"500"</span></span><br><span class="line"><span class="number">3</span>. 删除：zrem key value</span><br><span class="line"><span class="number">127.0</span>.0.1:<span class="number">6379</span>&gt; zrem mysort lisi</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>. 通用命令</span><br><span class="line"><span class="number">1</span>. keys * : 查询所有的键</span><br><span class="line"><span class="number">2</span>. type key ： 获取键对应的value的类型</span><br><span class="line"><span class="number">3</span>. del key：删除指定的key value</span><br></pre></td></tr></table></figure><h5 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>. 持久化</span><br><span class="line"><span class="number">1</span>. redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</span><br><span class="line"><span class="number">2</span>. redis持久化机制：</span><br><span class="line"><span class="number">1</span>. RDB：默认方式，不需要进行配置，默认就使用这种机制</span><br><span class="line">* 在一定的间隔时间中，检测key的变化情况，然后持久化数据</span><br><span class="line"><span class="number">1</span>. 编辑redis.windwos.conf文件</span><br><span class="line">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">#   after 60 sec if at least 10000 keys changed</span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 重新启动redis服务器，并指定配置文件名称</span><br><span class="line">D:\JavaWeb2018\day23_redis\资料\redis\windows-<span class="number">64</span>\redis-<span class="number">2.8</span>.9&gt;redis-server.exe redis.windows.conf</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</span><br><span class="line"><span class="number">1</span>. 编辑redis.windwos.conf文件</span><br><span class="line">appendonly no（关闭aof） --&gt; appendonly yes （开启aof）</span><br><span class="line"></span><br><span class="line"># appendfsync always ： 每一次操作都进行持久化</span><br><span class="line">appendfsync everysec ： 每隔一秒进行一次持久化</span><br><span class="line"># appendfsync no ： 不进行持久化</span><br></pre></td></tr></table></figure><h5 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端 Jedis"></a>Java客户端 Jedis</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>. Java客户端 Jedis</span><br><span class="line">* Jedis: 一款java操作redis数据库的工具.</span><br><span class="line">* 使用步骤：</span><br><span class="line"><span class="number">1</span>. 下载jedis的jar包</span><br><span class="line"><span class="number">2</span>. 使用</span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line">   <span class="comment">//2. 操作</span></span><br><span class="line">   jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line"></span><br><span class="line">* Jedis操作各种redis中的数据结构</span><br><span class="line"><span class="number">1</span>) 字符串类型 string</span><br><span class="line">set</span><br><span class="line">get</span><br><span class="line"></span><br><span class="line"> <span class="comment">//1. 获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        String username = jedis.get(<span class="string">"username"</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">        <span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line">        jedis.setex(<span class="string">"activecode"</span>,<span class="number">20</span>,<span class="string">"hehe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 哈希类型 hash ： map格式  </span><br><span class="line">hset</span><br><span class="line">hget</span><br><span class="line">hgetAll</span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// 存储hash</span></span><br><span class="line">        jedis.hset(<span class="string">"user"</span>,<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">        jedis.hset(<span class="string">"user"</span>,<span class="string">"age"</span>,<span class="string">"23"</span>);</span><br><span class="line">        jedis.hset(<span class="string">"user"</span>,<span class="string">"gender"</span>,<span class="string">"female"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取hash</span></span><br><span class="line">        String name = jedis.hget(<span class="string">"user"</span>, <span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">        Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keyset</span></span><br><span class="line">        Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//获取value</span></span><br><span class="line">            String value = user.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        </span><br><span class="line"><span class="number">3</span>) 列表类型 list ： linkedlist格式。支持重复元素</span><br><span class="line">lpush / rpush</span><br><span class="line">lpop / rpop</span><br><span class="line">lrange start end : 范围获取</span><br><span class="line"></span><br><span class="line"> <span class="comment">//1. 获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// list 存储</span></span><br><span class="line">        jedis.lpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);<span class="comment">//从左边存</span></span><br><span class="line">        jedis.rpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);<span class="comment">//从右边存</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 范围获取</span></span><br><span class="line">        List&lt;String&gt; mylist = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// list 弹出</span></span><br><span class="line">        String element1 = jedis.lpop(<span class="string">"mylist"</span>);<span class="comment">//c</span></span><br><span class="line">        System.out.println(element1);</span><br><span class="line"></span><br><span class="line">        String element2 = jedis.rpop(<span class="string">"mylist"</span>);<span class="comment">//c</span></span><br><span class="line">        System.out.println(element2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 范围获取</span></span><br><span class="line">        List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        </span><br><span class="line"><span class="number">4</span>) 集合类型 set  ： 不允许重复元素</span><br><span class="line">sadd</span><br><span class="line">smembers:获取所有元素</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// set 存储</span></span><br><span class="line">        jedis.sadd(<span class="string">"myset"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"c++"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set 获取</span></span><br><span class="line">        Set&lt;String&gt; myset = jedis.smembers(<span class="string">"myset"</span>);</span><br><span class="line">        System.out.println(myset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        </span><br><span class="line"><span class="number">5</span>) 有序集合类型 sortedset：不允许重复元素，且元素有顺序</span><br><span class="line">zadd</span><br><span class="line">zrange</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// sortedset 存储</span></span><br><span class="line">        jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">3</span>,<span class="string">"亚瑟"</span>);</span><br><span class="line">        jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">30</span>,<span class="string">"后裔"</span>);</span><br><span class="line">        jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">55</span>,<span class="string">"孙悟空"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sortedset 获取</span></span><br><span class="line">        Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">"mysortedset"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mysortedset);</span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br></pre></td></tr></table></figure><h5 id="Jedis详细配置"><a href="#Jedis详细配置" class="headerlink" title="Jedis详细配置"></a>Jedis详细配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#最大活动对象数     </span><br><span class="line">redis.pool.maxTotal=1000    </span><br><span class="line">#最大能够保持idel状态的对象数      </span><br><span class="line">redis.pool.maxIdle=100  </span><br><span class="line">#最小能够保持idel状态的对象数   </span><br><span class="line">redis.pool.minIdle=50    </span><br><span class="line">#当池内没有返回对象时，最大等待时间    </span><br><span class="line">redis.pool.maxWaitMillis=10000    </span><br><span class="line">#当调用borrow Object方法时，是否进行有效性检查    </span><br><span class="line">redis.pool.testOnBorrow=true    </span><br><span class="line">#当调用return Object方法时，是否进行有效性检查    </span><br><span class="line">redis.pool.testOnReturn=true  </span><br><span class="line">#“空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.  </span><br><span class="line">redis.pool.timeBetweenEvictionRunsMillis=30000  </span><br><span class="line">#向调用者输出“链接”对象时，是否检测它的空闲超时；  </span><br><span class="line">redis.pool.testWhileIdle=true  </span><br><span class="line"># 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3.  </span><br><span class="line">redis.pool.numTestsPerEvictionRun=50  </span><br><span class="line">#redis服务器的IP    </span><br><span class="line">redis.ip=xxxxxx  </span><br><span class="line">#redis服务器的Port    </span><br><span class="line">redis1.port=6379</span><br></pre></td></tr></table></figure><h5 id="jedis连接池：-JedisPool"><a href="#jedis连接池：-JedisPool" class="headerlink" title="jedis连接池： JedisPool"></a>jedis连接池： JedisPool</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">* jedis连接池： JedisPool</span><br><span class="line">* 使用：</span><br><span class="line"><span class="number">1</span>. 创建JedisPool连接池对象</span><br><span class="line"><span class="number">2</span>. 调用方法 getResource()方法获取Jedis连接</span><br><span class="line"><span class="comment">//0.创建一个配置对象</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">//3. 使用</span></span><br><span class="line">        jedis.set(<span class="string">"hehe"</span>,<span class="string">"heihei"</span>);</span><br><span class="line">        <span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">        jedis.close();</span><br><span class="line"></span><br><span class="line">* 连接池工具类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(<span class="string">"jedis.properties"</span>);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Redis案例"><a href="#Redis案例" class="headerlink" title="Redis案例"></a>Redis案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">案例需求：</span><br><span class="line">1. 提供index.html页面，页面中有一个省份 下拉列表</span><br><span class="line">2. 当 页面加载完成后 发送ajax请求，加载所有省份</span><br><span class="line">* 注意：使用redis缓存一些不经常发生变化的数据。</span><br><span class="line">* 数据库的数据一旦发生改变，则需要更新缓存。</span><br><span class="line">* 数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入</span><br><span class="line">* 在service对应的增删改方法中，将redis数据删除。</span><br></pre></td></tr></table></figure><p><img src="../assets/pic/2018-07-08-Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.%E6%A1%88%E4%BE%8B.bmp" alt="4.案例"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;redis概念： redis是一款高性能的NOSQL系列的非关系型数据库&lt;/p&gt;
&lt;p&gt;关系型和非关系型数据库比较&lt;/p&gt;
&lt;p&gt;&lt;img 
      
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC基础知识</title>
    <link href="/2018/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-07-SpringMVC基础知识/</id>
    <published>2018-07-07T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>咱们开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序</p><p>使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构</p><p>SpringMVC属于表现层框架</p><a id="more"></a><h5 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表现层：WEB层，它负责接收客户端请求，向客户端响应结果,用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型，表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。</span><br><span class="line"></span><br><span class="line">业务层：处理公司具体的业务逻辑的</span><br><span class="line"></span><br><span class="line">持久层：用来操作数据库的,对数据库表进行曾删改查。</span><br></pre></td></tr></table></figure><h5 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h5><p>MVC全名是Model View Controller 模型视图控制器，每个部分各司其职。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model：数据模型，JavaBean的类，用来进行数据封装。</span><br><span class="line">View：指JSP、HTML用来展示数据给用户</span><br><span class="line">Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86.jpg" alt="springmvc执行流程原理"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</span><br><span class="line"></span><br><span class="line">HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</span><br><span class="line"></span><br><span class="line">Handler 它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由</span><br><span class="line">Handler 对具体的用户请求进行处理。</span><br><span class="line"></span><br><span class="line">HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行</span><br><span class="line"></span><br><span class="line">View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</span><br><span class="line"></span><br><span class="line">SpringMVC 框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户</span><br></pre></td></tr></table></figure><h5 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架</span><br><span class="line">它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口</span><br><span class="line">还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持</span><br><span class="line"></span><br><span class="line">SpringMVC与Struts2区别：</span><br><span class="line">    Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</span><br><span class="line">    Spring MVC 是基于方法设计的，而Struts2是基于类，Struts2每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</span><br><span class="line">    Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便</span><br><span class="line">    (JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309183433709.png" alt="image-20200309183433709"></p><h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309185414653.png" alt="image-20200309185414653"></p><p>1 依赖文件pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 版本锁定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 在web.xml配置文件中配置核心控制器DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SpringMVC的核心控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Servlet的初始化参数，读取springmvc的配置文件，创建spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置servlet启动时加载对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 在resources文件夹内编写springmvc.xml的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</span></span><br><span class="line"><span class="comment">    使用 &lt;mvc:annotation-driven&gt;自动加载RequestMappingHandlerMapping(处理映射器)和</span></span><br><span class="line"><span class="comment">    RequestMappingHandlerAdapter(处理适配器) </span></span><br><span class="line"><span class="comment">    可用在SpringMVC.xml配置件中使用&lt;mvc:annotation-driven&gt;替代注解处理器和适配器的配置。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.newvalue.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解mvc的支持  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在 springmvc 的配置文件中可以配置，静态资源不过滤：--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- location 表示路径，mapping 表示文件，**表示该目录下的文件以及子目录的文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/scripts/"</span> <span class="attr">mapping</span>=<span class="string">"/javascript/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 index.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>入門程序<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello"</span>&gt;</span>入门程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>入门成功！！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5 HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">sayHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入门案例的执行流程"><a href="#入门案例的执行流程" class="headerlink" title="入门案例的执行流程"></a>入门案例的执行流程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象，就会加载springmvc.xml配置文件</span><br><span class="line"></span><br><span class="line">开启了注解扫描，那么HelloController对象就会被创建</span><br><span class="line"></span><br><span class="line">从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置<span class="meta">@RequestMapping</span>注解找到执行的具体方法</span><br><span class="line"></span><br><span class="line">根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</span><br><span class="line"></span><br><span class="line">Tomcat服务器渲染页面，做出响应</span><br></pre></td></tr></table></figure><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><h5 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系</span><br><span class="line">RequestMapping注解可以作用在方法和类上</span><br><span class="line">作用在类上：第一级的访问目录</span><br><span class="line">作用在方法上：第二级的访问目录</span><br><span class="line">细节：路径可以不编写/表示应用的根目录开始</span><br><span class="line">细节：$&#123; pageContext.request.contextPath &#125;也可以省略不写，但是路径上不能写 /</span><br><span class="line"></span><br><span class="line">RequestMapping的属性</span><br><span class="line">    path  指定请求路径的url</span><br><span class="line">    value value属性和path属性是一样的</span><br><span class="line">    mthod 指定该方法的请求方式</span><br><span class="line">    params 指定限制请求参数的条件</span><br><span class="line">    headers 发送的请求中必须包含的请求头</span><br></pre></td></tr></table></figure><h5 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">绑定机制</span><br><span class="line">    表单提交的数据都是k=v格式的 username=haha&amp;password=<span class="number">123</span></span><br><span class="line">    SpringMVC的参数绑定过程是把表单提交的请求参数，与控制器中方法参数进行绑定</span><br><span class="line">    要求：提交表单的name和参数的名称是相同的</span><br><span class="line">        &lt;a href="account/findAccount?accountId=10"&gt;查询账户&lt;/a&gt;</span><br><span class="line">        中请求参数是：accountId=<span class="number">10</span></span><br><span class="line">        <span class="comment">//查询账户</span></span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/findAccount"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"查询了账户。。。。"</span>+accountId);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">支持的数据类型</span><br><span class="line">    基本数据类型和字符串类型</span><br><span class="line">    实体类型（JavaBean）</span><br><span class="line">    集合数据类型（List、map集合等）</span><br><span class="line">    </span><br><span class="line">基本数据类型和字符串类型</span><br><span class="line">提交表单的name和参数的名称是相同的，区分大小写</span><br><span class="line">实体类型（JavaBean）</span><br><span class="line">    提交表单的name和JavaBean中的属性名称需要一致</span><br><span class="line">    若JavaBean类中包含其他引用类型，那么表单name属性需要编写成：对象.属性，如：address.name</span><br><span class="line">        &lt;!-- pojo 类型演示 --&gt;</span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String name;</span><br><span class="line">            <span class="keyword">private</span> Float money;</span><br><span class="line">            <span class="keyword">private</span> Address address;<span class="comment">//provinceName,cityName</span></span><br><span class="line">            <span class="comment">//getters and setters</span></span><br><span class="line">        &#125;</span><br><span class="line">        &lt;form action=<span class="string">"account/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            账户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> &gt;&lt;br/&gt;</span><br><span class="line">            账户金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> &gt;&lt;br/&gt;</span><br><span class="line">            账户省份：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.provinceName"</span> &gt;&lt;br/&gt;</span><br><span class="line">            账户城市：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.cityName"</span> &gt;&lt;br/&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"保存了账户。。。。"</span>+account);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">给集合属性数据封装</span><br><span class="line">JSP页面编写方式：list[<span class="number">0</span>].属性</span><br><span class="line">        账户 <span class="number">1</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">        账户 <span class="number">1</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">        账户 <span class="number">2</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">        账户 <span class="number">2</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].money"</span> &gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h5 id="请求参数中文乱码"><a href="#请求参数中文乱码" class="headerlink" title="请求参数中文乱码"></a>请求参数中文乱码</h5><p>在web.xml中配置Spring提供的过滤器类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 springMVC 编码过滤器，解决中文乱码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置过滤器中的属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tomacat对GET和POST请求处理方式是不同，GET请求编码问题改tomcat的server.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br><span class="line">改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag"><span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">如果遇到 ajax 请求仍然乱码，请把：useBodyEncodingForURI="true"改为 URIEncoding="UTF-8"</span><br></pre></td></tr></table></figure><h5 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spring框架内部会默认进行数据类型转换</span><br><span class="line">表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上</span><br></pre></td></tr></table></figure><p>如果想自定义数据类型转换，可以实现Converter的接口，将String转Date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 特殊情况之：类型转换问题 --&gt;</span><br><span class="line">&lt;a href="account/deleteAccount?date=2018-01-01"&gt;根据日期删除账户&lt;/a&gt;</span><br><span class="line"><span class="comment">//自定义数据类型转换类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDate</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请输入日期数据"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date date = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                date = df.parse(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"日期准换错误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册自定义类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"site.newvalue.utils.StringToDate"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置spring开启注解mvc的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="ServletAPI做控制器参数"><a href="#ServletAPI做控制器参数" class="headerlink" title="ServletAPI做控制器参数"></a>ServletAPI做控制器参数</h5><p>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testServletAPI"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpSession session)</span> </span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><h5 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">作用：把请求中的指定名称的参数传递给控制器中的形参赋值</span><br><span class="line">属性</span><br><span class="line">    1. value：请求参数中的名称</span><br><span class="line">    2. required：请求参数中是否必须提供此参数，默认值是true，必须提供</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>,required=<span class="keyword">false</span>)</span>String name) </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用：用于获取请求体（所有form内容）的内容（注意：get方法不可以）</span><br><span class="line">直接使用得到是 key=value&amp;key=value...结构的数据</span><br><span class="line">属性： required：是否必须有请求体，默认值是true</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- request body 注解 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"useRequestBody"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 保存 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">useRequestBody</span><span class="params">(@RequestBody(required=<span class="keyword">false</span>)</span> String body)</span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="PathVariable注解"></a>PathVariable注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作用：拥有绑定url中的占位符的。例如：url中有/delete/&#123;id&#125;，&#123;id&#125;就是占位符</span><br><span class="line"></span><br><span class="line">属性value：指定url中的占位符名称</span><br><span class="line">&lt;a href="user/hello/1"&gt;入门案例&lt;/a&gt;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/hello/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable(value=<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Restful风格的URL：请求路径一样，可以根据不同的请求方式去执行后台的不同方法</span><br><span class="line">    restful风格的URL优点:结构清晰、符合标准、易于理解、扩展方便</span><br><span class="line">    </span><br><span class="line">    资源（ Resources）：网络上的一个实体，或者说是网络上的一个具体信息。</span><br><span class="line">    它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。</span><br><span class="line">    要获取这个资源，访问它的 URI 就可以，因此 URI 即为每一个资源的独一无二的识别符。</span><br><span class="line"></span><br><span class="line">    表现层（ Representation）：把资源具体呈现出来的形式，叫做它的表现层 （ Representation）。</span><br><span class="line">    比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</span><br><span class="line"></span><br><span class="line">    状态转化（State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。</span><br><span class="line">    HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生 “状态转化 ”（ State Tran sfer）。</span><br><span class="line">    </span><br><span class="line">    restful  的示例：</span><br><span class="line">    /account/<span class="number">1</span> HTTP  GET ：  得到 id = <span class="number">1</span> 的 account</span><br><span class="line">    /account/<span class="number">1</span> HTTP  DELETE： 删除 id = <span class="number">1</span> 的 account</span><br><span class="line">    /account/<span class="number">1</span> HTTP  PUT：  更新 id = <span class="number">1</span> 的 account</span><br><span class="line">    /account HTTP  POST：  新增 account</span><br><span class="line"></span><br><span class="line">由于浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器 HiddentHttpMethodFilter，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT与 DELETE 请求。</span><br><span class="line">使用方法：</span><br><span class="line">    第一步：在 web.xml 中配置该过滤器。</span><br><span class="line">    第二步：请求方式必须使用 post 请求。</span><br><span class="line">    第三步：按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。   </span><br><span class="line">&lt;!-- 删除 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"springmvc/testRestDELETE/1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"DELETE"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">" 删除 "</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRestDELETE/&#123;id&#125;"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">testRestfulURLDELETE</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"rest delete "</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用：获取指定请求头的值</span><br><span class="line">属性value：请求头的名称(不常用)</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestHeader(value=<span class="string">"Accept"</span>)</span> String header) </span>&#123;</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用：用于获取指定cookie的名称的值并传入控制器方法参数。</span><br><span class="line">属性，value：cookie的名称</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>)</span> String cookieValue) </span>&#123;</span><br><span class="line">    System.out.println(cookieValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="ModelAttribute注解"></a>ModelAttribute注解</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用</span><br><span class="line">    1. 出现在方法上：表示当前方法会在控制器方法执行前先执行</span><br><span class="line">    2. 出现在参数上：获取指定的数据给参数赋值</span><br><span class="line">value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</span><br><span class="line">使用场景：当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。</span><br><span class="line">如：我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。</span><br><span class="line">在提交表单数据是肯定没有此字段内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。</span><br></pre></td></tr></table></figure><p>修饰的方法有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="updateUser?name=test"&gt;测试 modelattribute&lt;/a&gt;</span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"哈哈"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">    user.setMoney(<span class="number">100</span>d);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修饰的方法无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="updateUser?name=test"&gt;测试 modelattribute&lt;/a&gt;</span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(String name,Map&lt;String, User&gt; map)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(name);</span><br><span class="line">    user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">    user.setMoney(<span class="number">100</span>);</span><br><span class="line">    map.put(<span class="string">"abc"</span>, user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@ModelAttribute(value=<span class="string">"abc"</span>)</span> User user) </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SessionAttributes注解"><a href="#SessionAttributes注解" class="headerlink" title="SessionAttributes注解"></a>SessionAttributes注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">作用：用于多次执行控制器方法间的参数共享</span><br><span class="line">属性，value：指定存入属性的名称</span><br><span class="line">&lt;!-- SessionAttribute 注解的使用 --&gt;</span><br><span class="line">&lt;a href="user/user"&gt;存入 SessionAttribute&lt;/a&gt;</span><br><span class="line">&lt;a href="user/find"&gt;取出 SessionAttribute&lt;/a&gt;</span><br><span class="line">&lt;a href="user/delete"&gt;清除 SessionAttribute&lt;/a&gt;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value=&#123;<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"age"</span>&#125;,types=&#123;String.class,Integer.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionContorller</span> </span>&#123;</span><br><span class="line">    <span class="comment">//向session中存入值</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向session域中保存数据"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"password"</span>, <span class="string">"123"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从session中获取值</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/find"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">        String username = (String) modelMap.get(<span class="string">"username"</span>);</span><br><span class="line">        String password = (String) modelMap.get(<span class="string">"password"</span>);</span><br><span class="line">        Integer age = (Integer) modelMap.get(<span class="string">"age"</span>);</span><br><span class="line">        System.out.println(username + <span class="string">" : "</span>+password +<span class="string">" : "</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除值</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(SessionStatus status)</span> </span>&#123;</span><br><span class="line">        status.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h4><h5 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h5><p>Controller方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////指定逻辑视图名，经过视图解析器解析为jsp物理路径：/WEB-INF/pages/success.jsp</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(Model model)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> <span class="string">"success"</span>;&#125;</span><br></pre></td></tr></table></figure><h5 id="返回值为void"><a href="#返回值为void" class="headerlink" title="返回值为void"></a>返回值为void</h5><p>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。默认会跳转到@RequestMapping(value=”/initUpdate”) initUpdate.jsp的页面</p><p>可以使用请求转发或者重定向跳转到指定的页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getVoid"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"请求转发"</span>);</span><br><span class="line">    <span class="comment">//        request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);</span></span><br><span class="line">    System.out.println(<span class="string">"请求重定向"</span>);</span><br><span class="line">    <span class="comment">//请求不到WEB-INF里的东西</span></span><br><span class="line">    <span class="comment">//response.sendRedirect(request.getContextPath()+"/index.jsp");</span></span><br><span class="line">    <span class="comment">//直接响应</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    response.getWriter().println(<span class="string">"你好"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="返回值为ModelAndView对象"><a href="#返回值为ModelAndView对象" class="headerlink" title="返回值为ModelAndView对象"></a>返回值为ModelAndView对象</h5><p>ModelAndView对象是Spring提供的一个对象，可以用来调整具体的JSP视图</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"小凤"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"456"</span>);</span><br><span class="line">    <span class="comment">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span></span><br><span class="line">    mv.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="comment">// 跳转到哪个页面</span></span><br><span class="line">    mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line">响应的 jsp  代码：</span><br><span class="line">&lt;%<span class="meta">@page</span> language=<span class="string">"java"</span>  contentType=<span class="string">"text/html;  charset=UTF-8"</span></span><br><span class="line">           pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE  html  PUBLIC  <span class="string">"-//W3C//DTD  HTML  4.01  Transitional//EN"</span></span><br><span class="line"><span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;执行成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">执行成功！</span><br><span class="line">$&#123;requestScope.user.name&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForwardOrRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForwardOrRedirect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testForwardOrRedirect执行"</span>);</span><br><span class="line">    <span class="comment">//forward:转发的JSP路径，不走视图解析器了，所以需要编写完整的路径</span></span><br><span class="line">    <span class="comment">//return "forward:/WEB-INF/pages/success.jsp";</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect: /index.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是重定向到 jsp 页面，则 jsp 页面不能写在 WEB-INF 目录中，否则无法找到。</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/count"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">count</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"count方法执行了..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/add.jsp"</span>;</span><br><span class="line">    <span class="comment">// return "redirect:/user/findAll";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ResponseBody响应json数据"><a href="#ResponseBody响应json数据" class="headerlink" title="ResponseBody响应json数据"></a>ResponseBody响应json数据</h5><p>jsp中使用Ajax进行异步调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">"testAjax"</span>,</span></span><br><span class="line"><span class="javascript">                contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span></span><br><span class="line"><span class="javascript">                data:<span class="string">'&#123;"name":"zsy","password":"123"&#125;'</span>,</span></span><br><span class="line"><span class="javascript">                datatype:<span class="string">"json"</span>,</span></span><br><span class="line"><span class="javascript">                type:<span class="string">"post"</span>,</span></span><br><span class="line"><span class="javascript">                success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                    alert(data);</span></span><br><span class="line"><span class="undefined">                    alert(data.name);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>发送ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="comment">//第一个使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</span></span><br><span class="line"><span class="comment">//第二个使用@RequestBody注解把json的字符串转换成JavaBean的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 做响应，模拟查询数据库</span></span><br><span class="line">    user.setName(<span class="string">"haha"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json字符串和JavaBean对象互相转换的过程中，Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入jackson 的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="避免img-css-js被拦截"><a href="#避免img-css-js被拦截" class="headerlink" title="避免img/css/js被拦截"></a>避免img/css/js被拦截</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet会拦截到所有资源，导致静态资源（img、css、js）也会被拦截到，从而不能被使用。</span><br><span class="line">解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置</span><br><span class="line">location元素表示webapp目录下的包下的所有文件</span><br><span class="line">mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</span><br><span class="line"><span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span> <span class="comment">&lt;!-- 样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span> <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span> <span class="comment">&lt;!-- javascript --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="文件上传回顾"><a href="#文件上传回顾" class="headerlink" title="文件上传回顾"></a>文件上传回顾</h5><p>上传的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写文件上传的JSP页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--form 表单的 enctype 取值必须是：multipart/form-data</span></span><br><span class="line"><span class="comment">(默认值是:application/x-www-form-urlencoded)</span></span><br><span class="line"><span class="comment">method 属性取值必须是 Post--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"user/fileupload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 编写文件上传的Controller控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/fileupload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 先获取到要上传的文件目录</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads"</span>);</span><br><span class="line">    <span class="comment">// 创建File对象，一会向该路径下上传文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="comment">// 判断路径是否存在，如果不存在，创建该路径</span></span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建磁盘文件项工厂</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">// 解析request对象</span></span><br><span class="line">    List&lt;FileItem&gt; list = fileUpload.parseRequest(request);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">        <span class="comment">// 判断文件项是普通字段，还是上传的文件</span></span><br><span class="line">        <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 上传文件项</span></span><br><span class="line">            <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">            String filename = fileItem.getName();</span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            fileItem.write(<span class="keyword">new</span> File(file, filename));</span><br><span class="line">            <span class="comment">// 删除临时文件</span></span><br><span class="line">            fileItem.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SpringMVC方式上传文件"><a href="#SpringMVC方式上传文件" class="headerlink" title="SpringMVC方式上传文件"></a>SpringMVC方式上传文件</h5><p>传统方式的文件上传，指上传文件和访问应用存在于同一台服务器上。且上传完成之后，浏览器可能跳转。</p><p>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的name属性名称相同。</p><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565765043642.png" alt="1565765043642"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">springMVC上传</span><br><span class="line">&lt;form action=<span class="string">"fileUpload2"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传文件"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileUpload2</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"fileUpload2执行了。。。"</span>);</span><br><span class="line">    String path=request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    File file=<span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    String filename=upload.getOriginalFilename();</span><br><span class="line">    String uuid=UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    filename=uuid+<span class="string">"_"</span>+filename;</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(file,filename));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置配置文件上传解析器 id必须是这个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 5MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="SpringMVC跨服务器文件上传"><a href="#SpringMVC跨服务器文件上传" class="headerlink" title="SpringMVC跨服务器文件上传"></a>SpringMVC跨服务器文件上传</h5><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309224136253.png" alt="image-20200309224136253"></p><p>首先搭建图片服务器：重新开启一个tomcat模拟图片服务器</p><p>其次实现SpringMVC跨服务器方式文件上传，首先导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;跨服务器文件上传&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"user/fileUpload3"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileUpload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//图片服务器上传地址</span></span><br><span class="line">    String path=<span class="string">"http://localhost:9090/fileuploadserver_war_exploded/uploads/"</span>;</span><br><span class="line">    String filename=upload.getOriginalFilename();</span><br><span class="line">    String uuid=UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    filename=uuid+<span class="string">"_"</span>+filename;</span><br><span class="line">    <span class="comment">// 向图片服务器上传文件</span></span><br><span class="line">    <span class="comment">//创建客户端对象</span></span><br><span class="line">    Client client=Client.create();</span><br><span class="line">    <span class="comment">//连接图片服务器</span></span><br><span class="line">    WebResource webResource=client.resource(path+filename);</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    webResource.put(upload.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC的异常处理"><a href="#SpringMVC的异常处理" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h4><p>Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进<br>行异常的处理。</p><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565770298305.png" alt="1565770298305"></p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception ex)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        SysException e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span>  SysException)&#123;</span><br><span class="line">            e=(SysException)ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            e=<span class="keyword">new</span> SysException(<span class="string">"请联系管理员解决..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>,e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sysExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"site.syzhou.exception.SysExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SpringMVC框架中的拦截器"><a href="#SpringMVC框架中的拦截器" class="headerlink" title="SpringMVC框架中的拦截器"></a>SpringMVC框架中的拦截器</h4><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309225758215.png" alt="image-20200309225758215"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。</span><br><span class="line"></span><br><span class="line">可以定义拦截器链，拦接器链就是将拦截器按着一定的顺序结成一条链</span><br><span class="line">在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行</span><br><span class="line"></span><br><span class="line">拦截器也是AOP思想的一种实现方式</span><br><span class="line">想要自定义拦截器，需要实现HandlerInterceptor接口。</span><br><span class="line"></span><br><span class="line">HandlerInterceptor接口中的方法</span><br><span class="line">    preHandle方法是controller方法执行前拦截的方法</span><br><span class="line">        可以使用request或者response跳转到指定的页面</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>不放行，不会执行controller中的方法。</span><br><span class="line">        </span><br><span class="line">    postHandle是controller方法执行后执行的方法，在JSP视图执行前。</span><br><span class="line">        可以使用request或者response跳转到指定的页面</span><br><span class="line">如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</span><br><span class="line"></span><br><span class="line">afterCompletion方法是在JSP执行后执行</span><br><span class="line">request或者response不能再跳转页面了,在 DispatcherServlet 完全处理完请求后被调用</span><br></pre></td></tr></table></figure><p>拦截器和过滤器的功能比较类似，有区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。</span><br><span class="line">2. 拦截器是SpringMVC框架独有的。</span><br><span class="line">3. 过滤器配置了/*，可以拦截任何资源。</span><br><span class="line">4. 拦截器只会对控制器中方法进行拦截。jsp，html,css,image 或者 js 是不会进行拦截的。</span><br></pre></td></tr></table></figure><h5 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h5><p>编写拦截器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle111执行了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle111执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion111执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span><span class="comment">&lt;!--  用于指定对拦截的 url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">""</span>/&gt;</span><span class="comment">&lt;!--  用于指定排除的 url--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"site.syzhou.intercepter.MyInterceptor1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"site.syzhou.intercepter.MyInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309230932937.png" alt="image-20200309230932937"></p><h5 id="用户登录拦截器"><a href="#用户登录拦截器" class="headerlink" title="用户登录拦截器"></a>用户登录拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">           HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//如果是登录页面则放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().indexOf(<span class="string">"login.action"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//如果用户已登录也放行</span></span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户没有登录挑战到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request,</span><br><span class="line">                response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SSM搭建整合环境"><a href="#SSM搭建整合环境" class="headerlink" title="SSM搭建整合环境"></a>SSM搭建整合环境</h4><h5 id="整合的思路"><a href="#整合的思路" class="headerlink" title="整合的思路"></a>整合的思路</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SSM整合可以使用多种方式，选择XML + 注解的方式</span><br><span class="line">先搭建整合的环境</span><br><span class="line">先把Spring的配置搭建完成</span><br><span class="line">再使用Spring整合SpringMVC框架</span><br><span class="line">最后使用Spring整合MyBatis框架</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566445052389.png" alt="1566445052389"></p><h5 id="項目最终结构"><a href="#項目最终结构" class="headerlink" title="項目最终结构"></a>項目最终结构</h5><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566458876928.png" alt="1566458876928"></p><h5 id="数据库和表结构"><a href="#数据库和表结构" class="headerlink" title="数据库和表结构"></a>数据库和表结构</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ssm;</span><br><span class="line"><span class="keyword">use</span> ssm;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="pom-xml中依赖配置"><a href="#pom-xml中依赖配置" class="headerlink" title="pom.xml中依赖配置"></a>pom.xml中依赖配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建maven的工程（今天会使用到工程的聚合和拆分的概念，这个技术maven高级会讲）</span><br><span class="line">    1. 创建ssm_parent父工程（打包方式选择pom，必须的）</span><br><span class="line">    2. 创建ssm_web子模块（打包方式是war包）</span><br><span class="line">    3. 创建ssm_service子模块（打包方式是jar包）</span><br><span class="line">    4. 创建ssm_dao子模块（打包方式是jar包）</span><br><span class="line">    5. 创建ssm_domain子模块（打包方式是jar包）</span><br><span class="line">    6. web依赖于service，service依赖于dao，dao依赖于domain</span><br><span class="line">    7. 在ssm_parent的pom.xml文件中引入坐标依赖</span><br><span class="line">    8. 部署ssm_web的项目，只要把ssm_web项目加入到tomcat服务器中即可</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写业务层代码"><a href="#编写业务层代码" class="headerlink" title="编写业务层代码"></a>编写业务层代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7355810572012650248L</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//生成get和set方法和toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户..."</span>);</span><br><span class="line">        List&lt;Account&gt; accounts=accountDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存账户..."</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into account(name,money) value(#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建log4j-properties文件"><a href="#创建log4j-properties文件" class="headerlink" title="创建log4j.properties文件"></a>创建log4j.properties文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Set root category priority to INFO and its only appender to CONSOLE.</span><br><span class="line">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span><br><span class="line">log4j.rootCategory=info, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span><br><span class="line">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"># LOGFILE is set to be a File appender using a PatternLayout.</span><br><span class="line">log4j.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.LOGFILE.File=axis.log</span><br><span class="line">log4j.appender.LOGFILE.Append=true</span><br><span class="line">log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br></pre></td></tr></table></figure><h4 id="搭建测试Spring环境"><a href="#搭建测试Spring环境" class="headerlink" title="搭建测试Spring环境"></a>搭建测试Spring环境</h4><p>保证Spring框架在 web 工程中独立运行</p><h5 id="编写applicationContext-xml"><a href="#编写applicationContext-xml" class="headerlink" title="编写applicationContext.xml"></a>编写applicationContext.xml</h5><p>编写spring 配置文件applicationContext.xml并导入约束</p><p>在ssm_web项目中的resources目录创建applicationContext.xml的配置文件，编写具体的配置信息，为了节省空间，下面是所有整合后的完整配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层controller注解，因为web层让SpringMVC框架</span></span><br><span class="line"><span class="comment">    去管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.newvalue"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置要忽略的注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring整合Mybatis框架，把mybatis配置文件(SqlMapConfig.xml)中内容配置到spring配置文件中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0的连接池对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSession的工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描dao的包,配置自动扫描所有Mapper接口和文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描dao的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"site.newvalue.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 spring 声明式事务管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* site.newvalue.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 建立通知和切入点表达式的关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注解配置业务层代码"><a href="#注解配置业务层代码" class="headerlink" title="注解配置业务层代码"></a>注解配置业务层代码</h5><p>见上面业务层代码service和dao中的@Service(“accountService”)，@Repository等</p><h5 id="测试Spring"><a href="#测试Spring" class="headerlink" title="测试Spring"></a>测试Spring</h5><p>只用于测试，对整合用处不大，可以看到，测试类使用spring注解得到了accountService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTestSpring</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合SpringMVC环境"><a href="#整合SpringMVC环境" class="headerlink" title="整合SpringMVC环境"></a>整合SpringMVC环境</h4><p>目的：在controller中能成功的调用service对象中的方法</p><p>原理：在web.xml中配置ContextLoaderListener监听器（该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文件，所以需要配置applicationContext.xml的位置）。</p><p>这样在项目启动的时候，就去加载applicationContext.xml的配置文件。监听器原理如下图：</p><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566445076808.png" alt="1566445076808"></p><h5 id="修改web-xml文件"><a href="#修改web-xml文件" class="headerlink" title="修改web.xml文件"></a>修改web.xml文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在web.xml中配置DispatcherServlet前端控制器</span><br><span class="line">2. 在web.xml中配置DispatcherServlet过滤器解决中文乱码</span><br></pre></td></tr></table></figure><p>下面是整合后的web.xml文件，监听器是用于整合springmvc的，这三个是web.xml三大组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置Spring的监听器,在项目启动的时候，就去加载applicationContext.xml的配置文件,默认只加载web-inf目录下的applicationContext.xml --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置applicationContext.xml配置文件位置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建编写springmvc-xml"><a href="#创建编写springmvc-xml" class="headerlink" title="创建编写springmvc.xml"></a>创建编写springmvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描controller的注解，别的不扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.syzhou"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启对SpringMVC注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试SpringMVC"><a href="#测试SpringMVC" class="headerlink" title="测试SpringMVC"></a>测试SpringMVC</h5><p>1 编写前端页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href="account/findAll"&gt;查询所有&lt;/a&gt;&lt;br&gt;</span><br><span class="line">    &lt;h3&gt;测试保存&lt;/h3&gt;</span><br><span class="line">    &lt;form method=<span class="string">"post"</span> action=<span class="string">"account/save"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;&lt;br&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list.jsp</span></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;b&gt;查询了所有的账户信息&lt;/b&gt;&lt;br&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">        $&#123;account.name&#125;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2 创建AccountController类，编写方法，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//利用spring自动注入对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户信息"</span>);</span><br><span class="line">        <span class="comment">//调用service方法</span></span><br><span class="line">        List&lt;Account&gt; list=accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：保存账户信息"</span>);</span><br><span class="line">        <span class="comment">//调用service方法</span></span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">"/account/findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合MyBatis的环境"><a href="#整合MyBatis的环境" class="headerlink" title="整合MyBatis的环境"></a>整合MyBatis的环境</h4><p>目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中</p><h5 id="编写SqlMapConfig-xml配置文件"><a href="#编写SqlMapConfig-xml配置文件" class="headerlink" title="编写SqlMapConfig.xml配置文件"></a>编写SqlMapConfig.xml配置文件</h5><p>只用于测试mybatis是否成功，后面整合时用的是前面整合思路applicationContext.xml，是cp30数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="com.itheima.domain.User" alias="user"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"site.newvalue.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用的是注解，引入映射配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper class="site.syzhou.dao.AccountDao"/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resources="site/syzhou/dao/AccountDao.xml"/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认扫描该包下所有的dao接口都可以使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"site.newvalue.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Dao接口方法上加注解"><a href="#Dao接口方法上加注解" class="headerlink" title="Dao接口方法上加注解"></a>Dao接口方法上加注解</h5><p>见上面的实现dao接口</p><h5 id="测试MyBatis"><a href="#测试MyBatis" class="headerlink" title="测试MyBatis"></a>测试MyBatis</h5><p>只用于测试，对整合无帮助</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTestMybatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in= Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder=<span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory=builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession=factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        AccountDao accountDao=sqlSession.getMapper(AccountDao.class);</span><br><span class="line">        accountDao.saveAccount(<span class="keyword">new</span> Account(<span class="string">"4"</span>,<span class="number">4.0</span>));</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        List&lt;Account&gt; accounts=accountDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合SpringMVC详细"><a href="#整合SpringMVC详细" class="headerlink" title="整合SpringMVC详细"></a>整合SpringMVC详细</h4><p>目的：在controller中能成功的调用service对象中的方法</p><p>原理：在web.xml中配置ContextLoaderListener监听器（该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文件，所以需要配置applicationContext.xml的位置）。</p><p>这样在项目启动的时候，就去加载applicationContext.xml的配置文件。监听器原理如下图：</p><p><img src="/../assets/pic/2018-07-07-SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566445076808.png" alt="1566445076808"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在web.xml中配置Spring的监听器,在项目启动的时候，就去加载applicationContext.xml的配置文件,默认只加载web-inf目录下的applicationContext.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置applicationContext.xml配置文件位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着在controller中注入service对象，调用service对象的方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用spring自动注入对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountService accountService;</span><br></pre></td></tr></table></figure><h4 id="整合MyBatis详细"><a href="#整合MyBatis详细" class="headerlink" title="整合MyBatis详细"></a>整合MyBatis详细</h4><p>目的：把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring整合Mybatis框架，把mybatis配置文件(SqlMapConfig.xml)中内容配置到spring配置文件中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置C3P0的连接池对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SqlSession的工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描dao的包,配置自动扫描所有Mapper接口和文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描dao的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"site.syzhou.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在AccountDao接口中添加@Repository注解</p><p>3.在service中注入dao对象，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span>  AccountDao accountDao;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置Spring的声明式事务管理</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 spring 声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* site.syzhou.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 建立通知和切入点表达式的关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;咱们开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序&lt;/p&gt;
&lt;p&gt;使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构&lt;/p&gt;
&lt;p&gt;SpringMVC属于表现层框架&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础知识</title>
    <link href="/2018/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-06-Spring基础知识/</id>
    <published>2018-07-06T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h4><p>pring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 SpringMVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p><a id="more"></a><h5 id="spring优势"><a href="#spring优势" class="headerlink" title="spring优势"></a>spring优势</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">##### 方便解耦，简化开发</span><br><span class="line">通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</span><br><span class="line"></span><br><span class="line">##### AOP编程的支持</span><br><span class="line">通过 Spring的 AOP 功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过 AOP 轻松应付。</span><br><span class="line"></span><br><span class="line">##### 声明式事务的支持</span><br><span class="line">可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</span><br><span class="line"></span><br><span class="line">##### 方便程序的测试</span><br><span class="line">可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</span><br><span class="line"></span><br><span class="line">##### 方便集成各种优秀框架</span><br><span class="line">Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的直接支持。</span><br><span class="line"></span><br><span class="line">##### 降低 JavaEE API 使用难度</span><br><span class="line">Spring对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。</span><br></pre></td></tr></table></figure><h5 id="spring体系结构"><a href="#spring体系结构" class="headerlink" title="spring体系结构"></a>spring体系结构</h5><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566530239633.png" alt="1566530239633"></p><h4 id="IoC概念和作用"><a href="#IoC概念和作用" class="headerlink" title="IoC概念和作用"></a>IoC概念和作用</h4><h5 id="控制反转IOC-Inversion-Of-Control"><a href="#控制反转IOC-Inversion-Of-Control" class="headerlink" title="控制反转IOC(Inversion Of Control)"></a>控制反转IOC(Inversion Of Control)</h5><p>作用：把创建对象的权利交给框架，削减计算机程序的耦合(解除我们代码中的依赖关系)</p><p>工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。主要包括依赖注入和依赖查找</p><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566531231569.png" alt="1566531231569"></p><h5 id="程序的耦合和解耦"><a href="#程序的耦合和解耦" class="headerlink" title="程序的耦合和解耦"></a>程序的耦合和解耦</h5><ul><li><code>耦合</code>: 程序间的依赖关系.在开发中,应该做到解决<code>编译期依赖</code>,即<code>编译期不依赖,运行时才依赖</code>.耦合指的就是就是对象之间的依赖性。对象之间的耦合越高，维护成本越高。</li><li>解耦的思路: 使用反射来创建对象,而避免使用new关键字,并通过读取配置文件来获取要创建的对象全限定类名.</li><li>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。在开发中，有些依赖关系是必须的，有些依赖关系可以通过优化代码来解除的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>） 内容耦合。当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用之。</span><br><span class="line">（<span class="number">2</span>） 公共耦合。两个或两个以上的模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是哪个模块给全局变量赋了一个特定的值是十分困难的。</span><br><span class="line">（<span class="number">3</span>） 外部耦合 。一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。</span><br><span class="line">（<span class="number">4</span>） 控制耦合 。一个模块通过接口向另一个模块传递一个控制信号，接受信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。</span><br><span class="line">（<span class="number">5</span>） 标记耦合 。若一个模块 A 通过接口向两个模块 B 和 C 传递一个公共参数，那么称模块 B 和 C 之间存在一个标记耦合。</span><br><span class="line">（<span class="number">6</span>） 数据耦合。模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</span><br><span class="line">（<span class="number">7</span>） 非直接耦合 。两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。</span><br><span class="line">总结：耦合是影响软件复杂程度和设计质量的一个重要因素，在设计上我们应采用以下原则：如果模块间必须存在耦合，就尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，尽量避免使用内容耦合。</span><br></pre></td></tr></table></figure><h5 id="解耦实例1-JDBC驱动注册"><a href="#解耦实例1-JDBC驱动注册" class="headerlink" title="解耦实例1: JDBC驱动注册"></a>解耦实例1: JDBC驱动注册</h5><p>JDBC操作中注册驱动时,我们不使用<code>DriverManager</code>的<code>register</code>方法,而采用<code>Class.forName(&quot;驱动类全类名&quot;)</code>的方式.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//注册驱动的两种方式</span></span><br><span class="line"><span class="comment">// 1. 创建驱动类的实例 </span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line"><span class="comment">// 2. 通过反射加载驱动类</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">// 实际开发中此类名从properties文件中读取</span></span><br><span class="line"><span class="comment">//...后续操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>com.mysql.jdbc.Driver</code>类的源码如下,在类加载和初始化时,会执行static代码块中的部分,也就是说加载类的时候就自动注册驱动了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());<span class="comment">// 类初始化时执行注册动作</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// Required for Class.forName().newInstance()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的好处是，我们的类中不再依赖具体的驱动类，此时就算删除 mysql 的驱动 jar 包，依然可以编译（运行就不要想了，没有驱动不可能运行成功的）。</p><h5 id="解耦实例2-UI层-Service层-Dao层调用"><a href="#解耦实例2-UI层-Service层-Dao层调用" class="headerlink" title="解耦实例2: UI层,Service层,Dao层调用"></a>解耦实例2: UI层,Service层,Dao层调用</h5><p>在Web项目中,<code>UI层</code>,<code>Service层</code>,<code>Dao层</code>之间有着前后调用的关系.在实际开发中可以把三层的对象的全类名都使用配置文件保存起来,当启动服务器应用加载的时候,让一个类中的方法通过读取配置文件，创建这些对象的实例并保存在<code>容器</code>中. 这个读取配置文件，创建和获取三层对象的类就是工厂。在获取对象时,不使用new的方式,而是直接从<code>容器</code>中获取,这就是<code>工厂设计模式</code>，下面是一个简单的工厂模式代码</p><ul><li>Bean：在计算机英语中，有可重用组件的含义。</li><li>JavaBean：用java语言编写的可重用组件。javabean &gt;  实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个创建Bean对象的工厂，用来创建我们的service和dao对象的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   第一个：需要一个配置文件来配置我们的service和dao</span></span><br><span class="line"><span class="comment"> *           配置的内容：唯一标识=全限定类名（key=value)</span></span><br><span class="line"><span class="comment"> *   第二个：通过读取配置文件中配置的内容，反射创建对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   我的配置文件可以是xml也可以是properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line">    <span class="comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">"bean.properties"</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">//取出每个Key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器中</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据bean的名称获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**根据Bean的名称获取bean对象,非单例，每次都会调用默认构造函数创建对象</span></span><br><span class="line"><span class="comment">    public static Object getBean(String beanName)&#123;</span></span><br><span class="line"><span class="comment">        Object bean = null;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            String beanPath = props.getProperty(beanName);</span></span><br><span class="line"><span class="comment">            System.out.println(beanPath);</span></span><br><span class="line"><span class="comment">            bean = Class.forName(beanPath).newInstance();//每次都会调用默认构造函数创建对象</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return bean;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private IAccountDao accountDao = new AccountDaoImpl();</span></span><br><span class="line"><span class="comment">//使用工厂模式得到AcountDao对象</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) MyBeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br></pre></td></tr></table></figure><h4 id="spring的IOC解决程序耦合"><a href="#spring的IOC解决程序耦合" class="headerlink" title="spring的IOC解决程序耦合"></a>spring的IOC解决程序耦合</h4><h5 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h5><p>1.准备工作: 创建MAVEN项目,创建业务层接口和实现类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    IAccountDao accountDao=<span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存了账户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置<code>bean</code>: 在类的根路径下的<code>resource</code>目录下创建<code>bean.xml</code>文件,把对象的创建交给spring来管理.<br>每个<code>&lt;bean&gt;</code>标签对应一个类,其<code>class</code>属性为该类的全类名,<code>id</code>属性为该类的id,在spring配置中,通过<code>id</code>获取类的对象.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bean 标签：用于配置让 spring 创建对象，并且存入 ioc 容器之中</span></span><br><span class="line"><span class="comment">        id 属性：对象的唯一标识。</span></span><br><span class="line"><span class="comment">        class 属性：指定要创建对象的全限定类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"site.newvalue.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"site.newvalue.dao.impl.AccountDaoImpl"</span> <span class="attr">id</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试类通过<code>容器</code>创建对象.通过核心容器的<code>getBean()</code>方法获取具体对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取核心容器对象</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">// 根据id获取Bean对象</span></span><br><span class="line">    IAccountService as  = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">    <span class="comment">// 执行as的具体方法</span></span><br><span class="line">    as.saveAccount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ApplicationContext实现细节"><a href="#ApplicationContext实现细节" class="headerlink" title="ApplicationContext实现细节"></a>ApplicationContext实现细节</h5><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309141343267.png" alt="image-20200309141343267"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* ApplicationContext的三个常用实现类：</span><br><span class="line">   ClassPathXmlApplicationContext：加载类路径下配置文件，要求文件必须在类路径下。不在的话，加载不了。(更常用)</span><br><span class="line">   FileSystemXmlApplicationContext：加载磁盘任意路径下的配置文件(必须有访问权限）</span><br><span class="line">   AnnotationConfigApplicationContext：用于读取注解创建容器</span><br><span class="line"></span><br><span class="line">* 核心容器的两个接口引发出的问题：</span><br><span class="line">*  ApplicationContext:     单例对象适用              采用此接口</span><br><span class="line">*      它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。</span><br><span class="line">*  BeanFactory:            多例对象使用</span><br><span class="line">*      它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。</span><br></pre></td></tr></table></figure><h5 id="IOC中bean标签"><a href="#IOC中bean标签" class="headerlink" title="IOC中bean标签"></a>IOC中bean标签</h5><ul><li>作用: 配置托管给spring的对象,默认情况下调用类的无参构造函数创建对象,若类没有无参构造函数则不能创建成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">属性:</span><br><span class="line">id: 指定对象在容器中的标识,将其作为参数，传入getBean()方法，可以获取获取对应对象.</span><br><span class="line">class: 指定类的全类名,默认情况下调用无参构造函数</span><br><span class="line">scope: 指定对象的作用范围,可选值如下</span><br><span class="line">    singleton: 单例对象,默认值</span><br><span class="line">    prototype: 多例对象</span><br><span class="line">    request: 将对象存入到web项目的request域中</span><br><span class="line">    session: 将对象存入到web项目的session域中</span><br><span class="line">global session: 将对象存入到web项目集群session域中,若不存在集群则global session相当于session</span><br><span class="line">init-method：指定类的初始化方法名称,在对象创建成功之后执行</span><br><span class="line">destroy-method：指定类中销毁方法名称,对prototype多例对象没有作用,因为多利对象销毁时机不受容器控制</span><br></pre></td></tr></table></figure><p>理解global session集群的Session如下图，实现了集群不同服务器见共享信息</p><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566547327645.png" alt="1566547327645"></p><h5 id="bean作用范围和生命周期"><a href="#bean作用范围和生命周期" class="headerlink" title="bean作用范围和生命周期"></a>bean作用范围和生命周期</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bean对象的生命周期</span><br><span class="line">    单例对象 scope=&quot;singleton&quot;</span><br><span class="line">        出生：当容器创建时对象出生</span><br><span class="line">        活着：只要容器还在，对象一直活着</span><br><span class="line">        死亡：容器销毁，对象消亡</span><br><span class="line">        总结：单例对象的生命周期和容器相同</span><br><span class="line">    多例对象 scope=&quot;prototype&quot;</span><br><span class="line">        出生：当我们使用对象时spring框架为我们创建</span><br><span class="line">        活着：对象只要是在使用过程中就一直活着。</span><br><span class="line">        死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</span><br></pre></td></tr></table></figure><h5 id="实例化Bean的三种方式"><a href="#实例化Bean的三种方式" class="headerlink" title="实例化Bean的三种方式"></a>实例化Bean的三种方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种方式：使用默认构造函数创建。</span></span><br><span class="line"><span class="comment">            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。</span></span><br><span class="line"><span class="comment">            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"site.newvlaue.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</span></span><br><span class="line"><span class="comment">//模拟一个实例工厂，创建业务层实现类; 此工厂创建对象，必须现有工厂实例对象，再调用方法</span></span><br><span class="line"><span class="comment">    public class InstanceFactory &#123;</span></span><br><span class="line"><span class="comment">        public IAccountService createAccountService()&#123;</span></span><br><span class="line"><span class="comment">            return new AccountServiceImpl();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"site.newvlaue.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</span></span><br><span class="line"><span class="comment">    //模拟一个静态工厂，创建业务层实现类</span></span><br><span class="line"><span class="comment">    public class StaticFactory &#123; </span></span><br><span class="line"><span class="comment">        public static IAccountService createAccountService()&#123;</span></span><br><span class="line"><span class="comment">            return new AccountServiceImpl();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    id 属性：指定 bean 的 id，用于从容器中获取</span></span><br><span class="line"><span class="comment">    class 属性：指定静态工厂的全限定类名</span></span><br><span class="line"><span class="comment">    factory-method 属性：指定生产对象的静态方法    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"site.newvlaue.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Spring中的依赖注入"><a href="#Spring中的依赖注入" class="headerlink" title="Spring中的依赖注入"></a>Spring中的依赖注入</h4><p>依赖注入(Dependency Injection)是spring框架核心ioc的具体实现.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">通过控制反转,我们把创建对象托管给了spring,在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明。</span><br><span class="line">但是代码中不可能消除所有依赖,例如:业务层仍然会调用持久层的方法,因此业务层类中应包含持久化层的实现类对象.</span><br><span class="line">我们等待框架通过配置的方式将持久层对象传入业务层,而不是直接new对象,称为依赖注入.</span><br><span class="line">因为是通过反射方式来创建属性对象,而非使用new,因此要指定创建出对象各字段取值，这是依赖注入重点。</span><br><span class="line"></span><br><span class="line">能注入的数据：有三类</span><br><span class="line">    基本类型和String</span><br><span class="line">    其他bean类型（在配置文件中或者注解配置过的bean）</span><br><span class="line">    复杂类型/集合类型</span><br><span class="line">注入的方式：有三种</span><br><span class="line">    第一种：使用构造函数提供</span><br><span class="line">    第二种：使用set方法提供</span><br><span class="line">    第三种：使用注解提供</span><br></pre></td></tr></table></figure><h5 id="使用构造函数注入"><a href="#使用构造函数注入" class="headerlink" title="使用构造函数注入"></a>使用构造函数注入</h5><p>顾名思义，就是使用类中构造函数，给成员变量赋值。注意，赋值操作不是我们自己做的，而是通过配置方式，让 spring框架来为我们注入。</p><p>在获取bean对象时，注入数据是必须操作，必须有相符合的构造函数，否则对象无法创建成功</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">寻找要赋值给的字段</span><br><span class="line">    index: 指定参数在构造函数参数列表的索引位置，从0开始</span><br><span class="line">    type: 指定参数在构造函数中的数据类型</span><br><span class="line">    name: 指定参数在构造函数中的变量名,最常用的属性</span><br><span class="line">指定赋给字段的值</span><br><span class="line">    value: 给基本数据类型和String类型赋值</span><br><span class="line">    ref: 给其它Bean类型的字段赋值,ref属性的值应为配置文件中配置的Bean的id</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"site.newvalue.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"zsy"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"now"</span> <span class="attr">type</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用set方法注入-更常用"><a href="#使用set方法注入-更常用" class="headerlink" title="使用set方法注入(更常用)"></a>使用set方法注入(更常用)</h5><p>在类中提供需要注入成员属性的set方法,创建对象只调用要赋值属性set方法，可以注入部分字段.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">指定要调用set方法赋值的成员字段</span><br><span class="line">name：要调用set方法赋值的成员字段</span><br><span class="line">指定赋给字段的值</span><br><span class="line">    value: 给基本数据类型和String类型赋值</span><br><span class="line">    ref: 给其它Bean类型的字段赋值,ref属性的值应为配置文件中配置的Bean的id</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"site.newvalue.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"2018/03/12"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">通过在xml中导入p名称空间，使用p:propertyName来注入数据，本质仍然是调用类中的set方法实现注入功能</span><br><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:name</span>=<span class="string">"test"</span> <span class="attr">p:age</span>=<span class="string">"21"</span> <span class="attr">p:birthday-ref</span>=<span class="string">"now"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入集合字段"><a href="#注入集合字段" class="headerlink" title="注入集合字段"></a>注入集合字段</h5><p>就是给类中的集合成员传值，它用的也是set方法注入的方式，只不过变量的数据类型都是集合。集合字段及其对应的标签按照<strong>集合的结构</strong>分为两类: 相同结构的集合标签之间可以互相替换.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">只有键的结构:</span><br><span class="line">    数组字段: <span class="tag">&lt;<span class="name">array</span>&gt;</span>标签表示集合,<span class="tag">&lt;<span class="name">value</span>&gt;</span>标签表示集合内的成员.</span><br><span class="line">    List字段: <span class="tag">&lt;<span class="name">list</span>&gt;</span>标签表示集合,<span class="tag">&lt;<span class="name">value</span>&gt;</span>标签表示集合内的成员.</span><br><span class="line">    Set字段: <span class="tag">&lt;<span class="name">set</span>&gt;</span>标签表示集合,<span class="tag">&lt;<span class="name">value</span>&gt;</span>标签表示集合内的成员.</span><br><span class="line">    其中<span class="tag">&lt;<span class="name">array</span>&gt;</span>,<span class="tag">&lt;<span class="name">list</span>&gt;</span>,<span class="tag">&lt;<span class="name">set</span>&gt;</span>标签之间可以互相替换使用.</span><br><span class="line"></span><br><span class="line">键值对的结构:</span><br><span class="line">    Map字段: <span class="tag">&lt;<span class="name">map</span>&gt;</span>标签表示集合,<span class="tag">&lt;<span class="name">entry</span>&gt;</span>标签表示集合内的键值对,其key属性表示键,value属性表示值.</span><br><span class="line">    Properties字段: <span class="tag">&lt;<span class="name">props</span>&gt;</span>标签表示集合,<span class="tag">&lt;<span class="name">prop</span>&gt;</span>标签表示键值对,其key属性表示键,标签内的内容表示值.</span><br><span class="line">    其中<span class="tag">&lt;<span class="name">map</span>&gt;</span>,<span class="tag">&lt;<span class="name">props</span>&gt;</span>标签之间,<span class="tag">&lt;<span class="name">entry</span>&gt;</span>,<span class="tag">&lt;<span class="name">prop</span>&gt;</span>标签之间可以互相替换使用.</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"site.syzhou.service.impl.AccountServiceImpl3"</span> <span class="attr">id</span>=<span class="string">"accountService3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrays"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lists"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"123"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"456"</span>&gt;</span>456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于注解的IOC配置"><a href="#基于注解的IOC配置" class="headerlink" title="基于注解的IOC配置"></a>基于注解的IOC配置</h4><p>bean.xml配置spring支持注解操作，使用注解实现IOC,要将注解写在类的定义中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--告诉Spring需要扫描的包，配置不在beans约束中，在context约束中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.newvalue"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 dbAssit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbAssit"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dbassit.DBAssit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring_day02"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注解配置VSxml配置"><a href="#注解配置VSxml配置" class="headerlink" title="注解配置VSxml配置"></a>注解配置VSxml配置</h5><p>注解的优势：配置简单，维护方便（我们找到类，就相当于找到了对应的配置）。<br>XML  的优势：修改时，不用改源码。不涉及重新编译和部署。</p><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309151120491.png" alt="image-20200309151120491"></p><h5 id="创建对象的注解"><a href="#创建对象的注解" class="headerlink" title="创建对象的注解"></a>创建对象的注解</h5><p>作用相当于bean.xml中的\<bean>标签\<bean id="" class=""></bean></bean></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>: 把当前类对象存入spring容器中,其属性如下:</span><br><span class="line">value: 用于指定当前类的id. 不写时默认值是当前类名,且首字母改小写</span><br><span class="line"><span class="meta">@Controller</span>: 将当前表现层对象存入spring容器中</span><br><span class="line"><span class="meta">@Service</span>: 将当前业务层对象存入spring容器中</span><br><span class="line"><span class="meta">@Repository</span>: 将当前持久层对象存入spring容器中</span><br><span class="line"><span class="meta">@Controller</span>,<span class="meta">@Service</span>,<span class="meta">@Repository</span>注解的作用和属性与<span class="meta">@Component</span>是一模一样的,可以相互替代,它们的作用是使三层对象的分别更加清晰</span><br><span class="line">如果注解中有且只有一个属性 要赋值时是 ，且名称是 value ，value在赋值是可以不写</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> DBAssit dbAssit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注入数据的注解"><a href="#注入数据的注解" class="headerlink" title="注入数据的注解"></a>注入数据的注解</h5><p>作用相当于<code>bean.xml</code>中的<code>&lt;property&gt;</code>标签，相当于：\<property name="" ref=""><br>\<property name="" value=""></property></property></p><p>@Autowired:注入过程如图：</p><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566891253483.png" alt="1566891253483"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>: 自动按照成员变量类型注入.</span><br><span class="line">    注入过程</span><br><span class="line">        当spring容器中有且只有一个对象的类型与要注入的类型相同时,注入该对象.</span><br><span class="line">        当spring容器中有多个对象类型与要注入的类型相同时</span><br><span class="line">        使用要注入的变量名作为bean的id,在spring容器查找,找到则注入该对象.找不到则报错.</span><br><span class="line">    出现位置: 既可以在变量上,也可以在方法上</span><br><span class="line">    细节: 使用注解注入时,set方法可以省略</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Qualifier</span>: 在自动按照类型注入的基础之上,再按照bean的id注入.</span><br><span class="line">    出现位置: 既可以在变量上,也可以在方法上</span><br><span class="line">    注入变量时不能独立使用,必须和<span class="meta">@Autowire</span>一起使用; 注入方法时可以独立使用.</span><br><span class="line">    属性:value: 指定bean的id</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Resource</span>: 直接按bean的id注入,可以独立使用.独立使用时相当于同时使用<span class="meta">@Autowired</span>和<span class="meta">@Qualifier</span>两个注解.</span><br><span class="line">    属性:name: 指定bean的id</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Value</span>: 注入基本数据类型和String类型数据</span><br><span class="line">    属性:value: 用于指定数据的值,可以使用el表达式($&#123;表达式&#125;)</span><br></pre></td></tr></table></figure><h5 id="改变作用范围的注解"><a href="#改变作用范围的注解" class="headerlink" title="改变作用范围的注解"></a>改变作用范围的注解</h5><p>作用相当于bean.xml中的\<bean>标签的scope属性.\<bean id="" class="" scope=""></bean></bean></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>: 指定bean的作用范围</span><br><span class="line">属性:value: 用于指定作用范围的取值,<span class="string">"singleton"</span>,<span class="string">"prototype"</span>,<span class="string">"request"</span>,<span class="string">"session"</span>,<span class="string">"globalsession"</span></span><br></pre></td></tr></table></figure><h5 id="生命周期相关注解"><a href="#生命周期相关注解" class="headerlink" title="生命周期相关注解"></a>生命周期相关注解</h5><p>这些注解的作用相当于bean.xml中的\<bean>标签的init-method和destroy-method属性\<bean id="" class="" init-method="" destroy-method=""></bean></bean></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span>: 用于指定初始化方法</span><br><span class="line"><span class="meta">@PreDestroy</span>: 用于指定销毁方法</span><br></pre></td></tr></table></figure><h4 id="半注解配置和纯注解配置"><a href="#半注解配置和纯注解配置" class="headerlink" title="半注解配置和纯注解配置"></a>半注解配置和纯注解配置</h4><p>spring的注解配置可以与xml配置并存,也可以只使用注解配置</p><h5 id="半注解配置"><a href="#半注解配置" class="headerlink" title="半注解配置"></a>半注解配置</h5><p>在<code>半注解配置</code>下,spring容器仍然使用<code>ClassPathXmlApplicationContext</code>类从xml文件中读取IOC配置,同时在xml文件中告知spring创建容器时要扫描的包.然后将spring注解加在类的定义中.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描包,配置此项所需标签不在beans约束中,而在一个名为context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.syzhou"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="纯注解配置"><a href="#纯注解配置" class="headerlink" title="纯注解配置"></a>纯注解配置</h5><p>在纯注解配置下,我们用配置类替代<code>bean.xml</code>,spring容器使用<code>AnnotationApplicationContext</code>类从spring配置类中读取IOC配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>: 用于指定当前类是一个spring配置类,当创建容器时会从该类上加载注解.获取容器时需要使用AnnotationApplicationContext(有<span class="meta">@Configuration</span>注解的类.class).</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>: 指定spring在初始化容器时要扫描的包,作用和bean.xml 文件中&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"要扫描的包名"</span>/&gt;是一样的. 其属性如下:</span><br><span class="line">basePackages: 用于指定要扫描的包,是value属性的别名</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>: 该注解只能写在方法上,表明使用此方法创建一个对象,并放入spring容器,其属性如下:</span><br><span class="line">name: 指定此方法创建出的bean对象的id</span><br><span class="line">细节: 使用注解配置方法时,如果方法有参数,Spring框架会到容器中查找有没有可用的bean对象,查找的方式与<span class="meta">@Autowired</span>注解时一样的.</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>: 用于加载properties配置文件中的配置.例如配置数据源时,可以把连接数据库的信息写到properties配置文件中,就可以使用此注解指定properties配置文件的位置,其属性如下:</span><br><span class="line">value: 用于指定properties文件位置.如果是在类路径下,需要写上<span class="string">"classpath:"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>: 用于导入其他配置类.使用<span class="meta">@Import</span>注解之后,有<span class="meta">@Import</span>注解类就是父配置类,而导入都是子配置类. </span><br><span class="line">其属性如下:value: 用于指定其他配置类的字节码</span><br></pre></td></tr></table></figure><h5 id="纯注解配置实现CRUD"><a href="#纯注解配置实现CRUD" class="headerlink" title="纯注解配置实现CRUD"></a>纯注解配置实现CRUD</h5><p>dao层实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">// 自动从spring容器中寻找QueryRunner类型对象注入给runner成员变量</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;<span class="comment">// DBUtil对象,用来执行SQL语句</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 功能实现...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 功能实现...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 功能实现...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span><span class="comment">// 自动从spring容器中寻找IAccountDao类型对象注入给accountDao成员变量</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;<span class="comment">// dao层对象,用来执行数据持久化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 功能实现...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 功能实现...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 功能实现...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包<code>config</code>存放配置类,其中<code>SpringConf</code>类为主配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">// 说明此类为配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"site.syzhou"</span>)<span class="comment">// 指定初始化容器时要扫描的包</span></span><br><span class="line"><span class="meta">@Import</span>(JdbcConfig.class)<span class="comment">// 引入JDBC配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中JDBCConfig类为JDBC配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">// 说明此类为配置类</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)<span class="comment">// 指定配置文件的路径,关键字classpath表示类路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)<span class="comment">// 为driver成员属性注入值,使用el表达式</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)<span class="comment">// 为url成员属性注入值,使用el表达式</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)<span class="comment">// 为usernamer成员属性注入值,使用el表达式</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)<span class="comment">// 为password成员属性注入值,使用el表达式</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建DBUtils对象</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"runner"</span>)<span class="comment">// 此将函数返回的bean对象存入spring容器中,其id为runner</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)<span class="comment">// 说明此bean对象的作用范围为多例模式,以便于多线程访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(@Qualifier(<span class="string">"ds"</span>)</span> DataSource dataSource)</span>&#123;</span><br><span class="line"><span class="comment">// 为函数参数datasource注入id为ds的bean对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建数据库连接池对象</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"ds"</span>)<span class="comment">// 此将函数返回的bean对象存入spring容器中,其id为ds</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*jdbc.properties文件：</span></span><br><span class="line"><span class="comment">jdbc.driver=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">jdbc.url=jdbc:mysql://localhost:3306/day44_ee247_spring</span></span><br><span class="line"><span class="comment">jdbc.username=root</span></span><br><span class="line"><span class="comment">jdbc.password=1234*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过注解获取容器</span></span><br><span class="line">ApplicationContext ac =</span><br><span class="line">        <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br></pre></td></tr></table></figure><h4 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">为啥要整合</span><br><span class="line">1、应用程序的入口</span><br><span class="line">main方法</span><br><span class="line">2、junit单元测试中，没有main方法也能执行</span><br><span class="line">junit集成了一个main方法</span><br><span class="line">该方法就会判断当前测试类中哪些方法有 @Test注解</span><br><span class="line">junit就让有Test注解的方法执行</span><br><span class="line">3、junit不会管我们是否采用spring框架</span><br><span class="line">在执行测试方法时，junit根本不知道我们是不是使用了spring框架</span><br><span class="line">所以也就不会为我们读取配置文件/配置类创建spring核心容器</span><br><span class="line">4、由以上三点可知</span><br><span class="line">当测试方法执行时，没有Ioc容器，就算写了Autowired注解，也无法实现注入</span><br></pre></td></tr></table></figure><p>整合思路</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Spring整合junit的配置</span><br><span class="line">    1、导入spring整合junit的jar(坐标)</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    2、使用Junit提供的一个注解把原有main方法替换了，替换成spring提供的</span><br><span class="line">    @Runwith</span><br><span class="line">    3、告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置</span><br><span class="line">        @ContextConfiguration</span><br><span class="line">            locations：指定xml文件的位置，加上classpath关键字，表示在类路径下</span><br><span class="line">            classes：指定注解类所在地位置</span><br><span class="line">当我们使用spring 5.x版本的时候，要求junit的jar必须是4.12及以上</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = Springconfiguration.class)</span><br><span class="line"><span class="comment">//@ContextConfiguration(locations = "classpath:bean.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountServiceImpl accountService=<span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindALL</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(accountService.findaAllAccount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><h5 id="转账事务问题"><a href="#转账事务问题" class="headerlink" title="转账事务问题"></a>转账事务问题</h5><p>下图会存在转出减钱而转入不加钱的情况，需要加上事务控制</p><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566978000338.png" alt="1566978000338"></p><h5 id="代码冗余现象"><a href="#代码冗余现象" class="headerlink" title="代码冗余现象"></a>代码冗余现象</h5><p>Service层实现类中的每个方法都要加上事务控制,这样使得每个方法的前后都要加上重复的事务控制的代码,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TransactionManager.beginTransaction();</span><br><span class="line">accountDao.save(account);<span class="comment">// 唯一的一行业务代码</span></span><br><span class="line">TransactionManager.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">TransactionManager.rollback();</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">TransactionManager.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TransactionManager.beginTransaction();</span><br><span class="line">accountDao.update(account);<span class="comment">// 唯一的一行业务代码</span></span><br><span class="line">TransactionManager.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">TransactionManager.rollback();</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">TransactionManager.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现出现了两个问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">业务层方法变得臃肿了,里面充斥着很多重复代码.</span><br><span class="line">业务层方法和事务控制方法耦合了. 若提交,回滚,释放资源中任何一个方法名变更,都需要修改业务层的代码.</span><br></pre></td></tr></table></figure><h5 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态代理：</span></span><br><span class="line"><span class="comment">*  特点：字节码随用随创建，随用随加载</span></span><br><span class="line"><span class="comment">*  作用：不修改源码的基础上对方法增强</span></span><br><span class="line"><span class="comment">*  不同于静态代理：字节码一上来就创建好，并完成加载，如装饰者模式</span></span><br><span class="line"><span class="comment">*  分类：</span></span><br><span class="line"><span class="comment">*      基于接口的动态代理</span></span><br><span class="line"><span class="comment">*      基于子类的动态代理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*  基于接口的动态代理：</span></span><br><span class="line"><span class="comment">*      涉及的类：Proxy</span></span><br><span class="line"><span class="comment">*      提供者：JDK官方</span></span><br><span class="line"><span class="comment">*  如何创建代理对象：</span></span><br><span class="line"><span class="comment">*      使用Proxy类中的newProxyInstance方法</span></span><br><span class="line"><span class="comment">*  创建代理对象的要求：</span></span><br><span class="line"><span class="comment">*      被代理类最少实现一个接口，如果没有则不能使用</span></span><br><span class="line"><span class="comment">*  newProxyInstance方法的参数：</span></span><br><span class="line"><span class="comment">*      ClassLoader：类加载器</span></span><br><span class="line"><span class="comment">*          它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</span></span><br><span class="line"><span class="comment">*      Class[]：字节码数组</span></span><br><span class="line"><span class="comment">*          它是用于让代理对象和被代理对象有相同方法。固定写法。</span></span><br><span class="line"><span class="comment">*      InvocationHandler：用于提供增强的代码</span></span><br><span class="line"><span class="comment">*          一般都是一个该接口实现类，通常情况下都是匿名内部类，但不是必须的。</span></span><br><span class="line"><span class="comment">*          此接口的实现类都是谁用谁写。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*  基于子类的动态代理：</span></span><br><span class="line"><span class="comment">*      涉及的类：Enhancer</span></span><br><span class="line"><span class="comment">*      提供者：第三方cglib</span></span><br><span class="line"><span class="comment">*  如何创建代理对象：</span></span><br><span class="line"><span class="comment">*      使用Enhancer类中的create方法</span></span><br><span class="line"><span class="comment">*  创建代理对象的要求：</span></span><br><span class="line"><span class="comment">*      被代理类不能是最终类</span></span><br><span class="line"><span class="comment">*  create方法的参数：</span></span><br><span class="line"><span class="comment">*      Class：字节码</span></span><br><span class="line"><span class="comment">*          它是用于指定被代理对象字节码的</span></span><br><span class="line"><span class="comment">*      callback：用于提供增强的代码</span></span><br><span class="line"><span class="comment">*          一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</span></span><br><span class="line"><span class="comment">*          此接口的实现类都是谁用谁写。</span></span><br><span class="line"><span class="comment">*          一般都写该接口的子接口实现类；MethodInterceptor</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309155457605.png" alt="image-20200309155457605"></p><p><strong>基于接口的动态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer producer=<span class="keyword">new</span> Producer();</span><br><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy   代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method  当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args    当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>        和被代理对象方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//提供增强的代码</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"afterService"</span>.equals(method.getName()))</span><br><span class="line">                        &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">        proxyProducer.afterService(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于子类的动态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer=<span class="keyword">new</span> Producer();</span><br><span class="line">        Producer cglibProducer= (Producer) Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//个基于接口的类似</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">        cglibProducer.afterService(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态代理解决代码冗余"><a href="#动态代理解决代码冗余" class="headerlink" title="动态代理解决代码冗余"></a>动态代理解决代码冗余</h5><p>我们使用动态代理对上述Service进行改造,创建<code>BeanFactory</code>类作为service层对象工厂,通过其<code>getAccountService</code>方法得到业务层对象.需要在bean.xml中注入相关对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于创建Service的代理对象的工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> IAccountService accountService;<span class="comment">// 被增强的service对象</span></span><br><span class="line"><span class="keyword">private</span> TransactionManager txManager;<span class="comment">// 事务控制工具类</span></span><br><span class="line"><span class="comment">// 成员变量的set方法,以便Spring容器注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTxManager</span><span class="params">(TransactionManager txManager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.txManager = txManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAccountService</span><span class="params">(IAccountService accountService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取增强后的Service对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (IAccountService) Proxy.newProxyInstance(accountService.getClass().getClassLoader(),</span><br><span class="line">accountService.getClass().getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="comment">// 增强方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object rtValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.开启事务</span></span><br><span class="line">txManager.beginTransaction();</span><br><span class="line"><span class="comment">//2.执行操作</span></span><br><span class="line">rtValue = method.invoke(accountService, args);</span><br><span class="line"><span class="comment">//3.提交事务</span></span><br><span class="line">txManager.commit();</span><br><span class="line"><span class="comment">//4.返回结果</span></span><br><span class="line"><span class="keyword">return</span> rtValue;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//5.回滚操作</span></span><br><span class="line">txManager.rollback();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//6.释放连接</span></span><br><span class="line">txManager.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring的AOP细节"><a href="#Spring的AOP细节" class="headerlink" title="Spring的AOP细节"></a>Spring的AOP细节</h4><p>AOP概念：简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用：在程序运行期间，不修改源码对已有方法进行增强。</span><br><span class="line">优势：减少重复代码，提高开发效率，维护方便</span><br></pre></td></tr></table></figure><p>我们学习spring的 aop，就是通过配置的方式，实现上一章节的功能。</p><h5 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP 相关术语"></a>AOP 相关术语</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Joinpoint( 连接点):</span><br><span class="line">被拦截到的方法.所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法</span><br><span class="line">    因为 spring 只支持方法类型连接点。</span><br><span class="line">Pointcut( 切入点):</span><br><span class="line">我们对其进行增强的方法.所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</span><br><span class="line">Advice( 通知/ 增强):</span><br><span class="line">对切入点进行的增强操作，所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。</span><br><span class="line">通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</span><br><span class="line">Introduction( 引介):</span><br><span class="line">引介是一种特殊的通知，在不修改类代码前提下,Introduction可以在运行期为类动态地添加方法或Field。</span><br><span class="line">Target( 目标对象):</span><br><span class="line">代理的目标对象。</span><br><span class="line">Weaving( 织入):</span><br><span class="line">是指把增强应用到目标对象来创建新代理对象的过程，spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</span><br><span class="line">Proxy （代理）:</span><br><span class="line">一个类被 AOP 织入增强后，就产生一个结果代理类。</span><br><span class="line">Aspect( 切面):</span><br><span class="line">是切入点和通知（引介）的结合。</span><br></pre></td></tr></table></figure><h5 id="AOP要明确"><a href="#AOP要明确" class="headerlink" title="AOP要明确"></a>AOP要明确</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开发阶段（我们做的）</span><br><span class="line">    编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。</span><br><span class="line">    把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做。</span><br><span class="line">    在配置文件中，声明切入点与通知间的关系，即切面。：AOP编程人员来做。</span><br><span class="line">运行阶段（Spring框架完成的）</span><br><span class="line">Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</span><br></pre></td></tr></table></figure><h4 id="使用XML配置AOP"><a href="#使用XML配置AOP" class="headerlink" title="使用XML配置AOP"></a>使用XML配置AOP</h4><h5 id="通知类型和顺序"><a href="#通知类型和顺序" class="headerlink" title="通知类型和顺序"></a>通知类型和顺序</h5><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1567670280656.png" alt="1567670280656"></p><h5 id="bean-xml配置AOP"><a href="#bean-xml配置AOP" class="headerlink" title="bean.xml配置AOP"></a>bean.xml配置AOP</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置srping的Ioc,把service对象配置进来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"site.syzhou.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通知类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"site.syzhou.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring中基于XML的AOP配置步骤</span></span><br><span class="line"><span class="comment">    1、把通知Bean也交给spring来管理</span></span><br><span class="line"><span class="comment">    2、使用aop:config标签表明开始AOP的配置</span></span><br><span class="line"><span class="comment">    3、使用aop:aspect标签表明配置切面</span></span><br><span class="line"><span class="comment">            id属性：是给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">            ref属性：是指定通知类bean的Id。</span></span><br><span class="line"><span class="comment">    4、在aop:aspect标签的内部使用对应标签来配置通知的类型</span></span><br><span class="line"><span class="comment">           我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知</span></span><br><span class="line"><span class="comment">           aop:before：表示配置前置通知</span></span><br><span class="line"><span class="comment">                method属性：用于指定Logger类中哪个方法是前置通知</span></span><br><span class="line"><span class="comment">                pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        切入点表达式的写法：</span></span><br><span class="line"><span class="comment">            关键字：execution(表达式)</span></span><br><span class="line"><span class="comment">            表达式：</span></span><br><span class="line"><span class="comment">                访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">            标准的表达式写法：</span></span><br><span class="line"><span class="comment">                public void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">            访问修饰符可以省略</span></span><br><span class="line"><span class="comment">                void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">            返回值可以使用通配符，表示任意返回值</span></span><br><span class="line"><span class="comment">                * com.itheima.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">            包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.</span></span><br><span class="line"><span class="comment">                * *.*.*.*.AccountServiceImpl.saveAccount())</span></span><br><span class="line"><span class="comment">            包名可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">                * *..AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">            类名和方法名都可以使用*来实现通配</span></span><br><span class="line"><span class="comment">                * *..*.*()</span></span><br><span class="line"><span class="comment">            参数列表：</span></span><br><span class="line"><span class="comment">                可以直接写数据类型：</span></span><br><span class="line"><span class="comment">                    基本类型直接写名称           int</span></span><br><span class="line"><span class="comment">                    引用类型写包名.类名的方式   java.lang.String</span></span><br><span class="line"><span class="comment">                可以使用通配符表示任意类型，但是必须有参数</span></span><br><span class="line"><span class="comment">                可以使用..表示有无参数均可，有参数可以是任意类型</span></span><br><span class="line"><span class="comment">            全通配写法：</span></span><br><span class="line"><span class="comment">                * *..*.*(..)</span></span><br><span class="line"><span class="comment">            实际开发中切入点表达式的通常写法：</span></span><br><span class="line"><span class="comment">                切到业务层实现类下的所有方法</span></span><br><span class="line"><span class="comment">                    * com.itheima.service.impl.*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    5.使用&lt;aop:xxx&gt;标签配置对应类型的通知方法</span></span><br><span class="line"><span class="comment">        其属性如下:</span></span><br><span class="line"><span class="comment">            method: 指定通知类中的增强方法名.</span></span><br><span class="line"><span class="comment">            ponitcut-ref: 指定切入点的表达式的id</span></span><br><span class="line"><span class="comment">            poinitcut: 指定切入点表达式</span></span><br><span class="line"><span class="comment">            其中pointcut-ref和pointref属性只能有其中一个</span></span><br><span class="line"><span class="comment">        具体的通知类型:</span></span><br><span class="line"><span class="comment">            &lt;aop:before&gt;: 配置前置通知,指定的增强方法在切入点方法之前执行.</span></span><br><span class="line"><span class="comment">            &lt;aop:after-returning&gt;: 配置后置通知,指定的增强方法在切入点方法正常执行之后执行.</span></span><br><span class="line"><span class="comment">            &lt;aop:after-throwing&gt;: 配置异常通知,指定的增强方法在切入点方法产生异常后执行.</span></span><br><span class="line"><span class="comment">            &lt;aop:after&gt;: 配置最终通知,无论切入点方法执行时是否发生异常,指定的增强方法都会最后执行.</span></span><br><span class="line"><span class="comment">            &lt;aop:around&gt;: 配置环绕通知,可以在代码中手动控制增强代码的执行时机.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置通知类型，建立通知方法和切入点关联--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* site.syzhou.service.impl.AccountServiceImpl.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* site.syzhou.service.impl.AccountServiceImpl.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPrintLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* site.syzhou.service.impl.AccountServiceImpl.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容</span></span><br><span class="line"><span class="comment">                  此标签写在aop:aspect标签内部只能当前切面使用。</span></span><br><span class="line"><span class="comment">                  它还可以写在aop:aspect外面，此时就变成了所有切面可用</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* site.syzhou.service.impl.AccountServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 环绕通知</span></span><br><span class="line"><span class="comment">* 问题：</span></span><br><span class="line"><span class="comment">*      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。</span></span><br><span class="line"><span class="comment">* 分析：</span></span><br><span class="line"><span class="comment">*      通过对比动态代理中环绕通知代码，发现动态代理环绕通知有明确的切入点方法调用，而我们代码中没有。</span></span><br><span class="line"><span class="comment">* 解决：</span></span><br><span class="line"><span class="comment">*      Spring框架为我们提供了一个接口：ProceedingJoinPoint。</span></span><br><span class="line"><span class="comment">            ProceedingJoinPoint对象的getArgs()方法返回被拦截的参数</span></span><br><span class="line"><span class="comment">            ProceedingJoinPoint对象的proceed()方法执行被拦截的方法</span></span><br><span class="line"><span class="comment">*      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* spring中的环绕通知：</span></span><br><span class="line"><span class="comment">*      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();<span class="comment">//得到方法执行所需的参数</span></span><br><span class="line">        System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span>);</span><br><span class="line">        rtValue = pjp.proceed(args);<span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line">        System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span>);</span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用注解配置AOP"><a href="#使用注解配置AOP" class="headerlink" title="使用注解配置AOP"></a>使用注解配置AOP</h4><p>半注解配置AOP,需要在<code>bean,xml</code>中加入下面语句开启对注解AOP的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring创建容器要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"site.syzhou"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring开启注解AOP支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Logger类中的相关配置"><a href="#Logger类中的相关配置" class="headerlink" title="Logger类中的相关配置"></a>Logger类中的相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//声明当前类为通知类,该类定义了一个切面.相当于xml配置中的&lt;aop:aspect&gt;标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* site.syzhou.service.impl.AccountServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Before("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知Logger中的beforePrintLog开始记录日志。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@AfterReturning("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知Logger中的afterReturningPrintLog开始记录日志。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    @AfterThrowing("pt1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知Logger中的afterThrowingPrintLog开始记录日志。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    @After("execution(* site.syzhou.service.impl.AccountServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知Logger中的afterPrintLog开始记录日志。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">//得到方法执行所需的参数</span></span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span>);</span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span>);</span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="纯注解配置AOP"><a href="#纯注解配置AOP" class="headerlink" title="纯注解配置AOP"></a>纯注解配置AOP</h5><p>在Spring配置类前添加<code>@EnableAspectJAutoProxy</code>注解,可以使用纯注解方式配置AOP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"cn.maoritian"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span><span class="comment">// 允许AOP</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 具体配置</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用注解配置AOP的bug"><a href="#使用注解配置AOP的bug" class="headerlink" title="使用注解配置AOP的bug"></a>使用注解配置AOP的bug</h5><p>在使用注解配置AOP时,会出现一个bug. 四个通知的调用顺序依次是:<code>前置通知</code>,<code>最终通知</code>,<code>后置通知</code>. 这会导致一些资源在执行<code>最终通知</code>时提前被释放掉了,而执行<code>后置通知</code>时就会出错.而使用环绕通知就没问题。</p><h4 id="JdbcTemplate概述"><a href="#JdbcTemplate概述" class="headerlink" title="JdbcTemplate概述"></a>JdbcTemplate概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">它是spring框架中提供一个对象,对原始Jdbc API对象简单封装。spring框架为我们提供了很多操作模板类。</span><br><span class="line">    操作关系型数据的：</span><br><span class="line">        JdbcTemplate</span><br><span class="line">        HibernateTemplate</span><br><span class="line">    操作 nosql 数据库的：</span><br><span class="line">        RedisTemplate</span><br><span class="line">    操作消息队列的：</span><br><span class="line">        JmsTemplate</span><br></pre></td></tr></table></figure><h5 id="导坐标"><a href="#导坐标" class="headerlink" title="导坐标"></a>导坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h5><p><strong>配置C3P0数据源</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring_day02"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span></span></span><br></pre></td></tr></table></figure><p> <strong>配置 DBCP 数据源</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:// /spring_day02"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <strong>配置spring 内置数据源</strong>，导spring-jdbc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring_day02"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引入jdbc-properties"><a href="#引入jdbc-properties" class="headerlink" title="引入jdbc.properties"></a>引入jdbc.properties</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">【定义属性文件jdbc.properties】</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:///spring_day02</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br><span class="line">【引入外部的属性文件】</span><br><span class="line">一种方式:</span><br><span class="line"><span class="comment">&lt;!-- 引入外部属性文件： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">另一种方式:</span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置JdbcTemplate"><a href="#配置JdbcTemplate" class="headerlink" title="配置JdbcTemplate"></a>配置JdbcTemplate</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"site.newvalue.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"site.newvalue.dao.impl.AccountDaoImpl"</span> <span class="attr">id</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个数据库的操作模板：JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取 Spring 容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//2.根据 id 获取 bean 对象</span></span><br><span class="line">    JdbcTemplate jt = (JdbcTemplate) ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line">    <span class="comment">//3.执行操作</span></span><br><span class="line">    jt.execute(<span class="string">"insert into account(name,money)values('eee',500)"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring中事务控制"><a href="#Spring中事务控制" class="headerlink" title="Spring中事务控制"></a>Spring中事务控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.jdbc.datasource.DataSourceTransactionManager使用 SpringJDBC或iBatis进行持久化数据时使用</span><br><span class="line">org.springframework.orm.hibernate5.HibernateTransactionManager 使用Hibernate版本进行持久化数据时使用</span><br></pre></td></tr></table></figure><p>第一步： 配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：配置事务的通知引用事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：配置事务的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在tx:advice标签内部  配置事务的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定方法名称：是业务核心方法</span></span><br><span class="line"><span class="comment">read-only：是否是只读事务。默认 false，不只读。</span></span><br><span class="line"><span class="comment">isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。</span></span><br><span class="line"><span class="comment">propagation：指定事务的传播行为。</span></span><br><span class="line"><span class="comment">timeout：指定超时时间。默认值为：-1。永不超时。</span></span><br><span class="line"><span class="comment">rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。</span></span><br><span class="line"><span class="comment">没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回</span></span><br><span class="line"><span class="comment">滚。没有默认值，任何异常都回滚。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第四步：配置 AOP 切入点表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span>  <span class="attr">expression</span>=<span class="string">"execution(*  com.itheima.service.impl.*.*(..))"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第五步：配置切入点表达式和事务通知的对应关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 aop:config  标签内部：建立事务的通知和切入点表达式的关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基于注解的事务配置"><a href="#基于注解的事务配置" class="headerlink" title="基于注解的事务配置"></a>基于注解的事务配置</h5><p>在业务层使用@Transactional  注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>,propagation=Propagation.SUPPORTS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly=<span class="keyword">false</span>,propagation=Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName);</span><br><span class="line"><span class="comment">//2.修改两个账户的金额</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);<span class="comment">//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱</span></span><br><span class="line"><span class="comment">//3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line"><span class="comment">//int i=1/0;</span></span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">该注解的属性和 xml 中的属性含义一致。该注解可以出现在接口上，类上和方法上。</span><br><span class="line">    出现接口上，表示该接口的所有实现类都有事务支持。</span><br><span class="line">    出现在类上，表示类中所有方法有事务支持</span><br><span class="line">    出现在方法上，表示方法有事务支持。</span><br><span class="line">    以上三个位置的优先级：方法&gt;类&gt;接口</span><br></pre></td></tr></table></figure><p>配置事务支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启 spring 对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="纯注解配置事务"><a href="#纯注解配置事务" class="headerlink" title="纯注解配置事务"></a>纯注解配置事务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTxConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">//里面配置数据源，配置 JdbcTemplate,配置事务管理器。在之前的步骤已经写过了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring5新特性"><a href="#Spring5新特性" class="headerlink" title="Spring5新特性"></a>Spring5新特性</h4><h5 id="与JDK相关升级"><a href="#与JDK相关升级" class="headerlink" title="与JDK相关升级"></a>与JDK相关升级</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring5.0 在 2017 年 9 月发布了它的 GA（通用）版本。</span><br><span class="line">该版本是基于 jdk8 编写的，所以 jdk8 以下版本将无法使用。同时，可以兼容 jdk9 版本。</span><br><span class="line">tomcat 版本要求 8.5 及以上</span><br></pre></td></tr></table></figure><p>第一：基于 JDK8 的反射增强</p><p><img src="/../assets/pic/2018-07-06-Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309165532673.png" alt="image-20200309165532673"></p><p>第二：@NonNull 注解和@Nullable 注解的使用<br>用 @Nullable 和 @NotNull 注解来显示表明可为空的参数和以及返回值。这样就够在编译的时候处理空值而不是在运行时抛出NullPointerExceptions。</p><p>第三：日志记录方面<br>Spring Framework 5.0 带来了 Commons Logging 桥接模块的封装, 它被叫做 spring-jcl 而不是标准的 Commons Logging。当然，无需任何额外的桥接，新版本也会对 Log4j 2.x, SLF4J, JUL( java.util.logging) 进行自动检测。</p><h5 id="核心容器的更新"><a href="#核心容器的更新" class="headerlink" title="核心容器的更新"></a>核心容器的更新</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Spring Framework 5.0 现在支持候选组件索引作为类路径扫描的替代方案。该功能已经在类路径扫描器中</span><br><span class="line">添加，以简化添加候选组件标识的步骤。</span><br><span class="line">应用程序构建任务可以定义当前项目自己的 META-INF/spring.components 文件。在编译时，源模型是</span><br><span class="line">自包含的，JPA 实体和 Spring 组件是已被标记的。</span><br><span class="line">从索引读取实体而不是扫描类路径对于小于 200 个类的小型项目是没有明显差异。但对大型项目影响较大。</span><br><span class="line">加载组件索引开销更低。因此，随着类数的增加，索引读取的启动时间将保持不变。</span><br><span class="line">加载组件索引的耗费是廉价的。因此当类的数量不断增长，加上构建索引的启动时间仍然可以维持一个常数,</span><br><span class="line">不过对于组件扫描而言，启动时间则会有明显的增长。</span><br><span class="line">这个对于我们处于大型 Spring 项目的开发者所意味着的，是应用程序的启动时间将被大大缩减。虽然 20</span><br><span class="line">或者 30 秒钟看似没什么，但如果每天要这样登上好几百次，加起来就够你受的了。使用了组件索引的话，就能帮</span><br><span class="line">助你每天过的更加高效</span><br></pre></td></tr></table></figure><h5 id="JetBrains-Kotlin-语言支持"><a href="#JetBrains-Kotlin-语言支持" class="headerlink" title="JetBrains Kotlin  语言支持"></a>JetBrains Kotlin  语言支持</h5><p>Kolin概述：是一种支持函数式编程编程风格的面向对象语言。Kotlin 运行在 JVM 之上，但运行环境并不<br>限于 JVM。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Kolin 的示例代码：</span><br><span class="line">&#123;</span><br><span class="line">    (<span class="string">"/movie"</span> <span class="function">and <span class="title">accept</span><span class="params">(TEXT_HTML)</span>).nest </span>&#123;</span><br><span class="line">        GET(<span class="string">"/"</span>, movieHandler::findAllView)</span><br><span class="line">        GET(<span class="string">"/&#123;card&#125;"</span>, movieHandler::findOneView)</span><br><span class="line">&#125;</span><br><span class="line">    (<span class="string">"/api/movie"</span> <span class="function">and <span class="title">accept</span><span class="params">(APPLICATION_JSON)</span>).nest </span>&#123;</span><br><span class="line">        GET(<span class="string">"/"</span>, movieApiHandler::findAll)</span><br><span class="line">        GET(<span class="string">"/&#123;id&#125;"</span>, movieApiHandler::findOne)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Kolin 注册 bean 对象到 spring 容器：</span><br><span class="line">val context = GenericApplicationContext &#123;</span><br><span class="line">registerBean()</span><br><span class="line">registerBean &#123; Cinema(it.getBean()) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应式编程风格"><a href="#响应式编程风格" class="headerlink" title="响应式编程风格"></a>响应式编程风格</h5><h5 id="Junit5-支持"><a href="#Junit5-支持" class="headerlink" title="Junit5  支持"></a>Junit5  支持</h5><h5 id="依赖类库的更新"><a href="#依赖类库的更新" class="headerlink" title="依赖类库的更新"></a>依赖类库的更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">终止支持的类库</span><br><span class="line">    Portlet.</span><br><span class="line">    Velocity.</span><br><span class="line">    JasperReports.</span><br><span class="line">    XMLBeans.</span><br><span class="line">    JDO.</span><br><span class="line">    Guava.</span><br><span class="line">支持的类库</span><br><span class="line">    Jackson <span class="number">2.6</span>+</span><br><span class="line">    EhCache <span class="number">2.10</span>+ / <span class="number">3.0</span> GA</span><br><span class="line">    Hibernate <span class="number">5.0</span>+</span><br><span class="line">    JDBC <span class="number">4.0</span>+</span><br><span class="line">    XmlUnit <span class="number">2</span>.x+</span><br><span class="line">    OkHttp <span class="number">3</span>.x+</span><br><span class="line">    Netty <span class="number">4.1</span>+</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Spring概述&quot;&gt;&lt;a href=&quot;#Spring概述&quot; class=&quot;headerlink&quot; title=&quot;Spring概述&quot;&gt;&lt;/a&gt;Spring概述&lt;/h4&gt;&lt;p&gt;pring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 SpringMVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis基础知识</title>
    <link href="/2018/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-05-Mybatis基础知识/</id>
    <published>2018-07-05T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><h5 id="1-框架理解"><a href="#1-框架理解" class="headerlink" title="1 框架理解"></a>1 框架理解</h5><p>它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题。<br>​框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提高开发效率。</p><a id="more"></a><h5 id="2-三层架构"><a href="#2-三层架构" class="headerlink" title="2 三层架构"></a>2 三层架构</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565856158282.png" alt="1565856158282"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表现层：是用于展示数据的</span><br><span class="line">业务层：是处理业务需求</span><br><span class="line">持久层：是和数据库交互的</span><br></pre></td></tr></table></figure><h5 id="3-jdbc问题"><a href="#3-jdbc问题" class="headerlink" title="3 jdbc问题"></a>3 jdbc问题</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565858780158.png" alt="1565858780158"></p><p>MyBatis对比JDBC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 SqlMapConfig.xml 中配置数据链接池，使用连接池管理数据库链接</span><br><span class="line">将 Sql 语句配置在 XXXXmapper.xml 文件中与 java 代码分离</span><br><span class="line">自动将java对象映射至sql语句，通过statement中parameterType定义输入参数类型</span><br><span class="line">自动将sql执行结果映射至java对象，通过statement中resultType定义输出结果类型</span><br></pre></td></tr></table></figure><h5 id="4-持久层技术"><a href="#4-持久层技术" class="headerlink" title="4 持久层技术"></a>4 持久层技术</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt="02持久层总图"></p><pre><code>JDBC技术：    Connection    PreparedStatement    ResultSetSpring的JdbcTemplate：    Spring中对jdbc的简单封装Apache的DBUtils：    它和Spring的JdbcTemplate很像，也是对Jdbc的简单封装以上这些都不是框架    JDBC是规范    Spring的JdbcTemplate和Apache的DBUtils都只是工具类</code></pre><h5 id="5-mybatis概述"><a href="#5-mybatis概述" class="headerlink" title="5 mybatis概述"></a>5 mybatis概述</h5><p>mybatis是一个持久层框架，用java编写的。<br>​它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程<br>​它使用了ORM思想实现了结果集的封装。</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565858822755.png" alt="1565858822755"></p><pre><code>ORM：    Object Relational Mappging 对象关系映射    简单的说：        就是把数据库表和实体类及实体类的属性对应起来        让我们可以操作实体类就实现操作数据库表。        user            User        id            userId        user_name        userName今天我们需要做到    实体类中的属性和数据库表的字段名称保持一致。        user            user        id            id        user_name        user_name</code></pre><p>下面入门案例，使用 mybatis 是非常容易的一件事情，因为只需要编写 Dao 接口并且按照mybatis 要求编写两个配置文件，就可以实现功能。远比我们之前的 jdbc 方便多了。（我们使用注解之后，将变得更为简单，只需要编写一个 mybatis 配置文件就够了。）</p><h4 id="mybatis入门"><a href="#mybatis入门" class="headerlink" title="mybatis入门"></a>mybatis入门</h4><h5 id="mybatis的环境搭建"><a href="#mybatis的环境搭建" class="headerlink" title="mybatis的环境搭建"></a>mybatis的环境搭建</h5><p>第一步：创建maven工程并导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建实体类和dao的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;<span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line">    <span class="keyword">private</span>  String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//get()和set()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：创建映射配置文件UserDao.xml</p><pre><code>创建位置：必须和持久层接口在相同的包中。目录创建时com.itheima.dao是一级目录,site/newvalue/dao才行名称：必须以持久层接口名称命名文件名，扩展名是.xml在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper所以：UserDao 和 UserMapper是一样的</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace属性的取值必须是dao接口的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"site.newvalue.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有，id属性的取值必须是dao接口的方法名，resultType告知mybatis要封装到哪个实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"site.newvalue.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第四步：创建Mybatis的主配置文件SqlMapConifg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Mybatis主配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置Mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源 (连接池)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据源基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatisdb"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--制定映射配置文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"site/newvalue/dao/UserDao.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建log4j.propertitis文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Set root category priority to INFO and its only appender to CONSOLE.</span><br><span class="line">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span><br><span class="line">log4j.rootCategory=debug, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span><br><span class="line">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"># LOGFILE is set to be a File appender using a PatternLayout.</span><br><span class="line">log4j.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.LOGFILE.File=axis.log</span><br><span class="line">log4j.appender.LOGFILE.Append=true</span><br><span class="line">log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">环境搭建的注意事项：</span><br><span class="line">第一个：创建UserDao.xml 和 UserDao.java时名称是为了和我们之前的知识保持一致。</span><br><span class="line">在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper</span><br><span class="line">所以：UserDao 和 UserMapper是一样的</span><br><span class="line">第二个：在idea中创建目录的时候，它和包是不一样的</span><br><span class="line">包在创建时：com.itheima.dao它是三级结构</span><br><span class="line">目录在创建时：com.itheima.dao是一级目录</span><br><span class="line">第三个：mybatis的映射配置文件位置必须和dao接口的包结构相同</span><br><span class="line">第四个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</span><br><span class="line">第五个：映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名</span><br><span class="line">当我们遵从了第三，四，五点之后，我们在开发中就无须再写dao的实现类。</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        UserDao userDao = session.getMapper(UserDao.class);</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mybatis基于注解的入门案例"><a href="#mybatis基于注解的入门案例" class="headerlink" title="mybatis基于注解的入门案例"></a>mybatis基于注解的入门案例</h5><p>把IUserDao.xml移除，在dao接口的方法上使用@Select注解，并且指定SQL语句<br>​同时需要在SqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface UserDao &#123;</span><br><span class="line">    @Select("select * from user")</span><br><span class="line">    List<span class="tag">&lt;<span class="name">User</span>&gt;</span> findAll();</span><br><span class="line">&#125;</span><br><span class="line">//SqlMapperConfig.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"site.newvalue.dao.UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（UserDao.xml）。</span><br><span class="line">我们在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式。</span><br><span class="line">不管使用XML还是注解配置。</span><br><span class="line">但是Mybatis它是支持写dao实现类的。</span><br></pre></td></tr></table></figure><h5 id="入门案例中设计模式"><a href="#入门案例中设计模式" class="headerlink" title="入门案例中设计模式"></a>入门案例中设计模式</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565856441873.png" alt="1565856441873"></p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565856334899.png" alt="1565856334899"></p><h5 id="Mybatis执行查询分析-…"><a href="#Mybatis执行查询分析-…" class="headerlink" title="Mybatis执行查询分析(…)"></a>Mybatis执行查询分析(…)</h5><p>mybatis在使用代理dao的方式实现增删改查时，只有两件事：</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565856040147.png" alt="1565856040147"></p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200308213350616.png" alt="image-20200308213350616"></p><p>Mybatis流程分析</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200308213332020.png" alt="image-20200308213332020"></p><h4 id="Mybatis基于代理Dao增删改查"><a href="#Mybatis基于代理Dao增删改查" class="headerlink" title="Mybatis基于代理Dao增删改查"></a>Mybatis基于代理Dao增删改查</h4><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565947082967.png" alt="1565947082967"></p><p>分析代理dao的执行过程</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200308223420509.png" alt="image-20200308223420509"></p><h5 id="在IUserDao添加方法"><a href="#在IUserDao添加方法" class="headerlink" title="在IUserDao添加方法"></a>在IUserDao添加方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找全部</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//保存操作</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//更新操作</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//删除操作</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//模糊查找</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="comment">//聚合查詢</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据VO条件查找用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByVo</span><span class="params">(QueryVo vo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新建QueryVo实体类"><a href="#新建QueryVo实体类" class="headerlink" title="新建QueryVo实体类"></a>新建QueryVo实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置IUserDao-xml"><a href="#配置IUserDao-xml" class="headerlink" title="配置IUserDao.xml"></a>配置IUserDao.xml</h5><p>编写site/newvalue/dao/IUserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"site.newvalue.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"site.newvalue.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 保存用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"site.newvalue.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username,birthday,sex,address) value (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--更新用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"site.newvalue.domain.User"</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">        delete  from user  where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模糊查找用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"site.newvalue.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--聚合查詢--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(*) from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据domain查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByVo"</span> <span class="attr">resultType</span>=<span class="string">"site.newvalue.domain.User"</span> <span class="attr">parameterType</span>=<span class="string">"site.newvalue.domain.QueryVo"</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;user.username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resultType  属性：用于指定结果集的类型。</span><br><span class="line">parameterType 属性：代表参数的类型，因为要传入一个类对象，所以类型就写类的全名称。</span><br><span class="line">sql 语句中使用#&#123;&#125;字符：</span><br><span class="line">代表占位符，相当于原来jdbc部分的?，都是用于执行语句时替换实际数据。具体数据是由#&#123;&#125;里面内容决定。</span><br><span class="line">#&#123;&#125;中内容的写法：</span><br><span class="line">由于我们保存方法的参数是一个User对象，此处要写User对象中属性名称。它用ognl。语法格式#&#123;对象.对象&#125;</span><br></pre></td></tr></table></figure><h5 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#{} 与${} 的区别"></a>#{} 与${} 的区别</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200308222851466.png" alt="image-20200308222851466"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125; 表示一个占位符号</span><br><span class="line">    通过#&#123;&#125;可以实现preparedStatement向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，</span><br><span class="line">    #&#123;&#125;可以防止sql注入。#&#123;&#125;可以接收简单类型值或pojo 属性值。 如果 parameterType 传输单个简单类</span><br><span class="line">    型值，#&#123;&#125;括号中可以是 value 或其它名称。</span><br><span class="line">$&#123;&#125; 表示拼接 sql串</span><br><span class="line">    通过$&#123;&#125;可以将 parameterType 传入的内容拼接在 sql中且不进行 jdbc 类型转换， $&#123;&#125;可以接收简</span><br><span class="line">    单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，$&#123;&#125;括号中只能是 value。</span><br><span class="line">    select * from user where username like &apos;%$&#123;value&#125;%&apos;</span><br></pre></td></tr></table></figure><h5 id="OGNL表达式："><a href="#OGNL表达式：" class="headerlink" title="OGNL表达式："></a>OGNL表达式：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object Graphic Navigation Language 对象图导航   语言</span><br><span class="line">它是通过对象的取值方法来获取数据。在写法上把get给省略了。</span><br><span class="line">比如：我们获取用户的名称</span><br><span class="line">类中的写法：user.getUsername();</span><br><span class="line">OGNL表达式写法：user.username</span><br><span class="line">mybatis中为什么能直接写username,而不用user.呢：</span><br><span class="line">因为在parameterType中已经提供了属性所属的类，所以此时不需要写对象名</span><br><span class="line"></span><br><span class="line">#&#123;user.username&#125;它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用getUsername()方法把值取出来。但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user.而直接写 username。</span><br></pre></td></tr></table></figure><h5 id="SqlMapConifg-xml添加mapper"><a href="#SqlMapConifg-xml添加mapper" class="headerlink" title="SqlMapConifg.xml添加mapper"></a>SqlMapConifg.xml添加mapper</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"site/newvalue/dao/IUserDao.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisCRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users=userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"insert_User"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">"保存操作之前："</span>+user);</span><br><span class="line">        <span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">"保存操作之后："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">42</span>);</span><br><span class="line">        user.setUsername(<span class="string">"testUpdate"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"北京市顺义区"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">"更新操作之前："</span>+user);</span><br><span class="line">        <span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">        System.out.println(<span class="string">"更新操作之后："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">51</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users=userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(userDao.findTotal());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByVo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryVo vo=<span class="keyword">new</span> QueryVo();</span><br><span class="line">        User u =<span class="keyword">new</span> User();</span><br><span class="line">        u.setUsername(<span class="string">"%王%"</span>);</span><br><span class="line">        vo.setUser(u);</span><br><span class="line">        List&lt;User&gt; users=userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mybatis参数深入"><a href="#Mybatis参数深入" class="headerlink" title="Mybatis参数深入"></a>Mybatis参数深入</h4><h5 id="parameterType-配置"><a href="#parameterType-配置" class="headerlink" title="parameterType 配置"></a>parameterType 配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">该属性的取值可以是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）。同时也可以使用实体类的包装类</span><br><span class="line"></span><br><span class="line">基本类型和String我们可以直接写类型名称 ，也可以使用包名.类名的方式 ，如java.lang.String。</span><br><span class="line">实体类类型，目前我们只能使用全限定类名。</span><br><span class="line">究其原因，是 mybaits 在加载时已经把常用的数据类型注册了别名，从而我们在使用时可以不写包名，而我们的是实体类并没有注册别名，所以必须写全限定类名。</span><br></pre></td></tr></table></figure><h5 id="resultType-配置"><a href="#resultType-配置" class="headerlink" title="resultType 配置"></a>resultType 配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resultType 属性可以指定结果集的类型，它支持基本类型和实体类类型。</span><br><span class="line">如果注册过类型别名的，可以直接使用别名。没有注册过的必须使用全限定类名。例如：我们的实体类此时必须是全限定类名</span><br><span class="line">同时，当是实体类名称是，还有一个要求，实体类中的属性名称必须和数据库列名保持一致，否则无法实现封装。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用别名查询，配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span><br><span class="line">select id as userId,username as userName,birthday as userBirthday,</span><br><span class="line">sex as userSex,address as userAddress from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="resultMap-结果类型"><a href="#resultMap-结果类型" class="headerlink" title="resultMap 结果类型"></a>resultMap 结果类型</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resultMap 标签可以建立查询的列名和实体类的属性名称不一致时建立对应关系。从而实现封装。</span><br><span class="line">在 select 标签中使用 resultMap 属性指定引用即可。同时 resultMap 可以实现将查询结果映射为复杂类型的 pojo，比如在查询结果映射对象中包括 pojo 和 list 实现一对一查询和一对多查询。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立 User 实体和数据库表的对应关系</span></span><br><span class="line"><span class="comment">    type 属性：指定实体类的全限定类名</span></span><br><span class="line"><span class="comment">    id 属性：给定一个唯一标识，是给查询 select 标签引用用的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.itheima.domain.User"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">id 标签：用于指定主键字段</span><br><span class="line">result 标签：用于指定非主键字段</span><br><span class="line">column 属性：用于指定数据库列名</span><br><span class="line">property 属性：用于指定实体类属性名称</span><br></pre></td></tr></table></figure><h4 id="mybatis传统DAO开发（了解）"><a href="#mybatis传统DAO开发（了解）" class="headerlink" title="mybatis传统DAO开发（了解）"></a>mybatis传统DAO开发（了解）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">持久层 Dao 实现类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IUserDaoImpl</span> <span class="keyword">implements</span> <span class="title">site</span>.<span class="title">syzhou</span>.<span class="title">dao</span>.<span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IUserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory=factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        List&lt;User&gt; users=session.selectList(<span class="string">"site.syzhou.dao.IUserDao.findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试类中init修改如下</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        userDao=<span class="keyword">new</span> IUserDaoImpl(factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="dao执行MyBatis过程"><a href="#dao执行MyBatis过程" class="headerlink" title="dao执行MyBatis过程"></a>dao执行MyBatis过程</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200308222946771.png" alt="dao执行MyBatis过程"></p><h4 id="SqlMapConfig-xml文件配置解析"><a href="#SqlMapConfig-xml文件配置解析" class="headerlink" title="SqlMapConfig.xml文件配置解析"></a>SqlMapConfig.xml文件配置解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-properties （属性）</span><br><span class="line">--property</span><br><span class="line">-settings（全局配置参数）</span><br><span class="line">--setting</span><br><span class="line">-typeAliases （类型别名）</span><br><span class="line">--typeAliase</span><br><span class="line">--package</span><br><span class="line">-typeHandlers（类型处理器）</span><br><span class="line">-objectFactory（对象工厂）</span><br><span class="line">-plugins（插件）</span><br><span class="line">-environments（环境集合属性对象）</span><br><span class="line">--environment（环境子属性对象）</span><br><span class="line">---transactionManager（事务管理）</span><br><span class="line">---dataSource（数据源）</span><br><span class="line">-mappers （映射器）</span><br><span class="line">--mapper</span><br><span class="line">--package</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Mybatis主配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接数据库的信息</span></span><br><span class="line"><span class="comment">    resource 属性：用于指定 properties 配置文件的位置，要求配置文件必须在类路径下</span></span><br><span class="line"><span class="comment">    resource="jdbcConfig.properties"</span></span><br><span class="line"><span class="comment">    url 属性：</span></span><br><span class="line"><span class="comment">        URL： Uniform Resource Locator 统一资源定位符</span></span><br><span class="line"><span class="comment">        http://localhost:8080/mystroe/CategoryServlet URL</span></span><br><span class="line"><span class="comment">            协议 主机 端口  URI</span></span><br><span class="line"><span class="comment">    URI：Uniform Resource Identifier 统一资源标识符</span></span><br><span class="line"><span class="comment">        /mystroe/CategoryServlet</span></span><br><span class="line"><span class="comment">        它是可以在 web 应用中唯一定位一个资源的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    &lt;property name="driver" value="$&#123;driver&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="url" value="$&#123;url&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="username" value="$&#123;username&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="password" value="$&#123;password&#125;"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--typeAlias用于配置别名。type属性指定的是实体类全限定类名。alias属性指定别名，当指定了别名就再区分大小写</span></span><br><span class="line"><span class="comment">        &lt;typeAlias type="com.itheima.domain.User" alias="user"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于指定要配置别名的包，当指定之后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"site.syzhou.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置Mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源 (连接池)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据源基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--制定映射配置文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="site/syzhou/dao/IUserDao.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="site.newvalue.dao.UserDao"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- package标签指定dao接口所在包,当指定了后就不需写mapper以及resource或者class--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"site.syzhou.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="连接池和事务"><a href="#连接池和事务" class="headerlink" title="连接池和事务"></a>连接池和事务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我们在实际开发中都会使用连接池。因为它可以减少我们获取连接所消耗的时间。连接池是一个集合对象，线程安全，实现队列功能，先进先出。</span><br><span class="line"></span><br><span class="line">mybatis连接池提供了3种方式的配置：</span><br><span class="line">配置的位置：主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是表示采用何种连接池方式。</span><br><span class="line">type属性的取值：</span><br><span class="line">POOLED采用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现</span><br><span class="line">UNPOOLED采用传统获取连接方式，虽然也实现Javax.sql.DataSource接口，但并没有使用池思想。</span><br><span class="line">JNDI采用服务器提供JNDI技术实现来获取DataSource对象，不同服务器所能拿到DataSource是不一样。</span><br><span class="line"></span><br><span class="line">注：如果不是web或者maven的war工程，不能使用。课程中使用tomcat服务器，采用连接池就是dbcp连接池。</span><br><span class="line">数据库连接是最为宝贵的资源，只有在要用到时候，才去获取并打开连接，用完了就再立即将数据库连接归还连接池中</span><br></pre></td></tr></table></figure><h5 id="mybatis中pooled实现"><a href="#mybatis中pooled实现" class="headerlink" title="mybatis中pooled实现"></a>mybatis中pooled实现</h5><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565948322442.png" alt="1565948322442"></p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1565948273677.png" alt="1565948273677"></p><h5 id="设置事务自动提交"><a href="#设置事务自动提交" class="headerlink" title="设置事务自动提交"></a>设置事务自动提交</h5><p>Mybatis 中事务的提交方式，本质上就是调用 JDBC 的 setAutoCommit()来实现事务控制。</p><p>Mybatis通过sqlsession对象的commit方法和rollback方法实现事务的提交和回滚</p><p>但设置为自动提交方式为 false再根据情况决定是否进行提交，这种方式更常用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.使用工厂生产SqlSession对象并设置事务自动提交</span></span><br><span class="line">session = factory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h4 id="Mybatis动态SQL"><a href="#Mybatis动态SQL" class="headerlink" title="Mybatis动态SQL"></a>Mybatis动态SQL</h4><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL 是动态变<br>化的，此时在前面的学习中我们的 SQL 就不能满足要求了。</p><h5 id="动态SQL-之-标签"><a href="#动态SQL-之-标签" class="headerlink" title="动态SQL 之\ 标签"></a>动态SQL 之\<if> 标签</if></h5><p>多条件组合查询：根据实体类的不同取值，使用不同的 SQL 语句来进行查询，比如在 id 如果不为空时可以根据 id 查询，如果 username 不同空时还要加入用户名作为条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//持久层 Dao </span></span><br><span class="line"><span class="comment">//根据用户信息，查询用户列表</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//持久层Dao配置映射</span></span><br><span class="line">&lt;select id=<span class="string">"findByUser"</span> resultType=<span class="string">"site.newvalue.domain.User"</span> parameterType=<span class="string">"site.newvalue.domain.User"</span>&gt;</span><br><span class="line">    select * from user where <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username != '' "</span>&gt;</span><br><span class="line">        and username like #&#123;username&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"address != null"</span>&gt;</span><br><span class="line">        and address like #&#123;address&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类        </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setUsername(<span class="string">"%e%"</span>);</span><br><span class="line">    u.setAddress(<span class="string">"%顺义%"</span>);</span><br><span class="line">    <span class="comment">//6.执行操作</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findByUser(u);</span><br><span class="line">    <span class="keyword">for</span>(User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态-SQL-之-标签"><a href="#动态-SQL-之-标签" class="headerlink" title="动态 SQL 之\ 标签"></a>动态 SQL 之\<where> 标签</where></h5><p>为了简化上面 where 1=1 的条件拼装，我们可以采用\<where>标签来简化开发。</where></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将重复sql提取出来，使用时用include引用即可，最终达到 sql重用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"defaultSql"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据用户信息查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"defaultSql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username != '' "</span>&gt;</span></span><br><span class="line">            and username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">            and address like #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="动态标签之-标签"><a href="#动态标签之-标签" class="headerlink" title="动态标签之\标签"></a>动态标签之\<foreach>标签</foreach></h5><p>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在QueryVo2中加入List集合用于封装参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo2</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"><span class="comment">//get,set</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//持久层 Dao </span></span><br><span class="line"><span class="comment">//根据 id 集合查询用户</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findInIds</span><span class="params">(QueryVo2 vo)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindInIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryVo2 vo = <span class="keyword">new</span> QueryVo2();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">41</span>);ids.add(<span class="number">42</span>);</span><br><span class="line">    ids.add(<span class="number">46</span>);ids.add(<span class="number">57</span>);</span><br><span class="line">    vo.setIds(ids);</span><br><span class="line">    <span class="comment">//6.执行操作</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findInIds(vo);</span><br><span class="line">    <span class="keyword">for</span>(User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 查询所有用户在 id 的集合之中 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findInIds"</span> resultType=<span class="string">"site.newvalue.domain.User"</span> parameterType=<span class="string">"site.newvalue.domain.QueryVo2"</span>&gt;</span><br><span class="line">    &lt;!-- select * <span class="function">from user where id <span class="title">in</span> <span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span></span>; --&gt;</span><br><span class="line">    &lt;include refid="defaultSql"&gt;&lt;/include&gt;</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"ids != null and ids.size() &gt; 0"</span>&gt;</span><br><span class="line">            &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"id in ( "</span> close=<span class="string">")"</span> item=<span class="string">"uid"</span></span><br><span class="line">                     separator=<span class="string">","</span>&gt;</span><br><span class="line">                #&#123;uid&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;foreach&gt;标签用于遍历集合，它的属性：</span><br><span class="line">collection:代表要遍历的集合元素，注意编写时不要写#&#123;&#125;</span><br><span class="line">open:代表语句的开始部分</span><br><span class="line">close:代表结束部分</span><br><span class="line">item:代表遍历集合的每个元素，生成的变量名</span><br><span class="line">sperator:代表分隔符</span><br></pre></td></tr></table></figure><h4 id="mybatis中的多表操作"><a href="#mybatis中的多表操作" class="headerlink" title="mybatis中的多表操作"></a>mybatis中的多表操作</h4><h5 id="一对一或多对一"><a href="#一对一或多对一" class="headerlink" title="一对一或多对一"></a>一对一或多对一</h5><p>方法一：定义专门的 po 类作为输出类型，其中定义了 sql 查询结果集所有的字段。此方法较为简单，企业中使用普遍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例：用户和账户</span><br><span class="line">    一个用户可以有多个账户</span><br><span class="line">    一个账户只能属于一个用户（多个账户也可以属于同一个用户）</span><br><span class="line">步骤：</span><br><span class="line">    1、建立两张表：用户表，账户表</span><br><span class="line">        让用户表和账户表之间具备一对多的关系：需要使用外键在账户表中添加</span><br><span class="line">    2、建立两个实体类：用户实体类和账户实体类</span><br><span class="line">        让用户和账户的实体类能体现出来一对多的关系</span><br><span class="line">    3、建立两个配置文件</span><br><span class="line">        用户的配置文件</span><br><span class="line">        账户的配置文件</span><br><span class="line">    4、实现配置：</span><br><span class="line">        当我们查询用户时，可以同时得到用户下所包含的账户信息</span><br><span class="line">        当我们查询账户时，可以同时得到账户的所属用户信息</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//get,set，toString</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//get,set，toString</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有账户，同时获取账户的所属用户名称以及它的地址信息</span></span><br><span class="line">    <span class="function">List&lt;AccountUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"site.newvalue.dao.IAccountDao"</span>&gt;</span><br><span class="line">    &lt;!-- 配置查询所有操作--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"site.newvalue.domain.AccountUser"</span>&gt;</span><br><span class="line">        select a.*,u.username,u.address from account a,user u where a.uid =u.id;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">        </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//6.执行操作</span></span><br><span class="line">    List&lt;AccountUser&gt; accountusers = accountDao.findAll();</span><br><span class="line">    <span class="keyword">for</span>(AccountUser au : accountusers) &#123;</span><br><span class="line">        System.out.println(au);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：使用 resultMap，定义专门的 resultMap 用于映射一对一查询结果。<br>通过面向对象的(has a)关系可以得知，我们可以在 Account 类中加入一个 User 类的对象来代表这个账户<br>是哪个用户的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">修改 Account  类,在 Account 类中加入 User 类的对象作为 Account 类的一个属性。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllByFun2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"accountUserMap"</span> type=<span class="string">"account"</span>&gt;</span><br><span class="line">    &lt;id column="aid" property="id"&gt;&lt;/id&gt;</span><br><span class="line">    &lt;result column="uid" property="uid"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result column="money" property="money"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;!--一对一关系映射，配置封装user的内容--&gt;</span><br><span class="line">    &lt;association property=<span class="string">"user"</span> javaType=<span class="string">"user"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"username"</span> property=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"sex"</span> property=<span class="string">"sex"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"birthday"</span> property=<span class="string">"birthday"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"address"</span> property=<span class="string">"address"</span>/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"findAllByFun2"</span> resultMap=<span class="string">"accountUserMap"</span>&gt;</span><br><span class="line">    select u.*,a.id as aid,a.money,a.uid from account a,user u where a.uid =u.id</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//6.执行操作</span></span><br><span class="line">    List&lt;AccountUser&gt; accountusers = accountDao.findAllByFun2();</span><br><span class="line">    <span class="keyword">for</span>(AccountUser au : accountusers) &#123;</span><br><span class="line">        System.out.println(au);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a><strong>一对多</strong></h5><p>User 类 加入 List\<account>属性</account></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"site.syzhou.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collection 是用于建立一对多中集合属性的对应关系</span></span><br><span class="line"><span class="comment">            ofType 用于指定集合元素的数据类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">        select u.*,a.ID as aid,a.UID,a.MONEY from user u left join account a on u.id=a.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">collection 部分定义了用户关联的账户信息。表示关联查询结果集</span><br><span class="line">property="accList" ：关联查询的结果集存储在 User 对象的上哪个属性。</span><br><span class="line">ofType="account" ：指定关联查询结果集中对象类型即List中的对象类型。可以用别名，也可以使用全限定名</span><br></pre></td></tr></table></figure><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a><strong>多对多</strong></h5><p>多对多关系其实我们看成是双向的一对多关系。在各自的domain中加入List&lt;对方&gt;字段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"site.syzhou.dao.IRoleDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleUserMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_name"</span> <span class="attr">property</span>=<span class="string">"roleName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_desc"</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"roleUserMap"</span>&gt;</span></span><br><span class="line">        select u.*,r.ID as rid,r.ROLE_NAME,r.ROLE_DESC</span><br><span class="line">from role r left JOIN user_role ur on r.ID=ur.RID LEFT join user u on ur.UID=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h4><p>JNDI：Java Naming and Directory Interface。是SUN公司推出的一套规范，属于JavaEE技术之一。用于Tomcat访问数据库。</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JNDI.png" alt="JNDI"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">在webapp文件下创建META-INF目录</span><br><span class="line">在META-INF目录中建立一个名为context.xml的配置文件</span><br><span class="line">    <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;Resource </span></span><br><span class="line"><span class="comment">        name="jdbc/eesy_mybatis"                  数据源的名称</span></span><br><span class="line"><span class="comment">        type="javax.sql.DataSource"                   数据源类型</span></span><br><span class="line"><span class="comment">        auth="Container"                        数据源提供者</span></span><br><span class="line"><span class="comment">        maxActive="20"                         最大活动数</span></span><br><span class="line"><span class="comment">        maxWait="10000"                            最大等待时间</span></span><br><span class="line"><span class="comment">        maxIdle="5"                               最大空闲数</span></span><br><span class="line"><span class="comment">        username="root"                            用户名</span></span><br><span class="line"><span class="comment">        password="1234"                            密码</span></span><br><span class="line"><span class="comment">        driverClassName="com.mysql.jdbc.Driver"          驱动类</span></span><br><span class="line"><span class="comment">        url="jdbc:mysql://localhost:3306/eesy_mybatis" 连接url字符串</span></span><br><span class="line"><span class="comment">        /&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Resource</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"jdbc/eesy_mybatis"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxActive</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxWait</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxIdle</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"1234"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy_mybatis"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">修改SqlMapConfig.xml中的配置</span><br><span class="line"><span class="comment">&lt;!-- 配置mybatis的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mysql的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务控制的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接数据库的必备信息  type属性表示是否使用数据源（连接池）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JNDI"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"data_source"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/eesy_mybatis"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>实际开发过程中很多时候我们并不需要总是在加载用户信息时就一定要加载他的账户信息。此时就是我们所说的延迟加载。</p><p>延迟加载：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、Mybatis中的延迟加载      </span><br><span class="line">好处：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速</span><br><span class="line">度要快。</span><br><span class="line">坏处 ：因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。</span><br><span class="line"></span><br><span class="line">什么是延迟加载</span><br><span class="line">在真正使用数据时才发起查询，不用的时候不查询。按需加载（懒加载）</span><br><span class="line">什么是立即加载</span><br><span class="line">不管用不用，只要一调用方法，马上发起查询。</span><br><span class="line"></span><br><span class="line">在对应的四种表关系中：一对多，多对一，一对一，多对多</span><br><span class="line">一对多，多对多：通常情况下我们都是采用延迟加载。</span><br><span class="line">多对一，一对一：通常情况下我们都是采用立即加载。</span><br></pre></td></tr></table></figure><p>在 Mybatis 的配置文件 SqlMapConfig.xml 文件中添加延迟加载的配置，开启 Mybatis 延迟加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用-assocation-延迟加载"><a href="#使用-assocation-延迟加载" class="headerlink" title="使用 assocation 延迟加载"></a>使用 assocation 延迟加载</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"site.syzhou.dao.IAccountDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>      <span class="attr">select</span>=<span class="string">"site.syzhou.dao.IUserDao.findById"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select  * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select * from account where uid=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用-Collection-延迟加载"><a href="#使用-Collection-延迟加载" class="headerlink" title="使用 Collection 延迟加载"></a>使用 Collection 延迟加载</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">                PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">                "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"site.syzhou.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">select</span>=<span class="string">"site.syzhou.dao.IAccountDao.findByUid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> &gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span> &gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h4><p>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提<br>高性能。Mybatis 中缓存分为一级缓存，二级缓存。</p><p>一级缓存</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309110037502.png" alt="image-20200309110037502"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，如果没有，从数据库查</span><br><span class="line">询用户信息。</span><br><span class="line">得到用户信息，将用户信息存储到一级缓存中。</span><br><span class="line"></span><br><span class="line">如果 sqlSession 去执行 commit 操作（执行插入、更新、删除），清空 SqlSession 中的一级缓存，这样</span><br><span class="line">做的目的为了让缓存中存储的是最新的信息，避免脏读。</span><br><span class="line"></span><br><span class="line">第二次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，缓存中有，直接从缓存</span><br><span class="line">中获取用户信息。</span><br></pre></td></tr></table></figure><p>二级缓存</p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1566375020744.png" alt="1566375020744"></p><p><img src="/../assets/pic/2018-07-05-Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200309110414468.png" alt="image-20200309110414468"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先开启 mybatis 的二级缓存。</span><br><span class="line">sqlSession1 去查询用户信息，查询到用户信息会将查询数据存储到二级缓存中。</span><br><span class="line">如果 SqlSession3 去执行相同 mapper 映射下 sql，执行 commit 提交，将会清空该 mapper 映射下的二</span><br><span class="line">级缓存区域的数据。</span><br><span class="line">sqlSession2 去查询与 sqlSession1 相同的用户信息，首先会去缓存中找是否存在数据，如果存在直接从</span><br><span class="line">缓存中取出数据。</span><br></pre></td></tr></table></figure><h5 id="缓存详解"><a href="#缓存详解" class="headerlink" title="缓存详解"></a>缓存详解</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">什么是缓存</span><br><span class="line">    存在于内存中的临时数据。</span><br><span class="line">为什么使用缓存</span><br><span class="line">    减少和数据库的交互次数，提高执行效率。</span><br><span class="line">什么样的数据能使用缓存，什么样的数据不能使用</span><br><span class="line">    适用于缓存：</span><br><span class="line">        经常查询并且不经常改变的。</span><br><span class="line">        数据的正确与否对最终结果影响不大的。</span><br><span class="line">    不适用于缓存：</span><br><span class="line">        经常改变的数据</span><br><span class="line">        数据的正确与否对最终结果影响很大的。</span><br><span class="line">        例如：商品的库存，银行的汇率，股市的牌价。</span><br><span class="line">        </span><br><span class="line">Mybatis中的一级缓存和二级缓存</span><br><span class="line">    一级缓存：</span><br><span class="line">        它指的是Mybatis中SqlSession对象的缓存。</span><br><span class="line">        当我们执行查询之后，查询的结果会同时存入到SqlSession为我们提供一块区域中。</span><br><span class="line">        该区域的结构是一个Map。当我们再次查询同样的数据，mybatis会先去sqlsession中</span><br><span class="line">        查询是否有，有的话直接拿出来用。</span><br><span class="line">        当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存</span><br><span class="line">        当SqlSession对象消失时，mybatis的一级缓存也就消失了。</span><br><span class="line">    </span><br><span class="line">    二级缓存:</span><br><span class="line">        它指的是Mybatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession共享其缓存。</span><br><span class="line">        当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。</span><br><span class="line">        二级缓存的使用步骤：</span><br><span class="line">            第一步：让Mybatis框架支持二级缓存（在SqlMapConfig.xml中配置）</span><br><span class="line">                &lt;!-- 开启二级缓存的支持 --&gt;</span><br><span class="line">                &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            第二步：让当前的映射文件支持二级缓存（在IUserDao.xml中配置mapper）</span><br><span class="line">                &lt;cache&gt;&lt;/cache&gt;</span><br><span class="line">            第三步：让当前的操作支持二级缓存（在select标签中配置） useCache=&quot;true&quot;</span><br></pre></td></tr></table></figure><h4 id="Mybatis注解"><a href="#Mybatis注解" class="headerlink" title="Mybatis注解"></a>Mybatis注解</h4><p>这几年来注解开发越来越流行，Mybatis 也可以使用注解开发方式，这样我们就可以减少编写 Mapper 映射<br>文件了。本次我们先围绕一些基本的 CRUD 来学习，再学习复杂映射关系及延迟加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>:实现新增</span><br><span class="line"><span class="meta">@Update</span>:实现更新</span><br><span class="line"><span class="meta">@Delete</span>:实现删除</span><br><span class="line"><span class="meta">@Select</span>:实现查询</span><br><span class="line"><span class="meta">@Result</span>:实现结果集封装</span><br><span class="line"><span class="meta">@Results</span>:可以与<span class="meta">@Result</span> 一起使用，封装多个结果集</span><br><span class="line"><span class="meta">@ResultMap</span>:实现引用<span class="meta">@Results</span> 定义的封装</span><br><span class="line"><span class="meta">@One</span>:实现一对一结果集封装</span><br><span class="line"><span class="meta">@Many</span>:实现一对多结果集封装</span><br><span class="line"><span class="meta">@SelectProvider</span>: 实现动态 SQL 映射</span><br><span class="line"><span class="meta">@CacheNamespace</span>:实现注解二级缓存的使用</span><br></pre></td></tr></table></figure><h5 id="单表CRUD操作（代理Dao方式）"><a href="#单表CRUD操作（代理Dao方式）" class="headerlink" title="单表CRUD操作（代理Dao方式）"></a>单表CRUD操作（代理Dao方式）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"userMap"</span>,</span><br><span class="line">            value= &#123;</span><br><span class="line">            <span class="comment">//此处id表示是否为主键，默认false,column数据列，properties表示类中属性</span></span><br><span class="line">                    <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"username"</span>,property=<span class="string">"username"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"sex"</span>,property=<span class="string">"sex"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"address"</span>,property=<span class="string">"address"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"birthday"</span>,property=<span class="string">"birthday"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = &#123;<span class="string">"userMap"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span>)</span><br><span class="line">    <span class="meta">@SelectKey</span>(keyColumn=<span class="string">"id"</span>,keyProperty=<span class="string">"id"</span>,resultType=Integer.class,before = <span class="keyword">false</span>, statement = &#123; <span class="string">"select last_insert_id()"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;username&#125; "</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多表查询操作"><a href="#多表查询操作" class="headerlink" title="多表查询操作"></a>多表查询操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">复杂关系映射注解说明</span><br><span class="line"><span class="meta">@Results</span>  注解</span><br><span class="line">    代替的是标签&lt;resultMap&gt;</span><br><span class="line">    该注解中可以使用单个<span class="meta">@Result</span> 注解，也可以使用<span class="meta">@Result</span> 集合</span><br><span class="line">    <span class="meta">@Results</span>（&#123;<span class="meta">@Result</span>（），<span class="meta">@Result</span>（）&#125;）或<span class="meta">@Results</span>（<span class="meta">@Result</span>（））</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Resutl</span> 注解</span><br><span class="line">代替了 &lt;id&gt; 标签和&lt;result&gt; 标签</span><br><span class="line"><span class="meta">@Result</span>  中  属性介绍：</span><br><span class="line">    id 是否是主键字段</span><br><span class="line">    column 数据库的列名</span><br><span class="line">    property 需要装配的属性名</span><br><span class="line">    one 需要使用的<span class="meta">@One</span> 注解（<span class="meta">@Result</span>（one=<span class="meta">@One</span>）（）））</span><br><span class="line">    many 需要使用的<span class="meta">@Many</span> 注解（<span class="meta">@Result</span>（many=<span class="meta">@many</span>）（）））</span><br><span class="line">    </span><br><span class="line"><span class="meta">@One</span>  注解（一对一）</span><br><span class="line">代替了&lt;assocation&gt; 标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。</span><br><span class="line"><span class="meta">@One</span>  注解属性介绍：</span><br><span class="line">        select 指定用的 来多表查询的 sqlmapper</span><br><span class="line">        fetchType 会覆盖全局的配置参数 lazyLoadingEnabled。。</span><br><span class="line">    使用格式：</span><br><span class="line"><span class="meta">@Result</span>(column=<span class="string">" "</span>,property=<span class="string">""</span>,one=<span class="meta">@One</span>(select=<span class="string">""</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@Many</span>  注解（多对一）</span><br><span class="line">代替了&lt;Collection&gt; 标签, 是是多表查询的关键，在注解中用来指定子查询返回对象集合。</span><br><span class="line">注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType</span><br><span class="line">（一般为 ArrayList）但是注解中可以不定义；</span><br><span class="line">使用格式：</span><br><span class="line"><span class="meta">@Result</span>(property=<span class="string">""</span>,column=<span class="string">""</span>,many=<span class="meta">@Many</span>(select=<span class="string">""</span>))</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"userMap"</span>,</span><br><span class="line">            value= &#123;</span><br><span class="line">                    <span class="comment">//此处id表示是否为主键，默认false</span></span><br><span class="line">                    <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"username"</span>,property=<span class="string">"username"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"sex"</span>,property=<span class="string">"sex"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"address"</span>,property=<span class="string">"address"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column=<span class="string">"birthday"</span>,property=<span class="string">"birthday"</span>),</span><br><span class="line">                    <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"accounts"</span>,many=<span class="meta">@Many</span>(select = <span class="string">"site.syzhou.dao.IAccountDao.findById"</span>,fetchType = FetchType.LAZY))</span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span>)</span><br><span class="line">    <span class="meta">@SelectKey</span>(keyColumn=<span class="string">"id"</span>,keyProperty=<span class="string">"id"</span>,resultType=Integer.class,before = <span class="keyword">false</span>, statement = &#123; <span class="string">"select last_insert_id()"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;username&#125; "</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"accountMap"</span>,</span><br><span class="line">            value=&#123;<span class="meta">@Result</span>(id=<span class="keyword">true</span>,column = <span class="string">"id"</span>,property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>,property = <span class="string">"uid"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>,property = <span class="string">"money"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>,property = <span class="string">"user"</span>,one=<span class="meta">@One</span>(select=<span class="string">"site.syzhou.dao.IUserDao.findById"</span>,fetchType = FetchType.EAGER))&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account where uid=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Account <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="缓存的配置"><a href="#缓存的配置" class="headerlink" title="缓存的配置"></a>缓存的配置</h5><p>在持久层接口中使用注解配置二级缓存，在IUserDao接口中加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在SqlMapConfig中开启二级缓存支持 --&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheNamespace</span>(blocking=<span class="keyword">true</span>)<span class="comment">//mybatis 基于注解方式实现配置二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MyBatis简介&quot;&gt;&lt;a href=&quot;#MyBatis简介&quot; class=&quot;headerlink&quot; title=&quot;MyBatis简介&quot;&gt;&lt;/a&gt;MyBatis简介&lt;/h4&gt;&lt;h5 id=&quot;1-框架理解&quot;&gt;&lt;a href=&quot;#1-框架理解&quot; class=&quot;headerlink&quot; title=&quot;1 框架理解&quot;&gt;&lt;/a&gt;1 框架理解&lt;/h5&gt;&lt;p&gt;它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题。&lt;br&gt;​框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提高开发效率。&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础知识</title>
    <link href="/2018/2018-07-04-Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-04-Docker基础知识/</id>
    <published>2018-07-04T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>虚拟化</strong>（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。</p><p>虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h5 id="为什么选择Docker"><a href="#为什么选择Docker" class="headerlink" title="为什么选择Docker?"></a>为什么选择Docker?</h5><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>（1）上手快。</p><p>用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><p> 随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</p><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><p>下面的图片比较了 <strong>Docker 和传统虚拟化方式的不同之处</strong>，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><p><img src="/D:/%E9%BB%91%E9%A9%AC%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/00_Java%E8%AE%B2%E4%B9%89/17%20Docker%E5%AE%B9%E5%99%A8%E5%8C%96/%E8%AE%B2%E4%B9%89/image/1-1(1" alt="1-1(/../assets/pic/2018-07-04-Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1-1(1).png)">.png)</p><h4 id="Docker-组件"><a href="#Docker-组件" class="headerlink" title="Docker 组件"></a>Docker 组件</h4><h5 id="Docker服务器与客户端"><a href="#Docker服务器与客户端" class="headerlink" title="Docker服务器与客户端"></a>Docker服务器与客户端</h5><p>Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="/../assets/pic/2018-07-04-Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1-2.png" alt="1-2"></p><h5 id="Docker镜像（Image）与容器（Container）"><a href="#Docker镜像（Image）与容器（Container）" class="headerlink" title="Docker镜像（Image）与容器（Container）"></a>Docker镜像<strong>（Image）</strong>与容器<strong>（Container）</strong></h5><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li></ul><h5 id="Registry（注册中心或仓库）"><a href="#Registry（注册中心或仓库）" class="headerlink" title="Registry（注册中心或仓库）"></a>Registry（注册中心或<strong>仓库</strong>）</h5><p>Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像。</p><h5 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h5><p>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</p><p><img src="/../assets/pic/2018-07-04-Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200221163903713.png" alt="image-20200221163903713"></p><h4 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h4><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载</span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line">sudo apt-get update</span><br><span class="line">apt 依赖包，用于通过HTTPS来获取仓库:</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">添加 Docker 的官方 GPG 密钥：</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">使用以下指令设置稳定版仓库</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">  $</span>(lsb_release -cs) \</span><br><span class="line">  stable"</span><br><span class="line">sudo apt-get update</span><br><span class="line">安装最新版本的 Docker Engine-Community 和 containerd </span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line">或者在仓库中列出可用版本，然后选择一种安装。</span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><strong>使用 Shell 脚本进行安装</strong></p><p>Docker 在 <a href="https://get.docker.com/" target="_blank" rel="noopener">get.docker.com </a>和 <a href="https://test.docker.com/" target="_blank" rel="noopener">test.docker.com</a> 上提供了方便脚本，用于将快速安装 Docker Engine-Community 的边缘版本和测试版本。脚本的源代码在 docker-install 仓库中。 不建议在生产环境中使用这些脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="meta">$</span> sudo sh get-docker.sh</span><br><span class="line">如果要使用 Docker 作为非 root 用户，则应考虑使用类似以下方式将用户添加到 docker 组：</span><br><span class="line"><span class="meta">$</span> sudo usermod -aG docker your-user</span><br></pre></td></tr></table></figure><h5 id="Docker的启动与停止"><a href="#Docker的启动与停止" class="headerlink" title="Docker的启动与停止"></a>Docker的启动与停止</h5><p><strong>systemctl</strong>命令是系统服务管理器指令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker 启动docker</span><br><span class="line">systemctl stop docker 停止docker</span><br><span class="line">systemctl restart docker 重启docker</span><br><span class="line">systemctl status docker 查看docker状态</span><br><span class="line">systemctl enable docker 开机启动</span><br><span class="line">docker info 查看docker概要信息</span><br><span class="line">docker --help 查看docker帮助文档</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h5><p><strong>查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY：镜像名称</span><br><span class="line">TAG：镜像标签</span><br><span class="line">IMAGE ID：镜像ID</span><br><span class="line">CREATED：镜像的创建日期（不是获取该镜像的日期）</span><br><span class="line">SIZE：镜像大小</span><br><span class="line">这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</span><br></pre></td></tr></table></figure><p><strong>搜索镜像</strong></p><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br><span class="line">NAME：仓库名称</span><br><span class="line">DESCRIPTION：镜像描述</span><br><span class="line">STARS：用户评价，反应一个镜像的受欢迎程度</span><br><span class="line">OFFICIAL：是否官方</span><br><span class="line">AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</span><br></pre></td></tr></table></figure><p><strong>拉取镜像</strong></p><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br><span class="line">下载centos7镜像</span><br><span class="line">docker pull centos:7</span><br></pre></td></tr></table></figure><p><strong>删除镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">按镜像ID删除镜像</span><br><span class="line">docker rmi 镜像ID</span><br><span class="line">删除所有镜像</span><br><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure><h5 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h5><p><strong>查看容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line">查看所有容器</span><br><span class="line">docker ps –a</span><br><span class="line">查看最后一次运行的容器</span><br><span class="line">docker ps –l</span><br><span class="line">查看停止的容器</span><br><span class="line">docker ps -f status=exited</span><br><span class="line"></span><br><span class="line">CONTAINER ID: 容器 ID。</span><br><span class="line">IMAGE: 使用的镜像。</span><br><span class="line">COMMAND: 启动容器时运行的命令。</span><br><span class="line">CREATED: 容器的创建时间。</span><br><span class="line">STATUS: 容器状态</span><br><span class="line">PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。</span><br><span class="line">NAMES: 自动分配的容器名称。</span><br></pre></td></tr></table></figure><p><strong>创建与启动容器</strong></p><p>创建容器命令：docker run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-i：表示运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</span><br><span class="line">--name :为创建的容器命名。</span><br><span class="line">-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</span><br><span class="line">-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</span><br><span class="line">-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</span><br></pre></td></tr></table></figure><p>（1）交互式方式创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br><span class="line">这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </span><br><span class="line">退出当前容器 exit</span><br></pre></td></tr></table></figure><p>（2）守护式方式创建容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br><span class="line">登录守护式容器方式：</span><br><span class="line">docker exec -it 容器名称 (或者容器ID)  /bin/bash</span><br></pre></td></tr></table></figure><p><strong>停止与启动容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">停止容器：</span><br><span class="line">docker stop 容器名称（或者容器ID）</span><br><span class="line">启动容器：</span><br><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><p><strong>文件拷贝</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果我们需要将文件拷贝到容器内可以使用cp命令</span><br><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line">也可以将文件从容器内拷贝出来</span><br><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><p><strong>目录挂载</strong></p><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><p><strong>查看容器IP地址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过以下命令查看容器运行的各种数据</span><br><span class="line">docker inspect 容器名称（容器ID） </span><br><span class="line">也可以直接执行下面的命令直接输出IP地址</span><br><span class="line">docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' 容器名称（容器ID）</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h4 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h4><h5 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos/mysql-57-centos7</span><br><span class="line">docker run -di --name=mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root centos/mysql-57-centos7</span><br></pre></td></tr></table></figure><h5 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line">创建容器  -p表示地址映射 本机/usr/local/webapps 映射容器的/usr/local/tomcat/webapps</span><br><span class="line">docker run -di --name=tomcat -p 8080:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure><h5 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker run -di --name=nginx -p 80:80 nginx</span><br><span class="line">docker cp html nginx:/usr/share/nginx/html  拷贝静态网页文件到nginx的目录</span><br></pre></td></tr></table></figure><h5 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker run -di --name=redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h4 id="迁移与备份"><a href="#迁移与备份" class="headerlink" title="迁移与备份"></a>迁移与备份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit mynginx mynginx_i 将容器保存为镜像</span><br><span class="line">docker  save -o mynginx.tar mynginx_i 将镜像保存为tar 文件</span><br><span class="line">docker load -i mynginx.tar  镜像恢复</span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h5 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h5><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h5 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir –p /usr/local/dockerjdk8 创建目录</span><br></pre></td></tr></table></figure><p>下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>创建文件Dockerfile  <code>vi Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依赖镜像名称和ID</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment">#指定镜像创建者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> ITCAST</span><br><span class="line"><span class="comment">#切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span> /usr</span><br><span class="line">RUN mkdir  /usr/local/java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>执行命令构建镜像 注意后边的空格和点，不要省略</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">'jdk1.8'</span> .</span><br><span class="line">查看镜像是否建立完成</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h4><h5 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">拉取私有仓库镜像</span><br><span class="line">docker pull registry</span><br><span class="line">启动私有仓库容器</span><br><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br><span class="line">打开浏览器 输入地址http://newvalue.site:5000/v2/_catalog看到`&#123;&quot;repositories&quot;:[]&#125;` 表示私有仓库搭建成功并且内容为空</span><br><span class="line">修改daemon.json</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">添加以下内容，保存退出，用于让 docker信任私有仓库地址</span><br><span class="line">&#123;&quot;insecure-registries&quot;:[&quot;192.168.184.141:5000&quot;]&#125; </span><br><span class="line">重启docker 服务</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h5 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h5><p>（1）标记此镜像为私有仓库的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag jdk1.8 newvalue.site:5000/jdk1.8</span><br></pre></td></tr></table></figure><p>（2）再次启动私服容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）上传标记的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.184.141:5000/jdk1.8</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;虚拟化&lt;/strong&gt;（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、
      
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础知识</title>
    <link href="/2018/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-03-Maven基础知识/</id>
    <published>2018-07-03T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Maven 包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project<br>Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段<br>(phase)中插件(plugin)目标(goal)的逻辑。</p><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/maven%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" alt="maven概念模型图"></p><a id="more"></a><h5 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Maven 下载后，解压到一个没有中文没有空格的路径下</span><br><span class="line">配置 MAVEN_HOME ，变量值就是你的 maven 安装的路径（bin目录之前一级目录）</span><br><span class="line">编辑添加PATH：D:\apache-maven-3.5.4\bin;</span><br><span class="line">通过 mvn -v命令检查 maven 是否安装成功</span><br></pre></td></tr></table></figure><h5 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h5><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/maven%E4%BB%93%E5%BA%93%E7%9A%84%E7%A7%8D%E7%B1%BB%E5%92%8C%E5%85%B3%E7%B3%BB.png" alt="maven仓库的种类和关系"></p><p>本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目使用一些插件或 jar 包，优先从本地仓库查找；默认本地仓库位置在 ${user.dir}/.m2/repository，${user.dir}表示windows 用户目录。</p><p>远程仓库：如果本地需要插件或者 jar 包，本地仓库没有，默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。</p><p>中央仓库 ：在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a> ，它是中<br>央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包<br>含了世界上大部分流行的开源项目构件。</p><h5 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h5><p>maven 仓库地址、私服等配置信息需要在 setting.xml 文件中配置，分为全局配置和用户配置。在 maven 安装目录下的有 conf/setting.xml 文件，此 setting.xml 文件用于 maven 的所有 project项目，它作为 maven 的全局配置。<br>如需要个性配置则需要在用户配置中设置，用户配置的 setting.xml 文件默认的位置在：${user.dir}/.m2/settings.xml 目录中,${user.dir} 指windows 中的用户目录。<br>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</p><h5 id="Maven工程目录"><a href="#Maven工程目录" class="headerlink" title="Maven工程目录"></a>Maven工程目录</h5><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200229181934585.png" alt="image-20200229181934585"></p><h5 id="POM基本配置"><a href="#POM基本配置" class="headerlink" title="POM基本配置"></a>POM基本配置</h5><p>pom.xml 是 Maven 项目的核心配置文件，位于每个工程的根目录，基本配置如下：<br>\<project> ：文件的根节点 .<br>\<modelversion> ： pom.xml 使用的对象模型版本<br>\<groupid> ：项目名称，一般写项目的域名<br>\<artifactid> ：模块名称，子项目名或模块名称<br>\<version> ：产品的版本号 .snapshot 为快照版本即非正式版本，release为正式发布版本<br>\<packaging> ：打包类型，一般有 jar、war、pom 等<br>\<name> ：项目的显示名，常用于 Maven 生成的文档。<br>\<description> ：项目描述，常用于 Maven 生成的文档<br>\<dependencies> ：项目依赖构件配置，配置项目依赖构件的坐标<br>\<build> ：项目构建配置，配置编译、运行插件等。</build></dependencies></description></name></packaging></version></artifactid></groupid></modelversion></project></p><h5 id="Maven依赖管理"><a href="#Maven依赖管理" class="headerlink" title="Maven依赖管理"></a>Maven依赖管理</h5><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200229181334591.png" alt="image-20200229181334591"></p><p>A 依赖 B，需要在 A 的 pom.xml 文件中添加 B 的坐标，添加坐标时需要指定依赖范围，依赖范围由强到弱的顺序是：compile&gt;provided&gt;runtime&gt;test；依赖范围包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">compile：编译范围，指 A在编译时依赖 B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</span><br><span class="line"></span><br><span class="line">provided：provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用， provided 依赖在编译和测试时需要，在运行时不需要，比如：servlet api 被 tomcat 容器提供。</span><br><span class="line"></span><br><span class="line">runtime：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc的驱动包。由于运行时需要所以 runtime 范围的依赖会被打包。</span><br><span class="line"></span><br><span class="line">test：test 范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如junit。由于运行时不需要所以test范围依赖不会被打包。</span><br><span class="line"></span><br><span class="line">system：system 范围依赖与 provided 类似，但是你必须显式的提供一个对于本地系统中 JAR文件的路径，需要指定 systemPath 磁盘路径，system依赖不推荐使用。</span><br></pre></td></tr></table></figure><p><strong>依赖冲突</strong></p><p>1 、第一声明者优先原则<br>在 pom 文件定义依赖，先声明的依赖为准。</p><p>2 、路径近者优先原则</p><p>如果直接把 spring-beans 的依赖直接写到 pom 文件中，那么项目就不会再使用其他依赖传递来的 spring-beans，因为自己直接在 pom 中定义 spring-beans要比其他依赖传递过来的路径要近。</p><p>3、通过排除依赖方法辅助依赖调解\<exclusions></exclusions></p><p><strong>锁定版本</strong></p><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优化等因素可以采用直接锁定版本的方法确定依赖构件的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本的为准添加到工程中.</p><p>在工程中锁定依赖的版本并不代表在工程中添加了依赖，如果工程需要添加锁定版本的依赖则需要单独添加\<dependencies>\</dependencies>标签</p><p><strong>依赖范围对传递依赖的影响</strong></p><p>最左边一列为直接依赖，理解为 A 依赖 B 的范围，最顶层一行为传递依赖，理解为 B依赖 C 的范围，行与列的交叉即为 A传递依赖 C的范围。</p><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200301100716194.png" alt="image-20200301100716194"></p><p><strong>JDK8和tomcat7依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h5><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="maven生命周期"></p><p><strong>常用命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clean 是 maven 工程的清理命令，执行 clean 会删除 target 目录及内容。</span><br><span class="line">compile 是 maven 工程的编译命令，作用是将 src/main/java 下的文件编译为 <span class="class"><span class="keyword">class</span> 文件输出到 <span class="title">target</span>目录下。</span></span><br><span class="line"><span class="class"><span class="title">test</span> 是 <span class="title">maven</span> 工程的测试命令 <span class="title">mvn</span> <span class="title">test</span>，会执行<span class="title">src</span>/<span class="title">test</span>/<span class="title">java</span>下的单元测试类。<span class="title">package</span> 是 <span class="title">maven</span> 工程的打包命令，对于 <span class="title">java</span> 工程执行 <span class="title">package</span> 打成 <span class="title">jar</span> 包，对于<span class="title">web</span> 工程打成<span class="title">war</span>包。</span></span><br><span class="line"><span class="class"><span class="title">install</span> 是 <span class="title">maven</span> 工程的安装命令，执行 <span class="title">install</span> 将 <span class="title">maven</span> 打成 <span class="title">jar</span> 包或 <span class="title">war</span> 包发布到本地仓库。</span></span><br></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><strong>生命周期</strong></h5><p>maven 对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，<br>这三套生命周期分别是：<br>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。<br>Site Lifecycle 生成项目报告，站点，发布站点。</p><h5 id="常用SSM的POM"><a href="#常用SSM的POM" class="headerlink" title="常用SSM的POM"></a>常用SSM的POM</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.security.version</span>&gt;</span>5.0.1.RELEASE<span class="tag">&lt;/<span class="name">spring.security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加tomcat7和JDK8插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="分模块构建工程"><a href="#分模块构建工程" class="headerlink" title="分模块构建工程"></a>分模块构建工程</h5><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200301100515595.png" alt="image-20200301100515595"></p><p><strong>运行方式</strong></p><p>方法 1：在ssm_web 工程的 pom.xml 中配置 tomcat 插件运行<br>运行 ssm_web 工程它会从本地仓库下载依赖的 jar 包，所以当 ssm_web 依赖的 jar 包内容修改了必须及时发布到本地仓库，比如：ssm_web 依赖的 ssm_service 修改了，需要及时将ssm_service 发布到本地仓库（install)。<br>方法 2：在父工程的 pom.xml 中配置 tomcat插件运行，自动聚合并执行<br>推荐方法2，如果子工程都在本地，采用方法2则不需要子工程修改就立即发布到本地仓库，父工程会自动聚合并使用最新代码执行。<br>注意：如果子工程和父工程中都配置了tomcat 插件，运行的端口和路径以子工程为准</p><h4 id="maven私服"><a href="#maven私服" class="headerlink" title="maven私服"></a>maven私服</h4><p>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的 maven 远程仓库，每个员工的电脑上安装 maven 软件并且连接私服服务器，员工将自己开发的项目打成 jar 并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。<br>私服还充当一个代理服务器，当私服上没有 jar 包会从互联网中央仓库自动下载，如下图：</p><p><img src="/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200301101236364.png" alt="image-20200301101236364"></p><h5 id="搭建私服"><a href="#搭建私服" class="headerlink" title="搭建私服"></a>搭建私服</h5><p>1 下载 Nexus， 下载地址：<a href="http://www.sonatype.org/nexus/archived/" target="_blank" rel="noopener">http://www.sonatype.org/nexus/archived/</a></p><p>2 解压 nexus-2.12.0-01-bundle.zip，cmd进入 bin目录，执行 nexus.bat install</p><p>​        卸载执行：nexus.bat uninstall</p><p>3 cmd 进入 bin目录，执行 nexus.bat start</p><pre><code>nexus 的配置文件conf/nexus.properties</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Jetty section</span><br><span class="line">application-port=8081 # nexus 的访问端口配置</span><br><span class="line">application-host=0.0.0.0 # nexus 主机监听配置(不用修改)</span><br><span class="line">nexus-webapp=$&#123;bundleBasedir&#125;/nexus # nexus 工程目录</span><br><span class="line">nexus-webapp-context-path=/nexus  # nexus 的 web 访问路径</span><br><span class="line"># Nexus section</span><br><span class="line">nexus-work=$&#123;bundleBasedir&#125;/../sonatype-work/nexus # nexus 仓库目录</span><br><span class="line">runtime=$&#123;bundleBasedir&#125;/nexus/WEB-INF # nexus 运行程序目录</span><br></pre></td></tr></table></figure><p>4 访问：<a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a> 使用 Nexus 内置账户admin/admin123 登陆</p><p>nexus 仓库默认在 sonatype-work 目录中,有 4 种类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.  hosted，宿主仓库，部署自己的 jar 到这个类型的仓库，包括 releases 和 snapshot 两部分，Releases公司内部发布版本仓库、 Snapshots 公司内部测试版本仓库</span><br><span class="line"></span><br><span class="line">2.  proxy，代理仓库，用于代理远程的公共仓库，如 maven 中央仓库，用户连接私服，私服自动去中央仓库下载 jar 包或者插件。</span><br><span class="line"></span><br><span class="line">3.  group，仓库组，用来合并多个 hosted/proxy 仓库，通常我们配置自己的 maven 连接仓库组。</span><br><span class="line"></span><br><span class="line">4.  virtual(虚拟)：兼容 Maven1 版本的 jar 或者插件</span><br></pre></td></tr></table></figure><h5 id="客户端配置私服"><a href="#客户端配置私服" class="headerlink" title="客户端配置私服"></a>客户端配置私服</h5><p>修改 settings.xml文件，配置连接私服的用户和密码 。此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和密码一致。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下载jar包配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--profile的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> <span class="comment">&lt;!--仓库id，repositories可以配置多个仓库，保证id不重复 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!--仓库地址，即nexus仓库组的地址 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!--是否下载releases构件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> <span class="comment">&lt;!--是否下载snapshots构件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> <span class="comment">&lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> <span class="comment">&lt;!-- 插件仓库的id不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置项目 pom.xml</p><p>配置私服仓库的地址，本公司的自己的 jar 包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为 release 则上传到私服的 release 仓库，如果版本为snapshot 则上传到私服的 snapshot仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom.xml 这里\<id> 和 settings.xml 配置\<id> 对应！</id></id></strong></p><h5 id="jar包上传到私服"><a href="#jar包上传到私服" class="headerlink" title="jar包上传到私服"></a>jar包上传到私服</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--安装第三方jar包到本地仓库</span><br><span class="line"></span><br><span class="line">----进入jar包所在目录运行</span><br><span class="line">mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 -Dfile=fastjson-1.1.37.jar -Dpackaging=jar</span><br><span class="line">----打开cmd直接运行</span><br><span class="line">mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 -Dpackaging=jar -Dfile=C:\my_java\授课资料\资料：maven【高级】\安装第三方jar包\fastjson-1.1.37.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--安装第三方jar包到私服</span><br><span class="line"></span><br><span class="line">--在settings配置文件中添加登录私服第三方登录信息</span><br><span class="line">&lt;server&gt;</span><br><span class="line">&lt;id&gt;thirdparty&lt;/id&gt;</span><br><span class="line">&lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">&lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line">----进入jar包所在目录运行</span><br><span class="line">mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 -Dpackaging=jar -Dfile=fastjson-1.1.37.jar -Durl=http://localhost:8081/nexus/content/repositories/thirdparty/ -DrepositoryId=thirdparty</span><br><span class="line">----打开cmd直接运行</span><br><span class="line">mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 -Dpackaging=jar -Dfile=C:\my_java\授课资料\资料：maven【高级】\安装第三方jar包\fastjson-1.1.37.jar -Durl=http://localhost:8081/nexus/content/repositories/thirdparty/ -DrepositoryId=thirdparty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;Maven 包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project&lt;br&gt;Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段&lt;br&gt;(phase)中插件(plugin)目标(goal)的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../assets/pic/2018-07-03-Maven%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/maven%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B%E5%9B%BE.png&quot; alt=&quot;maven概念模型图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb基础知识</title>
    <link href="/2018/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-02-JavaWeb基础知识/</id>
    <published>2018-07-02T02:36:00.000Z</published>
    <updated>2020-10-08T03:03:00.243Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Web相关概念"><a href="#Web相关概念" class="headerlink" title="Web相关概念"></a>Web相关概念</h4><ol><li>软件架构<ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol></li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>. 资源分类</span><br><span class="line">   <span class="number">1</span>. 静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析</span><br><span class="line">      * 如： html,css,JavaScript</span><br><span class="line">   <span class="number">2</span>. 动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</span><br><span class="line">      * 如：servlet/jsp,php,asp....</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 网络通信三要素</span><br><span class="line">   <span class="number">1</span>. IP：电子设备(计算机)在网络中的唯一标识。</span><br><span class="line">   <span class="number">2</span>. 端口：应用程序在计算机中的唯一标识。 <span class="number">0</span>~<span class="number">65536</span></span><br><span class="line">   <span class="number">3</span>. 传输协议：规定了数据传输的规则</span><br><span class="line">      <span class="number">1</span>. TCP:安全协议，三次握手。 速度稍慢</span><br><span class="line">      <span class="number">2</span>. UDP：不安全协议。 速度快</span><br></pre></td></tr></table></figure><h5 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 服务器：安装了服务器软件的计算机</span><br><span class="line">* 服务器软件：接收用户的请求，处理请求，做出响应</span><br><span class="line">* web服务器软件：web容器，接收用户的请求，处理请求，做出响应。</span><br><span class="line">  * 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</span><br><span class="line"></span><br><span class="line">* 常见的java相关的web服务器软件：</span><br><span class="line">webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</span><br></pre></td></tr></table></figure><h5 id="Tomcat：web服务器软件"><a href="#Tomcat：web服务器软件" class="headerlink" title="Tomcat：web服务器软件"></a>Tomcat：web服务器软件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启动报错：</span><br><span class="line">    1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</span><br><span class="line">    * netstat -ano</span><br><span class="line">    2. 温柔：修改自身的端口号</span><br><span class="line">        * conf/server.xml</span><br><span class="line">        * <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8888"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">redirectPort</span>=<span class="string">"8445"</span> /&gt;</span></span><br><span class="line">        * 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。好处：在访问时，就不用输入端口号</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* 部署项目的方式：</span><br><span class="line">1. 直接将项目放到webapps目录下即可。</span><br><span class="line">* /hello：项目的访问路径--&gt;虚拟目录</span><br><span class="line">* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">* war包会自动解压缩</span><br><span class="line"></span><br><span class="line">2. 配置conf/server.xml文件</span><br><span class="line">在<span class="tag">&lt;<span class="name">Host</span>&gt;</span>标签体中配置</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\hello"</span> <span class="attr">path</span>=<span class="string">"/hehe"</span> /&gt;</span></span><br><span class="line">* docBase:项目存放的路径</span><br><span class="line">* path：虚拟目录</span><br><span class="line"></span><br><span class="line">3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\hello"</span> /&gt;</span></span><br><span class="line">* 虚拟目录：xml文件的名称</span><br><span class="line"></span><br><span class="line">* 静态项目和动态项目：</span><br><span class="line">* 目录结构</span><br><span class="line">* java动态项目的目录结构：</span><br><span class="line">-- 项目的根目录</span><br><span class="line">-- WEB-INF目录：</span><br><span class="line">-- web.xml：web项目的核心配置文件</span><br><span class="line">-- classes目录：放置字节码文件的目录</span><br><span class="line">-- lib目录：放置依赖的jar包</span><br></pre></td></tr></table></figure><h5 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line">* 查看控制台的log：Using CATALINA_BASE:   <span class="string">"C:\Users\fqy\.IntelliJIdea2018.1\system\tomcat\_itcast"</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 工作空间项目    和     tomcat部署的web项目</span><br><span class="line">* tomcat真正访问的是“tomcat部署的web项目”，<span class="string">"tomcat部署的web项目"</span>对应着<span class="string">"工作空间项目"</span> 的web目录下的所有资源</span><br><span class="line">* WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line"><span class="number">3</span>. 断点调试：使用<span class="string">"小虫子"</span>启动 dubug 启动</span><br></pre></td></tr></table></figure><h5 id="设置浏览器不cache"><a href="#设置浏览器不cache" class="headerlink" title="设置浏览器不cache"></a>设置浏览器不cache</h5><p>缓存分3部分，一个是页面内容，一个是css样式，一个是JS文件</p><p>方法一：在页面\<head><meta name="generator" content="Hexo 3.8.0">标签里增加如下meta标签。</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：给请求的路径中加一个随机数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OpenURL</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> url=<span class="string">"index.jsp"</span>+<span class="string">"?a="</span>+<span class="built_in">Math</span>.random(); <span class="built_in">window</span>.open(url);</span><br></pre></td></tr></table></figure><p>方法三：在java代码中增加如下代码。</p><p>如果是简单的功能测试用的可以直接在serevlet上写，如果是一个完整的项目，可以考虑在过滤器上加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>); </span><br><span class="line">response.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>); </span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="Servlet：-server-applet"><a href="#Servlet：-server-applet" class="headerlink" title="Servlet： server applet"></a>Servlet： server applet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">概念：运行在服务器端的小程序</span><br><span class="line">* Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</span><br><span class="line">* 将来我们自定义一个类，实现Servlet接口，复写方法。</span><br></pre></td></tr></table></figure><h5 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.bmp" alt="Servlet执行原理"></p><h5 id="Servlet中的生命周期方法"><a href="#Servlet中的生命周期方法" class="headerlink" title="Servlet中的生命周期方法"></a>Servlet中的生命周期方法</h5><p>多个客户端并发访问同一个Servlet时，web服务器会为每一个客户端的访问请求创建一个线程，并在这个线程上调用service方法，因此，service方法内如果访问了同一个资源的话，就有可能引发线程安全问题。</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200224164330946.png" alt="image-20200224164330946"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 被创建：执行init方法，只执行一次</span><br><span class="line">* Servlet什么时候被创建？</span><br><span class="line">* 默认情况下，第一次被访问时，Servlet被创建</span><br><span class="line">* 可以配置执行Servlet的创建时机。</span><br><span class="line">* 在&lt;servlet&gt;标签下配置</span><br><span class="line"><span class="number">1</span>. 第一次被访问时，创建</span><br><span class="line">                * &lt;load-on-startup&gt;的值为负数</span><br><span class="line">            <span class="number">2</span>. 在服务器启动时，创建</span><br><span class="line">                * &lt;load-on-startup&gt;的值为<span class="number">0</span>或正整数</span><br><span class="line">* Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</span><br><span class="line">* 多个用户同时访问时，可能存在线程安全问题。</span><br><span class="line">* 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</span><br><span class="line"><span class="number">2</span>. 提供服务：执行service方法，执行多次</span><br><span class="line">* 每次访问Servlet时，Service方法都会被调用一次。</span><br><span class="line"><span class="number">3</span>. 被销毁：执行destroy方法，只执行一次</span><br><span class="line">* Servlet被销毁时执行。服务器关闭时，Servlet被销毁</span><br><span class="line">* 只有服务器正常关闭时，才会执行destroy方法。</span><br><span class="line">* destroy方法在Servlet被销毁之前执行，一般用于释放资源</span><br><span class="line"></span><br><span class="line">Servlet3.0：支持注解配置。可以不需要web.xml了</span><br><span class="line">* 在类上使用<span class="meta">@WebServlet</span>注解，进行配置；<span class="meta">@WebServlet</span>(<span class="string">"资源路径"</span>)</span><br></pre></td></tr></table></figure><h5 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Servlet -- 接口</span><br><span class="line">|</span><br><span class="line">GenericServlet -- 抽象类</span><br><span class="line">|</span><br><span class="line">HttpServlet  -- 抽象类</span><br><span class="line"></span><br><span class="line">* GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</span><br><span class="line">  * 将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</span><br><span class="line"></span><br><span class="line">* HttpServlet：对http协议的一种封装，简化操作</span><br><span class="line">  <span class="number">1</span>. 定义类继承HttpServlet</span><br><span class="line">  <span class="number">2</span>. 复写doGet/doPost方法</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/HttpServlet.bmp" alt="HttpServlet"></p><h5 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpartten:Servlet访问路径</span><br><span class="line"><span class="number">1</span>. 一个Servlet可以定义多个访问路径 ： <span class="meta">@WebServlet</span>(&#123;<span class="string">"/d4"</span>,<span class="string">"/dd4"</span>,<span class="string">"/ddd4"</span>&#125;)</span><br><span class="line"><span class="number">2</span>. 路径定义规则：</span><br><span class="line">   <span class="number">1</span>. /xxx：路径匹配</span><br><span class="line">   <span class="number">2</span>. /xxx/xxx:多层路径，目录结构</span><br><span class="line">   <span class="number">3</span>. *.<span class="keyword">do</span>：扩展名匹配</span><br></pre></td></tr></table></figure><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 概念：Hyper Text Transfer Protocol 超文本传输协议</span><br><span class="line">* 传输协议：定义了，客户端和服务器端通信时，发送数据的格式</span><br><span class="line">* 特点：</span><br><span class="line"><span class="number">1</span>. 基于TCP/IP的高级协议</span><br><span class="line"><span class="number">2</span>. 默认端口号:<span class="number">80</span></span><br><span class="line"><span class="number">3</span>. 基于请求/响应模型的:一次请求对应一次响应</span><br><span class="line"><span class="number">4</span>. 无状态的：每次请求之间相互独立，不能交互数据</span><br><span class="line"></span><br><span class="line">* 历史版本：</span><br><span class="line">* <span class="number">1.0</span>：每一次请求响应都会建立新的连接</span><br><span class="line">* <span class="number">1.1</span>：复用连接</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/request&amp;response%E5%AF%B9%E8%B1%A1%E5%8E%9F%E7%90%86.bmp" alt="request&amp;response对象原理"></p><h5 id="请求消息：客户端发送给服务器端的数据"><a href="#请求消息：客户端发送给服务器端的数据" class="headerlink" title="请求消息：客户端发送给服务器端的数据"></a>请求消息：客户端发送给服务器端的数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 请求行</span><br><span class="line">请求方式 请求url 请求协议/版本</span><br><span class="line">GET /login.htmlHTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line">* 请求方式：</span><br><span class="line">* HTTP协议有<span class="number">7</span>中请求方式，常用的有<span class="number">2</span>种</span><br><span class="line">* GET：</span><br><span class="line"><span class="number">1</span>. 请求参数在请求行中，在url后。</span><br><span class="line"><span class="number">2</span>. 请求的url长度有限制的</span><br><span class="line"><span class="number">3</span>. 不太安全</span><br><span class="line">* POST：</span><br><span class="line"><span class="number">1</span>. 请求参数在请求体中</span><br><span class="line"><span class="number">2</span>. 请求的url长度没有限制的</span><br><span class="line"><span class="number">3</span>. 相对安全</span><br><span class="line"><span class="number">2</span>. 请求头：客户端浏览器告诉服务器一些信息</span><br><span class="line">请求头名称: 请求头值</span><br><span class="line">* 常见的请求头：</span><br><span class="line"><span class="number">1</span>. User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</span><br><span class="line">* 可以在服务器端获取该头的信息，解决浏览器的兼容性问题</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. Referer：http:<span class="comment">//localhost/login.html</span></span><br><span class="line">* 告诉服务器，我(当前请求)从哪里来？</span><br><span class="line">* 作用：</span><br><span class="line"><span class="number">1</span>. 防盗链：</span><br><span class="line"><span class="number">2</span>. 统计工作：</span><br><span class="line"><span class="number">3</span>. 请求空行</span><br><span class="line">空行，就是用于分割POST请求的请求头，和请求体的。</span><br><span class="line"><span class="number">4</span>. 请求体(正文)：</span><br><span class="line">* 封装POST请求消息的请求参数的</span><br><span class="line"></span><br><span class="line">* 字符串格式：</span><br><span class="line">POST /login.htmlHTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64; rv:<span class="number">60.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">60.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Referer: http://localhost/login.html</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">username=zhangsan</span></span><br></pre></td></tr></table></figure><p>get：请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例如：login.action？name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。</p><p>如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><h5 id="响应消息：服务器端发送给客户端的数据"><a href="#响应消息：服务器端发送给客户端的数据" class="headerlink" title="响应消息：服务器端发送给客户端的数据"></a>响应消息：服务器端发送给客户端的数据</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">数据格式：</span><br><span class="line"><span class="number">1</span>. 响应行</span><br><span class="line"><span class="number">1</span>. 组成：协议/版本 响应状态码 状态码描述</span><br><span class="line"><span class="number">2</span>. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</span><br><span class="line"><span class="number">1</span>. 状态码都是<span class="number">3</span>位数字 </span><br><span class="line"><span class="number">2</span>. 分类：</span><br><span class="line"><span class="number">1</span>. <span class="number">1</span>xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送<span class="number">1</span>xx多状态码</span><br><span class="line"><span class="number">2</span>. <span class="number">2</span>xx：成功。代表：<span class="number">200</span></span><br><span class="line"><span class="number">3</span>. <span class="number">3</span>xx：重定向。代表：<span class="number">302</span>(重定向)，<span class="number">304</span>(访问缓存)</span><br><span class="line"><span class="number">4</span>. <span class="number">4</span>xx：客户端错误。</span><br><span class="line">* 代表：</span><br><span class="line">* <span class="number">404</span>（请求路径没有对应的资源） </span><br><span class="line">* <span class="number">405</span>：请求方式没有对应的doXxx方法</span><br><span class="line"><span class="number">5</span>. <span class="number">5</span>xx：服务器端错误。代表：<span class="number">500</span>(服务器内部出现异常)</span><br><span class="line"><span class="number">2</span>. 响应头：</span><br><span class="line"><span class="number">1</span>. 格式：头名称： 值</span><br><span class="line"><span class="number">2</span>. 常见的响应头：</span><br><span class="line"><span class="number">1</span>. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</span><br><span class="line"><span class="number">2</span>. Content-disposition：服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">* 值：</span><br><span class="line">* in-line:默认值,在当前页面内打开</span><br><span class="line">* attachment;filename=xxx：以附件形式打开响应体。文件下载</span><br><span class="line"><span class="number">3</span>. 响应空行</span><br><span class="line"><span class="number">4</span>. 响应体:传输的数据</span><br><span class="line">        </span><br><span class="line">    * 响应字符串格式</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: text/html;charset=UTF-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">101</span></span><br><span class="line">Date: Wed, <span class="number">06</span> Jun <span class="number">2018</span> <span class="number">07</span>:<span class="number">08</span>:<span class="number">42</span> GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  hello , response</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. request对象和response对象的原理</span><br><span class="line"><span class="number">1</span>. request和response对象是由服务器创建的。我们来使用它们</span><br><span class="line"><span class="number">2</span>. request对象是来获取请求消息，response对象是来设置响应消息</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. request对象继承体系结构：</span><br><span class="line">ServletRequest--接口</span><br><span class="line">|继承</span><br><span class="line">HttpServletRequest-- 接口</span><br><span class="line">|实现</span><br><span class="line">org.apache.catalina.connector.RequestFacade 类(tomcat)</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/request&amp;response%E5%AF%B9%E8%B1%A1%E5%8E%9F%E7%90%86.bmp" alt="request&amp;response对象原理"></p><h5 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 获取请求消息数据</span><br><span class="line"><span class="number">1</span>. 获取请求行数据</span><br><span class="line">* GET /day14/demo1?name=zhangsan HTTP/<span class="number">1.1</span></span><br><span class="line">* 方法：</span><br><span class="line"><span class="number">1</span>. 获取请求方式 ：GET</span><br><span class="line">* <span class="function">String <span class="title">getMethod</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">2. <span class="params">(*)</span>获取虚拟目录：/day14</span></span><br><span class="line"><span class="function">* String <span class="title">getContextPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">3. 获取Servlet路径: /demo1</span></span><br><span class="line"><span class="function">* String <span class="title">getServletPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">4. 获取get方式请求参数：name</span>=zhangsan</span><br><span class="line">* <span class="function">String <span class="title">getQueryString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">5. <span class="params">(*)</span>获取请求URI：/day14/demo1</span></span><br><span class="line"><span class="function">* String <span class="title">getRequestURI</span><span class="params">()</span>:/day14/demo1</span></span><br><span class="line"><span class="function">* StringBuffer <span class="title">getRequestURL</span><span class="params">()</span>  :http:<span class="comment">//localhost/day14/demo1</span></span></span><br><span class="line"><span class="function">* URL:统一资源定位符 ： http:<span class="comment">//localhost/day14/demo1中华人民共和国</span></span></span><br><span class="line"><span class="function">* URI：统一资源标识符 : /day14/demo1共和国</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6. 获取协议及版本：HTTP/1.1</span></span><br><span class="line"><span class="function">* String <span class="title">getProtocol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">7. 获取客户机的IP地址：</span></span><br><span class="line"><span class="function">* String <span class="title">getRemoteAddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. 获取请求头数据</span></span><br><span class="line"><span class="function">* 方法：</span></span><br><span class="line"><span class="function">* <span class="params">(*)</span>String <span class="title">getHeader</span><span class="params">(String name)</span>:通过请求头的名称获取请求头的值</span></span><br><span class="line"><span class="function">* Enumeration&lt;String&gt; <span class="title">getHeaderNames</span><span class="params">()</span>:获取所有的请求头名称</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. 获取请求体数据:</span></span><br><span class="line"><span class="function">* 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</span></span><br><span class="line"><span class="function">* 步骤：</span></span><br><span class="line"><span class="function">1. 获取流对象</span></span><br><span class="line"><span class="function">*  BufferedReader <span class="title">getReader</span><span class="params">()</span>：获取字符输入流，只能操作字符数据</span></span><br><span class="line"><span class="function">*  ServletInputStream <span class="title">getInputStream</span><span class="params">()</span>：获取字节输入流，可以操作所有类型数据</span></span><br><span class="line"><span class="function">* 在文件上传知识点后讲解</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. 再从流对象中拿数据</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. 其他功能：<span class="params">(重点)</span></span></span><br><span class="line"><span class="function">1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数</span></span><br><span class="line"><span class="function">1. String <span class="title">getParameter</span><span class="params">(String name)</span>:根据参数名称获取参数值                       username</span>=zs&amp;password=<span class="number">123</span></span><br><span class="line"><span class="number">2</span>. String[] getParameterValues(String name):根据参数名称获取参数值的数组                           hobby=xx&amp;hobby=game</span><br><span class="line"><span class="number">3</span>. <span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span>:获取所有请求的参数名称</span></span><br><span class="line"><span class="function">4. Map&lt;String,String[]&gt; <span class="title">getParameterMap</span><span class="params">()</span>:获取所有参数的map集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 中文乱码问题：</span></span><br><span class="line"><span class="function">* get方式：tomcat 8 已经将get方式乱码问题解决了</span></span><br><span class="line"><span class="function">* post方式：会乱码</span></span><br><span class="line"><span class="function">在获取参数前，设置request的编码request.<span class="title">setCharacterEncoding</span><span class="params">(<span class="string">"utf-8"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 请求转发：一种在服务器内部的资源跳转方式</span><br><span class="line"><span class="number">1</span>. 步骤：</span><br><span class="line"><span class="number">1</span>. 通过request对象获取请求转发器对象</span><br><span class="line">            <span class="function">RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">2. 使用RequestDispatcher对象来进行转发</span></span><br><span class="line"><span class="function">            <span class="title">forward</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. 特点：</span></span><br><span class="line"><span class="function">1. 浏览器地址栏路径不发生变化</span></span><br><span class="line"><span class="function">2. 只能转发到当前服务器内部资源中。</span></span><br><span class="line"><span class="function">3. 转发是一次请求</span></span><br><span class="line"><span class="function">3. 共享数据：</span></span><br><span class="line"><span class="function">* 域对象：一个有作用范围的对象，可以在范围内共享数据</span></span><br><span class="line"><span class="function">* request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</span></span><br><span class="line"><span class="function">* 方法：</span></span><br><span class="line"><span class="function">1. <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span>:存储数据</span></span><br><span class="line"><span class="function">2. Object <span class="title">getAttitude</span><span class="params">(String name)</span>:通过键获取值</span></span><br><span class="line"><span class="function">3. <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span>:通过键移除键值对</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. 获取ServletContext：</span></span><br><span class="line"><span class="function">* ServletContext <span class="title">getServletContext</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h5 id="Request请求转发和域对象"><a href="#Request请求转发和域对象" class="headerlink" title="Request请求转发和域对象"></a>Request请求转发和域对象</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Request%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91&amp;%E5%9F%9F%E5%AF%B9%E8%B1%A1.bmp" alt="Request请求转发&amp;域对象"></p><h5 id="登录案例分析"><a href="#登录案例分析" class="headerlink" title="登录案例分析"></a>登录案例分析</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.bmp" alt="登录案例分析"></p><h4 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">功能：设置响应消息</span><br><span class="line">1. 设置响应行</span><br><span class="line">1. 格式：HTTP/1.1 200 ok</span><br><span class="line">2. 设置状态码：setStatus(int sc) </span><br><span class="line">2. 设置响应头：setHeader(String name, String value) </span><br><span class="line"></span><br><span class="line">3. 设置响应体：</span><br><span class="line">* 使用步骤：</span><br><span class="line">1. 获取输出流</span><br><span class="line">* 字符输出流：PrintWriter getWriter()</span><br><span class="line">* 字节输出流：ServletOutputStream getOutputStream()</span><br><span class="line"></span><br><span class="line">2. 使用输出流，将数据输出到客户端浏览器</span><br></pre></td></tr></table></figure><h5 id="response乱码"><a href="#response乱码" class="headerlink" title="response乱码"></a>response乱码</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200224154255379.png" alt="image-20200224154255379"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">response中文乱码</span><br><span class="line">1.如果中文返回出现？？字符，这表明没有加HttpServletResponse.setCharacterEncoding(&quot;UTF-8&quot;);这句话。可以加上来设置服务器端的编码</span><br><span class="line">2.如果返回的中文是“烇湫”这种乱码，说明浏览器的解析问题，应该检查下是否忘加response.setHeader(&quot;Content-type&quot;, &quot;text/html;charset=UTF-8&quot;);这句话来通知浏览器服务器发送的数据格式</span><br><span class="line">3.如果还是有乱码，就指定html文件里内容的编码方式&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line"></span><br><span class="line">request中文乱码</span><br><span class="line">地址栏直接输入URL访问浏览器默认将参数按照utf-8进行编码；点击页面中的超链接访问和提交表单访问浏览器将参数按照当前页面的显示编码进行编码。</span><br><span class="line">解决方法如下：</span><br><span class="line">1. 不管是get请求还是post请求，将中文参数进行url编码,用URLEncoder.encode()进行编码传到后台</span><br><span class="line">2. 设置pageEncoding=“utf-8”</span><br><span class="line">3. 后台接收编码也用 utf-8</span><br><span class="line">4. web.xml设置编码</span><br></pre></td></tr></table></figure><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%87%8D%E5%AE%9A%E5%90%91.bmp" alt="重定向"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 重定向：资源跳转的方式</span><br><span class="line">* 代码实现：</span><br><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">    response.setStatus(<span class="number">302</span>);</span><br><span class="line">    <span class="comment">//2.设置响应头location</span></span><br><span class="line">    response.setHeader(<span class="string">"location"</span>,<span class="string">"/day15/responseDemo2"</span>);</span><br><span class="line">    <span class="comment">//简单的重定向方法</span></span><br><span class="line">    response.sendRedirect(<span class="string">"/day15/responseDemo2"</span>);</span><br></pre></td></tr></table></figure><h5 id="forward-和-redirect-区别"><a href="#forward-和-redirect-区别" class="headerlink" title="forward 和  redirect 区别"></a>forward 和  redirect 区别</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 重定向的特点:redirect</span><br><span class="line">    <span class="number">1</span>. 地址栏发生变化</span><br><span class="line">    <span class="number">2</span>. 重定向可以访问其他站点(服务器)的资源</span><br><span class="line">    <span class="number">3</span>. 重定向是两次请求。不能使用request对象来共享数据</span><br><span class="line">* 转发的特点：forward</span><br><span class="line">    <span class="number">1</span>. 转发地址栏路径不变</span><br><span class="line">    <span class="number">2</span>. 转发只能访问当前服务器下的资源</span><br><span class="line">    <span class="number">3</span>. 转发是一次请求，可以使用request对象来共享数据</span><br></pre></td></tr></table></figure><h5 id="web中的路径问题"><a href="#web中的路径问题" class="headerlink" title="web中的路径问题"></a>web中的路径问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 相对路径：通过相对路径不可以确定唯一资源</span><br><span class="line">    * 如：./index.html</span><br><span class="line">    * 不以/开头，以.开头路径</span><br><span class="line"></span><br><span class="line">    * 规则：找到当前资源和目标资源之间的相对位置关系</span><br><span class="line">        * ./：当前目录</span><br><span class="line">        * ../:后退一级目录</span><br><span class="line"><span class="number">2</span>. 绝对路径：通过绝对路径可以确定唯一资源</span><br><span class="line">    * 如：http:<span class="comment">//localhost/day15/responseDemo2/day15/responseDemo2</span></span><br><span class="line">    * 以/开头的路径</span><br><span class="line"></span><br><span class="line">    * 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出  </span><br><span class="line">    * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</span><br><span class="line">        * 建议虚拟目录动态获取：request.getContextPath()</span><br><span class="line">        * &lt;a&gt; , &lt;form&gt; 重定向...</span><br><span class="line">    * 给服务器使用：不需要加虚拟目录</span><br><span class="line">    * 转发路径</span><br></pre></td></tr></table></figure><h4 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h4><p>ServletConfig主要用于加载Servlet的初始化参数。在一个web应用可以存在多个ServletConfig对象。ServletConfig主要用于获得字符集编码，获取数据库连接信息，获得配置文件等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getServletName</span><span class="params">()</span>  -- 获取当前Servlet在web.xml中配置的名字</span></span><br><span class="line"><span class="function">String <span class="title">getInitParameter</span><span class="params">(String name)</span> -- 获取当前Servlet指定名称的初始化参数的值</span></span><br><span class="line"><span class="function">Enumeration <span class="title">getInitParameterNames</span><span class="params">()</span>  -- 获取当前Servlet初始化参数名字组成枚举</span></span><br><span class="line"><span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span>  -- 获取代表当前web应用的ServletContext对象</span></span><br></pre></td></tr></table></figure><h4 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h4><p>概念：代表整个web应用，可以和程序的容器(服务器)来通信</p><p>ServletContext用来存放全局变量，每个Java虚拟机每个Web项目只有一个ServletContext,这个ServletContext是由Web服务器创建的，来保证它的唯一性。由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象通讯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>. 获取：</span><br><span class="line"><span class="number">1</span>. 通过request对象获取</span><br><span class="line">request.getServletContext();</span><br><span class="line"><span class="number">2</span>. 通过HttpServlet获取</span><br><span class="line"><span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="number">3</span>. 功能：</span><br><span class="line"><span class="number">1</span>. 获取MIME类型：</span><br><span class="line">* MIME类型:在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">* 格式： 大类型/小类型   text/htmlimage/jpeg</span><br><span class="line"></span><br><span class="line">* 获取：<span class="function">String <span class="title">getMimeType</span><span class="params">(String file)</span>  </span></span><br><span class="line"><span class="function">2. 域对象：共享数据</span></span><br><span class="line"><span class="function">1. <span class="title">setAttribute</span><span class="params">(String name,Object value)</span></span></span><br><span class="line"><span class="function">2. <span class="title">getAttribute</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">3. <span class="title">removeAttribute</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* ServletContext对象范围：所有用户所有请求的数据</span></span><br><span class="line"><span class="function">3. 获取文件的真实<span class="params">(服务器)</span>路径</span></span><br><span class="line"><span class="function">1. 方法：String <span class="title">getRealPath</span><span class="params">(String path)</span>  </span></span><br><span class="line"><span class="function">String b </span>= context.getRealPath(<span class="string">"/b.txt"</span>);<span class="comment">//web目录下资源访问</span></span><br><span class="line">        String c = context.getRealPath(<span class="string">"/WEB-INF/c.txt"</span>);<span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line">        String a = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);<span class="comment">//src目录下的资源访问</span></span><br></pre></td></tr></table></figure><h4 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line"><span class="number">1</span>. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</span><br><span class="line"><span class="number">2</span>. 定义Servlet</span><br><span class="line"><span class="number">1</span>. 获取文件名称</span><br><span class="line"><span class="number">2</span>. 使用字节输入流加载文件进内存</span><br><span class="line"><span class="number">3</span>. 指定response的响应头： content-disposition:attachment;filename=xxx</span><br><span class="line"><span class="number">4</span>. 将数据写出到response输出流</span><br><span class="line">* 中文文件名问题解决思路：</span><br><span class="line">    <span class="number">1</span>. 获取客户端使用的浏览器版本信息</span><br><span class="line">    <span class="number">2</span>. 根据不同的版本信息，设置filename的编码方式不同</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="/day15/downloadServlet?filename=九尾.jpg"&gt;图片1&lt;/a&gt;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/downloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie-客户端会话技术"><a href="#Cookie-客户端会话技术" class="headerlink" title="Cookie:客户端会话技术"></a>Cookie:客户端会话技术</h4><h5 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 会话：一次会话中包含多次请求和响应。</span><br><span class="line">* 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</span><br><span class="line"><span class="number">2</span>. 功能：在一次会话的范围内的多次请求间，共享数据</span><br><span class="line"><span class="number">3</span>. 方式：</span><br><span class="line"><span class="number">1</span>. 客户端会话技术：Cookie</span><br><span class="line"><span class="number">2</span>. 服务器端会话技术：Session</span><br></pre></td></tr></table></figure><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：客户端会话技术，将数据保存到客户端</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 快速入门：</span><br><span class="line">* 使用步骤：</span><br><span class="line"><span class="number">1</span>. 创建Cookie对象，绑定数据</span><br><span class="line">* <span class="keyword">new</span> Cookie(String name, String value) </span><br><span class="line"><span class="number">2</span>. 发送Cookie对象</span><br><span class="line">* response.addCookie(Cookie cookie) </span><br><span class="line"><span class="number">3</span>. 获取Cookie，拿到数据</span><br><span class="line">* Cookie[]  request.getCookies()</span><br></pre></td></tr></table></figure><h5 id="Cookie原理"><a href="#Cookie原理" class="headerlink" title="Cookie原理"></a>Cookie原理</h5><p>基于响应头set-cookie和请求头cookie实现</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Cookie%E5%8E%9F%E7%90%86.bmp" alt="Cookie原理"></p><h5 id="cookie的细节"><a href="#cookie的细节" class="headerlink" title="cookie的细节"></a>cookie的细节</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>. cookie的细节</span><br><span class="line"><span class="number">1</span>. 一次可不可以发送多个cookie?</span><br><span class="line">* 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</span><br><span class="line"><span class="number">2</span>. cookie在浏览器中保存多长时间？</span><br><span class="line"><span class="number">1</span>. 默认情况下，当浏览器关闭后，Cookie数据被销毁</span><br><span class="line"><span class="number">2</span>. 持久化存储：</span><br><span class="line">* setMaxAge(<span class="keyword">int</span> seconds)</span><br><span class="line"><span class="number">1</span>. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</span><br><span class="line"><span class="number">2</span>. 负数：默认值</span><br><span class="line"><span class="number">3</span>. 零：删除cookie信息</span><br><span class="line"><span class="number">3</span>. cookie能不能存中文？</span><br><span class="line">* 在tomcat <span class="number">8</span> 之前 cookie中不能直接存储中文数据。</span><br><span class="line">* 需要将中文数据转码---一般采用URL编码(%E3)</span><br><span class="line">* 在tomcat <span class="number">8</span> 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</span><br><span class="line"><span class="number">4</span>. cookie共享问题？</span><br><span class="line"><span class="number">1</span>. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</span><br><span class="line">* 默认情况下cookie不能共享</span><br><span class="line"></span><br><span class="line">* setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</span><br><span class="line">* 如果要共享，则可以将path设置为<span class="string">"/"</span></span><br><span class="line"><span class="number">2</span>. 不同的tomcat服务器间cookie共享问题？</span><br><span class="line">* setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</span><br><span class="line">* setDomain(<span class="string">".baidu.com"</span>),那么tieba.baidu.com和news.baidu.com中cookie可以共享</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. Cookie的特点和作用</span><br><span class="line"><span class="number">1</span>. cookie存储数据在客户端浏览器</span><br><span class="line"><span class="number">2</span>. 浏览器对于单个cookie 的大小有限制(<span class="number">4</span>kb) 以及 对同一个域名下的总cookie数量也有限制(<span class="number">20</span>个)</span><br><span class="line"></span><br><span class="line">* 作用：</span><br><span class="line"><span class="number">1</span>. cookie一般用于存出少量的不太敏感的数据</span><br><span class="line"><span class="number">2</span>. 在不登录的情况下，完成服务器对客户端的身份识别</span><br></pre></td></tr></table></figure><h5 id="Cookie案例：记住上次访问时间"><a href="#Cookie案例：记住上次访问时间" class="headerlink" title="Cookie案例：记住上次访问时间"></a>Cookie案例：记住上次访问时间</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</span><br><span class="line"><span class="number">2</span>. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Cookie%E6%A1%88%E4%BE%8B_%E8%AE%B0%E4%BD%8F%E4%B8%8A%E6%AC%A1%E8%AE%BF%E9%97%AE%E6%97%B6%E9%97%B4.bmp" alt="Cookie案例_记住上次访问时间"></p><h4 id="Session-服务器端会话技术"><a href="#Session-服务器端会话技术" class="headerlink" title="Session:服务器端会话技术"></a>Session:服务器端会话技术</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。</span><br><span class="line"><span class="number">2</span>. 快速入门：</span><br><span class="line"><span class="number">1</span>. 获取HttpSession对象：</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"><span class="number">2</span>. 使用HttpSession对象：</span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure><h5 id="Session原理"><a href="#Session原理" class="headerlink" title="Session原理"></a>Session原理</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Session%E5%8E%9F%E7%90%86.bmp" alt="Session原理"></p><h5 id="Session细节"><a href="#Session细节" class="headerlink" title="Session细节"></a>Session细节</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>. 细节：</span><br><span class="line"><span class="number">1</span>. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</span><br><span class="line">* 默认情况下。不是。</span><br><span class="line">* 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</span><br><span class="line"> Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">         c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">         response.addCookie(c);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</span><br><span class="line">* 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</span><br><span class="line">* session的钝化：</span><br><span class="line">* 在服务器正常关闭之前，将session对象系列化到硬盘上</span><br><span class="line">* session的活化：</span><br><span class="line">* 在服务器启动后，将session文件转化为内存中的session对象即可。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. session什么时候被销毁？</span><br><span class="line"><span class="number">1</span>. 服务器关闭</span><br><span class="line"><span class="number">2</span>. session对象调用invalidate() 。</span><br><span class="line"><span class="number">3</span>. session默认失效时间 <span class="number">30</span>分钟</span><br><span class="line">选择性配置修改</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">    &lt;/session-config&gt;</span><br><span class="line"></span><br><span class="line"> <span class="number">5</span>. session的特点</span><br><span class="line"> <span class="number">1</span>. session用于存储一次会话的多次请求的数据，存在服务器端</span><br><span class="line"> <span class="number">2</span>. session可以存储任意类型，任意大小的数据</span><br><span class="line">     <span class="number">3</span>. 如果客户端禁止Cookies了，服务器会将ID写到URL中。</span><br></pre></td></tr></table></figure><h5 id="session与Cookie的区别："><a href="#session与Cookie的区别：" class="headerlink" title="session与Cookie的区别："></a>session与Cookie的区别：</h5><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol><h4 id="案例：验证码登录"><a href="#案例：验证码登录" class="headerlink" title="案例：验证码登录"></a>案例：验证码登录</h4><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B.bmp" alt="登录案例"></p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><h5 id="JSP原理：本质Servlet"><a href="#JSP原理：本质Servlet" class="headerlink" title="JSP原理：本质Servlet"></a>JSP原理：本质Servlet</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JSP%E5%8E%9F%E7%90%86.bmp" alt="JSP原理"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：</span><br><span class="line">* Java Server Pages： java服务器端页面</span><br><span class="line">* 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</span><br><span class="line">* 用于简化书写！！！</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. JSP的脚本：JSP定义Java代码的方式</span><br><span class="line"><span class="number">1</span>. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中定义什么，脚本中就可以定义什么。</span><br><span class="line"><span class="number">2</span>. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。</span><br><span class="line"><span class="number">3</span>. &lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 指令</span><br><span class="line">* 作用：用于配置JSP页面，导入资源文件</span><br><span class="line">* 格式：</span><br><span class="line">&lt;%@ 指令名称 属性名<span class="number">1</span>=属性值<span class="number">1</span> 属性名<span class="number">2</span>=属性值<span class="number">2</span> ... %&gt;</span><br><span class="line">    </span><br><span class="line">* 分类：</span><br><span class="line"><span class="number">1</span>. page： 配置JSP页面的</span><br><span class="line">* contentType：等同于response.setContentType()</span><br><span class="line"><span class="number">1</span>. 设置响应体的mime类型以及字符集</span><br><span class="line"><span class="number">2</span>. 设置当前jsp页面的编码（高级的IDE生效，低级工具需要设置pageEncoding属性)</span><br><span class="line">* <span class="keyword">import</span>：导包</span><br><span class="line">* errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</span><br><span class="line">* isErrorPage：标识当前也是是否是错误页面。</span><br><span class="line">* <span class="keyword">true</span>：是，可以使用内置对象exception</span><br><span class="line">* <span class="keyword">false</span>：否。默认值。不可以使用内置对象exception</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>. include： 页面包含的。导入页面的资源文件</span><br><span class="line">* &lt;%<span class="meta">@include</span> file=<span class="string">"top.jsp"</span>%&gt;</span><br><span class="line"><span class="number">3</span>. taglib： 导入资源</span><br><span class="line">* &lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">* prefix：前缀，自定义的</span><br><span class="line"><span class="number">2</span>. 注释:</span><br><span class="line"><span class="number">1</span>. html注释：</span><br><span class="line">&lt;!-- --&gt;:只能注释html代码片段</span><br><span class="line"><span class="number">2</span>. jsp注释：推荐使用</span><br><span class="line">&lt;%-- --%&gt;：可以注释所有    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="number">4</span>. JSP的内置对象：</span><br><span class="line">* 在jsp页面中不需要获取和创建，可以直接使用的对象</span><br><span class="line">* jsp一共有<span class="number">9</span>个内置对象。</span><br><span class="line">    变量名真实类型作用</span><br><span class="line">* pageContextPageContext当前页面共享数据，还可以获取其他八个内置</span><br><span class="line">* requestHttpServletRequest一次请求访问的多个资源(转发)</span><br><span class="line">* sessionHttpSession一次会话的多个请求间</span><br><span class="line">* applicationServletContext所有用户间共享数据</span><br><span class="line">* responseHttpServletResponse响应对象</span><br><span class="line">* pageObject当前页面(Servlet)的对象  <span class="keyword">this</span></span><br><span class="line">* outJspWriter输出对象，数据输出到页面上</span><br><span class="line">* configServletConfigServlet的配置对象</span><br><span class="line">* exceptionThrowable异常对象</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. JSP的动作元素           </span><br><span class="line">    jsp:include 包含静态和动态的文件</span><br><span class="line">    jsp:useBean 创建一个Bean实例</span><br><span class="line">    jsp:setProperty 设置已经实例化的Bean对象的属性</span><br><span class="line">    jsp:getProperty输出属性值</span><br><span class="line">    jsp:forward转发请求</span><br><span class="line">            </span><br><span class="line"><span class="number">6</span>.* out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似</span><br><span class="line">* response.getWriter()和out.write()的区别：</span><br><span class="line">* 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</span><br><span class="line">* response.getWriter()数据输出永远在out.write()之前</span><br><span class="line">    **out.wirte()与out.print()**</span><br><span class="line"></span><br><span class="line">    * out.wirte()与out.print()区别</span><br><span class="line">* out.write()方法只能输出字符/字符数组/字符串等等字符相关类型的数据</span><br><span class="line">        * out.print()方法将所有数据都转换为了字符串的形式输出.</span><br><span class="line">* 如果值为<span class="keyword">null</span>,out.print()会打印出<span class="keyword">null</span>；out.write()会直接报出空指针异常</span><br></pre></td></tr></table></figure><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/MVC%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.bmp" alt="MVC开发模式"></p><h4 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：Expression Language 表达式语言</span><br><span class="line"><span class="number">2</span>. 作用：替换和简化jsp页面中java代码的编写</span><br><span class="line"><span class="number">3</span>. 语法：$&#123;表达式&#125;</span><br><span class="line"><span class="number">4</span>. 注意：</span><br><span class="line">* jsp默认支持el表达式的。如果要忽略el表达式</span><br><span class="line"><span class="number">1</span>. 设置jsp中page指令中：isELIgnored=<span class="string">"true"</span> 忽略当前jsp页面中所有的el表达式</span><br><span class="line"><span class="number">2</span>. \$&#123;表达式&#125; ：忽略当前这个el表达式</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 使用：</span><br><span class="line"><span class="number">1</span>. 运算：</span><br><span class="line">* 运算符：</span><br><span class="line"><span class="number">1</span>. 算数运算符： + - * /(div) %(mod)</span><br><span class="line"><span class="number">2</span>. 比较运算符： &gt; &lt; &gt;= &lt;= == !=</span><br><span class="line"><span class="number">3</span>. 逻辑运算符： &amp;&amp;(and) ||(or) !(not)</span><br><span class="line"><span class="number">4</span>. 空运算符： empty</span><br><span class="line">* 功能：用于判断字符串、集合、数组对象是否为<span class="keyword">null</span>或者长度是否为<span class="number">0</span></span><br><span class="line">* $&#123;empty list&#125;:判断字符串、集合、数组对象是否为<span class="keyword">null</span>或者长度为<span class="number">0</span></span><br><span class="line">* $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为<span class="keyword">null</span> 并且 长度&gt;<span class="number">0</span></span><br><span class="line"><span class="number">2</span>. 获取值</span><br><span class="line"><span class="number">1</span>. el表达式只能从域对象中获取值</span><br><span class="line"><span class="number">2</span>. 语法：</span><br><span class="line"><span class="number">1</span>. $&#123;域名称.键名&#125;：从指定域中获取指定键的值</span><br><span class="line">* 域名称：</span><br><span class="line"><span class="number">1</span>. pageScope--&gt; pageContext</span><br><span class="line"><span class="number">2</span>. requestScope --&gt; request</span><br><span class="line"><span class="number">3</span>. sessionScope --&gt; session</span><br><span class="line"><span class="number">4</span>. applicationScope --&gt; application（ServletContext）</span><br><span class="line">* 举例：在request域中存储了name=张三</span><br><span class="line">* 获取：$&#123;requestScope.name&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</span><br><span class="line"><span class="number">3</span>. 获取对象、List集合、Map集合的值</span><br><span class="line"><span class="number">1</span>. 对象：$&#123;域名称.键名.属性名&#125;</span><br><span class="line">* 本质上会去调用对象的getter方法</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. Map集合：</span><br><span class="line">* $&#123;域名称.键名.key名称&#125;</span><br><span class="line">* $&#123;域名称.键名[<span class="string">"key名称"</span>]&#125;</span><br><span class="line"><span class="number">3</span>. 隐式对象：</span><br><span class="line">* el表达式中有<span class="number">11</span>个隐式对象</span><br><span class="line">* pageContext：</span><br><span class="line">* 获取jsp其他八个内置对象</span><br><span class="line">* $&#123;pageContext.request.contextPath&#125;：动态获取虚拟目录</span><br></pre></td></tr></table></figure><h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：JavaServer Pages Tag Library  JSP标准标签库</span><br><span class="line">* 是由Apache组织提供的开源的免费的jsp标签&lt;标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 作用：用于简化和替换jsp页面上的java代码</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 使用步骤：</span><br><span class="line"><span class="number">1</span>. 导入jstl相关jar包</span><br><span class="line"><span class="number">2</span>. 引入标签库：taglib指令：  &lt;%@ taglib %&gt;</span><br><span class="line"><span class="number">3</span>. 使用标签</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 常用的JSTL标签</span><br><span class="line"><span class="number">1</span>. <span class="keyword">if</span>:相当于java代码的<span class="keyword">if</span>语句</span><br><span class="line"><span class="number">1</span>. 属性：</span><br><span class="line">            * test 必须属性，接受<span class="keyword">boolean</span>表达式</span><br><span class="line">                * 如果表达式为<span class="keyword">true</span>，则显示<span class="keyword">if</span>标签体内容，如果为<span class="keyword">false</span>，则不显示标签体内容</span><br><span class="line">                * 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">    <span class="number">2</span>. 注意：</span><br><span class="line">        * c:<span class="keyword">if</span>标签没有<span class="keyword">else</span>情况，想要<span class="keyword">else</span>情况，则可以在定义一个c:<span class="keyword">if</span>标签</span><br><span class="line"><span class="number">2</span>. choose:相当于java代码的<span class="keyword">switch</span>语句</span><br><span class="line"><span class="number">1</span>. 使用choose标签声明          相当于<span class="keyword">switch</span>声明</span><br><span class="line">        <span class="number">2</span>. 使用when标签做判断         相当于<span class="keyword">case</span></span><br><span class="line">        <span class="number">3</span>. 使用otherwise标签做其他情况的声明     相当于<span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. foreach:相当于java代码的<span class="keyword">for</span>语句</span><br></pre></td></tr></table></figure><h4 id="案例：用户CRUD"><a href="#案例：用户CRUD" class="headerlink" title="案例：用户CRUD"></a>案例：用户CRUD</h4><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%88%97%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90.bmp" alt="列表查询分析"></p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.bmp" alt="三层架构"></p><h4 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：</span><br><span class="line">* 生活中的过滤器：净水器,空气净化器，土匪、</span><br><span class="line">* web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</span><br><span class="line">* 过滤器的作用：</span><br><span class="line">* 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 快速入门：</span><br><span class="line"><span class="number">1</span>. 步骤：</span><br><span class="line"><span class="number">1</span>. 定义一个类，实现接口Filter</span><br><span class="line"><span class="number">2</span>. 复写方法</span><br><span class="line"><span class="number">3</span>. 配置拦截路径</span><br><span class="line"><span class="number">1</span>. web.xml</span><br><span class="line"><span class="number">2</span>. 注解</span><br><span class="line"><span class="number">2</span>. 代码：</span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)<span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filterDemo1被执行了...."</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="过滤器细节："><a href="#过滤器细节：" class="headerlink" title="过滤器细节："></a>过滤器细节：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. 过滤器细节：</span><br><span class="line"><span class="number">1</span>. web.xml配置</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;demo1&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">itcast</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">FilterDemo1</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">demo1</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">2. 过滤器执行流程</span></span><br><span class="line"><span class="class">1. 执行过滤器</span></span><br><span class="line"><span class="class">2. 执行放行后的资源</span></span><br><span class="line"><span class="class">3. 回来执行过滤器放行代码下边的代码</span></span><br><span class="line"><span class="class">3. 过滤器生命周期方法</span></span><br><span class="line">1. init:服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</span><br><span class="line"><span class="number">2</span>. doFilter:每一次请求被拦截资源时，会执行。执行多次</span><br><span class="line"><span class="number">3</span>. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源</span><br><span class="line"><span class="number">4</span>. 过滤器配置详解</span><br><span class="line">* 拦截路径配置：</span><br><span class="line"><span class="number">1</span>. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</span><br><span class="line"><span class="number">2</span>. 拦截目录： /user<span class="comment">/*访问/user下的所有资源时，过滤器都会被执行</span></span><br><span class="line"><span class="comment">3. 后缀名拦截： *.jsp访问所有后缀名为jsp资源时，过滤器都会被执行</span></span><br><span class="line"><span class="comment">4. 拦截所有资源：/*访问所有资源时，过滤器都会被执行</span></span><br><span class="line"><span class="comment">* 拦截方式配置：资源被访问的方式</span></span><br><span class="line"><span class="comment">* 注解配置：</span></span><br><span class="line"><span class="comment">* 设置dispatcherTypes属性</span></span><br><span class="line"><span class="comment">1. REQUEST：默认值。浏览器直接请求资源</span></span><br><span class="line"><span class="comment">2. FORWARD：转发访问资源</span></span><br><span class="line"><span class="comment">3. INCLUDE：包含访问资源</span></span><br><span class="line"><span class="comment">4. ERROR：错误跳转资源</span></span><br><span class="line"><span class="comment">5. ASYNC：异步访问资源</span></span><br><span class="line"><span class="comment">* web.xml配置</span></span><br><span class="line"><span class="comment">* 设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5. 过滤器链(配置多个过滤器)</span></span><br><span class="line"><span class="comment">* 执行顺序：如果有两个过滤器：过滤器1和过滤器2</span></span><br><span class="line"><span class="comment">1. 过滤器1</span></span><br><span class="line"><span class="comment">2. 过滤器2</span></span><br><span class="line"><span class="comment">3. 资源执行</span></span><br><span class="line"><span class="comment">4. 过滤器2</span></span><br><span class="line"><span class="comment">5. 过滤器1 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 过滤器先后顺序问题：</span></span><br><span class="line"><span class="comment">1. 注解配置：按照类名的字符串比较规则比较，值小的先执行</span></span><br><span class="line"><span class="comment">* 如： AFilter 和 BFilter，AFilter就先执行了。</span></span><br><span class="line"><span class="comment">2. web.xml配置： &lt;filter-mapping&gt;谁定义在上边，谁先执行</span></span><br><span class="line"><span class="comment">4. 案例：</span></span><br><span class="line"><span class="comment">1. 案例1_登录验证</span></span><br><span class="line"><span class="comment">* 需求：</span></span><br><span class="line"><span class="comment">1. 访问day17_case案例的资源。验证其是否登录</span></span><br><span class="line"><span class="comment">2. 如果登录了，则直接放行。</span></span><br><span class="line"><span class="comment">3. 如果没有登录，则跳转到登录页面，提示"您尚未登录，请先登录"。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 案例2_敏感词汇过滤</span></span><br><span class="line"><span class="comment">* 需求：</span></span><br><span class="line"><span class="comment">1. 对day17_case案例录入的数据进行敏感词汇过滤</span></span><br><span class="line"><span class="comment">2. 敏感词汇参考《敏感词汇.txt》</span></span><br><span class="line"><span class="comment">3. 如果是敏感词汇，替换为 *** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 分析：</span></span><br><span class="line"><span class="comment">1. 对request对象进行增强。增强获取参数相关方法</span></span><br><span class="line"><span class="comment">2. 放行。传递代理对象</span></span><br><span class="line"><span class="comment">* 增强对象的功能：</span></span><br><span class="line"><span class="comment">* 设计模式：一些通用的解决固定问题的方式</span></span><br><span class="line"><span class="comment">1. 装饰模式</span></span><br><span class="line"><span class="comment">2. 代理模式</span></span><br><span class="line"><span class="comment">* 概念：</span></span><br><span class="line"><span class="comment">1. 真实对象：被代理的对象</span></span><br><span class="line"><span class="comment">2. 代理对象：</span></span><br><span class="line"><span class="comment">3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</span></span><br><span class="line"><span class="comment"> * 实现方式：</span></span><br><span class="line"><span class="comment"> 1. 静态代理：有一个类文件描述代理模式</span></span><br><span class="line"><span class="comment"> 2. 动态代理：在内存中形成代理类</span></span><br><span class="line"><span class="comment">* 实现步骤：</span></span><br><span class="line"><span class="comment">1. 代理对象和真实对象实现相同的接口</span></span><br><span class="line"><span class="comment">2. 代理对象 = Proxy.newProxyInstance();</span></span><br><span class="line"><span class="comment">3. 使用代理对象调用方法。</span></span><br><span class="line"><span class="comment">4. 增强方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 增强方式：</span></span><br><span class="line"><span class="comment">1. 增强参数列表</span></span><br><span class="line"><span class="comment">2. 增强返回值类型</span></span><br><span class="line"><span class="comment">3. 增强方法体执行逻辑</span></span><br></pre></td></tr></table></figure><p>2.案例1_登录验证</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.%E6%A1%88%E4%BE%8B1_%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81.bmp" alt="2.案例1_登录验证">3.过滤敏感词汇</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.%E8%BF%87%E6%BB%A4%E6%95%8F%E6%84%9F%E8%AF%8D%E6%B1%87.bmp" alt="3.过滤敏感词汇"></p><h4 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Listener是Servlet的监听器，它可以监听客户端的请求、服务端的操作等。通过监听器，可以自动激发一些操作，比如监听在线的用户的数量。</span><br><span class="line"></span><br><span class="line">* 概念：web的三大组件之一。</span><br><span class="line">* 事件监听机制</span><br><span class="line">* 事件：一件事情</span><br><span class="line">* 事件源 ：事件发生的地方</span><br><span class="line">* 监听器 ：一个对象</span><br><span class="line">* 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200225164201073.png" alt="image-20200225164201073"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* ServletContextListener:监听ServletContext对象的创建和销毁</span><br><span class="line">* 方法：</span><br><span class="line">* <span class="function"><span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span></span><br><span class="line"><span class="function">ServletContext对象被销毁之前会调用该方法</span></span><br><span class="line"><span class="function">* <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span></span></span><br><span class="line"><span class="function">ServletContext对象创建后会调用该方法</span></span><br><span class="line"><span class="function">* 步骤：</span></span><br><span class="line"><span class="function">1. 定义一个类，实现ServletContextListener接口</span></span><br><span class="line"><span class="function">2. 复写方法</span></span><br><span class="line"><span class="function">3. 配置</span></span><br><span class="line"><span class="function">1. web.xml</span></span><br><span class="line"><span class="function">            &lt;listener&gt;</span></span><br><span class="line"><span class="function">                &lt;listener-class&gt;</span></span><br><span class="line"><span class="function">                cn.itcast.web.listener.ContextLoaderListener</span></span><br><span class="line"><span class="function">                &lt;/listener-class&gt;</span></span><br><span class="line"><span class="function">            &lt;/listener&gt;</span></span><br><span class="line"><span class="function">* 指定初始化参数&lt;context-param&gt;</span></span><br><span class="line"><span class="function">2. 注解：</span></span><br><span class="line"><span class="function">* @WebListener</span></span><br></pre></td></tr></table></figure><h3 id="综合案例：旅游网站"><a href="#综合案例：旅游网站" class="headerlink" title="综合案例：旅游网站"></a>综合案例：旅游网站</h3><h5 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Web层</span><br><span class="line">    a)Servlet：前端控制器</span><br><span class="line">    b)html：视图</span><br><span class="line">    c)Filter：过滤器</span><br><span class="line">    d)BeanUtils：数据封装</span><br><span class="line">    e)Jackson：json序列化工具</span><br><span class="line">Service层</span><br><span class="line">    f)Javamail：java发送邮件工具</span><br><span class="line">    g)Redis：nosql内存数据库</span><br><span class="line">    h)Jedis：java的redis客户端</span><br><span class="line">Dao层</span><br><span class="line">    i)Mysql：数据库</span><br><span class="line">    j)Druid：数据库连接池</span><br><span class="line">    k)JdbcTemplate：jdbc的工具</span><br></pre></td></tr></table></figure><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.png" alt="1"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> utf8;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tab_favorite;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tab_route_img;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tab_route;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tab_category;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tab_seller;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tab_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: tab_category                                          */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_category</span><br><span class="line">(</span><br><span class="line">   cid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">   cname                <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   primary <span class="keyword">key</span> (cid),</span><br><span class="line">   <span class="keyword">unique</span> <span class="keyword">key</span> AK_nq_categoryname (cname)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: tab_favorite                                          */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_favorite</span><br><span class="line">(</span><br><span class="line">   rid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="built_in">date</span>                 <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   uid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   primary <span class="keyword">key</span> (rid, uid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: tab_route                                             */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_route</span><br><span class="line">(</span><br><span class="line">   rid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">   rname                <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   price                <span class="keyword">double</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   routeIntroduce       <span class="built_in">varchar</span>(<span class="number">1000</span>),</span><br><span class="line">   rflag                <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   rdate                <span class="built_in">varchar</span>(<span class="number">19</span>),</span><br><span class="line">   isThemeTour          <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="keyword">count</span>                <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">   cid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   rimage               <span class="built_in">varchar</span>(<span class="number">200</span>),</span><br><span class="line">   <span class="keyword">sid</span>                  <span class="built_in">int</span>,</span><br><span class="line">   sourceId             <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">   primary <span class="keyword">key</span> (rid),</span><br><span class="line">   <span class="keyword">unique</span> <span class="keyword">key</span> AK_nq_sourceId (sourceId)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: tab_route_img                                         */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_route_img</span><br><span class="line">(</span><br><span class="line">   rgid                 <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">   rid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   bigPic               <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   smallPic             <span class="built_in">varchar</span>(<span class="number">200</span>),</span><br><span class="line">   primary <span class="keyword">key</span> (rgid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: tab_seller                                            */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_seller</span><br><span class="line">(</span><br><span class="line">   <span class="keyword">sid</span>                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">   sname                <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   consphone            <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   address              <span class="built_in">varchar</span>(<span class="number">200</span>),</span><br><span class="line">   primary <span class="keyword">key</span> (<span class="keyword">sid</span>),</span><br><span class="line">   <span class="keyword">unique</span> <span class="keyword">key</span> AK_Key_2 (sname)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: tab_user                                              */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_user</span><br><span class="line">(</span><br><span class="line">   uid                  <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">   username             <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="keyword">password</span>             <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="keyword">name</span>                 <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">   birthday             <span class="built_in">date</span>,</span><br><span class="line">   sex                  <span class="built_in">char</span>(<span class="number">1</span>),</span><br><span class="line">   telephone            <span class="built_in">varchar</span>(<span class="number">11</span>),</span><br><span class="line">   email                <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">   <span class="keyword">status</span>               <span class="built_in">char</span>(<span class="number">1</span>) ,</span><br><span class="line">   code<span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">   </span><br><span class="line">   primary <span class="keyword">key</span> (uid),</span><br><span class="line">   <span class="keyword">unique</span> <span class="keyword">key</span> AK_nq_username (username),</span><br><span class="line">   <span class="keyword">unique</span> <span class="keyword">key</span> AK_nq_code (code)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_favorite <span class="keyword">add</span> <span class="keyword">constraint</span> FK_route_favorite <span class="keyword">foreign</span> <span class="keyword">key</span> (rid)</span><br><span class="line">      <span class="keyword">references</span> tab_route (rid) <span class="keyword">on</span> <span class="keyword">delete</span> restrict <span class="keyword">on</span> <span class="keyword">update</span> restrict;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_favorite <span class="keyword">add</span> <span class="keyword">constraint</span> FK_user_favorite <span class="keyword">foreign</span> <span class="keyword">key</span> (uid)</span><br><span class="line">      <span class="keyword">references</span> tab_user (uid) <span class="keyword">on</span> <span class="keyword">delete</span> restrict <span class="keyword">on</span> <span class="keyword">update</span> restrict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_route <span class="keyword">add</span> <span class="keyword">constraint</span> FK_category_route <span class="keyword">foreign</span> <span class="keyword">key</span> (cid)</span><br><span class="line">      <span class="keyword">references</span> tab_category (cid) <span class="keyword">on</span> <span class="keyword">delete</span> restrict <span class="keyword">on</span> <span class="keyword">update</span> restrict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_route <span class="keyword">add</span> <span class="keyword">constraint</span> FK_seller_route <span class="keyword">foreign</span> <span class="keyword">key</span> (<span class="keyword">sid</span>)</span><br><span class="line">      <span class="keyword">references</span> tab_seller (<span class="keyword">sid</span>) <span class="keyword">on</span> <span class="keyword">delete</span> restrict <span class="keyword">on</span> <span class="keyword">update</span> restrict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_route_img <span class="keyword">add</span> <span class="keyword">constraint</span> FK_route_routeimg <span class="keyword">foreign</span> <span class="keyword">key</span> (rid)</span><br><span class="line">      <span class="keyword">references</span> tab_route (rid) <span class="keyword">on</span> <span class="keyword">delete</span> restrict <span class="keyword">on</span> <span class="keyword">update</span> restrict;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`tab_category`</span>(<span class="string">`cid`</span>,<span class="string">`cname`</span>) <span class="keyword">values</span> (<span class="number">8</span>,<span class="string">'全球自由行'</span>),(<span class="number">5</span>,<span class="string">'国内游'</span>),(<span class="number">4</span>,<span class="string">'处境游'</span>),(<span class="number">7</span>,<span class="string">'抱团定制'</span>),(<span class="number">6</span>,<span class="string">'港澳游'</span>),(<span class="number">2</span>,<span class="string">'酒店'</span>),(<span class="number">1</span>,<span class="string">'门票'</span>),(<span class="number">3</span>,<span class="string">'香港车票'</span>);</span><br></pre></td></tr></table></figure><h4 id="注册登录退出"><a href="#注册登录退出" class="headerlink" title="注册登录退出"></a>注册登录退出</h4><p>注册功能分析</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90.bmp" alt="1.注册功能分析"></p><p>登录功能分析</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD.bmp" alt="2.登录功能"></p><h5 id="表单校验和发送异步请求"><a href="#表单校验和发送异步请求" class="headerlink" title="表单校验和发送异步请求"></a>表单校验和发送异步请求</h5><p>提升用户体验，并减轻服务器压力。使用异步提交表单是为了获取服务器响应的数据。因为我们前台使用的是html作为视图层，不能够直接从servlet相关的域对象获取值，只能通过ajax获取响应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//校验用户名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span><br><span class="line">    <span class="comment">//2.定义正则</span></span><br><span class="line">    <span class="keyword">var</span> reg_username = <span class="regexp">/^\w&#123;2,20&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = reg_username.test(username);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//用户名合法</span></span><br><span class="line">        $(<span class="string">"#username"</span>).css(<span class="string">"border"</span>, <span class="string">""</span>);</span><br><span class="line">        $(<span class="string">"#usernamemsg"</span>).html(<span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//用户名非法,加一个红色边框</span></span><br><span class="line">        $(<span class="string">"#username"</span>).css(<span class="string">"border"</span>, <span class="string">"1px solid red"</span>);</span><br><span class="line">        $(<span class="string">"#usernamemsg"</span>).html(<span class="string">"单词字符，长度2到20位"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验邮箱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取邮箱</span></span><br><span class="line">    <span class="keyword">var</span> email = $(<span class="string">"#email"</span>).val();</span><br><span class="line">    <span class="comment">//2.定义正则itcast@163.com</span></span><br><span class="line">    <span class="keyword">var</span> reg_email = <span class="regexp">/^\w+@\w+\.\w+$/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.判断</span></span><br><span class="line">    <span class="keyword">var</span> flag = reg_email.test(email);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        $(<span class="string">"#email"</span>).css(<span class="string">"border"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#email"</span>).css(<span class="string">"border"</span>, <span class="string">"1px solid red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入口函数</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//当表单提交时，调用所有的校验方法</span></span><br><span class="line">    <span class="comment">//如果这个方法没有返回值，或者返回为true，则表单提交，如果返回为false，则表单不提交</span></span><br><span class="line">    $(<span class="string">"#registerForm"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1.发送数据到服务器</span></span><br><span class="line">        <span class="keyword">if</span>(checkUsername() &amp;&amp; checkEmail())&#123;</span><br><span class="line">            <span class="comment">//校验通过,发送ajax请求，提交表单的数据   username=zhangsan&amp;password=123</span></span><br><span class="line">            <span class="comment">//$(this)==$("#registerForm") serialize()将form转为key=value形式</span></span><br><span class="line">            $.post(<span class="string">"user/regist"</span>,$(<span class="keyword">this</span>).serialize(),<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//处理服务器响应的数据  data  &#123;flag:true,errorMsg:"注册失败"&#125;</span></span><br><span class="line">                <span class="keyword">if</span>(data.flag)&#123;</span><br><span class="line">                    <span class="comment">//注册成功，跳转成功页面</span></span><br><span class="line">                    location.href=<span class="string">"register_ok.html"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//注册失败,给errorMsg添加提示信息</span></span><br><span class="line">                    $(<span class="string">"#errorMsg"</span>).html(data.errorMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.不让页面跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当某一个组件失去焦点是，调用对应的校验方法</span></span><br><span class="line">    $(<span class="string">"#username"</span>).blur(checkUsername);</span><br><span class="line">    $(<span class="string">"#email"</span>).blur(checkEmail);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="RegistUserServlet"><a href="#RegistUserServlet" class="headerlink" title="RegistUserServlet"></a>RegistUserServlet</h5><p>接受前端异步请求，调用service模块，响应结果返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/registUserServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistUserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String check = req.getParameter(<span class="string">"check"</span>);</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        String checkcode_server = (String)session.getAttribute(<span class="string">"CHECKCODE_SERVER"</span>);</span><br><span class="line">        session.removeAttribute(<span class="string">"CHECKCODE_SERVER"</span>);<span class="comment">//只用一次</span></span><br><span class="line">        <span class="keyword">if</span>(!check.equalsIgnoreCase(checkcode_server))&#123;</span><br><span class="line">            ResultInfo resultInfo=<span class="keyword">new</span> ResultInfo();</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            resultInfo.setErrorMsg(<span class="string">"验证码错误"</span>);</span><br><span class="line">            <span class="comment">//结果序列化并返回</span></span><br><span class="line">            ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            String json = mapper.writeValueAsString(resultInfo);</span><br><span class="line">            resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            resp.getWriter().write(json);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        User u=<span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(u,parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">        <span class="comment">//调用Service</span></span><br><span class="line">        UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="keyword">boolean</span> flag = userService.regist(u);</span><br><span class="line">        <span class="comment">//返回结果对象</span></span><br><span class="line">        ResultInfo resultInfo=<span class="keyword">new</span> ResultInfo();</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            resultInfo.setErrorMsg(<span class="string">"注册失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结果序列化并返回</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(resultInfo);</span><br><span class="line">        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    UserDao userDao=<span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regist</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        User u = userDao.findByUsername(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(u!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置激活状态和激活码</span></span><br><span class="line">        user.setStatus(<span class="string">"N"</span>);</span><br><span class="line">        user.setCode(UuidUtil.getUuid());</span><br><span class="line">        userDao.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送激活邮件</span></span><br><span class="line">        String content=<span class="string">"&lt;a href='http://localhost:8080/day10Travel_war_exploded/user/active?code="</span>+user.getCode()+<span class="string">"'&gt;点击激活黑马旅游网&lt;/a&gt;"</span>;</span><br><span class="line">        MailUtils.sendMail(user.getEmail(),content,<span class="string">"激活邮件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">active</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据激活码查询用户对象</span></span><br><span class="line">        User user = userDao.findByCode(code);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//2.调用dao的修改激活状态的方法</span></span><br><span class="line">            userDao.updateStatus(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  userDao.findUsernameAndPassword(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserDaoImpl"><a href="#UserDaoImpl" class="headerlink" title="UserDaoImpl"></a>UserDaoImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.定义sql</span></span><br><span class="line">        String sql = <span class="string">"insert into tab_user(username,password,name,birthday,sex,telephone,email,status,code) values(?,?,?,?,?,?,?,?,?)"</span>;</span><br><span class="line">        <span class="comment">//2.执行sql</span></span><br><span class="line">        template.update(sql,user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                user.getName(),</span><br><span class="line">                user.getBirthday(),</span><br><span class="line">                user.getSex(),</span><br><span class="line">                user.getTelephone(),</span><br><span class="line">                user.getEmail(),</span><br><span class="line">                user.getStatus(),</span><br><span class="line">                user.getCode()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from tab_user where username=?"</span>;</span><br><span class="line">        User user=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            user = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), username);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from tab_user where code=?"</span>;</span><br><span class="line">        User user=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            user = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), code);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStatus</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">"update tab_user set status= 'Y' where uid =?"</span>;</span><br><span class="line">        template.update(sql,user.getUid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUsernameAndPassword</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">"select * from tab_user where username=? and password=?"</span>;</span><br><span class="line">        User u=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            u = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class), user.getUsername(), user.getPassword());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="User"><a href="#User" class="headerlink" title="User"></a>User</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;<span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名，账号</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//真实姓名</span></span><br><span class="line">    <span class="keyword">private</span> String birthday;<span class="comment">//出生日期</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">//男或女</span></span><br><span class="line">    <span class="keyword">private</span> String telephone;<span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String email;<span class="comment">//邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String status;<span class="comment">//激活状态，Y代表激活，N代表未激活</span></span><br><span class="line">    <span class="keyword">private</span> String code;<span class="comment">//激活码（要求唯一）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ResultInfo"><a href="#ResultInfo" class="headerlink" title="ResultInfo"></a>ResultInfo</h5><p>封装后端返回前端数据对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;<span class="comment">//后端返回结果正常为true，发生异常返回false</span></span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//后端返回结果数据对象</span></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;<span class="comment">//发生异常的错误消息</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/checkCode"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器通知浏览器不要缓存</span></span><br><span class="line">response.setHeader(<span class="string">"pragma"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"cache-control"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"expires"</span>,<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在内存中创建一个长80，宽30的图片，默认黑色背景</span></span><br><span class="line"><span class="comment">//参数一：长</span></span><br><span class="line"><span class="comment">//参数二：宽</span></span><br><span class="line"><span class="comment">//参数三：颜色</span></span><br><span class="line"><span class="keyword">int</span> width = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> height = <span class="number">30</span>;</span><br><span class="line">BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取画笔</span></span><br><span class="line">Graphics g = image.getGraphics();</span><br><span class="line"><span class="comment">//设置画笔颜色为灰色</span></span><br><span class="line">g.setColor(Color.GRAY);</span><br><span class="line"><span class="comment">//填充图片</span></span><br><span class="line">g.fillRect(<span class="number">0</span>,<span class="number">0</span>, width,height);</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生4个随机验证码，12Ey</span></span><br><span class="line">String checkCode = getCheckCode();</span><br><span class="line"><span class="comment">//将验证码放入HttpSession中</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">"CHECKCODE_SERVER"</span>,checkCode);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置画笔颜色为黄色</span></span><br><span class="line">g.setColor(Color.YELLOW);</span><br><span class="line"><span class="comment">//设置字体的小大</span></span><br><span class="line">g.setFont(<span class="keyword">new</span> Font(<span class="string">"黑体"</span>,Font.BOLD,<span class="number">24</span>));</span><br><span class="line"><span class="comment">//向图片上写入验证码</span></span><br><span class="line">g.drawString(checkCode,<span class="number">15</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将内存中的图片输出到浏览器</span></span><br><span class="line"><span class="comment">//参数一：图片对象</span></span><br><span class="line"><span class="comment">//参数二：图片的格式，如PNG,JPG,GIF</span></span><br><span class="line"><span class="comment">//参数三：图片输出到哪里去</span></span><br><span class="line">ImageIO.write(image,<span class="string">"PNG"</span>,response.getOutputStream());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生4位随机字符串 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getCheckCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String base = <span class="string">"0123456789ABCDEFGabcdefg"</span>;</span><br><span class="line"><span class="keyword">int</span> size = base.length();</span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="comment">//产生0到size-1的随机值</span></span><br><span class="line"><span class="keyword">int</span> index = r.nextInt(size);</span><br><span class="line"><span class="comment">//在base字符串中获取下标为index的字符</span></span><br><span class="line"><span class="keyword">char</span> c = base.charAt(index);</span><br><span class="line"><span class="comment">//将c放入到StringBuffer中去</span></span><br><span class="line">sb.append(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doGet(request,response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JDBCUtils"><a href="#JDBCUtils" class="headerlink" title="JDBCUtils"></a>JDBCUtils</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.声明静态数据源成员变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建连接池对象</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 加载配置文件中的数据</span></span><br><span class="line">InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"/druid.properties"</span>);</span><br><span class="line">        <span class="comment">//druid.properties</span></span><br><span class="line">        <span class="comment">//url=jdbc:mysql:///travel</span></span><br><span class="line">        <span class="comment">//username=root</span></span><br><span class="line">        <span class="comment">//password=123456</span></span><br><span class="line">        <span class="comment">//initialSize=5</span></span><br><span class="line">        <span class="comment">//maxActive=10</span></span><br><span class="line">        <span class="comment">//maxWait=3000</span></span><br><span class="line">        driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">Properties pp = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pp.load(is);</span><br><span class="line"><span class="comment">// 创建连接池，使用配置文件中的参数</span></span><br><span class="line">ds = DruidDataSourceFactory.createDataSource(pp);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 定义公有的得到数据源的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 定义得到连接对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ds.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.定义关闭资源的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.重载关闭方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stmt)</span> </span>&#123;</span><br><span class="line">close(conn, stmt, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="邮件激活"><a href="#邮件激活" class="headerlink" title="邮件激活"></a>邮件激活</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307131259399.png" alt="image-20200307131259399"></p><p>为什么要进行邮件激活？为了保证用户填写的邮箱是正确的。将来可以推广一些宣传信息，到用户邮箱中。</p><p>用户激活其实就是修改用户表中的status为‘Y’,具体实现看UserDao的findByCode  updateStatus以及UserService的active</p><p><strong>ActiveUserServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取激活码</span></span><br><span class="line">    String code = request.getParameter(<span class="string">"code"</span>);</span><br><span class="line">    <span class="keyword">if</span>(code != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//2.调用service完成激活</span></span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="keyword">boolean</span> flag = service.active(code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.判断标记</span></span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//激活成功</span></span><br><span class="line">            msg = <span class="string">"激活成功，请&lt;a href='login.html'&gt;登录&lt;/a&gt;"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//激活失败</span></span><br><span class="line">            msg = <span class="string">"激活失败，请联系管理员!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>邮件工具类MailUtils</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"1210980644@qq.com"</span>; <span class="comment">// 发件人称号，同邮箱地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"mzlnjllmvsfvbaci"</span>; <span class="comment">// 如果是qq邮箱可以使户端授权码，或者登录密码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 收件人邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 邮件正文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* 发送验证信息的邮件 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendMail</span><span class="params">(String to, String text, String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">            props.put(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.qq.com"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发件人的账号</span></span><br><span class="line">            props.put(<span class="string">"mail.user"</span>, USER);</span><br><span class="line">            <span class="comment">//发件人的密码</span></span><br><span class="line">            props.put(<span class="string">"mail.password"</span>, PASSWORD);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">            Authenticator authenticator = <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 用户名、密码</span></span><br><span class="line">                    String userName = props.getProperty(<span class="string">"mail.user"</span>);</span><br><span class="line">                    String password = props.getProperty(<span class="string">"mail.password"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(userName, password);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">            Session mailSession = Session.getInstance(props, authenticator);</span><br><span class="line">            <span class="comment">// 创建邮件消息</span></span><br><span class="line">            MimeMessage message = <span class="keyword">new</span> MimeMessage(mailSession);</span><br><span class="line">            <span class="comment">// 设置发件人</span></span><br><span class="line">            String username = props.getProperty(<span class="string">"mail.user"</span>);</span><br><span class="line">            InternetAddress form = <span class="keyword">new</span> InternetAddress(username);</span><br><span class="line">            message.setFrom(form);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置收件人</span></span><br><span class="line">            InternetAddress toAddress = <span class="keyword">new</span> InternetAddress(to);</span><br><span class="line">            message.setRecipient(Message.RecipientType.TO, toAddress);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置邮件标题</span></span><br><span class="line">            message.setSubject(title);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置邮件的内容体</span></span><br><span class="line">            message.setContent(text, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">            <span class="comment">// 发送邮件</span></span><br><span class="line">            Transport.send(message);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123; <span class="comment">// 做测试用</span></span><br><span class="line">        MailUtils.sendMail(<span class="string">"itcast_xian@163.com"</span>,<span class="string">"你好，这是一封测试邮件，无需回复。"</span>,<span class="string">"测试邮件"</span>);</span><br><span class="line">        System.out.println(<span class="string">"发送成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="登录表单校验和发送异步请求"><a href="#登录表单校验和发送异步请求" class="headerlink" title="登录表单校验和发送异步请求"></a>登录表单校验和发送异步请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span><br><span class="line">    <span class="comment">//2.定义正则</span></span><br><span class="line">    <span class="keyword">var</span> reg_username = <span class="regexp">/^\w&#123;2,20&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = reg_username.test(username);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//用户名合法</span></span><br><span class="line">        $(<span class="string">"#username"</span>).css(<span class="string">"border"</span>, <span class="string">""</span>);</span><br><span class="line">        $(<span class="string">"#usernamemsg"</span>).html(<span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//用户名非法,加一个红色边框</span></span><br><span class="line">        $(<span class="string">"#username"</span>).css(<span class="string">"border"</span>, <span class="string">"1px solid red"</span>);</span><br><span class="line">        $(<span class="string">"#usernamemsg"</span>).html(<span class="string">"单词字符，长度2到20位"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> password = $(<span class="string">"#password"</span>).val();</span><br><span class="line">    <span class="comment">//2.定义正则</span></span><br><span class="line">    <span class="keyword">var</span> reg_password = <span class="regexp">/^\w&#123;2,20&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = reg_password.test(password);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//用户名合法</span></span><br><span class="line">        $(<span class="string">"#password"</span>).css(<span class="string">"border"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//用户名非法,加一个红色边框</span></span><br><span class="line">        $(<span class="string">"#password"</span>).css(<span class="string">"border"</span>, <span class="string">"1px solid red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#login"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkUsername() &amp;&amp; checkPassword())&#123;</span><br><span class="line">            <span class="comment">//校验通过,发送ajax请求，提交表单的数据   username=zhangsan&amp;password=123</span></span><br><span class="line">            <span class="comment">//$(this)==$("#registerForm") serialize()将form转为key=value形式</span></span><br><span class="line">            $.post(<span class="string">"user/login"</span>,$(<span class="string">"#loginForm"</span>).serialize(),<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//处理服务器响应的数据  data  &#123;flag:true,errorMsg:"注册失败"&#125;</span></span><br><span class="line">                <span class="keyword">if</span>(data.flag)&#123;</span><br><span class="line">                    <span class="comment">//注册成功，跳转成功页面</span></span><br><span class="line">                    location.href=<span class="string">"index.html"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//注册失败,给errorMsg添加提示信息</span></span><br><span class="line">                    $(<span class="string">"#errorMsg"</span>).html(data.errorMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.不让页面跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//当某一个组件失去焦点是，调用对应的校验方法</span></span><br><span class="line">    $(<span class="string">"#username"</span>).blur(checkUsername);</span><br><span class="line">    $(<span class="string">"#password"</span>).blur(checkPassword);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="LoginServlet"><a href="#LoginServlet" class="headerlink" title="LoginServlet"></a>LoginServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        User u=<span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(u,parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        UserService userService=<span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = userService.login(u);</span><br><span class="line">        ResultInfo resultInfo=<span class="keyword">new</span> ResultInfo();</span><br><span class="line">        HttpSession session=request.getSession();</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            resultInfo.setErrorMsg(<span class="string">"用户名密码错误！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getStatus().equals(<span class="string">"N"</span>))&#123;</span><br><span class="line">                resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">                resultInfo.setErrorMsg(<span class="string">"您未完成邮件激活！"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                session.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">                resultInfo.setFlag(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(resultInfo);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h5><p>什么叫做登录了？session中有user对象。</p><p>实现步骤：</p><ol><li><p>访问servlet，将session销毁</p></li><li><p>跳转到登录页面</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:location.href='exitServlet'"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/exitServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExitServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">"/login.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化Servlet"><a href="#优化Servlet" class="headerlink" title="优化Servlet"></a>优化Servlet</h4><p>减少Servlet的数量，现在是一个功能一个Servlet，将其优化为一个模块一个Servlet，相当于在数据库中一张表对应一个Servlet，在Servlet中提供不同的方法，完成用户的请求。</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307132805458.png" alt="image-20200307132805458"></p><h5 id="BaseServlet"><a href="#BaseServlet" class="headerlink" title="BaseServlet"></a>BaseServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//请求路径URI</span></span><br><span class="line">        String requestURI = req.getRequestURI();</span><br><span class="line">        System.out.println(requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法并调用</span></span><br><span class="line">        String method = requestURI.substring(requestURI.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//this谁调用表示谁,getDeclaredMethod忽略访问修饰符</span></span><br><span class="line">            Method method1 = <span class="keyword">this</span>.getClass().getMethod(method, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"><span class="comment">//            method1.setAccessible(true);</span></span><br><span class="line">            method1.invoke(<span class="keyword">this</span>,req,res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将对象序列化为json 并返回客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeValue</span><span class="params">(Object o,HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String json= <span class="keyword">new</span> ObjectMapper().writeValueAsString(o);</span><br><span class="line">        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将对象序列化为json</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">writeAsString</span><span class="params">(Object o)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper().writeValueAsString(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserServlet改写"><a href="#UserServlet改写" class="headerlink" title="UserServlet改写"></a>UserServlet改写</h5><p>将之前的Servlet实现的功能，抽取到UserServlet中的不同方法中实现，并且将UserService创建抽取到成员变量位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/user/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(u, parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//UserService userService = new UserServiceImpl();</span></span><br><span class="line">        User user = userService.login(u);</span><br><span class="line">        ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            resultInfo.setErrorMsg(<span class="string">"用户名密码错误！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getStatus().equals(<span class="string">"N"</span>)) &#123;</span><br><span class="line">                resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">                resultInfo.setErrorMsg(<span class="string">"您未完成邮件激活！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">                resultInfo.setFlag(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(resultInfo);</span><br><span class="line">        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String check = req.getParameter(<span class="string">"check"</span>);</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        String checkcode_server = (String) session.getAttribute(<span class="string">"CHECKCODE_SERVER"</span>);</span><br><span class="line">        session.removeAttribute(<span class="string">"CHECKCODE_SERVER"</span>);<span class="comment">//只用一次</span></span><br><span class="line">        <span class="keyword">if</span> (!check.equalsIgnoreCase(checkcode_server)) &#123;</span><br><span class="line">            ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            resultInfo.setErrorMsg(<span class="string">"验证码错误"</span>);</span><br><span class="line">            <span class="comment">//结果序列化并返回</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            String json = mapper.writeValueAsString(resultInfo);</span><br><span class="line">            resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            resp.getWriter().write(json);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(u, parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">        <span class="comment">//调用Service</span></span><br><span class="line">        <span class="comment">//UserService userService = new UserServiceImpl();</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = userService.regist(u);</span><br><span class="line">        <span class="comment">//返回结果对象</span></span><br><span class="line">        ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo();</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resultInfo.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            resultInfo.setErrorMsg(<span class="string">"注册失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结果序列化并返回</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(resultInfo);</span><br><span class="line">        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 激活</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">active</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取激活码</span></span><br><span class="line">        String code = req.getParameter(<span class="string">"code"</span>);</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2.调用service完成激活</span></span><br><span class="line">            <span class="comment">//UserService service = new UserServiceImpl();</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = userService.active(code);</span><br><span class="line">            <span class="comment">//3.判断标记</span></span><br><span class="line">            String msg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="comment">//激活成功</span></span><br><span class="line">                msg = <span class="string">"激活成功，请&lt;a href='../login.html'&gt;登录&lt;/a&gt;"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//激活失败</span></span><br><span class="line">                msg = <span class="string">"激活失败，请联系管理员!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">            resp.getWriter().write(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finduser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpSession session=req.getSession();</span><br><span class="line">        User user=(User)session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        String json= <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        resp.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        req.getSession().invalidate();</span><br><span class="line">        resp.sendRedirect(req.getContextPath()+<span class="string">"/login.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="页面路径改写"><a href="#页面路径改写" class="headerlink" title="页面路径改写"></a>页面路径改写</h5><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307133310538.png" alt="image-20200307133310538"></p><h4 id="分类导航展示"><a href="#分类导航展示" class="headerlink" title="分类导航展示"></a>分类导航展示</h4><p>分类的数据在每一次页面加载后都会重新请求数据库来加载，对数据库的压力比较大，而且分类的数据不会经常产生变化，可以<strong>使用redis缓存</strong>这个数据。</p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307133412117.png" alt="image-20200307133412117"></p><h5 id="异步请求导航栏分类"><a href="#异步请求导航栏分类" class="headerlink" title="异步请求导航栏分类"></a>异步请求导航栏分类</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求导航栏分类</span></span><br><span class="line">$.get(<span class="string">"category/findall"</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//[&#123;cid:1,cname:国内游&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">    <span class="keyword">var</span> sy=<span class="string">'&lt;li class="nav-active"&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> li=<span class="string">'&lt;li&gt;&lt;a href="route_list.html?cid='</span>+data[i].cid+<span class="string">'"&gt;'</span>+data[i].cname+<span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        sy+=li;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sc=<span class="string">'&lt;li&gt;&lt;a href="favoriterank.html"&gt;收藏排行榜&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">    $(<span class="string">"#category"</span>).html(sy+sc);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="CategoryServlet"><a href="#CategoryServlet" class="headerlink" title="CategoryServlet"></a>CategoryServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/category/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    CategoryService service=<span class="keyword">new</span> CategoryServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findall</span><span class="params">(HttpServletRequest res, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;Category&gt; category=service.findALl();</span><br><span class="line">        writeValue(category,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CategoryServiceImpl"><a href="#CategoryServiceImpl" class="headerlink" title="CategoryServiceImpl"></a>CategoryServiceImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">    CategoryDao categoryDao=<span class="keyword">new</span> CategoryDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">findALl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从Redis中查找</span></span><br><span class="line">        Jedis jedis= JedisUtil.getJedis();</span><br><span class="line">        <span class="comment">//Set&lt;String&gt; category = jedis.zrange("category", 0, -1);</span></span><br><span class="line">        Set&lt;Tuple&gt; category = jedis.zrangeWithScores(<span class="string">"category"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        List&lt;Category&gt; cs=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(category==<span class="keyword">null</span>||category.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"从数据库查询，redis中无category"</span>);</span><br><span class="line">            cs = categoryDao.findAll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cs.size();i++)&#123;</span><br><span class="line">                jedis.zadd(<span class="string">"category"</span>,cs.get(i).getCid(),cs.get(i).getCname());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cs;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"从Redis查询，redis中有category"</span>);</span><br><span class="line">            <span class="keyword">for</span>(Tuple  tuple :category)&#123;</span><br><span class="line">                Category category1=<span class="keyword">new</span> Category();</span><br><span class="line">                category1.setCname(tuple.getElement());</span><br><span class="line">                category1.setCid((<span class="keyword">int</span>) tuple.getScore());</span><br><span class="line">                cs.add(category1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CategoryDaoImpl"><a href="#CategoryDaoImpl" class="headerlink" title="CategoryDaoImpl"></a>CategoryDaoImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDaoImpl</span> <span class="keyword">implements</span> <span class="title">CategoryDao</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">"select * from tab_category"</span>;</span><br><span class="line">        List&lt;Category&gt; categories = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Category.class));</span><br><span class="line">        <span class="keyword">return</span> categories;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;<span class="comment">//分类id</span></span><br><span class="line">    <span class="keyword">private</span> String cname;<span class="comment">//分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="旅游线路分页及搜索"><a href="#旅游线路分页及搜索" class="headerlink" title="旅游线路分页及搜索"></a>旅游线路分页及搜索</h4><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307134335593.png" alt="image-20200307134335593"></p><h5 id="客户端前端代码"><a href="#客户端前端代码" class="headerlink" title="客户端前端代码"></a>客户端前端代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//根据传递过来的参数name获取对应的值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getParameter</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">var</span> r = location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> (r[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> search = location.search;</span><br><span class="line">    <span class="comment">//alert(search);//?id=5</span></span><br><span class="line">    <span class="comment">// 切割字符串，拿到第二个值</span></span><br><span class="line">    <span class="keyword">var</span> cid = getParameter(<span class="string">"cid"</span>);</span><br><span class="line">    <span class="keyword">var</span> rname=getParameter(<span class="string">"rname"</span>);</span><br><span class="line">    rname=<span class="built_in">window</span>.decodeURI(rname);</span><br><span class="line">    <span class="comment">//alert(cid);</span></span><br><span class="line">    <span class="comment">// alert(rname);</span></span><br><span class="line">    load(cid,<span class="number">1</span>,rname);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载每一页的线路列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">cid, currentPage,rname</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//发送Ajax请求，传递cid,请求route/pageQuery</span></span><br><span class="line">    $.get(<span class="string">"route/pageQuery"</span>, &#123;<span class="attr">cid</span>: cid,<span class="attr">currentPage</span>:currentPage,<span class="attr">rname</span>:rname&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">pb</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//解析pageBean</span></span><br><span class="line">        <span class="comment">//分页工具条</span></span><br><span class="line">        $(<span class="string">"#totalPage"</span>).html(pb.totalPage);</span><br><span class="line">        $(<span class="string">"#totalCount"</span>).html(pb.totalCount);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//展示分页码</span></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> firstPage = <span class="string">'&lt;li onclick="javascript:load('</span>+cid+<span class="string">','</span>+<span class="number">1</span>+<span class="string">',\''</span>+rname+<span class="string">'\');"&gt;&lt;a href="javascript:void(0)"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        <span class="keyword">var</span> prePage = <span class="string">'&lt;li class="threeword"&gt;&lt;a href="javascript:load('</span>+cid+<span class="string">','</span>+ (currentPage<span class="number">-1</span>&lt;<span class="number">1</span> ? <span class="number">1</span>:currentPage<span class="number">-1</span>) +<span class="string">',\''</span>+rname+<span class="string">'\');"&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        lis = lis + firstPage + prePage;</span><br><span class="line">        <span class="keyword">var</span> li;</span><br><span class="line">        <span class="comment">//展示10页,前5后4</span></span><br><span class="line">        <span class="keyword">var</span> begin;</span><br><span class="line">        <span class="keyword">var</span> end;</span><br><span class="line">        <span class="keyword">if</span>(pb.totalPage&lt;<span class="number">10</span>)&#123;</span><br><span class="line">            begin=<span class="number">1</span>;</span><br><span class="line">            end=pb.totalPage;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            begin=currentPage<span class="number">-5</span>;</span><br><span class="line">            end=currentPage+<span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span>(begin&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                begin=<span class="number">1</span>;</span><br><span class="line">                end=begin+<span class="number">9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(end&gt;pb.totalPage)&#123;</span><br><span class="line">                end=pb.totalPage;</span><br><span class="line">                begin=end<span class="number">-9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = begin ; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(currentPage==i)&#123;</span><br><span class="line">                li=<span class="string">'&lt;li class="curPage" onclick="javascript:load('</span>+cid+<span class="string">','</span>+i+<span class="string">',\''</span>+rname+<span class="string">'\');"&gt;&lt;a href="javascript:void(0);"&gt;'</span> + i + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                li=<span class="string">'&lt;li onclick="javascript:load('</span>+cid+<span class="string">','</span>+i+<span class="string">',\''</span>+rname+<span class="string">'\');"&gt;&lt;a href="javascript:void(0);"&gt;'</span> + i + <span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lis+=li;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> nextPage = <span class="string">'&lt;li class="threeword"&gt;&lt;a href="javascript:load('</span>+cid+<span class="string">','</span>+((currentPage+<span class="number">1</span>&gt;pb.totalPage)?pb.totalPage:currentPage+<span class="number">1</span>)+<span class="string">',\''</span>+rname+<span class="string">'\');"&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        <span class="keyword">var</span> lastPage = <span class="string">'&lt;li class="threeword"&gt;&lt;a href="javascript:load('</span>+cid+<span class="string">','</span>+pb.totalPage+<span class="string">',\''</span>+rname+<span class="string">'\');"&gt;末页&lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        lis = lis + nextPage + lastPage;</span><br><span class="line">        $(<span class="string">"#pageNum"</span>).html(lis);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//具体线路展示</span></span><br><span class="line">        <span class="keyword">var</span> route_lis = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> li = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pb.list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> route = pb.list[i];</span><br><span class="line">            li = <span class="string">'                        &lt;li&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                            &lt;div class="img"&gt;&lt;img src="'</span> + route.rimage + <span class="string">'" style="width: 299px"&gt;&lt;/div&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                            &lt;div class="text1"&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                &lt;p&gt;'</span> + route.rname + <span class="string">'&lt;/p&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                &lt;br/&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                &lt;p&gt;'</span> + route.routeIntroduce + <span class="string">'&lt;/p&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                            &lt;/div&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                            &lt;div class="price"&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                &lt;p class="price_num"&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                    &lt;span&gt;&amp;yen;&lt;/span&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                    &lt;span&gt;'</span> + route.price + <span class="string">'&lt;/span&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                    &lt;span&gt;起&lt;/span&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                &lt;/p&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                                &lt;p&gt;&lt;a href="route_detail.html?rid='</span>+route.rid+<span class="string">'"&gt;查看详情&lt;/a&gt;&lt;/p&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                            &lt;/div&gt;\n'</span> +</span><br><span class="line">                <span class="string">'                        &lt;/li&gt;'</span>;</span><br><span class="line">            route_lis += li;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"#routes"</span>).html(route_lis);</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//返回页首</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="RouteServlet"><a href="#RouteServlet" class="headerlink" title="RouteServlet"></a>RouteServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/route/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RouteService routeService = <span class="keyword">new</span> RouteServiceImpl();</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(HttpServletRequest res, HttpServletResponse resp)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String currentPagestr = res.getParameter(<span class="string">"currentPage"</span>);</span><br><span class="line">        String pageSizestr = res.getParameter(<span class="string">"pageSize"</span>);</span><br><span class="line">        String cidstr = res.getParameter(<span class="string">"cid"</span>);</span><br><span class="line">        String rname=res.getParameter(<span class="string">"rname"</span>);</span><br><span class="line">        System.out.println(cidstr+rname);</span><br><span class="line">        <span class="keyword">int</span> cid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cidstr!=<span class="keyword">null</span>&amp;&amp;cidstr.length()&gt;<span class="number">0</span>&amp;&amp;!<span class="string">"null"</span>.equals(cidstr))&#123;</span><br><span class="line">            cid=Integer.parseInt(cidstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentPage=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(currentPagestr!=<span class="keyword">null</span>&amp;&amp;currentPagestr.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            currentPage=Integer.parseInt(currentPagestr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            currentPage=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pageSize=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pageSizestr!=<span class="keyword">null</span>&amp;&amp;pageSizestr.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            pageSize=Integer.parseInt(pageSizestr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            pageSize=<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rname!=<span class="keyword">null</span>&amp;&amp;<span class="string">"null"</span>.equals(rname))&#123;</span><br><span class="line">            rname=<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用Sercive</span></span><br><span class="line">        PageBean&lt;Route&gt; pb=routeService.pageQuery(cid,pageSize,currentPage,rname);</span><br><span class="line">        <span class="comment">//4. 将pageBean对象序列化为json，返回</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writeValue(pb,resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RouteServiceImpl"><a href="#RouteServiceImpl" class="headerlink" title="RouteServiceImpl"></a>RouteServiceImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteServiceImpl</span> <span class="keyword">implements</span> <span class="title">RouteService</span> </span>&#123;</span><br><span class="line">    RouteDao routeDao=<span class="keyword">new</span> RouteDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageBean&lt;Route&gt; <span class="title">pageQuery</span><span class="params">(<span class="keyword">int</span> cid, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> currentPage,String rname)</span> </span>&#123;</span><br><span class="line">        PageBean&lt;Route&gt; pb=<span class="keyword">new</span> PageBean&lt;Route&gt;();</span><br><span class="line">        pb.setCurrentPage(currentPage);</span><br><span class="line">        pb.setPageSize(pageSize);</span><br><span class="line">        <span class="keyword">int</span> totalCount=routeDao.findTotalCount(cid,rname);</span><br><span class="line">        pb.setTotalCount(totalCount);</span><br><span class="line">        <span class="keyword">int</span> start=(currentPage-<span class="number">1</span>)*pageSize;</span><br><span class="line">        List&lt;Route&gt; list=routeDao.findByPage(cid,start,pageSize,rname);</span><br><span class="line">        pb.setList(list);</span><br><span class="line">        <span class="keyword">int</span> totalPage=totalCount%pageSize==<span class="number">0</span>?totalCount/pageSize:totalCount/pageSize+<span class="number">1</span>;</span><br><span class="line">        pb.setTotalPage(totalPage);</span><br><span class="line">        <span class="keyword">return</span> pb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RouteDaoImpl"><a href="#RouteDaoImpl" class="headerlink" title="RouteDaoImpl"></a>RouteDaoImpl</h5><p>采用多条件组合查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDaoImpl</span> <span class="keyword">implements</span> <span class="title">RouteDao</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTotalCount</span><span class="params">(<span class="keyword">int</span> cid, String rname)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多条件组合查询</span></span><br><span class="line">        String sql = <span class="string">"select count(*) from tab_route where 1=1 "</span>;</span><br><span class="line">        <span class="comment">//判断参数是否有值</span></span><br><span class="line">        List param = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(sql);</span><br><span class="line">        <span class="keyword">if</span> (cid != <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" and cid= ? "</span>);</span><br><span class="line">            param.add(cid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rname != <span class="keyword">null</span> &amp;&amp; rname.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" and rname like ? "</span>);</span><br><span class="line">            param.add(<span class="string">"%"</span> + rname + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sql = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> template.queryForObject(sql, Integer.class, param.toArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Route&gt; <span class="title">findByPage</span><span class="params">(<span class="keyword">int</span> cid, <span class="keyword">int</span> start, <span class="keyword">int</span> pageSize, String rname)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from tab_route where 1=1 "</span>;</span><br><span class="line">        <span class="comment">//判断参数是否有值</span></span><br><span class="line">        List param = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(sql);</span><br><span class="line">        <span class="keyword">if</span> (cid != <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" and cid= ? "</span>);</span><br><span class="line">            param.add(cid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rname != <span class="keyword">null</span> &amp;&amp; rname.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" and rname like ? "</span>);</span><br><span class="line">            param.add(<span class="string">"%"</span> + rname + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">" limit ?,? "</span>);</span><br><span class="line">        sql = sb.toString();</span><br><span class="line">        System.out.println(sql);</span><br><span class="line">        param.add(start);</span><br><span class="line">        param.add(pageSize);</span><br><span class="line">        <span class="keyword">return</span> template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Route&gt;(Route.class), param.toArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rid;<span class="comment">//线路id，必输</span></span><br><span class="line">    <span class="keyword">private</span> String rname;<span class="comment">//线路名称，必输</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;<span class="comment">//价格，必输</span></span><br><span class="line">    <span class="keyword">private</span> String routeIntroduce;<span class="comment">//线路介绍</span></span><br><span class="line">    <span class="keyword">private</span> String rflag;   <span class="comment">//是否上架，必输，0代表没有上架，1代表是上架</span></span><br><span class="line">    <span class="keyword">private</span> String rdate;   <span class="comment">//上架时间</span></span><br><span class="line">    <span class="keyword">private</span> String isThemeTour;<span class="comment">//是否主题旅游，必输，0代表不是，1代表是</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//收藏数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;<span class="comment">//所属分类，必输</span></span><br><span class="line">    <span class="keyword">private</span> String rimage;<span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;<span class="comment">//所属商家</span></span><br><span class="line">    <span class="keyword">private</span> String sourceId;<span class="comment">//抓取数据的来源id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Category category;<span class="comment">//所属分类</span></span><br><span class="line">    <span class="keyword">private</span> Seller seller;<span class="comment">//所属商家</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;RouteImg&gt; routeImgList;<span class="comment">//商品详情图片列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PageBean"><a href="#PageBean" class="headerlink" title="PageBean"></a>PageBean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCount;<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPage;<span class="comment">//总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage;<span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;<span class="comment">//每页显示的条数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;<span class="comment">//每页显示的数据集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="旅游线路详情展示"><a href="#旅游线路详情展示" class="headerlink" title="旅游线路详情展示"></a>旅游线路详情展示</h4><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307141501649.png" alt="image-20200307141501649"></p><p><img src="/../assets/pic/2018-07-02-JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307141319255.png" alt="image-20200307141319255"></p><h5 id="前端异步请求"><a href="#前端异步请求" class="headerlink" title="前端异步请求"></a>前端异步请求</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"route_detail.html?rid='+route.rid+'"</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rid = getParameter(<span class="string">"rid"</span>);</span><br><span class="line">    $.get(<span class="string">"route/findOne"</span>, &#123;<span class="attr">rid</span>: rid&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">route</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#rname"</span>).html(route.rname);</span><br><span class="line">        $(<span class="string">"#price"</span>).html(<span class="string">"￥"</span>+route.price);</span><br><span class="line">        $(<span class="string">"#routeIntroduce"</span>).html(route.routeIntroduce);</span><br><span class="line">        $(<span class="string">"#sname"</span>).html(route.seller.sname);</span><br><span class="line">        $(<span class="string">"#consphone"</span>).html(route.seller.consphone);</span><br><span class="line">        $(<span class="string">"#address"</span>).html(route.seller.address);</span><br><span class="line">        $(<span class="string">"#rimage"</span>).prop(<span class="string">"src"</span>,route.rimage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图片展示</span></span><br><span class="line">        <span class="keyword">var</span> lis=<span class="string">'&lt;a class="up_img up_img_disable"&gt;&lt;/a&gt;'</span>;</span><br><span class="line">        <span class="keyword">var</span> li;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;route.routeImgList.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">4</span>)&#123;</span><br><span class="line">                li=<span class="string">'                &lt;a title="" class="little_img"\n'</span> +</span><br><span class="line">                    <span class="string">'                   data-bigpic="'</span>+route.routeImgList[i].bigPic+<span class="string">'"\n'</span> +</span><br><span class="line">                    <span class="string">'                   &gt;\n'</span> +</span><br><span class="line">                    <span class="string">'                    &lt;img src="'</span>+route.routeImgList[i].smallPic+<span class="string">'"&gt;\n'</span> +</span><br><span class="line">                    <span class="string">'                &lt;/a&gt;'</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                li=<span class="string">'                &lt;a title="" class="little_img"\n'</span> +</span><br><span class="line">                    <span class="string">'                   data-bigpic="'</span>+route.routeImgList[i].bigPic+<span class="string">'"\n'</span> +</span><br><span class="line">                    <span class="string">'                   style="display:none;"&gt;\n'</span> +</span><br><span class="line">                    <span class="string">'                    &lt;img src="'</span>+route.routeImgList[i].smallPic+<span class="string">'"&gt;\n'</span> +</span><br><span class="line">                    <span class="string">'                &lt;/a&gt;'</span></span><br><span class="line">            &#125;</span><br><span class="line">            lis+=li;</span><br><span class="line">        &#125;</span><br><span class="line">        lis+=<span class="string">'&lt;a class="down_img down_img_disable" style="margin-bottom: 0;"&gt;&lt;/a&gt;'</span>;</span><br><span class="line">        $(<span class="string">"#dd"</span>).html(lis);</span><br><span class="line">        <span class="comment">//切换图片</span></span><br><span class="line">        goImg();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="RouteServlet-1"><a href="#RouteServlet-1" class="headerlink" title="RouteServlet"></a>RouteServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询具体旅游线路</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">(HttpServletRequest res, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String ridstr = res.getParameter(<span class="string">"rid"</span>);</span><br><span class="line">    <span class="keyword">int</span> rid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ridstr!=<span class="keyword">null</span>&amp;&amp;ridstr.length()&gt;<span class="number">0</span>&amp;&amp;!<span class="string">"null"</span>.equals(ridstr))&#123;</span><br><span class="line">        rid=Integer.parseInt(ridstr);</span><br><span class="line">    &#125;</span><br><span class="line">    Route route = routeService.findOne(rid);</span><br><span class="line">    writeValue(route,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RouteServiceImpl-1"><a href="#RouteServiceImpl-1" class="headerlink" title="RouteServiceImpl"></a>RouteServiceImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Route <span class="title">findOne</span><span class="params">(<span class="keyword">int</span> rid)</span> </span>&#123;</span><br><span class="line">    Route route = routeDao.findOne(rid);</span><br><span class="line">    <span class="comment">//根据route的rid查找routeImg</span></span><br><span class="line">    List&lt;RouteImg&gt; routeImgs = <span class="keyword">new</span> RouteImgImpl().findByRid(rid);</span><br><span class="line">    route.setRouteImgList(routeImgs);</span><br><span class="line">    <span class="comment">//根据route的sid查找seller</span></span><br><span class="line">    Seller seller = <span class="keyword">new</span> SellerDaoImpl().findBySid(route.getSid());</span><br><span class="line">    route.setSeller(seller);</span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RouteImgImpl 根据route的rid查找routeImg</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;RouteImg&gt; <span class="title">findByRid</span><span class="params">(<span class="keyword">int</span> rid)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from tab_route_img where rid=? "</span>;</span><br><span class="line">    List&lt;RouteImg&gt; routeImgs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        routeImgs = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(RouteImg.class), rid);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> routeImgs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SellerDaoImpl 根据route的sid查找seller</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Seller <span class="title">findBySid</span><span class="params">(<span class="keyword">int</span> sid)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from tab_seller where sid=? "</span>;</span><br><span class="line">    Seller seller = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        seller = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Seller.class), sid);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> seller;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RouteDaoImpl  根据前端传递的rid查找Route</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Route <span class="title">findOne</span><span class="params">(<span class="keyword">int</span> rid)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from tab_route where rid=? "</span>;</span><br><span class="line">    Route route = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        route = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Route.class), rid);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Web相关概念&quot;&gt;&lt;a href=&quot;#Web相关概念&quot; class=&quot;headerlink&quot; title=&quot;Web相关概念&quot;&gt;&lt;/a&gt;Web相关概念&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;软件架构&lt;ol&gt;
&lt;li&gt;C/S：客户端/服务器端&lt;/li&gt;
&lt;li&gt;B/S：浏览器/服务器端&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Web前端基础知识</title>
    <link href="/2018/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-07-01-Web前端基础知识/</id>
    <published>2018-07-01T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><h5 id="一、代码部署："><a href="#一、代码部署：" class="headerlink" title="一、代码部署："></a>一、代码部署：</h5><p>1、代码的压缩与合并<br>2、图片、js、css等静态资源使用和主站不同域名地址存储，从而使得在传输资源时不会带上不必要的cookie信息。<br>3、使用内容分发网络 CDN<br>4、为文件设置Last-Modified、Expires和Etag</p><a id="more"></a><p>5、使用GZIP压缩传送<br>6、权衡DNS查找次数(使用不同域名会增加DNS查找)<br>7、避免不必要的重定向(加”/“)</p><h5 id="二、编码"><a href="#二、编码" class="headerlink" title="二、编码"></a>二、编码</h5><p><strong>html：</strong></p><p>1、使用结构清晰，简单，语义化标签<br>2、避免空的src和href<br>3、不要在HTML中缩放图片</p><p><strong>css：</strong></p><p>1、精简css选择器<br>2、把CSS放到顶部<br>3、避免@import方式引入样式<br>4、css中使用base64图片数据取代图片文件，减少请求数，在线转base64网站：<a href="http://tool.css-js.com/base64.html" target="_blank" rel="noopener">http://tool.css-js.com/base64.html</a><br>5、使用css动画来取代javascript动画<br>6、使用字体图标<br>7、使用css sprite(雪碧图)<br>8、使用svg图形<br>9、避免使用CSS表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line"> background-color: expression( (new Date()).getSeconds()%2 ? &quot;#B8D4FF&quot; : &quot;#F08A00&quot; );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、避免使用css滤镜</p><p><strong>javascript：</strong></p><p>1、减少引用库的个数<br>2、使用requirejs或seajs异步加载js<br>3、JS放到页面底部引入<br>4、避免全局查找<br>5、使用原生方法<br>6、用switch语句代替复杂的if else语句<br>7、减少语句数，比如说多个变量声明可以写成一句<br>8、使用字面量表达式来初始化数组或者对象<br>9、使用innerHTML取代复杂的元素注入<br>10、使用事件代理(事件委托)<br>11、避免多次访问dom选择集<br>12、高频触发事件设置使用函数节流<br>13、使用Web Storage缓存数据</p><h4 id="HTML：网页基本结构"><a href="#HTML：网页基本结构" class="headerlink" title="HTML：网页基本结构"></a>HTML：网页基本结构</h4><h5 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 静态资源：</span><br><span class="line">* 使用静态网页开发技术发布的资源。</span><br><span class="line">* 特点：</span><br><span class="line">    * 所有用户访问，得到的结果是一样的。</span><br><span class="line">    * 如：文本，图片，音频、视频, HTML,CSS,JavaScript</span><br><span class="line">        * 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器.</span><br><span class="line">        * 浏览器中内置了静态资源的解析引擎，可以展示静态资源</span><br><span class="line"><span class="number">2</span>. 动态资源：</span><br><span class="line">* 使用动态网页及时发布的资源。</span><br><span class="line">* 特点：</span><br><span class="line">    * 所有用户访问，得到的结果可能不一样。</span><br><span class="line">    * 如：jsp/servlet,php,asp...</span><br><span class="line">    * 如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</span><br></pre></td></tr></table></figure><h5 id="HTML概念"><a href="#HTML概念" class="headerlink" title="HTML概念"></a>HTML概念</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 概念：是最基础的网页开发语言</span><br><span class="line">* Hyper Text Markup Language 超文本标记语言</span><br><span class="line">* 超文本:</span><br><span class="line">* 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</span><br><span class="line">* 标记语言:</span><br><span class="line">* 由标签构成的语言。<span class="tag">&lt;<span class="name">标签名称</span>&gt;</span> 如 html，xml</span><br><span class="line">* 标记语言不是编程语言</span><br><span class="line"></span><br><span class="line">2. 快速入门：</span><br><span class="line">* 语法：</span><br><span class="line">1. html文档后缀名 .html 或者 .htm</span><br><span class="line">2. 标签分为</span><br><span class="line">1. 围堵标签：有开始标签和结束标签。如 <span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">2. 自闭和标签：开始标签和结束标签在一起。如 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">3. 标签可以嵌套：</span><br><span class="line">需要正确嵌套，不能你中有我，我中有你</span><br><span class="line">错误：<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">正确：<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">4. 在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来</span><br><span class="line">5. html的标签不区分大小写，但是建议使用小写。</span><br></pre></td></tr></table></figure><h5 id="标签学习"><a href="#标签学习" class="headerlink" title="标签学习"></a>标签学习</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">1. 文件标签：构成html最基本的标签</span><br><span class="line">    * html:html文档的根标签</span><br><span class="line">    * head：头标签。用于指定html文档的一些属性。引入外部的资源</span><br><span class="line">    * title：标题标签。</span><br><span class="line">    * body：体标签</span><br><span class="line">    * <span class="meta">&lt;!DOCTYPE html&gt;</span>：html5中定义该文档是html文档</span><br><span class="line"></span><br><span class="line">2. 文本标签：和文本有关的标签</span><br><span class="line">    注释：<span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> to <span class="tag">&lt;<span class="name">h6</span>&gt;</span>：标题标签</span><br><span class="line">        h1~h6:字体大小逐渐递减</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>：段落标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>：换行标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span>：展示一条水平线</span><br><span class="line">        * 属性：</span><br><span class="line">            * color：颜色</span><br><span class="line">            * width：宽度</span><br><span class="line">            * size：高度</span><br><span class="line">            * align：对其方式</span><br><span class="line">                * center：居中</span><br><span class="line">                * left：左对齐</span><br><span class="line">                * right：右对齐</span><br><span class="line">        <span class="comment">&lt;!-- hr 显示一条水平线--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> <span class="attr">align</span>=<span class="string">"left"</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>：字体加粗</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>：字体斜体</span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span>&gt;</span>:字体标签</span><br><span class="line">        * 属性：</span><br><span class="line">            * color：颜色</span><br><span class="line">            * size：大小</span><br><span class="line">            * face：字体</span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">face</span>=<span class="string">"楷体"</span> <span class="attr">size</span>=<span class="string">"5"</span>&gt;</span>白日依山尽<span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>:文本居中</span><br><span class="line">            </span><br><span class="line">    属性定义：</span><br><span class="line">        * color：</span><br><span class="line">            1. 英文单词：red,green,blue</span><br><span class="line">            2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)</span><br><span class="line">            3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF</span><br><span class="line">        * width：</span><br><span class="line">            1. 数值：width='20' ,数值的单位，默认是 px(像素)</span><br><span class="line">            2. 数值%：占比相对于父元素的比例</span><br><span class="line"></span><br><span class="line">3. 图片标签：</span><br><span class="line">    * img：展示图片</span><br><span class="line">        * 属性：</span><br><span class="line">            * src：指定图片的位置</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">alt</span>=<span class="string">"古镇"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>/&gt;</span></span><br><span class="line">        相对路径</span><br><span class="line">            * 以.开头的路径</span><br><span class="line">            * ./：代表当前目录  ./image/1.jpg</span><br><span class="line">            * ../:代表上一级目录</span><br><span class="line">   </span><br><span class="line">4. 列表标签：</span><br><span class="line">    * 有序列表：</span><br><span class="line">        * ol:</span><br><span class="line">        * li:</span><br><span class="line">    * 无序列表：</span><br><span class="line">        * ul:</span><br><span class="line">        * li:</span><br><span class="line">        <span class="comment">&lt;!--有序列表 ol--&gt;</span></span><br><span class="line">        早上起床干的事情</span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"5"</span> <span class="attr">type</span>=<span class="string">"A"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>睁眼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 看手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 穿衣服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> 洗漱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">5. 链接标签：</span><br><span class="line">    * a:定义一个超链接</span><br><span class="line">        * 属性：</span><br><span class="line">            * href：指定访问资源的URL(统一资源定位符)</span><br><span class="line">            * target：指定打开资源的方式</span><br><span class="line">                * _self:默认值，在当前页面打开</span><br><span class="line">                * _blank：在空白页面打开</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.itcast.cn"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     超链接功能：</span><br><span class="line">        1.可以被点击：样式</span><br><span class="line">        2.点击后跳转到href指定的url</span><br><span class="line">           需求：保留1功能，去掉2功能</span><br><span class="line">           实现：href="javascript:void(0);"</span><br><span class="line"> </span><br><span class="line">6. div和span：</span><br><span class="line">    * div:每一个div占满一整行。块级标签</span><br><span class="line">    * span：文本信息在一行展示，行内标签 内联标签</span><br><span class="line"></span><br><span class="line">7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签。</span><br><span class="line">    1. <span class="tag">&lt;<span class="name">header</span>&gt;</span>：页眉</span><br><span class="line">    2. <span class="tag">&lt;<span class="name">footer</span>&gt;</span>：页脚</span><br><span class="line"></span><br><span class="line">8. 表格标签：</span><br><span class="line">    * table：定义表格</span><br><span class="line">        * width：宽度</span><br><span class="line">        * border：边框</span><br><span class="line">        * cellpadding：定义内容和单元格的距离</span><br><span class="line">        * cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</span><br><span class="line">        * bgcolor：背景色</span><br><span class="line">        * align：对齐方式</span><br><span class="line">    * tr：定义行</span><br><span class="line">        * bgcolor：背景色</span><br><span class="line">        * align：对齐方式</span><br><span class="line">    * td：定义单元格</span><br><span class="line">        * colspan：合并列</span><br><span class="line">        * rowspan：合并行</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>杨过<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    * th：定义表头单元格</span><br><span class="line">    * <span class="tag">&lt;<span class="name">caption</span>&gt;</span>：表格标题</span><br><span class="line">    * <span class="tag">&lt;<span class="name">thead</span>&gt;</span>：表示表格的头部分</span><br><span class="line">    * <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>：表示表格的体部分</span><br><span class="line">    * <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>：表示表格的脚部分</span><br><span class="line"></span><br><span class="line">9. 表单：</span><br><span class="line">    * 概念：用于采集用户输入的数据的。用于和服务器进行交互。</span><br><span class="line">    * form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围</span><br><span class="line">        * 属性：</span><br><span class="line">            * action：指定提交数据的URL</span><br><span class="line">            * method:指定提交方式</span><br><span class="line">            * 分类：一共7种，2种比较常用</span><br><span class="line">               * get：</span><br><span class="line">                    1. 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。</span><br><span class="line">                    2. 请求参数大小是有限制的。</span><br><span class="line">                    3. 不太安全。</span><br><span class="line">               * post：</span><br><span class="line">                    2. 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)</span><br><span class="line">                    2. 请求参数的大小没有限制。</span><br><span class="line">                    3. 较为安全。</span><br><span class="line">    * 表单项中的数据要想被提交：必须指定其name属性</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"user/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">10. 表单项标签：</span><br><span class="line">    * input：可以通过type属性值，改变元素展示的样式</span><br><span class="line">        * type属性：</span><br><span class="line">            * text：文本输入框，默认值</span><br><span class="line">                * placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息</span><br><span class="line">            * password：密码输入框</span><br><span class="line">            * radio:单选框</span><br><span class="line">                * 注意：</span><br><span class="line">                    1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。</span><br><span class="line">                    2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line">                    3. checked属性，可以指定默认值</span><br><span class="line">            * checkbox：复选框</span><br><span class="line">                * 注意：</span><br><span class="line">                    1. 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line">                    2. checked属性，可以指定默认值</span><br><span class="line"></span><br><span class="line">            * file：文件选择框</span><br><span class="line">            * hidden：隐藏域，用于提交一些信息。</span><br><span class="line">            * 按钮：</span><br><span class="line">                * submit：提交按钮。可以提交表单</span><br><span class="line">                * button：普通按钮</span><br><span class="line">                * image：图片提交按钮</span><br><span class="line">                    * src属性指定图片的路径</span><br><span class="line"></span><br><span class="line">       * label：指定输入项的文字描述信息</span><br><span class="line">           * 注意：</span><br><span class="line">               * label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。</span><br><span class="line">    * select: 下拉列表</span><br><span class="line">        * 子元素：option，指定列表项</span><br><span class="line">        </span><br><span class="line">    * textarea：文本域</span><br><span class="line">        * cols：指定列数，每一行有多少个字符</span><br><span class="line">        * rows：默认多少行。</span><br><span class="line">            </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"registServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span> 用户名 <span class="tag">&lt;/<span class="name">label</span>&gt;</span>：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"shopping"</span>&gt;</span> 逛街</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span> Java</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span>&gt;</span> 游戏<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        图片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        隐藏域：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        取色器：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        省份：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>陕西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        自我描述：</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"des"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"一个按钮"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">src</span>=<span class="string">"img/regbtn.jpg"</span> <span class="attr">type</span>=<span class="string">"image"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="html特殊字符集"><a href="#html特殊字符集" class="headerlink" title="html特殊字符集"></a>html特殊字符集</h5><p><img src="/../assets/pic/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200225165329555.png" alt="image-20200225165329555"></p><h4 id="CSS：布局控制美化"><a href="#CSS：布局控制美化" class="headerlink" title="CSS：布局控制美化"></a>CSS：布局控制美化</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">1. 概念： <span class="selector-tag">Cascading</span> <span class="selector-tag">Style</span> <span class="selector-tag">Sheets</span> 层叠样式表</span><br><span class="line">* 层叠：多个样式可以作用在同一个<span class="selector-tag">html</span>的元素上，同时生效</span><br><span class="line"></span><br><span class="line">2. 好处：</span><br><span class="line">1. 功能强大</span><br><span class="line">2. 将内容展示和样式控制分离</span><br><span class="line">* 降低耦合度。解耦</span><br><span class="line">* 让分工协作更容易</span><br><span class="line">* 提高开发效率</span><br><span class="line"></span><br><span class="line">3. <span class="selector-tag">CSS</span>的使用：<span class="selector-tag">CSS</span>与<span class="selector-tag">html</span>结合方式</span><br><span class="line">1. 内联样式</span><br><span class="line">* 在标签内使用<span class="selector-tag">style</span>属性指定<span class="selector-tag">css</span>代码</span><br><span class="line">  &lt;div style="color:red;"&gt;hello css&lt;/div&gt;</span><br><span class="line">2. 内部样式</span><br><span class="line">* 在<span class="selector-tag">head</span>标签内，定义<span class="selector-tag">style</span>标签，<span class="selector-tag">style</span>标签的标签体内容就是<span class="selector-tag">css</span>代码</span><br><span class="line">            &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">            <span class="selector-tag">div</span>&#123;</span><br><span class="line">                <span class="attribute">color</span>:blue;</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div&gt;hello css&lt;/div&gt;</span><br><span class="line">3. 外部样式</span><br><span class="line">1. 定义<span class="selector-tag">css</span>资源文件。</span><br><span class="line">2. 在<span class="selector-tag">head</span>标签内，定义<span class="selector-tag">link</span>标签，引入外部的资源文件</span><br><span class="line">    css/a.css文件：</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;link rel="stylesheet" href="css/a.css"&gt;</span><br><span class="line">&lt;div&gt;hello css&lt;/div&gt;</span><br><span class="line">&lt;div&gt;hello css&lt;/div&gt;</span><br><span class="line">* 注意：</span><br><span class="line">* 1,2,3种方式 <span class="selector-tag">css</span>作用范围越来越大</span><br><span class="line">* 1方式不常用，后期常用2,3</span><br><span class="line">* 3种方式可以写为：</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        @<span class="keyword">import</span> <span class="string">"css/a.css"</span>;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">4. <span class="selector-tag">css</span>语法：</span><br><span class="line">* 格式：</span><br><span class="line">选择器 &#123;</span><br><span class="line">属性名1:属性值1;</span><br><span class="line">属性名2:属性值2;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">* 选择器:筛选具有相似特征的元素</span><br><span class="line">* 注意：</span><br><span class="line">* 每一对属性需要使用；隔开，最后一对属性可以不加;</span><br><span class="line"></span><br><span class="line">5. 选择器：筛选具有相似特征的元素</span><br><span class="line">* 分类：</span><br><span class="line">1. 基础选择器</span><br><span class="line">1. <span class="selector-tag">id</span>选择器：选择具体的<span class="selector-tag">id</span>属性值的元素.建议在一个<span class="selector-tag">html</span>页面中<span class="selector-tag">id</span>值唯一</span><br><span class="line">        * 语法：<span class="selector-id">#id</span>属性值&#123;&#125;</span><br><span class="line">        * 注意：<span class="selector-tag">id</span>选择器优先级高于类选择器元素选择器</span><br><span class="line">    2. 类选择器：选择具有相同的<span class="selector-tag">class</span>属性值的元素。</span><br><span class="line">        * 语法：<span class="selector-class">.class</span>属性值&#123;&#125;</span><br><span class="line">        * 注意：类选择器优先级高于元素选择器</span><br><span class="line">    3. 元素(标签)选择器：选择具有相同标签名称的元素</span><br><span class="line">        * 语法： 标签名称&#123;&#125;</span><br><span class="line">            &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">                <span class="selector-id">#div1</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">                <span class="selector-class">.cls1</span> &#123;<span class="attribute">color</span>: blue;&#125;</span><br><span class="line">                <span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: green;&#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div id="div1"&gt;传智播客&lt;/div&gt; red</span><br><span class="line">            &lt;div class="cls1"&gt;黑马程序员&lt;/div&gt; blue</span><br><span class="line">            &lt;p class="cls1"&gt;传智学院&lt;/p&gt; blue</span><br><span class="line"></span><br><span class="line">2. 扩展选择器：</span><br><span class="line">1. 选择所有元素：</span><br><span class="line">* 语法： *&#123;&#125;</span><br><span class="line">2. 并集选择器：</span><br><span class="line">* 选择器1,选择器2&#123;&#125;</span><br><span class="line">3. 子选择器：筛选选择器1元素下的选择器2元素</span><br><span class="line">* 语法：  选择器1 选择器2&#123;&#125;</span><br><span class="line">4. 父选择器：筛选选择器2的父元素选择器1</span><br><span class="line">* 语法：  选择器1 &gt; 选择器2&#123;&#125;</span><br><span class="line">5. 属性选择器：选择元素名称，属性名=属性值的元素</span><br><span class="line">* 语法：  元素名称<span class="selector-attr">[属性名="属性值"]</span>&#123;&#125;</span><br><span class="line">6. 伪类选择器：选择一些元素具有的状态</span><br><span class="line">* 语法： 元素:状态&#123;&#125;</span><br><span class="line">* 如： &lt;<span class="selector-tag">a</span>&gt;</span><br><span class="line">* 状态：</span><br><span class="line">* <span class="selector-tag">link</span>：初始化的状态</span><br><span class="line">* <span class="selector-tag">visited</span>：被访问过的状态</span><br><span class="line">* <span class="selector-tag">active</span>：正在访问状态</span><br><span class="line">* <span class="selector-tag">hover</span>：鼠标悬浮状态</span><br><span class="line">            &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">                <span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">                <span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid;&#125;</span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-attr">[type='text']</span> &#123;<span class="attribute">border</span>: <span class="number">5px</span> solid;&#125;</span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: pink;&#125;</span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: green;&#125;</span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">            &lt;div&gt;&lt;p&gt;传智播客&lt;/p&gt;&lt;/div&gt; red solid</span><br><span class="line">            &lt;p&gt;黑马程序员&lt;/p&gt;</span><br><span class="line">            &lt;div&gt;aaa&lt;/div&gt;</span><br><span class="line">            &lt;input type="text"&gt; solid</span><br><span class="line">            &lt;input type="password"&gt;</span><br><span class="line">            &lt;a href="#"&gt;黑马程序员&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">3.选择器优先级</span><br><span class="line">        最高优先级是 (直接在标签中的设置样式，假设级别为1000)</span><br><span class="line">        次优先级是（<span class="selector-tag">ID</span>选择器 ,假设级别为100） <span class="selector-id">#myDiv</span>&#123;<span class="attribute">color</span>:Red;&#125;</span><br><span class="line">        其次优先级是（类选择器，假设级别为10）<span class="selector-class">.divClass</span>&#123;<span class="attribute">color</span>:Red;&#125;</span><br><span class="line">        最后优先级是 （标签选择器，假设级别是 1） <span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:Red;&#125;</span><br><span class="line">        那么后代选择器的优先级就可以计算了</span><br><span class="line">        .divClass span &#123; color:Red;&#125; 优先级别就是：10+1=11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. 属性</span><br><span class="line">1. 字体、文本</span><br><span class="line">* <span class="selector-tag">font-size</span>：字体大小</span><br><span class="line">* <span class="selector-tag">color</span>：文本颜色</span><br><span class="line">* <span class="selector-tag">text-align</span>：对其方式</span><br><span class="line">* <span class="selector-tag">line-height</span>：行高 </span><br><span class="line">2. 背景</span><br><span class="line">* <span class="selector-tag">background</span>：</span><br><span class="line">3. 边框</span><br><span class="line">* <span class="selector-tag">border</span>：设置边框，符合属性</span><br><span class="line">4. 尺寸</span><br><span class="line">* <span class="selector-tag">width</span>：宽度</span><br><span class="line">* <span class="selector-tag">height</span>：高度</span><br><span class="line">5. 盒子模型：控制布局</span><br><span class="line">* <span class="selector-tag">margin</span>：外边距</span><br><span class="line">* <span class="selector-tag">padding</span>：内边距</span><br><span class="line">* 默认情况下内边距会影响整个盒子的大小</span><br><span class="line">* <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;  设置盒子的属性，让<span class="selector-tag">width</span>和<span class="selector-tag">height</span>就是最终盒子的大小</span><br><span class="line"></span><br><span class="line">* <span class="selector-tag">float</span>：浮动</span><br><span class="line">* <span class="selector-tag">left</span></span><br><span class="line">* <span class="selector-tag">right</span></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">//背景</span><br><span class="line">        background: url("img/logo.jpg") no-repeat center;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">        <span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">height</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">padding</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="css盒模型"><a href="#css盒模型" class="headerlink" title="css盒模型"></a>css盒模型</h5><p><img src="/../assets/pic/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200225171741257.png" alt="image-20200225171741257"></p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><h4 id="JavaScript-网页动态交互"><a href="#JavaScript-网页动态交互" class="headerlink" title="JavaScript: 网页动态交互"></a>JavaScript: 网页动态交互</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* 概念：一门客户端脚本语言</span><br><span class="line">  * 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</span><br><span class="line">  * 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line"></span><br><span class="line">* 功能：</span><br><span class="line">  * 增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</span><br><span class="line"></span><br><span class="line">* JavaScript发展史：</span><br><span class="line">  <span class="number">1.</span> <span class="number">1992</span>年，Nombase公司，开发出第一门客户端脚本语言，专用于表单校验。命名C--后来更名为：ScriptEase</span><br><span class="line">  <span class="number">2.</span> <span class="number">1995</span>年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</span><br><span class="line">  <span class="number">3.</span> <span class="number">1996</span>年，微软抄袭JavaScript开发出JScript语言</span><br><span class="line">  <span class="number">4.</span> <span class="number">1997</span>年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</span><br><span class="line"></span><br><span class="line">* JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</span><br></pre></td></tr></table></figure><h5 id="ECMAScript基本语法"><a href="#ECMAScript基本语法" class="headerlink" title="ECMAScript基本语法"></a>ECMAScript基本语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 与html结合方式</span><br><span class="line">    <span class="number">1.</span> 内部JS：</span><br><span class="line">        * 定义&lt;script&gt;，标签体内容就是js代码</span><br><span class="line">    <span class="number">2.</span> 外部JS：</span><br><span class="line">        * 定义&lt;script&gt;，通过src属性引入外部的js文件</span><br><span class="line">    &lt;script&gt;alert(<span class="string">"Hello World"</span>);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script src=<span class="string">"js/a.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    * 注意：</span><br><span class="line">        <span class="number">1.</span> &lt;script&gt;可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</span><br><span class="line">        <span class="number">2.</span> &lt;script&gt;可以定义多个。</span><br><span class="line"><span class="number">2.</span> 注释</span><br><span class="line">    <span class="number">1.</span> 单行注释：<span class="comment">//注释内容</span></span><br><span class="line">    <span class="number">2.</span> 多行注释：<span class="comment">/*注释内容*/</span></span><br><span class="line"><span class="number">3.</span> 数据类型：</span><br><span class="line">    <span class="number">1.</span> 原始数据类型(基本数据类型)：</span><br><span class="line">        <span class="number">1.</span> number：数字。 整数/小数/<span class="literal">NaN</span>(not a number 一个不是数字的数字类型)</span><br><span class="line">        <span class="number">2.</span> string：字符串。 字符串  <span class="string">"abc"</span> <span class="string">"a"</span> <span class="string">'abc'</span></span><br><span class="line">        <span class="number">3.</span> boolean: <span class="literal">true</span>和<span class="literal">false</span></span><br><span class="line">        <span class="number">4.</span> <span class="literal">null</span>：一个对象为空的占位符</span><br><span class="line">        <span class="number">5.</span> <span class="literal">undefined</span>：未定义。如果一个变量没有给初始化值，则会被默认赋值为<span class="literal">undefined</span></span><br><span class="line">        <span class="comment">// 定义null,undefined</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> obj2 = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="number">2.</span> 引用数据类型：对象</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 变量</span><br><span class="line">    * 变量：一小块存储数据的内存空间</span><br><span class="line">    * Java语言是强类型语言，而JavaScript是弱类型语言。</span><br><span class="line">        * 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</span><br><span class="line">        * 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</span><br><span class="line">    * 语法：</span><br><span class="line">        * <span class="keyword">var</span> 变量名 = 初始化值;</span><br><span class="line">    * <span class="keyword">typeof</span>运算符：获取变量的类型。</span><br><span class="line">        <span class="built_in">document</span>.write(obj + <span class="string">"---"</span> + <span class="keyword">typeof</span> (obj) + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        * 注：<span class="literal">null</span>运算后得到的是object</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 运算符</span><br><span class="line">    <span class="number">1.</span> 一元运算符：只有一个运算数的运算符</span><br><span class="line">        ++，-- ， +(正号)  </span><br><span class="line">        * ++ --: 自增(自减)</span><br><span class="line">            * ++(--) 在前，先自增(自减)，再运算</span><br><span class="line">            * ++(--) 在后，先运算，再自增(自减)</span><br><span class="line">        * +(-)：正负号</span><br><span class="line">        * 注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</span><br><span class="line">            * 其他类型转number：</span><br><span class="line">                * string转number：按照字面值转换。如果字面值不是数字，则转为<span class="literal">NaN</span>（不是数字的数字）</span><br><span class="line">                * boolean转number：<span class="literal">true</span>转为<span class="number">1</span>，<span class="literal">false</span>转为<span class="number">0</span></span><br><span class="line">    <span class="number">2.</span> 算数运算符</span><br><span class="line">        + - * <span class="regexp">/ % ...</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    3. 赋值运算符</span></span><br><span class="line"><span class="regexp">        = += -+....</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    4. 比较运算符</span></span><br><span class="line"><span class="regexp">        &gt; &lt; &gt;= &lt;= == ===(全等于)</span></span><br><span class="line"><span class="regexp">        * 比较方式</span></span><br><span class="line"><span class="regexp">          1. 类型相同：直接比较</span></span><br><span class="line"><span class="regexp">              * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</span></span><br><span class="line"><span class="regexp">          2. 类型不同：先进行类型转换，再比较</span></span><br><span class="line"><span class="regexp">              * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</span></span><br><span class="line"><span class="regexp">          document.write(("123" === 123) + "&lt;br&gt;");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    5. 逻辑运算符</span></span><br><span class="line"><span class="regexp">        &amp;&amp; || !</span></span><br><span class="line"><span class="regexp">        * 其他类型转boolean：</span></span><br><span class="line"><span class="regexp">           1. number：0或NaN为假，其他为真</span></span><br><span class="line"><span class="regexp">           2. string：除了空字符串("")，其他都是true</span></span><br><span class="line"><span class="regexp">           3. null&amp;undefined:都是false</span></span><br><span class="line"><span class="regexp">           4. 对象：所有对象都为true</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    6. 三元运算符</span></span><br><span class="line"><span class="regexp">        表达式? 值1:值2;</span></span><br><span class="line"><span class="regexp">判断表达式的值，如果是true则取值1，如果是false则取值2；</span></span><br><span class="line"><span class="regexp">        var c = 3 &gt; 4 ? 1:0;/</span><span class="regexp">/c=0</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">6. 流程控制语句：</span></span><br><span class="line"><span class="regexp">    1. if...else...</span></span><br><span class="line"><span class="regexp">    2. switch:</span></span><br><span class="line"><span class="regexp">        * 在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)</span></span><br><span class="line"><span class="regexp">            * switch(变量):</span></span><br><span class="line"><span class="regexp">                case 值:</span></span><br><span class="line"><span class="regexp">        * 在JS中,switch语句可以接受任意的原始数据类型</span></span><br><span class="line"><span class="regexp">    3. while</span></span><br><span class="line"><span class="regexp">    4. do...while</span></span><br><span class="line"><span class="regexp">    5. for</span></span><br><span class="line"><span class="regexp">7. JS特殊语法：</span></span><br><span class="line"><span class="regexp">    1. 语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</span></span><br><span class="line"><span class="regexp">    2. 变量的定义使用var关键字，也可以不使用</span></span><br><span class="line"><span class="regexp">        * 用var： 定义的变量是局部变量</span></span><br><span class="line"><span class="regexp">        * 不用var：定义的变量是全局变量(不建议)</span></span><br></pre></td></tr></table></figure><h5 id="ECMAScript基本对象"><a href="#ECMAScript基本对象" class="headerlink" title="ECMAScript基本对象"></a>ECMAScript基本对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">Function</span>：函数(方法)对象</span><br><span class="line">    <span class="number">1.</span> 创建：</span><br><span class="line">        <span class="number">1.</span> <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(形式参数列表,方法体);  <span class="comment">//忘掉吧</span></span><br><span class="line">        <span class="number">2.</span> <span class="function"><span class="keyword">function</span> 方法名称(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">                方法体</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="number">3.</span> <span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">                方法体</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="number">2.</span> 方法：</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span> 属性：</span><br><span class="line">        length:代表形参的个数</span><br><span class="line">    <span class="number">4.</span> 特点：</span><br><span class="line">        <span class="number">1.</span> 方法定义是，形参的类型不用写,返回值类型也不写。</span><br><span class="line">        <span class="number">2.</span> 方法是一个对象，如果定义名称相同的方法，会覆盖</span><br><span class="line">        <span class="number">3.</span> 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span><br><span class="line">        <span class="number">4.</span> 在方法声明中有一个隐藏的内置对象（数组），<span class="built_in">arguments</span>,封装所有的实际参数</span><br><span class="line">    <span class="number">5.</span> 调用：</span><br><span class="line">        方法名称(实际参数列表);</span><br><span class="line">    <span class="comment">//求任意个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sum = add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="built_in">Array</span>:数组对象</span><br><span class="line">    <span class="number">1.</span> 创建：</span><br><span class="line">        <span class="number">1.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(元素列表);</span><br><span class="line">        <span class="number">2.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(默认长度);</span><br><span class="line">        <span class="number">3.</span> <span class="keyword">var</span> arr = [元素列表];</span><br><span class="line">        <span class="comment">//数组创建方式</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">var</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="number">2.</span> 方法</span><br><span class="line">        join(参数):将数组中的元素按照指定的分隔符拼接为字符串</span><br><span class="line">        push()向数组的末尾添加一个或更多元素，并返回新的长度。</span><br><span class="line">    <span class="number">3.</span> 属性</span><br><span class="line">        length:数组的长度</span><br><span class="line">    <span class="number">4.</span> 特点：</span><br><span class="line">        <span class="number">1.</span> JS中，数组元素的类型可变的。</span><br><span class="line">        <span class="number">2.</span> JS中，数组长度可变的。</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">"abc"</span>, <span class="literal">true</span>];</span><br><span class="line">    <span class="built_in">document</span>.write(arr + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//1,abc,true</span></span><br><span class="line">    <span class="built_in">document</span>.write(arr[<span class="number">10</span>] +<span class="string">"&lt;br&gt;"</span>);<span class="comment">//undefined</span></span><br><span class="line">    arr[<span class="number">10</span>] = <span class="string">"hehe"</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(arr[<span class="number">10</span>] + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//hehe</span></span><br><span class="line">    <span class="built_in">document</span>.write(arr[<span class="number">9</span>] + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//undefined</span></span><br><span class="line">    <span class="comment">//alert(arr.length);//11</span></span><br><span class="line">    <span class="built_in">document</span>.write(arr.join(<span class="string">"--"</span>) + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//1--abc--true----------------hehe</span></span><br><span class="line">    arr.push(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(arr.join(<span class="string">"--"</span>) + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//1--abc--true----------------hehe--11</span></span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span> <span class="built_in">Boolean</span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">Date</span>：日期对象</span><br><span class="line">    <span class="number">1.</span> 创建：</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="number">2.</span> 方法：</span><br><span class="line">        toLocaleString()：返回当前date对象对应的时间本地字符串格式</span><br><span class="line">        getTime():获取毫秒值。返回当前如期对象描述的时间到<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日零点的毫秒值差   </span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">document</span>.write(date + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//Sat Mar 07 2020 18:09:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">    <span class="built_in">document</span>.write(date.toLocaleString() + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//2020/3/7 下午6:09:13</span></span><br><span class="line">    <span class="built_in">document</span>.write(date.getTime() + <span class="string">"&lt;br&gt;"</span>);<span class="comment">//1583575753731</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="built_in">Math</span>：数学对象</span><br><span class="line">    <span class="number">1.</span> 创建：</span><br><span class="line">        * 特点：<span class="built_in">Math</span>对象不用创建，直接使用。  <span class="built_in">Math</span>.方法名();</span><br><span class="line">    <span class="number">2.</span> 方法：</span><br><span class="line">        random():返回 <span class="number">0</span> ~ <span class="number">1</span> 之间的随机数。 含<span class="number">0</span>不含<span class="number">1</span></span><br><span class="line">        ceil(x)：对数进行上舍入。</span><br><span class="line">        floor(x)：对数进行下舍入。</span><br><span class="line">        round(x)：把数四舍五入为最接近的整数。</span><br><span class="line">    <span class="number">3.</span> 属性：</span><br><span class="line">        PI</span><br><span class="line">    <span class="comment">//取 1~100之间的随机整数</span></span><br><span class="line">    <span class="keyword">var</span> number = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">100</span>)) + <span class="number">1</span>;        </span><br><span class="line">        </span><br><span class="line"><span class="number">6.</span> <span class="built_in">Number</span></span><br><span class="line"><span class="number">7.</span> <span class="built_in">String</span></span><br><span class="line"><span class="number">8.</span> <span class="built_in">RegExp</span>：正则表达式对象</span><br><span class="line">    <span class="number">1.</span> 正则表达式：定义字符串的组成规则。</span><br><span class="line">        <span class="number">1.</span> 单个字符:[]</span><br><span class="line">            如： [a] [ab] [a-zA-Z0<span class="number">-9</span>_]</span><br><span class="line">            * 特殊符号代表特殊含义的单个字符:</span><br><span class="line">                \d:单个数字字符 [<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">                \w:单个单词字符[a-zA-Z0<span class="number">-9</span>_]</span><br><span class="line">        <span class="number">2.</span> 量词符号：</span><br><span class="line">            ?：表示出现<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">            *：表示出现<span class="number">0</span>次或多次</span><br><span class="line">            +：出现<span class="number">1</span>次或多次</span><br><span class="line">            &#123;m,n&#125;:表示 m&lt;= 数量 &lt;= n</span><br><span class="line">                * m如果缺省： &#123;,n&#125;:最多n次</span><br><span class="line">                * n如果缺省：&#123;m,&#125; 最少m次</span><br><span class="line">        <span class="number">3.</span> 开始结束符号</span><br><span class="line">            * ^:开始</span><br><span class="line">            * $:结束</span><br><span class="line">    <span class="number">2.</span> 正则对象：</span><br><span class="line">        <span class="number">1.</span> 创建</span><br><span class="line">            <span class="number">1.</span> <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则表达式"</span>);</span><br><span class="line">            <span class="number">2.</span> <span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>;</span><br><span class="line">        <span class="number">2.</span> 方法</span><br><span class="line">            <span class="number">1.</span> test(参数):验证指定的字符串是否符合正则定义的规范</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^\\w&#123;6,12&#125;$"</span>);<span class="comment">//var reg = /^\w&#123;6,12&#125;$/;</span></span><br><span class="line">    <span class="keyword">var</span> username = <span class="string">"zhangsan"</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = reg.test(username);  </span><br><span class="line">                         </span><br><span class="line"><span class="number">9.</span> Global</span><br><span class="line">    <span class="number">1.</span> 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。方法名();</span><br><span class="line">    <span class="number">2.</span> 方法：</span><br><span class="line">        <span class="built_in">encodeURI</span>():url编码</span><br><span class="line">        <span class="built_in">encodeURI</span>(<span class="string">"中文"</span>);</span><br><span class="line">        <span class="built_in">decodeURI</span>():url解码</span><br><span class="line">        <span class="built_in">encodeURIComponent</span>():url编码,编码的字符更多</span><br><span class="line">        <span class="built_in">decodeURIComponent</span>():url解码</span><br><span class="line">        <span class="built_in">parseInt</span>():将字符串转为数字</span><br><span class="line">            * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</span><br><span class="line">        <span class="built_in">isNaN</span>():判断一个值是否是<span class="literal">NaN</span></span><br><span class="line">            * <span class="literal">NaN</span>六亲不认，连自己都不认。<span class="literal">NaN</span>参与的==比较全部问<span class="literal">false</span></span><br><span class="line">        <span class="built_in">eval</span>():将JavaScript字符串，并把它作为脚本代码来执行。</span><br><span class="line">            <span class="built_in">eval</span>(<span class="string">"alert(123)"</span>);</span><br><span class="line">    <span class="number">3.</span> URL编码</span><br><span class="line">       传智播客 =  %E4%BC%A0%E6%<span class="number">99</span>%BA%E6%<span class="number">92</span>%AD%E5%AE%A2</span><br></pre></td></tr></table></figure><h5 id="BOM：浏览器对象模型"><a href="#BOM：浏览器对象模型" class="headerlink" title="BOM：浏览器对象模型"></a>BOM：浏览器对象模型</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 概念：Browser <span class="built_in">Object</span> Model 浏览器对象模型</span><br><span class="line">* 将浏览器的各个组成部分封装成对象。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 组成：</span><br><span class="line">* Window：窗口对象</span><br><span class="line">* Navigator：浏览器对象</span><br><span class="line">* Screen：显示器屏幕对象</span><br><span class="line">* History：历史记录对象</span><br><span class="line">* Location：地址栏对象</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Window：窗口对象</span><br><span class="line">    <span class="number">1.</span> 创建</span><br><span class="line">    <span class="number">2.</span> 方法</span><br><span class="line">         <span class="number">1.</span> 与弹出框有关的方法：</span><br><span class="line">            alert()显示带有一段消息和一个确认按钮的警告框。</span><br><span class="line">            confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。</span><br><span class="line">                * 如果用户点击确定按钮，则方法返回<span class="literal">true</span></span><br><span class="line">                * 如果用户点击取消按钮，则方法返回<span class="literal">false</span></span><br><span class="line">            prompt()显示可提示用户输入的对话框。</span><br><span class="line">                * 返回值：获取用户输入的值</span><br><span class="line">             alert(<span class="string">"hello window"</span>);</span><br><span class="line">             <span class="built_in">window</span>.alert(<span class="string">"hello a"</span>)</span><br><span class="line">             <span class="comment">//确认框</span></span><br><span class="line">             <span class="keyword">var</span> flag = confirm(<span class="string">"您确定要退出吗？"</span>);</span><br><span class="line">             <span class="comment">//输入框</span></span><br><span class="line">             <span class="keyword">var</span> result =  prompt(<span class="string">"请输入用户名"</span>);</span><br><span class="line">         <span class="number">2.</span> 与打开关闭有关的方法：</span><br><span class="line">            close()关闭浏览器窗口。</span><br><span class="line">                * 谁调用我 ，我关谁</span><br><span class="line">            open()打开一个新的浏览器窗口</span><br><span class="line">                * 返回新的Window对象</span><br><span class="line">             <span class="comment">//打开新窗口</span></span><br><span class="line">             <span class="keyword">var</span> openBtn = <span class="built_in">document</span>.getElementById(<span class="string">"openBtn"</span>);</span><br><span class="line">             <span class="keyword">var</span> newWindow;</span><br><span class="line">             openBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//打开新窗口</span></span><br><span class="line">                 newWindow = open(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//关闭新窗口</span></span><br><span class="line">             <span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.getElementById(<span class="string">"closeBtn"</span>);</span><br><span class="line">             closeBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 关闭新窗口</span></span><br><span class="line">                 newWindow.close();</span><br><span class="line">             &#125;</span><br><span class="line">         <span class="number">3.</span> 与定时器有关的方式</span><br><span class="line">            setTimeout()在指定的毫秒数后调用函数或计算表达式。</span><br><span class="line">                * 参数：</span><br><span class="line">                    <span class="number">1.</span> js代码或者方法对象</span><br><span class="line">                    <span class="number">2.</span> 毫秒值</span><br><span class="line">                * 返回值：唯一标识，用于取消定时器</span><br><span class="line">            clearTimeout()取消由 setTimeout() 方法设置的 timeout。</span><br><span class="line">            setInterval()按照指定的周期（以毫秒计）来调用函数或计算表达式。</span><br><span class="line">            clearInterval()取消由 setInterval() 设置的 timeout。</span><br><span class="line">            setTimeout(<span class="string">"fun();"</span>,<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">var</span> id = setTimeout(fun,<span class="number">2000</span>);</span><br><span class="line">            clearTimeout(id);</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'boom~~'</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span> 属性：</span><br><span class="line">        <span class="number">1.</span> 获取其他BOM对象：</span><br><span class="line">            history</span><br><span class="line">                <span class="keyword">var</span> h1 =  <span class="built_in">window</span>.history;</span><br><span class="line">     <span class="keyword">var</span> h2 = history;</span><br><span class="line">            location</span><br><span class="line">            <span class="built_in">window</span>.location</span><br><span class="line">            Navigator</span><br><span class="line">            Screen:</span><br><span class="line">        <span class="number">2.</span> 获取DOM对象:<span class="built_in">document</span></span><br><span class="line">            <span class="built_in">window</span>.document.getElementById(<span class="string">"openBtn"</span>);</span><br><span class="line">    <span class="number">4.</span> 特点</span><br><span class="line">        * Window对象不需要创建可以直接使用 <span class="built_in">window</span>使用。 <span class="built_in">window</span>.方法名();</span><br><span class="line">        * <span class="built_in">window</span>引用可以省略。  方法名();</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> Location：地址栏对象</span><br><span class="line"><span class="number">1.</span> 创建(获取)：</span><br><span class="line"><span class="number">1.</span> <span class="built_in">window</span>.location</span><br><span class="line"><span class="number">2.</span> location</span><br><span class="line"><span class="number">2.</span> 方法：</span><br><span class="line">* reload()重新加载当前文档。刷新</span><br><span class="line">            <span class="comment">//3.刷新页面</span></span><br><span class="line">        location.reload();</span><br><span class="line"><span class="number">3.</span> 属性</span><br><span class="line">* href设置或返回完整的 URL。</span><br><span class="line">            <span class="comment">//3.去访问www.itcast.cn官网</span></span><br><span class="line">        location.href = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        </span><br><span class="line"><span class="number">5.</span> History：历史记录对象</span><br><span class="line">    <span class="number">1.</span> 创建(获取)：</span><br><span class="line">        <span class="number">1.</span> <span class="built_in">window</span>.history</span><br><span class="line">        <span class="number">2.</span> history</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> 方法：</span><br><span class="line">        * back()加载 history 列表中的前一个 URL。</span><br><span class="line">        * forward()加载 history 列表中的下一个 URL。</span><br><span class="line">        * go(参数)加载 history 列表中的某个具体页面。</span><br><span class="line">            * 参数：</span><br><span class="line">                * 正数：前进几个历史记录</span><br><span class="line">                * 负数：后退几个历史记录</span><br><span class="line">            <span class="comment">//前进</span></span><br><span class="line">            <span class="comment">// history.forward();</span></span><br><span class="line">            history.go(<span class="number">1</span>);</span><br><span class="line">    <span class="number">3.</span> 属性：</span><br><span class="line">        * length返回当前窗口历史列表中的 URL 数量。</span><br><span class="line">            <span class="comment">//3.获取当前窗口历史记录个数</span></span><br><span class="line">        <span class="keyword">var</span> length = history.length;</span><br></pre></td></tr></table></figure><h5 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM: 文档对象模型"></a>DOM: 文档对象模型</h5><p><img src="/../assets/pic/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200225173231507.png" alt="image-20200225173231507"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">* 概念： Document <span class="built_in">Object</span> Model 文档对象模型</span><br><span class="line">* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</span><br><span class="line">    * 获取页面标签(元素)对象：Element</span><br><span class="line">        * <span class="built_in">document</span>.getElementById(<span class="string">"id值"</span>):通过元素的id获取元素对象</span><br><span class="line">        </span><br><span class="line">* W3C DOM 标准被分为 <span class="number">3</span> 个不同的部分：</span><br><span class="line">* 核心 DOM - 针对任何结构化文档的标准模型</span><br><span class="line">* Document：文档对象</span><br><span class="line">* Element：元素对象</span><br><span class="line">* Attribute：属性对象</span><br><span class="line">* Text：文本对象</span><br><span class="line">* Comment:注释对象</span><br><span class="line">* Node：节点对象，其他<span class="number">5</span>个的父对象</span><br><span class="line">* XML DOM - 针对 XML 文档的标准模型</span><br><span class="line">* HTML DOM - 针对 HTML 文档的标准模型</span><br><span class="line"></span><br><span class="line">* 核心DOM模型：</span><br><span class="line">* Document：文档对象</span><br><span class="line"><span class="number">1.</span> 创建(获取)：在html dom模型中可以使用<span class="built_in">window</span>对象来获取</span><br><span class="line"><span class="number">1.</span> <span class="built_in">window</span>.document</span><br><span class="line"><span class="number">2.</span> <span class="built_in">document</span></span><br><span class="line"><span class="number">2.</span> 方法：</span><br><span class="line"><span class="number">1.</span> 获取Element对象：</span><br><span class="line"><span class="number">1.</span> getElementById()： 根据id属性值获取元素对象。id属性值一般唯一</span><br><span class="line"><span class="number">2.</span> getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</span><br><span class="line"><span class="number">3.</span> getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line"><span class="number">4.</span> getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">"id值"</span>):通过元素的id获取元素对象</span><br><span class="line">                <span class="comment">//2.根据元素名称获取元素对象们。返回值是一个数组</span></span><br><span class="line">                    <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line">                    <span class="comment">//3.根据Class属性值获取元素对象们。返回值是一个数组</span></span><br><span class="line">                    <span class="keyword">var</span> div_cls = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"cls1"</span>);</span><br><span class="line">                    <span class="comment">//4.根据name属性值获取元素对象们。返回值是一个数组</span></span><br><span class="line">                    <span class="keyword">var</span> ele_username = <span class="built_in">document</span>.getElementsByName(<span class="string">"username"</span>);</span><br><span class="line"><span class="number">2.</span> 创建其他DOM对象：</span><br><span class="line">createAttribute(name)</span><br><span class="line">            createComment()</span><br><span class="line">            createElement()</span><br><span class="line">            createTextNode()</span><br><span class="line">    <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">"table"</span>);</span><br><span class="line"></span><br><span class="line">* Element：元素对象</span><br><span class="line"><span class="number">1.</span> 获取/创建：通过<span class="built_in">document</span>来获取和创建</span><br><span class="line"><span class="number">2.</span> 方法：</span><br><span class="line"><span class="number">1.</span> removeAttribute()：删除属性</span><br><span class="line"><span class="number">2.</span> setAttribute()：设置属性</span><br><span class="line">            <span class="comment">//获取a标签并设置属性</span></span><br><span class="line">            <span class="keyword">var</span> element_a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>];</span><br><span class="line">            element_a.setAttribute(<span class="string">"href"</span>, <span class="string">"https://www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line">* Node：节点对象，其他<span class="number">5</span>个的父对象</span><br><span class="line">* 特点：所有dom对象都可以被认为是一个节点</span><br><span class="line">* 方法：</span><br><span class="line">* CRUD dom树：</span><br><span class="line">* appendChild()：向节点的子节点列表的结尾添加新的子节点。</span><br><span class="line">* removeChild()：删除（并返回）当前节点的指定子节点。</span><br><span class="line">* replaceChild()：用新节点替换一个子节点。</span><br><span class="line">* 属性：</span><br><span class="line">* parentNode 返回节点的父节点。</span><br><span class="line">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        <span class="keyword">var</span> div3 = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">        div3.setAttribute(<span class="string">"id"</span>, <span class="string">"div3"</span>);</span><br><span class="line">        div1.appendChild(div3);</span><br><span class="line"></span><br><span class="line">* HTML DOM</span><br><span class="line"><span class="number">1.</span> 标签体的设置和获取：innerHTML</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        <span class="comment">//div标签中追加一个文本输入框</span></span><br><span class="line">        div.innerHTML += <span class="string">"&lt;input type='text'&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 使用html元素对象的属性</span><br><span class="line">        <span class="comment">//2.获取文本框的内容</span></span><br><span class="line">        <span class="keyword">var</span> id = <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).value;</span><br><span class="line"><span class="number">3.</span> 控制元素样式</span><br><span class="line"><span class="number">1.</span> 使用元素的style属性来设置</span><br><span class="line">            <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">            <span class="comment">//修改样式方式1</span></span><br><span class="line">            div1.style.border = <span class="string">"1px solid red"</span>;</span><br><span class="line">div1.style.width = <span class="string">"200px"</span>;</span><br><span class="line"><span class="comment">//font-size--&gt; fontSize</span></span><br><span class="line">div1.style.fontSize = <span class="string">"20px"</span>;</span><br><span class="line"><span class="number">2.</span> 提前定义好类选择器的样式，通过元素的className属性来设置其<span class="class"><span class="keyword">class</span>属性值。</span></span><br></pre></td></tr></table></figure><h5 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">* 概念：某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line">* 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line">* 事件源：组件。如： 按钮 文本输入框...</span><br><span class="line">* 监听器：代码。</span><br><span class="line">* 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br><span class="line">* 功能： 某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line">* 造句：  xxx被xxx,我就xxx</span><br><span class="line">* 我方水晶被摧毁后，我就责备对友。</span><br><span class="line">* 敌方水晶被摧毁后，我就夸奖自己。</span><br><span class="line"></span><br><span class="line">* 如何绑定事件</span><br><span class="line"><span class="number">1.</span> 直接在html标签上，指定事件的属性(操作)，属性值就是js代码</span><br><span class="line"><span class="number">1.</span> 事件：onclick--- 单击事件</span><br><span class="line"><span class="number">2.</span> 通过js获取元素对象，指定事件属性，设置一个函数</span><br><span class="line">        &lt;img id=<span class="string">"light2"</span> src=<span class="string">"img/off.gif"</span>&gt;</span><br><span class="line">        &lt;img id=<span class="string">"light"</span> onclick=<span class="string">"fun();"</span> src=<span class="string">"img/off.gif"</span>&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="comment">//1.获取light2对象</span></span><br><span class="line">            <span class="keyword">var</span> light2 = <span class="built_in">document</span>.getElementById(<span class="string">"light2"</span>);</span><br><span class="line">            <span class="comment">//2.绑定事件</span></span><br><span class="line">            light2.onclick = fun2;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">fun()&#123;&#125;</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">* 常见的事件：</span></span><br><span class="line"><span class="regexp">1. 点击事件：</span></span><br><span class="line"><span class="regexp">1. onclick：单击事件</span></span><br><span class="line"><span class="regexp">2. ondblclick：双击事件</span></span><br><span class="line"><span class="regexp">2. 焦点事件</span></span><br><span class="line"><span class="regexp">1. onblur：失去焦点</span></span><br><span class="line"><span class="regexp">* 一般用于表单验证</span></span><br><span class="line"><span class="regexp">2. onfocus:元素获得焦点。</span></span><br><span class="line"><span class="regexp">3. 加载事件：</span></span><br><span class="line"><span class="regexp">1. onload：一张页面或一幅图像完成加载。</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/2.加载完成事件  onload</span></span><br><span class="line"><span class="regexp">    window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/1.失去焦点事件</span></span><br><span class="line"><span class="regexp">        document.getElementById("username").onblur = function()&#123;</span></span><br><span class="line"><span class="regexp">            alert("失去焦点了...");</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">4. 鼠标事件：</span></span><br><span class="line"><span class="regexp">1. onmousedown鼠标按钮被按下。</span></span><br><span class="line"><span class="regexp">* 定义方法时，定义一个形参，接受event对象，event对象button属性获取鼠标哪个按键被点击</span></span><br><span class="line"><span class="regexp">2. onmouseup鼠标按键被松开。</span></span><br><span class="line"><span class="regexp">3. onmousemove鼠标被移动。</span></span><br><span class="line"><span class="regexp">4. onmouseover鼠标移到某元素之上。</span></span><br><span class="line"><span class="regexp">5. onmouseout鼠标从某元素移开。</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/3.绑定鼠标移动到元素之上事件</span></span><br><span class="line"><span class="regexp">            document.getElementById("username").onmouseover = function()&#123;</span></span><br><span class="line"><span class="regexp">                alert("鼠标来了....");</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">5. 键盘事件：</span></span><br><span class="line"><span class="regexp">1. onkeydown某个键盘按键被按下。</span></span><br><span class="line"><span class="regexp">2. onkeyup某个键盘按键被松开。</span></span><br><span class="line"><span class="regexp">3. onkeypress某个键盘按键被按下并松开。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">6. 选择和改变</span></span><br><span class="line"><span class="regexp">1. onchange域的内容被改变。</span></span><br><span class="line"><span class="regexp">2. onselect文本被选中。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">7. 表单事件：</span></span><br><span class="line"><span class="regexp">1. onsubmit确认按钮被点击。</span></span><br><span class="line"><span class="regexp">* 方法返回false则表单阻止提交</span></span><br><span class="line"><span class="regexp">            document.getElementById("form").onsubmit = function()&#123;              </span></span><br><span class="line"><span class="regexp">                var flag = false;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/校验用户名格式是否正确代码</span></span><br><span class="line"><span class="regexp">                return flag;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">2. onreset重置按钮被点击。</span></span><br></pre></td></tr></table></figure><h5 id="全选案例"><a href="#全选案例" class="headerlink" title="全选案例"></a>全选案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.给全选按钮绑定单击事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"selectAll"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//全选</span></span><br><span class="line">    <span class="comment">//1.获取所有的checkbox</span></span><br><span class="line">    <span class="keyword">var</span> cbs = <span class="built_in">document</span>.getElementsByName(<span class="string">"cb"</span>);</span><br><span class="line">    <span class="comment">//2.遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length; i++) &#123;</span><br><span class="line">        <span class="comment">//3.设置每一个cb的状态为选中  checked</span></span><br><span class="line">        cbs[i].checked = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="轮播图案例"><a href="#轮播图案例" class="headerlink" title="轮播图案例"></a>轮播图案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">"img"</span> src=<span class="string">"img/banner_1.jpg"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：</span></span><br><span class="line"><span class="comment">            1.在页面上使用img标签展示图片</span></span><br><span class="line"><span class="comment">            2.定义一个方法，修改图片对象的src属性</span></span><br><span class="line"><span class="comment">            3.定义一个定时器，每隔3秒调用方法一次。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//修改图片src属性</span></span><br><span class="line">    <span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        number++;</span><br><span class="line">        <span class="comment">//判断number是否大于3</span></span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取img对象</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span><br><span class="line">        img.src = <span class="string">"img/banner_"</span> + number + <span class="string">".jpg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.定义定时器</span></span><br><span class="line">    setInterval(fun, <span class="number">3000</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="表单校验案例"><a href="#表单校验案例" class="headerlink" title="表单校验案例"></a>表单校验案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*1.给表单绑定onsubmit事件。监听器中判断每一个方法校验的结果。</span></span><br><span class="line"><span class="comment">          如果都为true，则监听器方法返回true</span></span><br><span class="line"><span class="comment">          如果有一个为false，则监听器方法返回false</span></span><br><span class="line"><span class="comment">      2.定义一些方法分别校验各个表单项。</span></span><br><span class="line"><span class="comment">      3.给各个表单项绑定onblur事件。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.给表单绑定onsubmit事件</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"form"</span>).onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkUsername() &amp;&amp; checkPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给用户名和密码框分别绑定离焦事件</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).onblur = checkUsername;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"password"</span>).onblur = checkPassword;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验用户名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取用户名的值</span></span><br><span class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).value;</span><br><span class="line">    <span class="comment">//2.定义正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> reg_username = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="line">    <span class="comment">//3.判断值是否符合正则的规则</span></span><br><span class="line">    <span class="keyword">var</span> flag = reg_username.test(username);</span><br><span class="line">    <span class="comment">//4.提示信息</span></span><br><span class="line">    <span class="keyword">var</span> s_username = <span class="built_in">document</span>.getElementById(<span class="string">"s_username"</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//提示绿色对勾</span></span><br><span class="line">        s_username.innerHTML = <span class="string">"&lt;img width='35' height='25' src='img/gou.png'/&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//提示红色用户名有误</span></span><br><span class="line">        s_username.innerHTML = <span class="string">"用户名格式有误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验密码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取用户名的值</span></span><br><span class="line">    <span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">"password"</span>).value;</span><br><span class="line">    <span class="comment">//2.定义正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> reg_password = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="line">    <span class="comment">//3.判断值是否符合正则的规则</span></span><br><span class="line">    <span class="keyword">var</span> flag = reg_password.test(password);</span><br><span class="line">    <span class="comment">//4.提示信息</span></span><br><span class="line">    <span class="keyword">var</span> s_password = <span class="built_in">document</span>.getElementById(<span class="string">"s_password"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//提示绿色对勾</span></span><br><span class="line">        s_password.innerHTML = <span class="string">"&lt;img width='35' height='25' src='img/gou.png'/&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//提示红色用户名有误</span></span><br><span class="line">        s_password.innerHTML = <span class="string">"密码格式有误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="js加载顺序"><a href="#js加载顺序" class="headerlink" title="js加载顺序"></a>js加载顺序</h5><p>因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件，所以，如果你的javascript想操作后面的DOM元素，基本上来说，浏览器都会报错说对象找不到。因为Javascript执行时，后面的HTML被阻塞住了，DOM树时还没有后面的DOM结点。所以程序也就报错了。</p><p>head里的\<script>标签会阻塞后续资源的载入以及整个页面的生成。很多网站把javascript放在网页的最后面了，要么就是动用了window.onload或是docmuemt ready之类的事件。</p><h5 id="js加载方式优化"><a href="#js加载方式优化" class="headerlink" title="js加载方式优化"></a>js加载方式优化</h5><p>1 通过动态加载引入js外部文件来提高网页加载速度</p><p>2 将所有需要的\<script>标签都放在\</body>之前</p><p>​    确保脚本执行之前完成页面渲染而不会造成页面堵塞问题</p><p>3 合并JS代码</p><p>​    尽可能少的使用script标签,代码写入一个js文件中，让页面只使用一次\<script>\</script>标签引入</p><p>4 无堵塞加载JS</p><p>​    通过给script标签增加 defer属性或者是 async 属性来实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"file.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>async</strong>和<strong>defer</strong>不同之处是<strong>async</strong>加载完成后会自动执行脚本，<strong>defer</strong>加载完成后需要等待页面也加载完成才会执行代码</p><p>5 动态创建script来加载-推荐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJS</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>),</span><br><span class="line">        fn = callback || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    <span class="comment">//IE</span></span><br><span class="line">    <span class="keyword">if</span> (script.readyState) &#123;</span><br><span class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (script.readyState == <span class="string">'loaded'</span> || script.readyState == <span class="string">'complete'</span>) &#123;</span><br><span class="line">                script.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//其他浏览器</span></span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line">loadJS(<span class="string">'file.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6 可以封装成类库，单独引入。</p><p>该原理实现的也有很多不错的js类库可以使用，如<strong>LazyLoad.js</strong>，支持数组的形式引入，打开浏览器在network中可看到js是同步加载的</p><p>7 XHR加载,使用ajax方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'file.js'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">            script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">            script.text = xhr.responseText;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="Bootstrap-前端开发框架"><a href="#Bootstrap-前端开发框架" class="headerlink" title="Bootstrap: 前端开发框架"></a>Bootstrap: 前端开发框架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</span><br><span class="line"></span><br><span class="line">* 框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</span><br><span class="line">* 好处：</span><br><span class="line">  1. 定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</span><br><span class="line">  2. 响应式布局:同一套页面可以兼容不同分辨率的设备。</span><br><span class="line"></span><br><span class="line">2. 快速入门</span><br><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，必须放在前边) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3. 在线引入</span><br><span class="line">    <span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">* 同一套页面可以兼容不同分辨率的设备。</span><br><span class="line">* 实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</span><br><span class="line">* 步骤：</span><br><span class="line">1. 定义容器。相当于之前的<span class="selector-tag">table</span>、</span><br><span class="line">* 容器分类：</span><br><span class="line">1. <span class="selector-tag">container</span>：两边留白</span><br><span class="line">2. <span class="selector-tag">container-fluid</span>：每一种设备都是100%宽度</span><br><span class="line">2. 定义行。相当于之前的<span class="selector-tag">tr</span>   样式：<span class="selector-tag">row</span></span><br><span class="line">3. 定义元素。指定该元素在不同的设备上，所占的格子数目。样式：<span class="selector-tag">col-</span>设备代号<span class="selector-tag">-</span>格子数目</span><br><span class="line">* 设备代号：</span><br><span class="line">1. <span class="selector-tag">xs</span>：超小屏幕 手机 (&lt;768<span class="selector-tag">px</span>)：<span class="selector-tag">col-xs-12</span></span><br><span class="line">2. <span class="selector-tag">sm</span>：小屏幕 平板 (≥768<span class="selector-tag">px</span>)</span><br><span class="line">3. <span class="selector-tag">md</span>：中等屏幕 桌面显示器 (≥992<span class="selector-tag">px</span>)</span><br><span class="line">4. <span class="selector-tag">lg</span>：大屏幕 大桌面显示器 (≥1200<span class="selector-tag">px</span>)</span><br><span class="line"></span><br><span class="line">* 注意：</span><br><span class="line">1. 一行中如果格子数目超过12，则超出部分自动换行</span><br><span class="line">2. 栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备</span><br><span class="line">3. 如真实设备宽度小于设置栅格类属性的设备代码的最小值，一个元素沾满一整行</span><br><span class="line"></span><br><span class="line">    &lt;!<span class="selector-tag">--2</span>.定义行<span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">        &lt;!<span class="selector-tag">--3</span>.定义元素</span><br><span class="line">            在大显示器一行12个格子</span><br><span class="line">            在<span class="selector-tag">pad</span>上一行6个格子</span><br><span class="line">        <span class="selector-tag">--</span>&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-lg-1 col-sm-2 inner"&gt;栅格&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">多看文档！直接从文档粘贴并修改</span><br><span class="line">1. 全局<span class="selector-tag">CSS</span>样式：</span><br><span class="line">* 按钮：class="btn btn-default"</span><br><span class="line">* 图片：</span><br><span class="line">*  class="img-responsive"：图片在任意尺寸都占100%</span><br><span class="line">*  图片形状</span><br><span class="line">*  &lt;img src="..." alt="..." class="img-rounded"&gt;：方形</span><br><span class="line">*  &lt;img src="..." alt="..." class="img-circle"&gt; ： 圆形</span><br><span class="line">*  &lt;img src="..." alt="..." class="img-thumbnail"&gt; ：相框</span><br><span class="line">* 表格</span><br><span class="line">* <span class="selector-tag">table</span></span><br><span class="line">* <span class="selector-tag">table-bordered</span></span><br><span class="line">* <span class="selector-tag">table-hover</span></span><br><span class="line">* 表单</span><br><span class="line">* 给表单项添加：class="form-control" </span><br><span class="line">2. 组件：</span><br><span class="line">* 导航条</span><br><span class="line">* 分页条</span><br><span class="line">3. 插件：</span><br><span class="line">* 轮播图</span><br></pre></td></tr></table></figure><h4 id="XML-可扩展标记语言"><a href="#XML-可扩展标记语言" class="headerlink" title="XML: 可扩展标记语言"></a>XML: 可扩展标记语言</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 概念：Extensible Markup Language 可扩展标记语言</span><br><span class="line">* 可扩展：标签都是自定义的。 <span class="tag">&lt;<span class="name">user</span>&gt;</span>  <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">* 功能</span><br><span class="line">* 存储数据</span><br><span class="line">1. 配置文件</span><br><span class="line">2. 在网络中传输</span><br><span class="line">* xml与html的区别</span><br><span class="line">1. xml标签都是自定义的，html标签是预定义。</span><br><span class="line">2. xml的语法严格，html语法松散</span><br><span class="line">3. xml是存储数据的，html是展示数据</span><br><span class="line">* w3c:万维网联盟</span><br></pre></td></tr></table></figure><h5 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">* 基本语法：</span><br><span class="line">    1. xml文档的后缀名 .xml</span><br><span class="line">    2. xml第一行必须定义为文档声明</span><br><span class="line">    3. xml文档中有且仅有一个根标签</span><br><span class="line">    4. 属性值必须使用引号(单双都可)引起来</span><br><span class="line">    5. 标签必须正确关闭</span><br><span class="line">    6. xml标签名称区分大小写</span><br><span class="line"></span><br><span class="line">* 快速入门：</span><br><span class="line">    <span class="meta">&lt;?xml version='1.0' ?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">'1'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">'2'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">* 组成部分：</span><br><span class="line">    1. 文档声明</span><br><span class="line">        1. 格式：<span class="meta">&lt;?xml 属性列表 ?&gt;</span></span><br><span class="line">        2. 属性列表：</span><br><span class="line">            * version：版本号，必须的属性</span><br><span class="line">            * encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</span><br><span class="line">            * standalone：是否独立</span><br><span class="line">                yes：不依赖其他文件</span><br><span class="line">                no：依赖其他文件</span><br><span class="line">    2. 指令(了解)：结合css的</span><br><span class="line">        <span class="meta">&lt;?xml-stylesheet type="text/css" href="a.css" ?&gt;</span></span><br><span class="line">    3. 标签：标签名称自定义的</span><br><span class="line">        * 规则：</span><br><span class="line">            * 名称可以包含字母、数字以及其他的字符 </span><br><span class="line">            * 名称不能以数字或者标点符号开始 </span><br><span class="line">            * 名称不能以字母 xml（或者 XML、Xml 等等）开始 </span><br><span class="line">            * 名称不能包含空格 </span><br><span class="line">    4. 属性：</span><br><span class="line">        id属性值唯一</span><br><span class="line">    5. 文本：</span><br><span class="line">        * CDATA区：在该区域中的数据会被原样展示</span><br><span class="line">            * 格式：  &lt;![CDATA[ 数据 ]]&gt;</span><br></pre></td></tr></table></figure><h5 id="xml约束"><a href="#xml约束" class="headerlink" title="xml约束"></a>xml约束</h5><p><img src="/../assets/pic/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BA%A6%E6%9D%9F.bmp" alt="xml约束"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">XML约束：规定xml文档的书写规则</span><br><span class="line">* 作为框架的使用者(程序员)：</span><br><span class="line">    1. 能够在xml中引入约束文档</span><br><span class="line">    2. 能够简单的读懂约束文档</span><br><span class="line"></span><br><span class="line">* 分类：</span><br><span class="line">    1. DTD:一种简单的约束技术</span><br><span class="line">    2. Schema:一种复杂的约束技术</span><br><span class="line">    * DTD：</span><br><span class="line">        * 引入dtd文档到xml文档中</span><br><span class="line">        * 内部dtd：将约束规则定义在xml文档中</span><br><span class="line">        * 外部dtd：将约束的规则定义在外部的dtd文件中</span><br><span class="line">        * 本地：<span class="meta">&lt;!DOCTYPE 根标签名 SYSTEM "dtd文件的位置"&gt;</span></span><br><span class="line">        * 网络：<span class="meta">&lt;!DOCTYPE 根标签名 PUBLIC "dtd文件名字" "dtd文件的位置URL"&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE students [</span></span><br><span class="line"><span class="meta">                &lt;!ELEMENT students (student+) &gt;</span></span><br><span class="line"><span class="meta">                &lt;!ELEMENT student (name,age,sex)&gt;</span></span><br><span class="line"><span class="meta">                &lt;!ELEMENT name (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">                &lt;!ELEMENT age (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">                &lt;!ELEMENT sex (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">                &lt;!ATTLIST student number ID #REQUIRED&gt;]/&gt;</span></span><br><span class="line"></span><br><span class="line">* Schema引入:</span><br><span class="line">        1.填写xml文档的根元素</span><br><span class="line">        2.引入xsi前缀.  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">        3.引入xsd文件命名空间.  xsi:schemaLocation="http://www.itcast.cn/xml  student.xsd"</span><br><span class="line">        4.为每一个xsd约束声明一个前缀,作为标识  xmlns="http://www.itcast.cn/xml" </span><br><span class="line">            <span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.itcast.cn/xml  student.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">解析：操作xml文档，将文档中的数据读取到内存中</span><br><span class="line">* 操作xml文档</span><br><span class="line"><span class="number">1</span>. 解析(读取)：将文档中的数据读取到内存中</span><br><span class="line"><span class="number">2</span>. 写入：将内存中的数据保存到xml文档中。持久化的存储</span><br><span class="line"></span><br><span class="line">* 解析xml的方式：</span><br><span class="line"><span class="number">1</span>. DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树</span><br><span class="line">* 优点：操作方便，可以对文档进行CRUD的所有操作</span><br><span class="line">* 缺点：占内存</span><br><span class="line"><span class="number">2</span>. SAX：逐行读取，基于事件驱动的。</span><br><span class="line">* 优点：不占内存。</span><br><span class="line">* 缺点：只能读取，不能增删改</span><br><span class="line"></span><br><span class="line">* xml常见的解析器：</span><br><span class="line"><span class="number">1</span>. JAXP：sun公司提供的解析器，支持dom和sax两种思想</span><br><span class="line"><span class="number">2</span>. DOM4J：一款非常优秀的解析器</span><br><span class="line"><span class="number">3</span>. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line"><span class="number">4</span>. PULL：Android操作系统内置的解析器，sax方式的。</span><br><span class="line"></span><br><span class="line">* Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line">* 快速入门：</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1</span>. 导入jar包</span><br><span class="line"><span class="number">2</span>. 获取Document对象</span><br><span class="line"><span class="number">3</span>. 获取对应的标签Element对象</span><br><span class="line"><span class="number">4</span>. 获取数据</span><br><span class="line">* 代码：</span><br><span class="line"> <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo1.class.getClassLoader().getResource(<span class="string">"student.xml"</span>).getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">* 对象的使用：</span><br><span class="line"><span class="number">1</span>. Jsoup：工具类，可以解析html或xml文档，返回Document</span><br><span class="line">* parse：解析html或xml文档，返回Document</span><br><span class="line">* parse(File in, String charsetName)：解析xml或html文件的。</span><br><span class="line">* parse(String html)：解析xml或html字符串</span><br><span class="line">* parse(URL url, <span class="keyword">int</span> timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</span><br><span class="line"><span class="number">2</span>. Document：文档对象。代表内存中的dom树</span><br><span class="line">* 获取Element对象</span><br><span class="line">* getElementById(String id)：根据id属性值获取唯一的element对象</span><br><span class="line">* getElementsByTag(String tagName)：根据标签名称获取元素对象集合</span><br><span class="line">* getElementsByAttribute(String key)：根据属性名称获取元素对象集合</span><br><span class="line">* getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</span><br><span class="line"><span class="number">3</span>. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用</span><br><span class="line"><span class="number">4</span>. Element：元素对象</span><br><span class="line"><span class="number">1</span>. 获取子元素对象</span><br><span class="line">* getElementById(String id)：根据id属性值获取唯一的element对象</span><br><span class="line">* getElementsByTag(String tagName)：根据标签名称获取元素对象集合</span><br><span class="line">* getElementsByAttribute(String key)：根据属性名称获取元素对象集合</span><br><span class="line">* getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 获取属性值</span><br><span class="line">* <span class="function">String <span class="title">attr</span><span class="params">(String key)</span>：根据属性名称获取属性值</span></span><br><span class="line"><span class="function">3. 获取文本内容</span></span><br><span class="line"><span class="function">* String <span class="title">text</span><span class="params">()</span>:获取文本内容</span></span><br><span class="line"><span class="function">* String <span class="title">html</span><span class="params">()</span>:获取标签体的所有内容<span class="params">(包括字标签的字符串内容)</span></span></span><br><span class="line"><span class="function">5. Node：节点对象</span></span><br><span class="line"><span class="function">* 是Document和Element的父类</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 快捷查询方式：</span></span><br><span class="line"><span class="function">1. selector:选择器</span></span><br><span class="line"><span class="function">* 使用的方法：Elements<span class="title">select</span><span class="params">(String cssQuery)</span></span></span><br><span class="line"><span class="function">* 语法：参考Selector类中定义的语法</span></span><br><span class="line"><span class="function">2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</span></span><br><span class="line"><span class="function">* 使用Jsoup的Xpath需要额外导入jar包。</span></span><br><span class="line"><span class="function">* 查询w3cshool参考手册，使用xpath的语法完成查询</span></span><br><span class="line"><span class="function">        <span class="comment">//1.获取student.xml的path</span></span></span><br><span class="line"><span class="function">        String path </span>= JsoupDemo6.class.getClassLoader().getResource(<span class="string">"student.xml"</span>).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/name[@id]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/name[@id='itcast']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="JQuery：JS框架简化开发"><a href="#JQuery：JS框架简化开发" class="headerlink" title="JQuery：JS框架简化开发"></a>JQuery：JS框架简化开发</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 概念： 一个JavaScript框架。简化JS开发</span><br><span class="line">* jQuery是一个快速、简洁的JavaScript框架，jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</span><br><span class="line"></span><br><span class="line">* JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</span><br><span class="line"><span class="number">2.</span> 快速入门</span><br><span class="line"><span class="number">1.</span> 步骤：</span><br><span class="line"><span class="number">1.</span> 下载JQuery</span><br><span class="line">* 目前jQuery有三个大版本：</span><br><span class="line"><span class="number">1.</span>x：兼容ie678,使用最为广泛的，官方只做BUG维护，</span><br><span class="line"> 功能不再新增。因此一般项目来说，使用<span class="number">1.</span>x版本就可以了，</span><br><span class="line"> 最终版本：<span class="number">1.12</span><span class="number">.4</span> (<span class="number">2016</span>年<span class="number">5</span>月<span class="number">20</span>日)</span><br><span class="line"><span class="number">2.</span>x：不兼容ie678，很少有人使用，官方只做BUG维护，</span><br><span class="line"> 功能不再新增。如果不考虑兼容低版本的浏览器可以使用<span class="number">2.</span>x，</span><br><span class="line"> 最终版本：<span class="number">2.2</span><span class="number">.4</span> (<span class="number">2016</span>年<span class="number">5</span>月<span class="number">20</span>日)</span><br><span class="line"><span class="number">3.</span>x：不兼容ie678，只支持最新的浏览器。除非特殊要求，</span><br><span class="line"> 一般不会使用<span class="number">3.</span>x版本的，很多老的jQuery插件不支持这个版本。</span><br><span class="line"> 目前该版本是官方主要更新维护的版本。</span><br><span class="line">* jquery-xxx.js 与 jquery-xxx.min.js区别：</span><br><span class="line"><span class="number">1.</span> jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</span><br><span class="line"><span class="number">2.</span> jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</span><br><span class="line"><span class="number">2.</span> 导入JQuery的js文件：导入min.js文件</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 基本操作学习：</span><br><span class="line">    <span class="number">1.</span> 事件绑定</span><br><span class="line">        <span class="comment">//1.获取b1按钮</span></span><br><span class="line">        $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">"abc"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="number">2.</span> 入口函数</span><br><span class="line">         $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             </span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="built_in">window</span>.onload  和 $(<span class="function"><span class="keyword">function</span>) 区别</span></span><br><span class="line"><span class="function">             * <span class="title">window</span>.<span class="title">onload</span> 只能定义一次,如果定义多次，后边的会将前边的覆盖掉</span></span><br><span class="line"><span class="function">             * $(<span class="params">function</span>)可以定义多次的。</span></span><br><span class="line"><span class="function">    3. 样式控制：<span class="title">css</span>方法</span></span><br><span class="line"><span class="function">        $(<span class="params"><span class="string">"#div1"</span></span>).<span class="title">css</span>(<span class="params"><span class="string">"backgroundColor"</span>,<span class="string">"pink"</span></span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    //1. 根据<span class="title">id</span>获取元素对象</span></span><br><span class="line"><span class="function">    <span class="title">var</span> <span class="title">div1</span> = $(<span class="params"><span class="string">"#div1"</span></span>);</span></span><br><span class="line"><span class="function">    //2.获取标签体内容</span></span><br><span class="line"><span class="function">    <span class="title">alert</span>(<span class="params">div1.innerHTML</span>);</span></span><br><span class="line"><span class="function">    //3.设置标签体内容</span></span><br><span class="line"><span class="function">    //<span class="title">div1</span>.<span class="title">innerHTML</span> = "<span class="title">aaa</span>";</span></span><br><span class="line"><span class="function">    $(<span class="params"><span class="string">"#div1"</span></span>).<span class="title">html</span>(<span class="params"><span class="string">"ccc"</span></span>);</span></span><br><span class="line"><span class="function">    //4. 通过<span class="title">jq</span>方式来获取名称叫<span class="title">div</span>的所有<span class="title">html</span>元素对象</span></span><br><span class="line"><span class="function">    <span class="title">var</span> $divs = $(<span class="params"><span class="string">"div"</span></span>);</span></span><br><span class="line"><span class="function">    //<span class="title">jquery</span>入口函数(<span class="params">dom文档加载完成之后执行该函数中的代码</span>)</span></span><br><span class="line"><span class="function">    $(<span class="params">function (</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//1.获取b1按钮并绑定单击事件</span></span><br><span class="line">      $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">"abc"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h5 id="JQuery对象和JS对象"><a href="#JQuery对象和JS对象" class="headerlink" title="JQuery对象和JS对象"></a>JQuery对象和JS对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> JQuery对象在操作时，更加方便。</span><br><span class="line"><span class="number">2.</span> JQuery对象和js对象方法不通用的.</span><br><span class="line"><span class="number">3.</span> 两者相互转换</span><br><span class="line">    * jq -- &gt; js : jq对象[索引] 或者 jq对象.get(索引)</span><br><span class="line">    * js -- &gt; jq : $(js对象)</span><br></pre></td></tr></table></figure><h5 id="选择器：选有相似特征元素"><a href="#选择器：选有相似特征元素" class="headerlink" title="选择器：选有相似特征元素"></a>选择器：选有相似特征元素</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 基本选择器</span><br><span class="line">    <span class="number">1.</span> 标签选择器（元素选择器）</span><br><span class="line">        * 语法： $(<span class="string">"html标签名"</span>) 获得所有匹配标签名称的元素</span><br><span class="line">    <span class="number">2.</span> id选择器 </span><br><span class="line">        * 语法： $(<span class="string">"#id的属性值"</span>) 获得与指定id属性值匹配的元素</span><br><span class="line">    <span class="number">3.</span> 类选择器</span><br><span class="line">        * 语法： $(<span class="string">".class的属性值"</span>) 获得与指定的<span class="class"><span class="keyword">class</span>属性值匹配的元素</span></span><br><span class="line"><span class="class">    4. 并集选择器：</span></span><br><span class="line">        * 语法： $("选择器1,选择器2....") 获取多个选择器选中的所有元素</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="改变 id 为 one 的元素的背景色为红色"  id="b1"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">"#one"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="改变元素名为 &lt;div&gt; 的所有元素的背景色为红色"  id="b2"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="改变class为 mini 的所有元素的背景色为红色"  id="b3"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".mini"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="改变所有&lt;span&gt;元素和id为two元素背景色为红色" id="b4"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"span,#two"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 层级选择器</span><br><span class="line">    <span class="number">1.</span> 后代选择器</span><br><span class="line">    * 语法： $(<span class="string">"A B"</span>) 选择A元素内部的所有B元素,包括子元素的子元素</span><br><span class="line">    <span class="number">2.</span> 子选择器</span><br><span class="line">    * 语法： $(<span class="string">"A &gt; B"</span>) 选择父元素为A元素的B元素</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="改变&lt;body&gt;内所有&lt;div&gt;背景色为红色"  id="b1"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"body div"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="改变 &lt;body&gt;内子&lt;div&gt;的背景色为红色"  id="b2"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"body &gt; div"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 属性选择器</span><br><span class="line">    <span class="number">1.</span> 属性名称选择器 </span><br><span class="line">        * 语法： $(<span class="string">"A[属性名]"</span>) 包含指定属性的选择器</span><br><span class="line">    <span class="number">2.</span> 属性选择器</span><br><span class="line">        * 语法： $(<span class="string">"A[属性名='值']"</span>) 包含指定属性等于指定值的选择器</span><br><span class="line">    <span class="number">3.</span> 复合属性选择器</span><br><span class="line">        * 语法： $(<span class="string">"A[属性名='值'][]..."</span>) 包含多个属性条件的选择器</span><br><span class="line">    <span class="comment">// &lt;input type="button" value=" 含有属性title 的div背景色为红色"  id="b1"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div[title]"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// &lt;input type="button" value="属性title值等于test的div背景色为红色"  id="b2"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div[title='test']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// &lt;input type="button" value=" 属性title值以te开始的div背景色为红色"  id="b4"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div[title^='te']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//选取有属性id的div元素，然后在结果中选取属性title值含有“es”的 div 元素背景色为红色</span></span><br><span class="line">    $(<span class="string">"#b7"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div[id][title*='es']"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 过滤选择器</span><br><span class="line">    <span class="number">1.</span> 首元素选择器 </span><br><span class="line">        * 语法： :first 获得选择的元素中的第一个元素</span><br><span class="line">    <span class="number">2.</span> 尾元素选择器 </span><br><span class="line">        * 语法： :last 获得选择的元素中的最后一个元素</span><br><span class="line">    <span class="number">3.</span> 非元素选择器</span><br><span class="line">        * 语法： :not(selector) 不包括指定内容的元素</span><br><span class="line">    <span class="number">4.</span> 偶数选择器</span><br><span class="line">        * 语法： :even 偶数，从 <span class="number">0</span> 开始计数</span><br><span class="line">    <span class="number">5.</span> 奇数选择器</span><br><span class="line">        * 语法： :odd 奇数，从 <span class="number">0</span> 开始计数</span><br><span class="line">    <span class="number">6.</span> 等于索引选择器</span><br><span class="line">        * 语法： :eq(index) 指定索引元素</span><br><span class="line">    <span class="number">7.</span> 大于索引选择器 </span><br><span class="line">        * 语法： :gt(index) 大于指定索引元素</span><br><span class="line">    <span class="number">8.</span> 小于索引选择器 </span><br><span class="line">        * 语法： :lt(index) 小于指定索引元素</span><br><span class="line">    <span class="number">9.</span> 标题选择器</span><br><span class="line">        * 语法： :header 获得标题（h1~h6）元素，固定写法</span><br><span class="line">    <span class="comment">// 改变第一个 div 元素的背景色为 红色</span></span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div:first"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 改变class不为 one 的所有 div 元素的背景色为 红色</span></span><br><span class="line">    $(<span class="string">"#b3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div:not(.one)"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 改变索引值为偶数的 div 元素的背景色为 红色"  id="b4"/&gt;</span></span><br><span class="line">    $(<span class="string">"#b4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div:even"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//改变索引值为大于 3 的 div 元素的背景色为 红色</span></span><br><span class="line">    $(<span class="string">"#b6"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div:gt(3)"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 改变所有的标题元素的背景色为 红色</span></span><br><span class="line">    $(<span class="string">"#b9"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">":header"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 表单过滤选择器</span><br><span class="line">    <span class="number">1.</span> 可用元素选择器 </span><br><span class="line">        * 语法： :enabled 获得可用元素</span><br><span class="line">    <span class="number">2.</span> 不可用元素选择器 </span><br><span class="line">        * 语法： :disabled 获得不可用元素</span><br><span class="line">    <span class="number">3.</span> 选中选择器 </span><br><span class="line">        * 语法： :checked 获得单选/复选框选中的元素</span><br><span class="line">    <span class="number">4.</span> 选中选择器 </span><br><span class="line">        * 语法： :selected 获得下拉框选中的元素</span><br><span class="line">    <span class="comment">// 利用jQuery对象的val()方法改变表单内可用&lt;input&gt;元素的值</span></span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"input[type='text']:enabled"</span>).val(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//利用 jQuery 对象的 val() 方法改变表单内不可用&lt;input&gt;元素的值</span></span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"input[type='text']:disabled"</span>).val(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 利用 jQuery 对象的 length 属性获取复选框选中的个数</span></span><br><span class="line">    $(<span class="string">"#b3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert($(<span class="string">"input[type='checkbox']:checked"</span>).length);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 利用 jQuery 对象的 length 属性获取下拉框选中的个数</span></span><br><span class="line">    $(<span class="string">"#b4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert($(<span class="string">"#job &gt; option:selected"</span>).length);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h5 id="JQuery操作DOM"><a href="#JQuery操作DOM" class="headerlink" title="JQuery操作DOM"></a>JQuery操作DOM</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 内容操作</span><br><span class="line">    <span class="number">1.</span> html(): 获取/设置元素的标签体内容，html标签执行不显示</span><br><span class="line">        $(<span class="string">"#mydiv"</span>).html(<span class="string">"&lt;p&gt;aaaa&lt;/p&gt;"</span>);<span class="comment">//页面显示aaaa</span></span><br><span class="line">    <span class="number">2.</span> text(): 获取/设置元素的标签体纯文本内容</span><br><span class="line">        $(<span class="string">"#mydiv"</span>).text(<span class="string">"&lt;p&gt;aaaa&lt;/p&gt;"</span>);<span class="comment">//页面显示&lt;p&gt;aaaa&lt;/p&gt;</span></span><br><span class="line">    <span class="number">3.</span> val()： 获取/设置元素的value属性值</span><br><span class="line">        <span class="comment">// 获取myinput 的value值</span></span><br><span class="line">        <span class="keyword">var</span> value = $(<span class="string">"#myinput"</span>).val();</span><br><span class="line">        <span class="comment">// 设置myinput 的value值</span></span><br><span class="line">        $(<span class="string">"#myinput"</span>).val(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 属性操作</span><br><span class="line">    <span class="number">1.</span> 通用属性操作</span><br><span class="line">        <span class="number">1.</span> attr(): 获取/设置元素的属性</span><br><span class="line">        <span class="number">2.</span> removeAttr():删除属性</span><br><span class="line">        <span class="number">3.</span> prop():获取/设置元素的属性</span><br><span class="line">        <span class="number">4.</span> removeProp():删除属性</span><br><span class="line">        * attr和prop区别？</span><br><span class="line">            如果操作的是元素的固有属性，则建议使用prop</span><br><span class="line">            如果操作的是元素自定义的属性，则建议使用attr  </span><br><span class="line">        <span class="comment">//获取北京节点的name属性值</span></span><br><span class="line">        <span class="keyword">var</span> name = $(<span class="string">"#bj"</span>).attr(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">//设置北京节点的name属性的值为dabeijing</span></span><br><span class="line">        $(<span class="string">"#bj"</span>).attr(<span class="string">"name"</span>, <span class="string">"dabeijing"</span>);</span><br><span class="line">        <span class="comment">//新增北京节点的discription属性 属性值是didu</span></span><br><span class="line">        $(<span class="string">"#bj"</span>).attr(<span class="string">"discription"</span>, <span class="string">"didu"</span>);</span><br><span class="line">        <span class="comment">//删除北京节点的name属性并检验name属性是否存在</span></span><br><span class="line">        $(<span class="string">"#bj"</span>).removeAttr(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">//获得hobby的的选中状态</span></span><br><span class="line">        <span class="keyword">var</span> checked = $(<span class="string">"#hobby"</span>).prop(<span class="string">"checked"</span>);</span><br><span class="line">        <span class="comment">//var checked = $("#hobby").attr("checked"); //获取不到弹undefined</span></span><br><span class="line">            </span><br><span class="line">    <span class="number">2.</span> 对<span class="class"><span class="keyword">class</span>属性操作</span></span><br><span class="line">        1. addClass():添加class属性值</span><br><span class="line">            $(<span class="string">"#one"</span>).addClass(<span class="string">"second"</span>);</span><br><span class="line">        <span class="number">2.</span> removeClass():删除<span class="class"><span class="keyword">class</span>属性值</span></span><br><span class="line">            $("#one").removeClass("second");</span><br><span class="line">        <span class="number">3.</span> toggleClass():切换<span class="class"><span class="keyword">class</span>属性</span></span><br><span class="line">            toggleClass("one"): </span><br><span class="line">                * 若元素对象上存在<span class="class"><span class="keyword">class</span></span>=<span class="string">"one"</span>，则将属性one删除。若不存在，则添加</span><br><span class="line">            $(<span class="string">"#one"</span>).toggleClass(<span class="string">"second"</span>);</span><br><span class="line">        <span class="number">4.</span> css():设置/获得css样式</span><br><span class="line">            <span class="keyword">var</span> backgroundColor = $(<span class="string">"#one"</span>).css(<span class="string">"backgroundColor"</span>);                $(<span class="string">"#one"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"green"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span> CRUD操作:</span><br><span class="line">    <span class="number">1.</span> append():父元素将子元素追加到末尾</span><br><span class="line">        * 对象<span class="number">1.</span>append(对象<span class="number">2</span>): 将对象<span class="number">2</span>添加到对象<span class="number">1</span>元素内部，并且在末尾</span><br><span class="line">    <span class="number">2.</span> prepend():父元素将子元素追加到开头</span><br><span class="line">        * 对象<span class="number">1.</span>prepend(对象<span class="number">2</span>):将对象<span class="number">2</span>添加到对象<span class="number">1</span>元素内部，并且在开头</span><br><span class="line">    <span class="number">3.</span> appendTo():</span><br><span class="line">        * 对象<span class="number">1.</span>appendTo(对象<span class="number">2</span>):将对象<span class="number">1</span>添加到对象<span class="number">2</span>内部，并且在末尾</span><br><span class="line">        <span class="comment">//将反恐放置到city的后面</span></span><br><span class="line">        $(<span class="string">"#fk"</span>).appendTo($(<span class="string">"#city"</span>));</span><br><span class="line">    <span class="number">4.</span> prependTo()：</span><br><span class="line">        * 对象<span class="number">1.</span>prependTo(对象<span class="number">2</span>):将对象<span class="number">1</span>添加到对象<span class="number">2</span>内部，并且在开头</span><br><span class="line">    <span class="number">5.</span> after():添加元素到元素后边</span><br><span class="line">        * 对象<span class="number">1.</span>after(对象<span class="number">2</span>)： 将对象<span class="number">2</span>添加到对象<span class="number">1</span>后边。对象<span class="number">1</span>和对象<span class="number">2</span>是兄弟关系</span><br><span class="line">    <span class="number">6.</span> before():添加元素到元素前边</span><br><span class="line">        * 对象<span class="number">1.</span>before(对象<span class="number">2</span>)： 将对象<span class="number">2</span>添加到对象<span class="number">1</span>前边。对象<span class="number">1</span>和对象<span class="number">2</span>是兄弟关系</span><br><span class="line">    <span class="number">7.</span> insertAfter()</span><br><span class="line">        * 对象<span class="number">1.</span>insertAfter(对象<span class="number">2</span>)：将对象<span class="number">2</span>添加到对象<span class="number">1</span>后边。对象<span class="number">1</span>和对象<span class="number">2</span>是兄弟关系</span><br><span class="line">    <span class="number">8.</span> insertBefore()</span><br><span class="line">        * 对象<span class="number">1.</span>insertBefore(对象<span class="number">2</span>)： 将对象<span class="number">2</span>添加到对象<span class="number">1</span>前边。对象<span class="number">1</span>和对象<span class="number">2</span>是兄弟关系</span><br><span class="line"></span><br><span class="line">    <span class="number">9.</span> remove():移除元素</span><br><span class="line">        * 对象.remove():将对象删除掉</span><br><span class="line">    <span class="comment">//删除&lt;li id='bj' name='beijing'&gt;北京&lt;/li&gt;</span></span><br><span class="line">        $(<span class="string">"#bj"</span>).remove();</span><br><span class="line">    <span class="number">10.</span> empty():清空元素的所有后代元素。</span><br><span class="line">        * 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</span><br><span class="line">    <span class="comment">//删除city所有的li节点(后代元素)</span></span><br><span class="line">        $(<span class="string">"#city"</span>).empty();</span><br></pre></td></tr></table></figure><h5 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：将数据行的奇数行背景色设置为 pink，偶数行背景色设置为 yellow</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取数据行的奇数行的tr，设置背景色为pink</span></span><br><span class="line">    $(<span class="string">"tr:gt(1):odd"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    <span class="comment">//2. 获取数据行的偶数行的tr,设置背景色为yellow</span></span><br><span class="line">    $(<span class="string">"tr:gt(1):even"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：保证下边的选中状态和第一个复选框的选中状态一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectAll</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取下边的复选框</span></span><br><span class="line">    $(<span class="string">".itemSelect"</span>).prop(<span class="string">"checked"</span>, obj.checked);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：点击qq表情，将其追加到发言框中</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.给img图片添加onclick事件</span></span><br><span class="line">    $(<span class="string">"ul img"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//2.追加到p标签中即可。</span></span><br><span class="line">        $(<span class="string">".word"</span>).append($(<span class="keyword">this</span>).clone());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：实现列表选中条目左右选择功能</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#toRight"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取右边的下拉列表对象，append(左边下拉列表选中的option)</span></span><br><span class="line">        $(<span class="string">"#rightName"</span>).append($(<span class="string">"#leftName &gt; option:selected"</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#toLeft"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//appendTo 获取右边选中的option，将其移动到左边下拉列表中</span></span><br><span class="line">        $(<span class="string">"#rightName &gt; option:selected"</span>).appendTo($(<span class="string">"#leftName"</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="JQuery动画"><a href="#JQuery动画" class="headerlink" title="JQuery动画"></a>JQuery动画</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 默认显示和隐藏方式</span><br><span class="line">    <span class="number">1.</span> show([speed,[easing],[fn]])</span><br><span class="line">        <span class="number">1.</span> speed：动画速度,三个预定义值(<span class="string">"slow"</span>,<span class="string">"normal"</span>,<span class="string">"fast"</span>)或表示动画时长毫秒数(如<span class="number">1000</span>)</span><br><span class="line">        <span class="number">2.</span> easing：用来指定切换效果，默认是<span class="string">"swing"</span>，可用参数<span class="string">"linear"</span></span><br><span class="line">            swing：动画执行时效果是 先慢，中间快，最后又慢</span><br><span class="line">            linear：动画执行时速度是匀速的</span><br><span class="line">        <span class="number">3.</span> fn：在动画完成时执行的函数，每个元素执行一次。</span><br><span class="line">        $(<span class="string">"#showDiv"</span>).hide(<span class="string">"slow"</span>,<span class="string">"swing"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             alert(<span class="string">"隐藏了..."</span>)</span><br><span class="line">         &#125;);</span><br><span class="line">    <span class="number">2.</span> hide([speed,[easing],[fn]])</span><br><span class="line">$(<span class="string">"#showDiv"</span>).hide(<span class="number">5000</span>,<span class="string">"swing"</span>);</span><br><span class="line">    <span class="number">3.</span> toggle([speed],[easing],[fn])</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 滑动显示和隐藏方式</span><br><span class="line">    <span class="number">1.</span> slideDown([speed],[easing],[fn])</span><br><span class="line">    <span class="number">2.</span> slideUp([speed,[easing],[fn]])</span><br><span class="line">    <span class="number">3.</span> slideToggle([speed],[easing],[fn])</span><br><span class="line">$(<span class="string">"#showDiv"</span>).slideUp(<span class="string">"slow"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 淡入淡出显示和隐藏方式</span><br><span class="line">    <span class="number">1.</span> fadeIn([speed],[easing],[fn])</span><br><span class="line">    <span class="number">2.</span> fadeOut([speed],[easing],[fn])</span><br><span class="line">    <span class="number">3.</span> fadeToggle([speed,[easing],[fn]])</span><br><span class="line">$(<span class="string">"#showDiv"</span>).fadeOut(<span class="string">"slow"</span>);</span><br><span class="line">$(<span class="string">"#showDiv"</span>).fadeToggle(<span class="string">"slow"</span>);</span><br></pre></td></tr></table></figure><h5 id="JQuery遍历"><a href="#JQuery遍历" class="headerlink" title="JQuery遍历"></a>JQuery遍历</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> js的遍历方式</span><br><span class="line">    * <span class="keyword">for</span>(初始化值;循环结束条件;步长)</span><br><span class="line">    <span class="comment">//1.获取所有的ul下的li</span></span><br><span class="line">    <span class="keyword">var</span> citys = $(<span class="string">"#city li"</span>);</span><br><span class="line">    <span class="comment">//2.JS遍历li</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; citys.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"上海"</span> == citys[i].innerHTML)&#123;</span><br><span class="line">            <span class="comment">//break; 结束循环</span></span><br><span class="line">            <span class="comment">//continue; //结束本次循环，继续下次循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        alert(i+<span class="string">":"</span>+citys[i].innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> jq的遍历方式</span><br><span class="line">    <span class="number">1.</span> jq对象.each(callback)</span><br><span class="line">        <span class="number">1.</span> 语法：</span><br><span class="line">            jquery对象.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br><span class="line">                * index:就是元素在集合中的索引</span><br><span class="line">                * element：就是集合中的每一个元素对象</span><br><span class="line">                * <span class="keyword">this</span>：集合中的每一个元素对象</span><br><span class="line">        <span class="number">2.</span> 回调函数返回值：</span><br><span class="line">            * <span class="literal">true</span>:如果当前<span class="function"><span class="keyword">function</span>返回为<span class="title">false</span>，则结束循环(<span class="params">break</span>)。</span></span><br><span class="line"><span class="function">            * <span class="title">false</span>:如果当前<span class="title">function</span>返回为<span class="title">true</span>，则结束本次循环，继续下次循环(<span class="params">continue</span>)</span></span><br><span class="line"><span class="function">        <span class="title">citys</span>.<span class="title">each</span>(<span class="params">function (index,element</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//3.1 获取li对象 第一种方式 this</span></span><br><span class="line">            <span class="comment">//alert(this.innerHTML);</span></span><br><span class="line">            <span class="comment">//alert($(this).html());</span></span><br><span class="line">            <span class="comment">//3.2 获取li对象 第二种方式 在回调函数中定义参数   index（索引） element（元素对象）</span></span><br><span class="line">            <span class="comment">//alert(index+":"+element.innerHTML);</span></span><br><span class="line">            <span class="comment">//alert(index+":"+$(element).html());</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> $.each(object, [callback])</span><br><span class="line">        $.each(citys,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert($(<span class="keyword">this</span>).html());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span> <span class="keyword">for</span>..of: jquery <span class="number">3.0</span> 版本之后提供的方式</span><br><span class="line">        <span class="keyword">for</span> (li <span class="keyword">of</span> citys) &#123;</span><br><span class="line">            alert($(li).html());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="JQuery事件绑定与解绑"><a href="#JQuery事件绑定与解绑" class="headerlink" title="JQuery事件绑定与解绑"></a>JQuery事件绑定与解绑</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> jquery标准的绑定方式</span><br><span class="line">    * jq对象.事件方法(回调函数)；</span><br><span class="line">    * 注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。</span><br><span class="line">        * 表单对象.submit();<span class="comment">//让表单提交</span></span><br><span class="line">    $(<span class="string">"#name"</span>).mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">"鼠标来了..."</span>)</span><br><span class="line">    &#125;).mouseout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">"鼠标走了..."</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> on绑定事件/off解除绑定</span><br><span class="line">    * jq对象.on(<span class="string">"事件名称"</span>,回调函数)</span><br><span class="line">    * jq对象.off(<span class="string">"事件名称"</span>):若无参数，将所有事件全部解绑</span><br><span class="line">    <span class="comment">//1.使用on给按钮绑定单击事件  click</span></span><br><span class="line">    $(<span class="string">"#btn"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"我被点击了。。。"</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//2. 使用off解除btn按钮的单击事件</span></span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//解除btn按钮的单击事件</span></span><br><span class="line">        <span class="comment">//$("#btn").off("click");</span></span><br><span class="line">        $(<span class="string">"#btn"</span>).off();<span class="comment">//将组件上的所有事件全部解绑</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 事件切换：toggle</span><br><span class="line">    * jq对象.toggle(fn1,fn2...)</span><br><span class="line">        * 当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2.....</span><br><span class="line">        <span class="comment">//获取按钮，调用toggle方法</span></span><br><span class="line">        $(<span class="string">"#btn"</span>).toggle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//改变div背景色backgroundColor 颜色为 green</span></span><br><span class="line">            $(<span class="string">"#myDiv"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"green"</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//改变div背景色backgroundColor 颜色为 pink</span></span><br><span class="line">            $(<span class="string">"#myDiv"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>);</span><br><span class="line">        &#125;);       </span><br><span class="line"><span class="number">1.9</span>版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。</span><br><span class="line">&lt;script src=<span class="string">"../js/jquery-migrate-1.0.0.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="插件：增强JQuery的功能"><a href="#插件：增强JQuery的功能" class="headerlink" title="插件：增强JQuery的功能"></a>插件：增强JQuery的功能</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> $.fn.extend(object) </span><br><span class="line">   * 增强通过Jquery获取的对象的功能  $(<span class="string">"#id"</span>)</span><br><span class="line">    <span class="comment">//1.定义jqeury的对象插件</span></span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        <span class="comment">//定义了一个check()方法。所有的jq对象都可以调用该方法</span></span><br><span class="line">        check: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//让复选框选中</span></span><br><span class="line">            <span class="comment">//this:调用该方法的jq对象</span></span><br><span class="line">            <span class="keyword">this</span>.prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        uncheck: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//让复选框不选中</span></span><br><span class="line">            <span class="keyword">this</span>.prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">$(<span class="string">"input[type='checkbox']"</span>).check();</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> $.extend(object)</span><br><span class="line">    * 增强JQeury对象自身的功能</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        max: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//返回两数中的较大值</span></span><br><span class="line">            <span class="keyword">return</span> a &gt;= b ? a : b;</span><br><span class="line">        &#125;,</span><br><span class="line">        min: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//返回两数中的较小值</span></span><br><span class="line">            <span class="keyword">return</span> a &lt;= b ? a : b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//调用全局方法</span></span><br><span class="line">    <span class="keyword">var</span> max = $.max(<span class="number">4</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="案例：广告自动显示与隐藏"><a href="#案例：广告自动显示与隐藏" class="headerlink" title="案例：广告自动显示与隐藏"></a>案例：广告自动显示与隐藏</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;广告的自动显示与隐藏&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #content&#123;width:100%;height:500px;background:#999&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;!--引入jquery--&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"../js/jquery-3.3.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：</span></span><br><span class="line"><span class="comment">                1. 当页面加载完，3秒后。自动显示广告</span></span><br><span class="line"><span class="comment">                2. 广告显示5秒后，自动消失。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            分析：</span></span><br><span class="line"><span class="comment">                1. 使用定时器来完成。setTimeout (执行一次定时器)</span></span><br><span class="line"><span class="comment">                2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display</span></span><br><span class="line"><span class="comment">                3. 使用  show/hide方法来完成广告的显示</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//定义定时器，调用adShow方法 3秒后执行一次</span></span><br><span class="line">            setTimeout(adShow,<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">//定义定时器，调用adHide方法，8秒后执行一次</span></span><br><span class="line">            setTimeout(adHide,<span class="number">8000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//显示广告</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">adShow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取广告div，调用显示方法</span></span><br><span class="line">            $(<span class="string">"#ad"</span>).show(<span class="string">"slow"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//隐藏广告</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">adHide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取广告div，调用隐藏方法</span></span><br><span class="line">            $(<span class="string">"#ad"</span>).hide(<span class="string">"slow"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 广告DIV --&gt;</span><br><span class="line">    &lt;div id=<span class="string">"ad"</span> style=<span class="string">"display: none;"</span>&gt;</span><br><span class="line">        &lt;img style=<span class="string">"width:100%"</span> src=<span class="string">"../img/adv.jpg"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 下方正文部分 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="content"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h5 id="案例：选图片抽奖"><a href="#案例：选图片抽奖" class="headerlink" title="案例：选图片抽奖"></a>案例：选图片抽奖</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;jquery案例之抽奖&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>javascript<span class="string">" src="</span>../js/jquery<span class="number">-3.3</span><span class="number">.1</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;script language='javascript' type='text/javascript'&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      /*</span></span><br><span class="line"><span class="string">          分析：</span></span><br><span class="line"><span class="string">              1. 给开始按钮绑定单击事件</span></span><br><span class="line"><span class="string">                  1.1 定义循环定时器</span></span><br><span class="line"><span class="string">                  1.2 切换小相框的src属性</span></span><br><span class="line"><span class="string">                      * 定义数组，存放图片资源路径</span></span><br><span class="line"><span class="string">                      * 生成随机数。数组索引</span></span><br><span class="line"><span class="string">              2. 给结束按钮绑定单击事件</span></span><br><span class="line"><span class="string">                  1.1 停止定时器</span></span><br><span class="line"><span class="string">                  1.2 给大相框设置src属性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       */</span></span><br><span class="line"><span class="string">      var imgs = ["</span>../img/man00.jpg<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>../img/man01.jpg<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>../img/man02.jpg<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>../img/man03.jpg<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>../img/man04.jpg<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>../img/man05.jpg<span class="string">",</span></span><br><span class="line"><span class="string">          "</span>../img/man06.jpg<span class="string">",</span></span><br><span class="line"><span class="string">      ];</span></span><br><span class="line"><span class="string">      var startId;//开始定时器的id</span></span><br><span class="line"><span class="string">      var index;//随机角标</span></span><br><span class="line"><span class="string">      $(function () &#123;</span></span><br><span class="line"><span class="string">          //处理按钮是否可以使用的效果</span></span><br><span class="line">          $("#startID").prop("disabled",false);</span><br><span class="line">          $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span><br><span class="line">          <span class="comment">//1. 给开始按钮绑定单击事件</span></span><br><span class="line">          $(<span class="string">"#startID"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 1.1 定义循环定时器 20毫秒执行一次</span></span><br><span class="line">              startId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  <span class="comment">//处理按钮是否可以使用的效果</span></span><br><span class="line">                  $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span><br><span class="line">                  $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span><br><span class="line">                  <span class="comment">//1.2生成随机角标 0-6 </span></span><br><span class="line">                  <span class="comment">//0.000--0.999 --&gt; * 7 --&gt; 0.0-----6.9999</span></span><br><span class="line">                  index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span>);</span><br><span class="line">                  <span class="comment">//1.3设置小相框的src属性</span></span><br><span class="line">                  $(<span class="string">"#img1ID"</span>).prop(<span class="string">"src"</span>,imgs[index]);</span><br><span class="line"></span><br><span class="line">              &#125;,<span class="number">20</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//2. 给结束按钮绑定单击事件</span></span><br><span class="line">          $(<span class="string">"#stopID"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="comment">//处理按钮是否可以使用的效果</span></span><br><span class="line">              $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span><br><span class="line">              $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span><br><span class="line">              <span class="comment">// 1.1 停止定时器</span></span><br><span class="line">              clearInterval(startId);</span><br><span class="line">              <span class="comment">// 1.2 给大相框设置src属性</span></span><br><span class="line">              $(<span class="string">"#img2ID"</span>).prop(<span class="string">"src"</span>,imgs[index]).hide();</span><br><span class="line">              <span class="comment">//显示1秒之后</span></span><br><span class="line">              $(<span class="string">"#img2ID"</span>).show(<span class="number">1000</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 小像框 --&gt;</span><br><span class="line">&lt;div style=<span class="string">"border-style:dotted;width:160px;height:100px"</span>&gt;</span><br><span class="line">  &lt;img id=<span class="string">"img1ID"</span> src=<span class="string">"../img/man00.jpg"</span> style=<span class="string">"width:160px;height:100px"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 大像框 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div</span></span><br><span class="line"><span class="regexp">      style="border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;img id="img2ID" src="../img</span><span class="regexp">/man00.jpg" width="800px" height="500px"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 开始按钮 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;input</span></span><br><span class="line"><span class="regexp">      id="startID"</span></span><br><span class="line"><span class="regexp">      type="button"</span></span><br><span class="line"><span class="regexp">      value="点击开始"</span></span><br><span class="line"><span class="regexp">      style="width:150px;height:150px;font-size:22px"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 停止按钮 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;input</span></span><br><span class="line"><span class="regexp">      id="stopID"</span></span><br><span class="line"><span class="regexp">      type="button"</span></span><br><span class="line"><span class="regexp">      value="点击停止"</span></span><br><span class="line"><span class="regexp">      style="width:150px;height:150px;font-size:22px"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h4 id="AJAX：异步的JS和XML"><a href="#AJAX：异步的JS和XML" class="headerlink" title="AJAX：异步的JS和XML"></a>AJAX：异步的JS和XML</h4><h5 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h5><p><img src="/../assets/pic/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.bmp" alt="1.同步和异步"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 概念： ASynchronous JavaScript And XML异步的JavaScript 和 XML</span><br><span class="line"><span class="number">1.</span> 异步和同步：客户端和服务器端相互通信的基础上</span><br><span class="line">* 同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</span><br><span class="line">* 异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</span><br><span class="line"></span><br><span class="line">Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 </span><br><span class="line">通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。</span><br><span class="line">        这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新,提升用户的体验。</span><br><span class="line">传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</span><br></pre></td></tr></table></figure><h5 id="AJAX实现方式"><a href="#AJAX实现方式" class="headerlink" title="AJAX实现方式"></a>AJAX实现方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 原生的JS实现方式（了解）</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建核心对象</span></span><br><span class="line">        <span class="keyword">var</span> xmlhttp;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">            xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">            xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 建立连接</span></span><br><span class="line">       <span class="comment">// 请求方式,请求的URL,同步或异步请求：true（异步）或 false（同步）</span></span><br><span class="line">        xmlhttp.open(<span class="string">"GET"</span>, <span class="string">"ajaxServlet?username=tom"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.发送请求</span></span><br><span class="line">        xmlhttp.send();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.接受并处理来自服务器的响应结果</span></span><br><span class="line">        <span class="comment">//获取方式 ：xmlhttp.responseText</span></span><br><span class="line">        <span class="comment">//什么时候获取？当服务器响应成功后再获取</span></span><br><span class="line">        <span class="comment">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span></span><br><span class="line">        xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span></span><br><span class="line">            <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//获取服务器的响应结果</span></span><br><span class="line">                <span class="keyword">var</span> responseText = xmlhttp.responseText;</span><br><span class="line">                alert(responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> JQeury实现方式</span><br><span class="line"><span class="number">1.</span> $.ajax()</span><br><span class="line">    * 语法：$.ajax(&#123;键值对&#125;);</span><br><span class="line">     <span class="comment">//使用$.ajax()发送异步请求</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"ajaxServlet1111"</span> , <span class="comment">// 请求路径</span></span><br><span class="line">            type:<span class="string">"POST"</span> , <span class="comment">//请求方式</span></span><br><span class="line">            <span class="comment">//data: "username=jack&amp;age=23",//请求参数</span></span><br><span class="line">            data:&#123;<span class="string">"username"</span>:<span class="string">"jack"</span>,<span class="string">"age"</span>:<span class="number">23</span>&#125;,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;,<span class="comment">//响应成功后的回调函数</span></span><br><span class="line">            error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">"出错啦..."</span>)</span><br><span class="line">            &#125;,<span class="comment">//表示如果请求响应出现错误，会执行的回调函数</span></span><br><span class="line">            dataType:<span class="string">"text"</span><span class="comment">//设置接受到的响应数据的格式</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> $.get()：发送get请求</span><br><span class="line">        * 语法：$.get(url, [data], [callback], [type])</span><br><span class="line">            * 参数：</span><br><span class="line">                * url：请求路径</span><br><span class="line">                * data：请求参数</span><br><span class="line">                * callback：回调函数</span><br><span class="line">                * type：响应结果的类型</span><br><span class="line">        $.get(<span class="string">"ajaxServlet"</span>, &#123;<span class="attr">username</span>: <span class="string">"rose"</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;, <span class="string">"text"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span> $.post()：发送post请求</span><br><span class="line">        * 语法：$.post(url, [data], [callback], [type])</span><br><span class="line">            * 参数：</span><br><span class="line">                * url：请求路径</span><br><span class="line">                * data：请求参数</span><br><span class="line">                * callback：回调函数</span><br><span class="line">                * type：响应结果的类型</span><br><span class="line">        $.post(<span class="string">"ajaxServlet"</span>, &#123;<span class="attr">username</span>: <span class="string">"rose"</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;, <span class="string">"text"</span>);</span><br></pre></td></tr></table></figure><h5 id="Ajax请求参考"><a href="#Ajax请求参考" class="headerlink" title="Ajax请求参考"></a>Ajax请求参考</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口函数</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//当表单提交时，调用所有的校验方法</span></span><br><span class="line">    <span class="comment">//如果这个方法没有返回值或者返回为true，表单提交，如果返回为false，表单不提交</span></span><br><span class="line">    $(<span class="string">"#registerForm"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获取表单文本输入框的值</span></span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span><br><span class="line">        <span class="keyword">var</span> pwd = $(<span class="string">"#pwd"</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(checkUsername() &amp;&amp; checkPassword() &amp;&amp; checkEmail())&#123;</span><br><span class="line">            <span class="comment">//发送ajax请求到服务器</span></span><br><span class="line">            <span class="comment">//校验通过,发送ajax请求，提交表单的数据   username=zhangsan&amp;pwd=123</span></span><br><span class="line">            <span class="comment">//$(this)==$("#registerForm") serialize()将form转为key=value形式</span></span><br><span class="line">            <span class="comment">// 第二个参数也可以为&#123;username:username:pwd=pwd&#125;</span></span><br><span class="line">            $.post(<span class="string">"user/regist"</span>,$(<span class="keyword">this</span>).serialize(),<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//处理服务器响应的数据data  &#123;flag:false,errorMsg:"注册失败"&#125;</span></span><br><span class="line">                <span class="keyword">if</span>(data.flag)&#123;</span><br><span class="line">                    <span class="comment">//注册成功，跳转成功页面</span></span><br><span class="line">                    location.href=<span class="string">"register_ok.html"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//注册失败,给errorMsg添加提示信息</span></span><br><span class="line">                    $(<span class="string">"#errorMsg"</span>).html(data.errorMsg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.不提交表单</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="JSON：JS的对象表示"><a href="#JSON：JS的对象表示" class="headerlink" title="JSON：JS的对象表示"></a>JSON：JS的对象表示</h4><p><img src="/../assets/pic/2018-07-01-Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JSON.bmp" alt="JSON"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 概念： JavaScript <span class="built_in">Object</span> NotationJavaScript对象表示法</span><br><span class="line">* json现在多用于存储和交换文本信息的语法</span><br><span class="line">* 进行数据的传输</span><br><span class="line">* <span class="built_in">JSON</span> 比 XML 更小、更快，更易解析。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 语法：</span><br><span class="line"><span class="number">1.</span> 基本规则</span><br><span class="line">* 数据在名称/值对中：json数据是由键值对构成的</span><br><span class="line">* 键用引号(单双都行)引起来，也可以不使用引号</span><br><span class="line">* 值得取值类型：</span><br><span class="line"><span class="number">1.</span> 数字（整数或浮点数）</span><br><span class="line"><span class="number">2.</span> 字符串（在双引号中）</span><br><span class="line"><span class="number">3.</span> 逻辑值（<span class="literal">true</span> 或 <span class="literal">false</span>）</span><br><span class="line"><span class="number">4.</span> 数组（在方括号中）&#123;<span class="string">"persons"</span>:[&#123;&#125;,&#123;&#125;]&#125;</span><br><span class="line"><span class="number">5.</span> 对象（在花括号中） &#123;<span class="string">"address"</span>:&#123;<span class="string">"province"</span>：<span class="string">"陕西"</span>....&#125;&#125;</span><br><span class="line"><span class="number">6.</span> <span class="literal">null</span></span><br><span class="line">* 数据由逗号分隔：多个键值对由逗号分隔</span><br><span class="line">* 花括号保存对象：使用&#123;&#125;定义json 格式</span><br><span class="line">* 方括号保存数组：[]</span><br><span class="line"><span class="number">2.</span> 获取数据:</span><br><span class="line"><span class="number">1.</span> json对象.键名</span><br><span class="line"><span class="number">2.</span> json对象[<span class="string">"键名"</span>]</span><br><span class="line"><span class="number">3.</span> 数组对象[索引]</span><br><span class="line"><span class="number">4.</span> 遍历</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义基本格式</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="string">'gender'</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="comment">//获取name的值</span></span><br><span class="line"><span class="comment">//var name = person.name;</span></span><br><span class="line"><span class="keyword">var</span> name = person[<span class="string">"name"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.嵌套格式   &#123;&#125;———&gt; []</span></span><br><span class="line"><span class="keyword">var</span> persons = &#123;</span><br><span class="line">    <span class="string">"persons"</span>: [</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//获取王五值</span></span><br><span class="line"><span class="keyword">var</span> name1 = persons.persons[<span class="number">2</span>].name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.嵌套格式   []———&gt; &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> ps = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="number">24</span>, <span class="string">"gender"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"gender"</span>: <span class="literal">false</span>&#125;];</span><br><span class="line"><span class="comment">//获取李四值</span></span><br><span class="line">alert(ps[<span class="number">1</span>].name);</span><br><span class="line"><span class="comment">//获取ps中的所有值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = ps[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">        alert(key+<span class="string">":"</span>+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JSON数据和Java对象互转"><a href="#JSON数据和Java对象互转" class="headerlink" title="JSON数据和Java对象互转"></a>JSON数据和Java对象互转</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">JSON解析器：Jsonlib，Gson，fastjson，jackson</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. JSON转为Java对象</span><br><span class="line">    <span class="number">1</span>. 导入jackson的相关jar包</span><br><span class="line">    <span class="number">2</span>. 创建Jackson核心对象 ObjectMapper</span><br><span class="line">    <span class="number">3</span>. 调用ObjectMapper的方法进行转换 readValue(json字符串数据,Class)</span><br><span class="line">        <span class="comment">//1.初始化JSON字符串</span></span><br><span class="line">        String json = <span class="string">"&#123;\"gender\":\"男\",\"name\":\"张三\",\"age\":23&#125;"</span>;</span><br><span class="line">        <span class="comment">//2.创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//3.转换为Java对象 Person对象</span></span><br><span class="line">        Person person = mapper.readValue(json, Person.class);</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>. Java对象转换JSON</span><br><span class="line">    <span class="number">1</span>. 导入jackson的相关jar包</span><br><span class="line">    <span class="number">2</span>. 创建Jackson核心对象 ObjectMapper</span><br><span class="line">    <span class="number">3</span>. 调用ObjectMapper的相关方法进行转换</span><br><span class="line">        * writeValue(参数<span class="number">1</span>，obj):</span><br><span class="line">            File：将obj对象转换为JSON字符串，并保存到指定的文件中</span><br><span class="line">            Writer：将obj对象转换为JSON字符串并将json数据填充到字符输出流</span><br><span class="line">            OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流</span><br><span class="line">                ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                <span class="comment">//writeValue，将数据写到d://a.txt文件中</span></span><br><span class="line">                mapper.writeValue(<span class="keyword">new</span> File(<span class="string">"a.txt"</span>), p);</span><br><span class="line">                <span class="comment">//writeValue.将数据关联到Writer中</span></span><br><span class="line">                mapper.writeValue(<span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>), p);</span><br><span class="line">        * writeValueAsString(obj):将对象转为json字符串  </span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            String json = mapper.writeValueAsString(p);</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>. 注解：</span><br><span class="line">            <span class="number">1</span>. <span class="meta">@JsonIgnore</span>：排除属性。</span><br><span class="line">            <span class="number">2</span>. <span class="meta">@JsonFormat</span>：属性值得格式化</span><br><span class="line">                * <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>. 复杂java对象转换</span><br><span class="line">            <span class="number">1</span>. List：数组</span><br><span class="line">            <span class="number">2</span>. Map：对象格式一致</span><br></pre></td></tr></table></figure><h4 id="案例：校验用户名是否存在"><a href="#案例：校验用户名是否存在" class="headerlink" title="案例：校验用户名是否存在"></a>案例：校验用户名是否存在</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：</span><br><span class="line">    <span class="number">1.</span> $.get(type):将最后一个参数type指定为<span class="string">"json"</span></span><br><span class="line">    <span class="number">2.</span> 在服务器端设置MIME类型</span><br><span class="line">    response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure><h5 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在页面加载完成后</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//给username绑定blur事件</span></span><br><span class="line">    $(<span class="string">"#username"</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取username文本输入框的值</span></span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="keyword">this</span>).val();</span><br><span class="line">        <span class="comment">//发送ajax请求</span></span><br><span class="line">        <span class="comment">//期望服务器响应回的数据格式：&#123;"userExsit":true,"msg":"此用户名太受欢迎,请更换一个"&#125;</span></span><br><span class="line">        <span class="comment">//                       &#123;"userExsit":false,"msg":"用户名可用"&#125;</span></span><br><span class="line">        $.get(<span class="string">"findUserServlet"</span>, &#123;<span class="attr">username</span>: username&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//判断userExsit键的值是否是true</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// alert(data);</span></span><br><span class="line">            <span class="keyword">var</span> span = $(<span class="string">"#s_username"</span>);</span><br><span class="line">            <span class="keyword">if</span> (data.userExsit) &#123;</span><br><span class="line">                <span class="comment">//用户名存在</span></span><br><span class="line">                span.css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">                span.html(data.msg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//用户名不存在</span></span><br><span class="line">                span.css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span><br><span class="line">                span.html(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取用户名</span></span><br><span class="line">    String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    <span class="comment">//2.调用service层判断用户名是否存在</span></span><br><span class="line">    <span class="comment">//期望服务器响应回的数据格式：&#123;"userExsit":true,"msg":"此用户名太受欢迎,请更换一个"&#125;</span></span><br><span class="line">    <span class="comment">//                         &#123;"userExsit":false,"msg":"用户名可用"&#125;</span></span><br><span class="line">    <span class="comment">//设置响应的数据格式为json</span></span><br><span class="line">    response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"tom"</span>.equals(username))&#123;</span><br><span class="line">        <span class="comment">//存在</span></span><br><span class="line">        map.put(<span class="string">"userExsit"</span>,<span class="keyword">true</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"此用户名太受欢迎,请更换一个"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//不存在</span></span><br><span class="line">        map.put(<span class="string">"userExsit"</span>,<span class="keyword">false</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"用户名可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将map转为json，并且传递给客户端</span></span><br><span class="line">    <span class="comment">//将map转为json</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//并且传递给客户端</span></span><br><span class="line">    mapper.writeValue(response.getWriter(),map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h4><p>AdminLTE是一款建立在bootstrap和jquery之上的开源的模板主题工具，它提供了一系列响应的、<br>可重复使用的组件，并内置了多个模板页面；同时自适应多种屏幕分辨率，兼容PC和移动端。通<br>过AdminLTE，我们可以快速的创建一个响应式的Html5网站。</p><p><a href="https://github.com/almasaeed2010/AdminLTE" target="_blank" rel="noopener">https://github.com/almasaeed2010/AdminLTE</a> ：从上面网址获取AdminLTE源代码</p><h5 id="AdminLTE布局与皮肤"><a href="#AdminLTE布局与皮肤" class="headerlink" title="AdminLTE布局与皮肤"></a>AdminLTE布局与皮肤</h5><p>可以查看start.html页面中查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">布局</span><br><span class="line">    .wrapper包住了body下的所有代码</span><br><span class="line">    .main-header里是网站的logo和导航栏的代码</span><br><span class="line">    .main-sidebar里是用户面板和侧边栏菜单的代码</span><br><span class="line">    .content-wrapper里是页面的页面和内容区域的代码</span><br><span class="line">    .main-footer里是页脚的代码</span><br><span class="line">    .control-sidebar里是页面右侧侧边栏区域的代码</span><br><span class="line">布局选项</span><br><span class="line">    fixed：固定</span><br><span class="line">    layout-boxed：盒子布局</span><br><span class="line">    layout-top-nav：顶部隐藏</span><br><span class="line">    sidebar-collapse：侧边栏隐藏</span><br><span class="line">    sidebar-mini：侧边栏隐藏时有小图标</span><br><span class="line">皮肤</span><br><span class="line">    skin-blue：蓝色</span><br><span class="line">    skin-black：黑色</span><br><span class="line">    skin-purple：紫色</span><br><span class="line">    skin-yellow：黄色</span><br><span class="line">    skin-red：红色</span><br><span class="line">    skin-green：绿色</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h4&gt;&lt;h5 id=&quot;一、代码部署：&quot;&gt;&lt;a href=&quot;#一、代码部署：&quot; class=&quot;headerlink&quot; title=&quot;一、代码部署：&quot;&gt;&lt;/a&gt;一、代码部署：&lt;/h5&gt;&lt;p&gt;1、代码的压缩与合并&lt;br&gt;2、图片、js、css等静态资源使用和主站不同域名地址存储，从而使得在传输资源时不会带上不必要的cookie信息。&lt;br&gt;3、使用内容分发网络 CDN&lt;br&gt;4、为文件设置Last-Modified、Expires和Etag&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础知识</title>
    <link href="/2018/2018-06-29-MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-06-29-MySQL基础知识/</id>
    <published>2018-06-29T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><h5 id="常用操作数据库的命令"><a href="#常用操作数据库的命令" class="headerlink" title="常用操作数据库的命令"></a>常用操作数据库的命令</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; 查看所有的数据库</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>; 创建一个叫test的数据库</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">test</span>;删除一个叫test的数据库</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; 在选中的数据库之中查看所有的表</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;选中库 ,在建表之前必须要选择数据库</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名; 删除表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (字段<span class="number">1</span> 类型, 字段<span class="number">2</span> 类型);</span><br><span class="line">desc 表名;查看所在的表的字段</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名; 查看创建表的详细信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">databases</span> 库名;查看创建库的详细信息</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/../assets/pic/2018-06-29-MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/SQL%E5%88%86%E7%B1%BB.bmp" alt="SQL分类"></p><h5 id="改表-：DDL-数据定义语言"><a href="#改表-：DDL-数据定义语言" class="headerlink" title="改表 ：DDL 数据定义语言"></a>改表 ：DDL 数据定义语言</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改字段类型 <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段 字段类型;</span><br><span class="line">添加新的字段 <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段 字段类型</span><br><span class="line">添加字段并指定位置  <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段 字段类型   <span class="keyword">after</span> 字段;</span><br><span class="line">删除表字段  <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line">修改指定的字段  <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 原字段名字  新的字段名字 字段类型</span><br></pre></td></tr></table></figure><h5 id="数据操作：DQL数据查询语言-amp-amp-DML数据操纵语言"><a href="#数据操作：DQL数据查询语言-amp-amp-DML数据操纵语言" class="headerlink" title="数据操作：DQL数据查询语言 &amp;&amp; DML数据操纵语言"></a>数据操作：DQL数据查询语言 &amp;&amp; DML数据操纵语言</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1.增加数据(<span class="keyword">insert</span>)<span class="number">3</span>种方式 </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，...)(很少用)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，....);（较常用）</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，....)，(值<span class="number">1</span>，值<span class="number">2</span>，....)，(值<span class="number">1</span>，值<span class="number">2</span>，....);</span><br><span class="line"></span><br><span class="line">2.删除数据(<span class="keyword">delete</span>) </span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 注意：<span class="keyword">where</span> 条件必须加，否则数据会被全部删除</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>更新数据(<span class="keyword">update</span>) </span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span>字段<span class="number">1</span> = 值<span class="number">1</span>, 字段<span class="number">2</span> = 值<span class="number">2</span> <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>筛选重复值的字段    </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段 <span class="keyword">from</span> 表名</span><br><span class="line">注意：<span class="keyword">where</span> 必须加，否则数据全部修改</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>查询数据(<span class="keyword">select</span>)</span><br><span class="line"><span class="number">1.</span>查询表中的所有数据   <span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="number">2.</span>指定数据查询    <span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 </span><br><span class="line">集合 <span class="keyword">id</span> [<span class="keyword">not</span>] <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>)  模糊查询  ：<span class="keyword">like</span> <span class="string">'%a%'</span>;</span><br><span class="line"></span><br><span class="line">4.根据条件查询出来的数据  <span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 (最常用的)</span><br><span class="line"><span class="keyword">where</span> 条件后面跟的条件</span><br><span class="line"> 关系：&gt;,&lt;,&gt;=,&lt;=,!=  </span><br><span class="line"> 逻辑：<span class="keyword">or</span>, <span class="keyword">and</span> </span><br><span class="line"> 区间：<span class="keyword">id</span> <span class="keyword">between</span> <span class="number">4</span> <span class="keyword">and</span> <span class="number">6</span> ;闭区间，包含边界</span><br><span class="line"> </span><br><span class="line">5.结果集排序</span><br><span class="line">    1, 通过字段来排序</span><br><span class="line">    例如 ：<span class="keyword">select</span> * <span class="keyword">from</span> star orser <span class="keyword">by</span> money <span class="keyword">desc</span>, age <span class="keyword">asc</span>; </span><br><span class="line">    <span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">order</span> <span class="keyword">by</span> 字段  排序关键词(<span class="keyword">desc</span> | <span class="keyword">asc</span>)</span><br><span class="line">    排序关键词 <span class="keyword">desc</span> 降序 <span class="keyword">asc</span> 升序(默认)</span><br><span class="line">    <span class="number">2</span>, 多字段排序</span><br><span class="line">    <span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span>  <span class="keyword">desc</span> |<span class="keyword">asc</span>,...字段n <span class="keyword">desc</span>| <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line">6.限制结果集</span><br><span class="line"><span class="keyword">select</span>  字段 <span class="keyword">from</span> 表 <span class="keyword">limit</span> 数量;</span><br><span class="line">例如:<span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">id</span>) <span class="keyword">from</span> star                                                         </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名  <span class="keyword">limit</span> 偏移量,数量</span><br><span class="line">说明:</span><br><span class="line"><span class="number">1.</span>不写偏移量的话就是默认的为<span class="number">0</span></span><br><span class="line"><span class="number">2.</span>实现分页的时候必须写偏移量</span><br><span class="line">  偏移量怎么计算？:</span><br><span class="line">    <span class="keyword">limit</span> (n<span class="number">-1</span>)*数量 ,数量 </span><br><span class="line">    </span><br><span class="line"><span class="number">7.</span>常用的统计函数</span><br><span class="line"><span class="keyword">sum</span>，<span class="keyword">avg</span>，<span class="keyword">count</span>，<span class="keyword">max</span>,<span class="keyword">min</span></span><br><span class="line">只分组:<span class="keyword">select</span> * <span class="keyword">from</span> 表 <span class="keyword">group</span> <span class="keyword">by</span> 字段</span><br><span class="line">例子: <span class="keyword">select</span> <span class="keyword">count</span>(sex) <span class="keyword">as</span> re,sex <span class="keyword">from</span> star <span class="keyword">group</span> <span class="keyword">by</span> sex <span class="keyword">having</span> re &gt; <span class="number">3</span>;</span><br><span class="line">分组统计: <span class="keyword">select</span> <span class="keyword">count</span>(sex) <span class="keyword">from</span> star <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure><h5 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1，内连接</span><br><span class="line">隐式内连接 <span class="keyword">select</span> username,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span>,goods <span class="keyword">where</span> <span class="keyword">user</span>,gid=gods,gid;</span><br><span class="line">显示内连接</span><br><span class="line"><span class="keyword">select</span> username,<span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">inner</span> <span class="keyword">join</span> goods <span class="keyword">on</span> user.gid=goods.gid;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">left</span> <span class="keyword">join</span> goods <span class="keyword">on</span> user.gid=goods.gid;</span><br><span class="line">2.外链接</span><br><span class="line">左连接 包含所有的左边表中的记录以及右边表中没有和他匹配的记录</span><br><span class="line">右连接 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> gid <span class="keyword">in</span>(<span class="keyword">select</span> gid <span class="keyword">from</span> goods);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">right</span> <span class="keyword">jOin</span> goods <span class="keyword">on</span> user.gid=goods.gid;</span><br><span class="line">子嵌套查询</span><br><span class="line">数据联合查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">left</span> <span class="keyword">join</span> goods <span class="keyword">on</span> user.gid=goods.gid <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">right</span> <span class="keyword">join</span> goods <span class="keyword">on</span> user.gid=goods.gid;</span><br><span class="line">两个表同时更新</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> u, goods g <span class="keyword">set</span> u.gid=<span class="number">12</span>,g.price=<span class="number">1</span> <span class="keyword">where</span> u.id=<span class="number">2</span> <span class="keyword">and</span> u.gid=g.gid;</span><br></pre></td></tr></table></figure><h5 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL 数据控制语言"></a>DCL 数据控制语言</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建用户:<span class="keyword">create</span> <span class="keyword">user</span><span class="string">'xiaoming'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'666666'</span>;</span><br><span class="line">授权用户:<span class="keyword">grant</span> all <span class="keyword">on</span> test.*<span class="keyword">to</span><span class="string">'xiaoming'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">刷新权限:<span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">取消授权:<span class="keyword">revoke</span> all <span class="keyword">on</span> test.* <span class="keyword">from</span> <span class="string">'xiaoming'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">删除用户: <span class="keyword">drop</span> <span class="keyword">user</span><span class="string">'xiaoming'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h5 id="DTL-数据事务语言"><a href="#DTL-数据事务语言" class="headerlink" title="DTL 数据事务语言"></a>DTL 数据事务语言</h5><p>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启事务：<span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line">操作回滚：<span class="keyword">rollback</span>;</span><br><span class="line">提交事务：<span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h5 id="事务的四大特征"><a href="#事务的四大特征" class="headerlink" title="事务的四大特征"></a>事务的四大特征</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</span><br><span class="line">2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。</span><br><span class="line">3. 隔离性：多个事务之间。相互独立。</span><br><span class="line">4. 一致性：事务操作前后，数据总量不变</span><br></pre></td></tr></table></figure><h5 id="完整select"><a href="#完整select" class="headerlink" title="完整select"></a>完整select</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_expr [,select_expr,...] [      </span><br><span class="line">      <span class="keyword">FROM</span> tb_name</span><br><span class="line">      [<span class="keyword">WHERE</span> 条件判断]</span><br><span class="line">      [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | postion&#125; [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...] </span><br><span class="line">      [<span class="keyword">HAVING</span> <span class="keyword">WHERE</span> 条件判断]</span><br><span class="line">      [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name|expr|postion&#125; [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</span><br><span class="line">      [ <span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]rowcount | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">]</span><br><span class="line">执行顺序为：</span><br><span class="line">    <span class="keyword">from</span> 表名</span><br><span class="line">    <span class="keyword">where</span> ....</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> ...</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> *</span><br><span class="line">    <span class="keyword">having</span> ...</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> ...</span><br><span class="line">    <span class="keyword">limit</span> <span class="keyword">start</span>,<span class="keyword">count</span></span><br></pre></td></tr></table></figure><h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><p>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">定义视图 建议以v_开头</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名称 <span class="keyword">as</span> <span class="keyword">select</span>语句;</span><br><span class="line">查看表会将所有的视图也列出来</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">视图的用途就是查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v_stu_score;</span><br><span class="line">删除视图</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名称; eg：<span class="keyword">drop</span> <span class="keyword">view</span> v_stu_sco;</span><br></pre></td></tr></table></figure><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><p>更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看索引</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> 表名;</span><br><span class="line">创建索引</span><br><span class="line">如果指定字段是字符串，需要指定长度，建议长度与定义字段时的长度一致</span><br><span class="line">字段类型如果不是字符串，可以不填写长度部分</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> 索引名称 <span class="keyword">on</span> 表名(字段名称(长度))</span><br><span class="line">删除索引：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> 索引名称 <span class="keyword">on</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h5><p><img src="/../assets/pic/2018-06-29-MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200223175524201.png" alt="image-20200223175524201"></p><h5 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h5><p><img src="/../assets/pic/2018-06-29-MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200223175828704.png" alt="image-20200223175828704"></p><h5 id="Ubuntu安装mysql"><a href="#Ubuntu安装mysql" class="headerlink" title="Ubuntu安装mysql"></a>Ubuntu安装mysql</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装mysql服务</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"># 安装客户端</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line"># 安装依赖</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br><span class="line"># 检查状态</span><br><span class="line">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><p>mysql5.7安装完成后普通用户不能进mysql，原因：root的plugin被修改成了auth_socket，用密码登陆的plugin应该是mysql_native_password，直接用root权限登录就不用密码,修改root密码和登录验证方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> update mysql.user set authentication_string=PASSWORD('123456'), plugin='mysql_native_password' where user='root';</span><br><span class="line"><span class="meta">mysql&gt;</span> flush privileges;</span><br><span class="line"><span class="meta">mysql&gt;</span> exit</span><br><span class="line">Bye</span><br><span class="line"><span class="meta">#</span> exit</span><br><span class="line"><span class="meta">$</span> sudo /etc/init.d/mysql restart</span><br><span class="line"><span class="meta">$</span> mysql -uroot -p</span><br></pre></td></tr></table></figure><p><strong>配置mysql远程登录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改配置文件，注释掉bind-address = 127.0.0.1</span><br><span class="line"><span class="meta">$</span> sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 保存退出，然后进入mysql服务，执行授权命令：</span><br><span class="line"><span class="meta">$</span> mysql -uroot -p</span><br><span class="line"> </span><br><span class="line"><span class="meta">mysql&gt;</span> grant all on *.* to root@'%' identified by '123456' with grant option;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"> </span><br><span class="line"><span class="meta">mysql&gt;</span> flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line"><span class="meta">mysql&gt;</span> exit</span><br><span class="line">Bye</span><br><span class="line"><span class="meta">$</span> sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p><img src="/../assets/pic/2018-06-29-MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JDBC%E6%9C%AC%E8%B4%A8.bmp" alt="JDBC本质"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</span><br><span class="line">* JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 快速入门：</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1</span>. 导入驱动jar包 mysql-connector-java-<span class="number">5.1</span>.37-bin.jar</span><br><span class="line"><span class="number">1</span>.复制mysql-connector-java-<span class="number">5.1</span>.37-bin.jar到项目的libs目录下</span><br><span class="line"><span class="number">2</span>.右键--&gt;Add As Library</span><br><span class="line"><span class="number">2</span>. 注册驱动</span><br><span class="line"><span class="number">3</span>. 获取数据库连接对象 Connection</span><br><span class="line"><span class="number">4</span>. 定义sql</span><br><span class="line"><span class="number">5</span>. 获取执行sql语句的对象 Statement</span><br><span class="line"><span class="number">6</span>. 执行sql，接受返回结果</span><br><span class="line"><span class="number">7</span>. 处理结果</span><br><span class="line"><span class="number">8</span>. 释放资源</span><br><span class="line"></span><br><span class="line">* 代码实现：</span><br><span class="line">  <span class="comment">//1. 导入驱动jar包</span></span><br><span class="line">        <span class="comment">//2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//4.定义sql语句</span></span><br><span class="line">        String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure><h5 id="详解JDBC各个对象"><a href="#详解JDBC各个对象" class="headerlink" title="详解JDBC各个对象"></a>详解JDBC各个对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. 详解各个对象：</span><br><span class="line"><span class="number">1</span>. DriverManager：驱动管理对象</span><br><span class="line">* 功能：</span><br><span class="line"><span class="number">1</span>. 注册驱动：告诉程序该使用哪一个数据库驱动jar</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerDriver</span><span class="params">(Driver driver)</span> :注册与给定的驱动程序 DriverManager 。 </span></span><br><span class="line"><span class="function">写代码使用：  Class.<span class="title">forName</span><span class="params">(<span class="string">"com.mysql.jdbc.Driver"</span>)</span></span>;</span><br><span class="line">通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</span><br><span class="line"><span class="number">2</span>. 获取数据库连接：</span><br><span class="line">* 方法：<span class="function"><span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url, String user, String password)</span> </span></span><br><span class="line"><span class="function">* 参数：</span></span><br><span class="line"><span class="function">* url：指定连接的路径</span></span><br><span class="line"><span class="function">* 语法：jdbc:mysql:<span class="comment">//ip地址(域名):端口号/数据库名称</span></span></span><br><span class="line"><span class="function">* 例子：jdbc:mysql:<span class="comment">//localhost:3306/db3</span></span></span><br><span class="line"><span class="function">* 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:<span class="comment">///数据库名称</span></span></span><br><span class="line"><span class="function">* user：用户名</span></span><br><span class="line"><span class="function">* password：密码 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. Connection：数据库连接对象</span></span><br><span class="line"><span class="function">1. 功能：</span></span><br><span class="line"><span class="function">1. 获取执行sql 的对象</span></span><br><span class="line"><span class="function">* Statement <span class="title">createStatement</span><span class="params">()</span></span></span><br><span class="line"><span class="function">* PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span>  </span></span><br><span class="line"><span class="function">2. 管理事务：</span></span><br><span class="line"><span class="function">* 开启事务：<span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span> ：调用该方法设置参数为<span class="keyword">false</span>，即开启事务</span></span><br><span class="line"><span class="function">* 提交事务：<span class="title">commit</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">* 回滚事务：<span class="title">rollback</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. Statement：执行sql的对象</span></span><br><span class="line"><span class="function">1. 执行sql</span></span><br><span class="line"><span class="function">1. <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql)</span> ：可以执行任意的sql 了解 </span></span><br><span class="line"><span class="function">2. <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span> ：执行DML（insert、update、delete）语句、<span class="title">DDL</span><span class="params">(create，alter、drop)</span>语句</span></span><br><span class="line"><span class="function">* 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</span></span><br><span class="line"><span class="function">3. ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span>  ：执行DQL（select)语句</span></span><br><span class="line"><span class="function">2. 练习：</span></span><br><span class="line"><span class="function">1. account表 添加一条记录</span></span><br><span class="line"><span class="function">2. account表 修改记录</span></span><br><span class="line"><span class="function">3. account表 删除一条记录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">代码：</span></span><br><span class="line"><span class="function">Statement stmt </span>= <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2. 定义sql</span></span><br><span class="line">            String sql = <span class="string">"insert into account values(null,'王五',3000)"</span>;</span><br><span class="line">            <span class="comment">//3.获取Connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            <span class="comment">//4.获取执行sql的对象 Statement</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql);<span class="comment">//影响的行数</span></span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"添加成功！"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"添加失败！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//stmt.close();</span></span><br><span class="line">            <span class="comment">//7. 释放资源</span></span><br><span class="line">            <span class="comment">//避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. ResultSet：结果集对象,封装查询结果</span><br><span class="line">* <span class="function"><span class="keyword">boolean</span> <span class="title">next</span><span class="params">()</span>: 游标向下移动一行，判断当前行是否是最后一行末尾<span class="params">(是否有数据)</span>，如果是，则返回<span class="keyword">false</span>，如果不是则返回<span class="keyword">true</span></span></span><br><span class="line"><span class="function">* <span class="title">getXxx</span><span class="params">(参数)</span>:获取数据</span></span><br><span class="line"><span class="function">* Xxx：代表数据类型   如： <span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span> ,String <span class="title">getString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">* 参数：</span></span><br><span class="line"><span class="function">1. <span class="keyword">int</span>：代表列的编号,从1开始   如： <span class="title">getString</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">2. String：代表列名称。 如： <span class="title">getDouble</span><span class="params">(<span class="string">"balance"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 注意：</span></span><br><span class="line"><span class="function">* 使用步骤：</span></span><br><span class="line"><span class="function">1. 游标向下移动一行</span></span><br><span class="line"><span class="function">2. 判断是否有数据</span></span><br><span class="line"><span class="function">3. 获取数据</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="comment">//循环判断游标是否是最后一行末尾。</span></span></span><br><span class="line"><span class="function">            <span class="title">while</span><span class="params">(rs.next()</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//获取数据</span></span><br><span class="line">                <span class="comment">//6.2 获取数据</span></span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">double</span> balance = rs.getDouble(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">* 练习：</span><br><span class="line">* 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。</span><br><span class="line"><span class="number">1</span>. 定义Emp类</span><br><span class="line"><span class="number">2</span>. 定义方法 <span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="number">3</span>. 实现方法 select * from emp;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. PreparedStatement：执行sql的对象</span><br><span class="line"><span class="number">1</span>. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</span><br><span class="line"><span class="number">1</span>. 输入用户随便，输入密码：a<span class="string">' or '</span>a<span class="string">' = '</span>a</span><br><span class="line"><span class="number">2</span>. sql：select * from user where username = <span class="string">'fhdsjkf'</span> and password = <span class="string">'a'</span> or <span class="string">'a'</span> = <span class="string">'a'</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 解决sql注入问题：使用PreparedStatement对象来解决</span><br><span class="line"><span class="number">3</span>. 预编译的SQL：参数使用?作为占位符</span><br><span class="line"><span class="number">4</span>. 步骤：</span><br><span class="line"><span class="number">1</span>. 导入驱动jar包 mysql-connector-java-<span class="number">5.1</span>.37-bin.jar</span><br><span class="line"><span class="number">2</span>. 注册驱动</span><br><span class="line"><span class="number">3</span>. 获取数据库连接对象 Connection</span><br><span class="line"><span class="number">4</span>. 定义sql</span><br><span class="line">* 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</span><br><span class="line"><span class="number">5</span>. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </span><br><span class="line"><span class="number">6</span>. 给？赋值：</span><br><span class="line">* 方法： setXxx(参数<span class="number">1</span>,参数<span class="number">2</span>)</span><br><span class="line">* 参数<span class="number">1</span>：？的位置编号 从<span class="number">1</span> 开始</span><br><span class="line">* 参数<span class="number">2</span>：？的值</span><br><span class="line"><span class="number">7</span>. 执行sql，接受返回结果，不需要传递sql语句</span><br><span class="line"><span class="number">8</span>. 处理结果</span><br><span class="line"><span class="number">9</span>. 释放资源</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作</span><br><span class="line"><span class="number">1</span>. 可以防止SQL注入</span><br><span class="line"><span class="number">2</span>. 效率更高</span><br></pre></td></tr></table></figure><h5 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 目的：简化书写</span><br><span class="line">* 分析：</span><br><span class="line">1. 注册驱动也抽取</span><br><span class="line">2. 抽取一个方法获取连接对象</span><br><span class="line">* 需求：不想传递参数（麻烦），还得保证工具类的通用性。</span><br><span class="line">* 解决：配置文件 jdbc.properties</span><br><span class="line">            url=jdbc:mysql://newvalue.site:3306/learn</span><br><span class="line">            user=root</span><br><span class="line">            password=root</span><br><span class="line">            driver=com.mysql.jdbc.Driver</span><br><span class="line">3. 抽取一个方法释放资源</span><br></pre></td></tr></table></figure><p> <strong>JDBCUtils代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            System.out.println(path);<span class="comment">///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">            <span class="comment">// pro.load(new FileReader("D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties"));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">        close(stmt,conn);</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例：判断是否登录成功"><a href="#案例：判断是否登录成功" class="headerlink" title="案例：判断是否登录成功"></a>案例：判断是否登录成功</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 通过键盘录入用户名和密码</span><br><span class="line">2. 判断用户是否登录成功</span><br><span class="line">    * select * from user where username = &quot;&quot; and password = &quot;&quot;;</span><br><span class="line">    * 如果这个sql有查询结果，则成功，反之，则失败</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 创建数据库表 user</span><br><span class="line"><span class="function">CREATE TABLE <span class="title">USER</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    id INT PRIMARY KEY AUTO_INCREMENT,</span></span></span><br><span class="line"><span class="function"><span class="params">    username VARCHAR(<span class="number">32</span>)</span>,</span></span><br><span class="line"><span class="function">    PASSWORD <span class="title">VARCHAR</span><span class="params">(<span class="number">32</span>)</span></span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"><span class="function">INSERT INTO USER <span class="title">VALUES</span><span class="params">(NULL,<span class="string">'zhangsan'</span>,<span class="string">'123'</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO USER <span class="title">VALUES</span><span class="params">(NULL,<span class="string">'lisi'</span>,<span class="string">'234'</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 代码实现：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> site.newvalue.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">new</span> JDBCDemo1().login(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">"登录成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = '"</span> + username + <span class="string">"' and password = '"</span> + password + <span class="string">"' "</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JDBC事务控制"><a href="#JDBC事务控制" class="headerlink" title="JDBC事务控制"></a>JDBC事务控制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</span><br><span class="line">2. 操作：</span><br><span class="line">1. 开启事务</span><br><span class="line">2. 提交事务</span><br><span class="line">3. 回滚事务</span><br><span class="line">3. 使用Connection对象来管理事务</span><br><span class="line">* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</span><br><span class="line">* 在执行sql之前开启事务</span><br><span class="line">* 提交事务：commit() </span><br><span class="line">* 当所有sql都执行完提交事务</span><br><span class="line">* 回滚事务：rollback() </span><br><span class="line">* 在catch中回滚事务</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pstmt1 = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pstmt2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        conn = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//2.定义sql</span></span><br><span class="line">        <span class="comment">//2.1 张三 - 500</span></span><br><span class="line">        String sql1 = <span class="string">"update account set balance = balance - ? where id = ?"</span>;</span><br><span class="line">        <span class="comment">//2.2 李四 + 500</span></span><br><span class="line">        String sql2 = <span class="string">"update account set balance = balance + ? where id = ?"</span>;</span><br><span class="line">        <span class="comment">//3.获取执行sql对象</span></span><br><span class="line">        pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">        pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">        <span class="comment">//4. 设置参数</span></span><br><span class="line">        pstmt1.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">        pstmt1.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        pstmt2.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">        pstmt2.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//5.执行sql</span></span><br><span class="line">        pstmt1.executeUpdate();</span><br><span class="line">        <span class="comment">// 手动制造异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        pstmt2.executeUpdate();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        conn.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//事务回滚</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCUtils.close(pstmt1, conn);</span><br><span class="line">        JDBCUtils.close(pstmt2, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。</span><br><span class="line">    当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</span><br><span class="line"></span><br><span class="line">2. 好处：</span><br><span class="line">1. 节约资源</span><br><span class="line">2. 用户访问高效</span><br><span class="line"></span><br><span class="line">3. 实现：</span><br><span class="line">1. 标准接口：DataSource   javax.sql包下的</span><br><span class="line">1. 方法：</span><br><span class="line">* 获取连接：getConnection()</span><br><span class="line">* 归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</span><br><span class="line"></span><br><span class="line">2. 一般我们不去实现它，有数据库厂商来实现</span><br><span class="line">1. C3P0：数据库连接池技术</span><br><span class="line">2. Druid：数据库连接池实现技术，由阿里巴巴提供的</span><br></pre></td></tr></table></figure><h5 id="连接池技术：C3P0和Druid"><a href="#连接池技术：C3P0和Druid" class="headerlink" title="连接池技术：C3P0和Druid"></a>连接池技术：C3P0和Druid</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>. C3P0：数据库连接池技术</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1</span>. 导入jar包 (两个) c3p0-<span class="number">0.9</span>.5.2.jar mchange-commons-java-<span class="number">0.2</span>.12.jar ，</span><br><span class="line">* 不要忘记导入数据库驱动jar包</span><br><span class="line"><span class="number">2</span>. 定义配置文件：</span><br><span class="line">* 名称： c3p0.properties 或者 c3p0-config.xml</span><br><span class="line">* 路径：直接将文件放在src目录下即可。</span><br><span class="line">  &lt;!--  连接参数 --&gt;</span><br><span class="line">                &lt;property name="driverClass"&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">                &lt;property name=<span class="string">"jdbcUrl"</span>&gt;jdbc:mysql:<span class="comment">//localhost:3306/day25&lt;/property&gt;</span></span><br><span class="line">                &lt;property name="user"&gt;root&lt;/property&gt;</span><br><span class="line">                &lt;property name="password"&gt;root&lt;/property&gt;   </span><br><span class="line">                &lt;!-- 连接池参数 --&gt;</span><br><span class="line">                &lt;property name="initialPoolSize"&gt;5&lt;/property&gt;</span><br><span class="line">                &lt;property name="maxPoolSize"&gt;10&lt;/property&gt;</span><br><span class="line">                &lt;property name="checkoutTimeout"&gt;3000&lt;/property&gt;</span><br><span class="line"><span class="number">3</span>. 创建核心对象 数据库连接池对象 ComboPooledDataSource</span><br><span class="line"><span class="number">4</span>. 获取连接： getConnection</span><br><span class="line">* 代码：</span><br><span class="line"> <span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line">        DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//2. 获取连接对象</span></span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line"><span class="number">5</span>. Druid：数据库连接池实现技术，由阿里巴巴提供的</span><br><span class="line"><span class="number">1</span>. 步骤：</span><br><span class="line"><span class="number">1</span>. 导入jar包 druid-<span class="number">1.0</span>.9.jar</span><br><span class="line"><span class="number">2</span>. 定义配置文件：</span><br><span class="line">* 是properties形式的</span><br><span class="line">* 可以叫任意名称，可以放在任意目录下</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">            url=jdbc:mysql:<span class="comment">///db3</span></span><br><span class="line">            username=root</span><br><span class="line">            password=root</span><br><span class="line">            initialSize=<span class="number">5</span></span><br><span class="line">            maxActive=<span class="number">10</span></span><br><span class="line">            maxWait=<span class="number">3000</span></span><br><span class="line"><span class="number">3</span>. 加载配置文件。Properties</span><br><span class="line"><span class="number">4</span>. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</span><br><span class="line"><span class="number">5</span>. 获取连接：getConnection</span><br><span class="line">* 代码：</span><br><span class="line"> <span class="comment">//3.加载配置文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//4.获取连接池对象</span></span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        <span class="comment">//5.获取连接</span></span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line"><span class="number">2</span>. 定义工具类</span><br><span class="line"><span class="number">1</span>. 定义一个类 JDBCUtils</span><br><span class="line"><span class="number">2</span>. 提供静态代码块加载配置文件，初始化连接池对象</span><br><span class="line"><span class="number">3</span>. 提供方法</span><br><span class="line"><span class="number">1</span>. 获取连接方法：通过数据库连接池获取连接</span><br><span class="line"><span class="number">2</span>. 释放资源</span><br><span class="line"><span class="number">3</span>. 获取连接池的方法</span><br></pre></td></tr></table></figure><h5 id="Druid连接池工具类"><a href="#Druid连接池工具类" class="headerlink" title="Druid连接池工具类"></a>Druid连接池工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">       close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">* Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1</span>. 导入jar包</span><br><span class="line"><span class="number">2</span>. 创建JdbcTemplate对象。依赖于数据源DataSource</span><br><span class="line">* JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(ds);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 调用JdbcTemplate的方法来完成CRUD的操作</span><br><span class="line">* update():执行DML语句。增、删、改语句</span><br><span class="line">* queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合</span><br><span class="line">* 注意：这个方法查询的结果集长度只能是<span class="number">1</span></span><br><span class="line">* queryForList():查询结果将结果集封装为list集合</span><br><span class="line">* 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</span><br><span class="line">* query():查询结果，将结果封装为JavaBean对象</span><br><span class="line">* query的参数：RowMapper</span><br><span class="line">* 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</span><br><span class="line">* <span class="keyword">new</span> BeanPropertyRowMapper&lt;类型&gt;(类型.class)</span><br><span class="line">* queryForObject：查询结果，将结果封装为对象</span><br><span class="line">* 一般用于聚合函数的查询</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 练习：</span><br><span class="line">* 需求：</span><br><span class="line"><span class="number">1</span>. 修改<span class="number">1</span>号数据的 salary 为 <span class="number">10000</span></span><br><span class="line"><span class="number">2</span>. 添加一条记录</span><br><span class="line"><span class="number">3</span>. 删除刚才添加的记录</span><br><span class="line"><span class="number">4</span>. 查询id为<span class="number">1</span>的记录，将其封装为Map集合</span><br><span class="line"><span class="number">5</span>. 查询所有记录，将其封装为List</span><br><span class="line"><span class="number">6</span>. 查询所有记录，将其封装为Emp对象的List集合</span><br><span class="line"><span class="number">7</span>. 查询总记录数</span><br></pre></td></tr></table></figure><h5 id="JDBCTemplate使用"><a href="#JDBCTemplate使用" class="headerlink" title="JDBCTemplate使用"></a>JDBCTemplate使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        String sql = <span class="string">"update emp set salary = 10000 where id = 1001"</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">"郭靖"</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from emp where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp where id = ? or id = ?"</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String ename = rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">                <span class="keyword">int</span> job_id = rs.getInt(<span class="string">"job_id"</span>);</span><br><span class="line">                <span class="keyword">int</span> mgr = rs.getInt(<span class="string">"mgr"</span>);</span><br><span class="line">                Date joindate = rs.getDate(<span class="string">"joindate"</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">"salary"</span>);</span><br><span class="line">                <span class="keyword">double</span> bonus = rs.getDouble(<span class="string">"bonus"</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">"dept_id"</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select count(id) from emp"</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h4&gt;&lt;h5 id=&quot;常用操作数据库的命令&quot;&gt;&lt;a href=&quot;#常用操作数据库的命令&quot; class=&quot;headerlink&quot; title=&quot;常用操作数据库的命令&quot;&gt;&lt;/a&gt;常用操作数据库的命令&lt;/h5&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;databases&lt;/span&gt;; 查看所有的数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;; 创建一个叫test的数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;;删除一个叫test的数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;tables&lt;/span&gt;; 在选中的数据库之中查看所有的表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;;选中库 ,在建表之前必须要选择数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; 表名; 删除表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; 表名 (字段&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 类型, 字段&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 类型);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;desc 表名;查看所在的表的字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; 表名; 查看创建表的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;databases&lt;/span&gt; 库名;查看创建库的详细信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE基础知识</title>
    <link href="/2018/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-06-28-JavaSE基础知识/</id>
    <published>2018-06-28T02:36:00.000Z</published>
    <updated>2020-09-28T08:51:59.961Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>字节</strong>是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储,8个bit（二进制位） 0000-0000表示为1个字节，写成1 byte或者1 B。</p><p><strong>Dos命令</strong>((Microsoft Disk Operating System)):dir，cls,exit</p><a id="more"></a><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207122805940.png" alt="image-20200207122805940"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207123019391.png" alt="image-20200207123019391"></p><p><strong>编译</strong> ：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。<br><strong>运行</strong> ：是指将 class 文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p><p><strong>main 方法</strong>：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207131438485.png" alt="image-20200207131438485"></p><p>Java中的默认类型：整数类型是 int 、浮点类型是 double ，float要在数字后加F,long要加L,推荐使用大写字母后缀。</p><h5 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h5><p>包装类分成引用和实例，引用在栈（stack）中，具体实例在堆（heap）中，jdk5.0开始增加自动装箱/拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(<span class="number">1</span>); <span class="comment">//手动装箱</span></span><br><span class="line">Integer j = <span class="number">1</span>; <span class="comment">//自动装箱</span></span><br><span class="line">Integer i0 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> i1 = i0; <span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> i2 = i0.intValue(); <span class="comment">//手动拆箱</span></span><br></pre></td></tr></table></figure><h5 id="包装类缓存机制"><a href="#包装类缓存机制" class="headerlink" title="包装类缓存机制"></a>包装类缓存机制</h5><p><strong>Java对部分经常使用的数据采用缓存技术，在类第一次被加载时换创建缓存和数据。当使用等值对象时直接从缓存中获取，从而提高了程序执行性能。（通常只对常用数据进行缓存）</strong></p><p><strong>1 equals方法比较的是真正的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> i0 = <span class="number">0.1</span>;</span><br><span class="line">Double i1 = <span class="keyword">new</span> Double(<span class="number">0.1</span>);</span><br><span class="line">Double i2 = <span class="keyword">new</span> Double(<span class="number">0.1</span>);</span><br><span class="line">System.out.println(i1.equals(i2)); <span class="comment">//true 2个包装类比较，比较的是包装的基本数据类型的值</span></span><br><span class="line">System.out.println(i1.equals(i0)); <span class="comment">//true 基本数据类型和包装类型比较时，会先把基本数据类型包装后再比较</span></span><br></pre></td></tr></table></figure><p>基本数据类型和包装类比较时，会先把基本数据类型包装成对应的包装类型，再进行比较。查看JDK中Double包装类的equals方法：</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207145148748.png" alt="image-20200207145148748"></p><p>equals方法中的参数是一个Object对象，而基本数据类型并不是一个对象类型，所以需要先将基本数据类型包装成对应的包装类后才能作为参数传入equals方法中。</p><p><strong>2  ==（双等号）比较对象内存地址</strong></p><p><strong>对于基本数据类型，==（双等号）比较的是值，而对于包装类型，==（双等号）比较的则是2个对象的内存地址。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> i0 = <span class="number">0.1</span>;</span><br><span class="line">Double i1 = <span class="keyword">new</span> Double(<span class="number">0.1</span>);</span><br><span class="line">Double i2 = <span class="keyword">new</span> Double(<span class="number">0.1</span>);</span><br><span class="line">System.out.println(i1 == i2);    <span class="comment">//false new出来的都是新的对象</span></span><br><span class="line">System.out.println(i1 == i0);    <span class="comment">//true 基本数据类型和包装类比较，会先把包装类拆箱</span></span><br></pre></td></tr></table></figure><p><strong>new出来的都是新的对象</strong>。2个新的对象内存地址不同，那么==号比较的结果肯定是false。<br>基本数据类型和包装类型比较时，会先把包装类拆箱再进行值比较（和equals是反的）。</p><p>另一个陷阱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Double i1 = Double.valueOf(<span class="number">0.1</span>);</span><br><span class="line">Double i2 = Double.valueOf(<span class="number">0.1</span>);</span><br><span class="line">System.out.println(i1 == i2); <span class="comment">//false valueOf方法内部实际上也是new</span></span><br></pre></td></tr></table></figure><p><strong>valueOf内部也是用的new方法来构造对象的</strong>。2个new出来的对象，内存地址肯定是不一样的。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207145702858.png" alt="image-20200207145702858"></p><p>下面的代码运行结果却让人大跌眼镜：（<strong>缓存机制</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.valueOf(<span class="number">1</span>) ==Integer.valueOf(<span class="number">1</span>)); <span class="comment">//true </span></span><br><span class="line">System.out.println(Integer.valueOf(<span class="number">999</span>) ==Integer.valueOf(<span class="number">999</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>查看Integer.valueOf方法的源码：</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207150009985.png" alt="image-20200207150009985"></p><p>可以看到，当i的值在low和high范围内是，返回的是一个cache里的Integer对象。从-128到到127之间的值都被缓存到cache里了。这个叫做<strong>包装类的缓存</strong>。<br>Integer默认缓存是-128到127之间的对象，最大值127可以通过<code>-XX:AutoBoxCacheMax=size</code>修改。</p><p>包装类中整数型的类型基本上都有缓存数据。可以通过阅读源码了解。不过只有Integer类可以通过修改JVM参数来更改缓存上限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Integer类型有缓存-128-127的对象。缓存上限可以通过配置jvm更改</span><br><span class="line">2. Byte,Short,Long类型有缓存(-128-127)</span><br><span class="line">3. Character缓存0-127</span><br><span class="line">4. Boolean缓存TRUE、FALSE</span><br></pre></td></tr></table></figure><p>尤其需要特别注意的是，<strong>只有valueOf方法构造对象时会用到缓存，new方法等不会使用缓存！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer i4 = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">Integer i5 =<span class="number">1</span>;</span><br><span class="line">System.out.println(i4 == i5); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer i7 = Integer.valueOf(<span class="number">999</span>);</span><br><span class="line">Integer i8 = <span class="number">999</span>;</span><br><span class="line">System.out.println(i7 == i8); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p> <strong>自动包装时实际上还是调用的valueOf方法</strong>。而上面我们讲过的，valueOf方法用到了缓存池。</p><h5 id="Java基本类型内存占用"><a href="#Java基本类型内存占用" class="headerlink" title="Java基本类型内存占用"></a>Java基本类型内存占用</h5><p><strong>Java数据类型在不同机器中的大小都相同</strong>。</p><p><strong>内存公式</strong>：Java对象的内存布 = 对象头(Header) + 实例数据(Instance Data) + 补齐填充(Padding)。</p><p><strong>对象头不开压缩16字节，开压缩12字节；对象引用不开压缩8字节，开压缩4字节；填充到8字节的倍数；数组对象头24字节，压缩后16字节</strong>；<strong>String包含2个属性，一个用于存放字符串数据的char[], 一个int类型的hashcode</strong></p><p><strong>对象头：Instance Header</strong>，Java对象最复杂的一部分，采用C++定义了头的协议格式，存储了Java对象hash、GC年龄、锁标记、class指针、数组长度等信息，稍后做出详细解说。<strong>在64位机器上，默认不开启指针压缩（-XX:-UseCompressedOops）的情况下，对象头占用16bytes，开启指针压缩（-XX:+UseCompressedOops）则占用12bytes。</strong></p><p><strong>实例数据：Instance Data</strong>，这部分数据才是真正具有业务意义的数据，实际上就是当前对象中的实例字段。在VM中，对象的字段是由基本数据类型和引用类型组成的。<strong>对象引用（ref）类型在64位机器上，关闭指针压缩时占用8bytes， 开启时占用4bytes。</strong></p><p><img src="../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207151343064.png" alt="image-20200207151343064"></p><p><strong>补齐填充</strong>：Java对象占用空间是8字节对齐的，即所有Java对象占用bytes数必须是8的倍数</p><p><strong>Shallow Size</strong><br>对象自身占用的内存大小，不包括它引用的对象。<br>针对非数组类型的对象，它的大小就是对象与它所有的成员变量大小的总和。当然这里面还会包括一些java语言特性的数据存储单元。<br>针对数组类型的对象，它的大小是数组元素对象的大小总和。</p><p><strong>Retained Size</strong><br>Retained Size=当前对象大小+当前对象可直接或间接引用到的对象的大小总和。(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)<br>换句话说，Retained Size就是当前对象被GC后，从Heap上总共能释放掉的内存。<br>不过，释放的时候还要排除被GC Roots直接或间接引用的对象。他们暂时不会被被当做Garbage。</p><p><strong>JProfiler可以验证内存占用</strong>，默认64位，<strong>打开指针压缩</strong></p><p>1 新建一个空对象，观察空对象内存占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207151841273.png" alt="image-20200207151841273"></p><p><strong>一般自建空对象占用内存 \</strong>16b**，16 = 12(Header) + 4(Padding)**</p><p>2 在TestObj中新增一个 int 属性，观察对象内存占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span> </span>&#123;<span class="keyword">private</span> <span class="keyword">int</span> i;&#125;</span><br></pre></td></tr></table></figure><p><strong>int 占用 \</strong>4b**， 16 = 12(Header) + 4(int)**</p><p>3 在TestObj中新增一个 long 属性，观察对象内存占用</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207152024616.png" alt="image-20200207152024616"></p><p><strong>long 占用 \</strong>8b**， 24 = 12(Header) + 8(long) + 4(Padding)**</p><h5 id="Java包装类型内存占用"><a href="#Java包装类型内存占用" class="headerlink" title="Java包装类型内存占用"></a>Java包装类型内存占用</h5><p><strong>包装类（Boolean/Byte/Short/Character/Integer/Long/Double/Float）占用内存的大小 = 对象头大小 + 底层基础数据类型的大小</strong>。<strong>包装类和其他引用类一样，会产生一个引用（reference）</strong></p><p><img src="../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207152330555.png" alt="image-20200207152330555"></p><p>1 在TestObj中新增一个 Integer 属性，观察对象内存占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span> </span>&#123; <span class="keyword">private</span> Integer  i =<span class="number">128</span>; &#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207152435036.png" alt="image-20200207152435036"></p><p><strong>Integer 占用 \</strong>16b**， 32 = 12 (Header) + 16(Integer) + 4(reference)**</p><p><strong>特别的：-128~127 在常量池，只占用 \</strong>4b****，且不产生引用（reference）</p><p>2 在TestObj中新增一个 Long 属性，观察对象内存占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span> </span>&#123; <span class="keyword">private</span> Long  l = <span class="keyword">new</span> Long(<span class="number">1</span>); &#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207152651205.png" alt="image-20200207152651205"></p><p><strong>Long 占用 \</strong>24b**， 40 = 12 (Header) + 24(Long) + 4(reference)**</p><h5 id="java数组内存占用"><a href="#java数组内存占用" class="headerlink" title="java数组内存占用"></a>java数组内存占用</h5><p><strong>64位机器上，数组对象的对象头占用24 bytes，启用压缩后占用16字节。</strong>比普通对象占用内存多是因为需要额外的空间存储数组的长度。基础数据类型数组占用的空间包括数组对象头以及基础数据类型数据占用的内存空间。由于对象数组中存放的是对象的引用，所以对象数组本身的大小=数组对象头+length * 引用指针大小，总大小为对象数组本身大小+存放的数据的大小之和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[<span class="number">10</span>]:</span><br><span class="line">开启压缩：<span class="number">16</span> + <span class="number">10</span> * <span class="number">4</span> = <span class="number">56</span> bytes；</span><br><span class="line">关闭压缩：<span class="number">24</span> + <span class="number">10</span> * <span class="number">4</span> = <span class="number">64</span>bytes。</span><br><span class="line"><span class="keyword">new</span> Integer[<span class="number">3</span>]:</span><br><span class="line">关闭压缩：</span><br><span class="line">    Integer数组本身：<span class="number">24</span>(header) + <span class="number">3</span> * <span class="number">8</span>(Integer reference) = <span class="number">48</span> bytes;</span><br><span class="line">    总共：<span class="number">48</span> + <span class="number">3</span> * <span class="number">24</span>(Integer) = <span class="number">120</span> bytes。</span><br><span class="line">开启压缩：</span><br><span class="line">    Integer数组本身：<span class="number">16</span>(header) + <span class="number">3</span> * <span class="number">4</span>(Integer reference) = <span class="number">28</span>(padding) -&gt; <span class="number">32</span> (bytes)</span><br><span class="line">    总共：<span class="number">32</span> + <span class="number">3</span> * <span class="number">16</span>(Integer) = <span class="number">80</span> (bytes)</span><br></pre></td></tr></table></figure><p>在TestObj中新增一个 char[] 属性，观察对象内存占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span> </span>&#123; <span class="keyword">private</span> <span class="keyword">char</span>[] c = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;; &#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207155445980.png" alt="image-20200207155445980"></p><p><strong>char[3] 占用 \</strong>24b*<em>， 24 = 40 - 16，24 = 16(Header) + 3 \</em> 2(char) + 2(Padding)**</p><p><strong>封装类型数组比基本类型的数组，需要多管理元素的引用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象数组本身的大小=数组对象头+length * 引用指针大小 + length * 存放单个元素大小</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span> </span>&#123; <span class="keyword">private</span> Integer[] i = &#123;<span class="number">128</span>,<span class="number">129</span>,<span class="number">130</span>&#125;; &#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207160801661.png" alt="image-20200207160801661"></p><p><strong>Integer[3] 占用 \</strong>80b*<em>， 80 = 96 - 16, 80 = 16(Header) + 3 \</em> 4 (reference)+ 3 * 16(Integer) +4(padding)**</p><h5 id="String内存占用"><a href="#String内存占用" class="headerlink" title="String内存占用"></a>String内存占用</h5><p>在JDK1.7及以上版本中，String包含2个属性，一个用于存放字符串数据的char[], 一个int类型的hashcode, 部分源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在关闭指针压缩时，一个空字符串(“”)的大小应为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个String本身需要 16(Header) + 8(char[] reference) + 4(int) = 32 bytes。</span><br><span class="line">一个char[]占用24 + length * 2 bytes(8字节对齐)</span><br><span class="line">即一个String占用的内存空间大小为：56 + length * 2 bytes (8字节对齐)。</span><br><span class="line">一个空字符串(&quot;&quot;)的大小应为：56 + 0 * 2 bytes = 56 bytes。</span><br></pre></td></tr></table></figure><p>字符串”abcde”在开启指针压缩时的大小为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String本身：12(Header) + 4(char[] reference) + 4(int hash) = 20(padding) -&gt; 24 (bytes); </span><br><span class="line">存储数据：16(char[] header) + 5*2 = 26(padding) -&gt; 32 (bytes)         </span><br><span class="line">总共：24 + 32 = 56 (bytes)</span><br></pre></td></tr></table></figure><p>在TestObj中新增一个空 String 属性，观察对象内存占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class TestObj &#123;private String s = new String(&quot;&quot;);&#125;</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207160230118.png" alt="image-20200207160230118"></p><p><strong>String 本身占用 \</strong>24b**， 24 = 40 -16<strong>，</strong>也就是说空””也需要16b**</p><p><strong>这里为什么要写String s = new String(“”)？</strong></p><p>答：如果写成String s = “”，是不会再堆中开辟内存的，也就看不到String占用的空间，你看到的将会是下面的，至于为什么，都是因为final</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207160341312.png" alt="image-20200207160341312"></p><h5 id="复杂对象内存占用"><a href="#复杂对象内存占用" class="headerlink" title="复杂对象内存占用"></a>复杂对象内存占用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> x; <span class="comment">// 4字节</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> y; <span class="comment">// 4字节 </span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> flag; <span class="comment">// 1字节</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> z; <span class="comment">// 4字节</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsObjectSizer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"继承对象的大小为："</span> + ObjectSizeFetcher.sizeOf(<span class="keyword">new</span> Child()) + <span class="string">"字节"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">## 没有开启指针压缩功能 40byte</span><br><span class="line">java -XX:-UseCompressedOops -javaagent:ObjectSizeFetcherAgent-<span class="number">1.0</span>-SNAPSHOT.jar com.twq.ExtendsObjectSizer</span><br><span class="line">## 开启指针压缩功能 32byte</span><br><span class="line">java -XX:+UseCompressedOops -javaagent:ObjectSizeFetcherAgent-<span class="number">1.0</span>-SNAPSHOT.jar com.twq.ExtendsObjectSizer</span><br></pre></td></tr></table></figure><p>40字节 = 16 + (4 + 4 + 1 + 7) + 4 + 7</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207161601497.png" alt="image-20200207161601497"></p><p>32字节 = 12 + 4 + 4 + 1 + 7 + 4</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207161658653.png" alt="image-20200207161658653"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 4字节</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> high; <span class="comment">// 8字节</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num; <span class="comment">// 4字节</span></span><br><span class="line">    <span class="keyword">private</span> Employee[] employees = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class="line">            employees[i] = <span class="keyword">new</span> Employee();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeObjectSizer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"复合对象内存的大小为："</span> + ObjectSizeFetcher.sizeOf(<span class="keyword">new</span> Dept()) + <span class="string">"字节"</span>);</span><br><span class="line">        System.out.println(<span class="string">"复合对象内存的总大小为："</span> + ObjectSizeFetcher.fullSizeOf(<span class="keyword">new</span> Dept()) + <span class="string">"字节"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出复合对象内存的大小为<code>32字节 = 对象头16字节 + num属性4字节 + employees引用类型的大小8字节 + 对齐补充4字节</code></p><p>这个32字节也只是直接计算当前Dept对象占用空间大小，这个大小并没有包含数组<code>employees</code>中所有的<code>Employee</code>的内存大小，那么这个复合对象的总大小为<code>176字节</code>，这个大小包括了数组<code>employees</code>中所有的<code>Employee</code>的内存大小，也就是递归计算当前对象占用空间总大小。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207161943319.png" alt="image-20200207161943319"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 开启指针压缩功能</span><br><span class="line">java -XX:+UseCompressedOops -javaagent:ObjectSizeFetcherAgent-``<span class="number">1.0</span>``-SNAPSHOT.jar com.twq.CompositeObjectSizer</span><br></pre></td></tr></table></figure><p>可以看出复合对象内存的大小为<code>24字节 = 对象头12字节 + num属性4字节 + employees引用类型的大小4字节 + 对齐补充4字节</code></p><p>在开启指针压缩功能的情况下，Dept复合对象的总大小为128字节，如下图： </p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207162125624.png" alt="image-20200207162125624"></p><p><strong>ArrayList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>static变量属于类，不属于实例，存放在全局数据段。普通变量才纳入Java对象占用空间的计算</strong>，一个用于存放数组元素的Object[], 一个int类型的size，还有一个是父类中int类型的modCount。因此：</p><ul><li>在64位操作系统，且未开启指针压缩功能的前提下，<code>new ArrayList()</code>的内存大小应为：对象头16字节 + 父类属性modCount大小4字节 + 对齐补充4字节 + 子类Object[]引用类型的8字节 + 子类int类型的属性大小4字节 + 对齐补充4字节 = 40字节</li><li>在64位操作系统，且开启了指针压缩功能的前提下，<code>new ArrayList()</code>的内存大小应为：对象头12字节 + 父类属性modCount大小4字节 + 对齐补充4字节 + 子类Object[]引用类型的4字节 + 子类int类型的属性大小4字节 + 对齐补充4字节 = 32字节</li></ul><h5 id="常用数据类型转换"><a href="#常用数据类型转换" class="headerlink" title="常用数据类型转换"></a>常用数据类型转换</h5><p>范围小的类型向范围大的类型提升， byte 、short、char 运算时直接提升为 int 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>‐‐&gt;<span class="keyword">int</span>‐‐&gt;<span class="keyword">long</span>‐‐&gt;<span class="keyword">float</span>‐‐&gt;<span class="keyword">double</span></span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207170110978.png" alt="image-20200207170110978"></p><p><strong>强制类型转换</strong> ：将 取值范围大的类型 强制转换成 取值范围小的类型 。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207170709348.png" alt="image-20200207170709348"></p><h5 id="String的类型转换"><a href="#String的类型转换" class="headerlink" title="String的类型转换"></a>String的类型转换</h5><p><strong>String转int和long和float</strong></p><p>把String类型转换为int类型，常用的有以下三种方法：parseInt,强制转换，先转Integer类型再调用intValue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String number = <span class="string">"123456"</span>;</span><br><span class="line">    <span class="keyword">int</span> num1 = Integer.parseInt(number);<span class="comment">//使用Integer的parseInt方法</span></span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="keyword">new</span> Integer(number);<span class="comment">//强制转换</span></span><br><span class="line">    <span class="keyword">int</span> num3 = Integer.valueOf(number).intValue();<span class="comment">//先转Integer类型，再调用intValue()转为int</span></span><br><span class="line">    <span class="keyword">long</span> num1 = Long.parseLong(number);<span class="comment">//调用Long类型的parseLong方法</span></span><br><span class="line"><span class="keyword">long</span> num2 = <span class="keyword">new</span> Long(number);<span class="comment">//强制转换</span></span><br><span class="line"><span class="keyword">long</span> num3 = Long.valueOf(number).longValue();<span class="comment">//先转换Long类型，再使用longValue方法转为long</span></span><br><span class="line">    <span class="keyword">float</span> num1 = Float.parseFloat(number);<span class="comment">//调用Float的parseFloat方法</span></span><br><span class="line"><span class="keyword">float</span> num2 = <span class="keyword">new</span> Float(number);<span class="comment">//强制转换</span></span><br><span class="line"><span class="keyword">float</span> num3 = Float.valueOf(number).floatValue();<span class="comment">//先转为Float类型再使用floatValue转为float</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>String转byte[]</strong></p><p>使用String类自带的<code>getBytes()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] num = <span class="string">"1234567890"</span>.getBytes();</span><br></pre></td></tr></table></figure><p>这里补充一个path类型转换为String类型的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String fileName=path.getFileName().toString();</span><br></pre></td></tr></table></figure><h5 id="long类型转换"><a href="#long类型转换" class="headerlink" title="long类型转换"></a>long类型转换</h5><p><strong>long转String</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> number = <span class="number">1234567890l</span>;</span><br><span class="line">String num1 = Long.toString(number);<span class="comment">//Long的tostring方法</span></span><br><span class="line">String num2 = String.valueOf(number);<span class="comment">//使用String的valueOf方法</span></span><br><span class="line">String num3 = <span class="string">""</span> + number;<span class="comment">//这个应该属于强制转换吧</span></span><br></pre></td></tr></table></figure><p><strong>long转int</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> number = <span class="number">121121121l</span>;</span><br><span class="line"><span class="keyword">int</span> num1 = (<span class="keyword">int</span>) number;<span class="comment">// 强制类型转换</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="keyword">new</span> Long(number).intValue();<span class="comment">// 调用intValue方法</span></span><br><span class="line"><span class="keyword">int</span> num3 = Integer.parseInt(String.valueOf(number));<span class="comment">// 先把long转换位字符串String，然后转换为Integer</span></span><br></pre></td></tr></table></figure><h5 id="byte数组类型转换"><a href="#byte数组类型转换" class="headerlink" title="byte数组类型转换"></a>byte数组类型转换</h5><p>在Java的网络编程中传输的经常是byte数组，但我们实际中使用的数据类型可能是任一种数据类型，这就需要在它们之间相互转换，转换的核心在于将其他类型的数据的每一位转换成byte类型的数据。 </p><p><strong>string与byte数组的互转</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] number = <span class="string">"121121"</span>.getBytes();</span><br><span class="line">String num1 = <span class="keyword">new</span> String(number);</span><br></pre></td></tr></table></figure><p><strong>short与byte数组的互转</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换short为byte</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putShort</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">short</span> s, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     b[index + <span class="number">1</span>] = (<span class="keyword">byte</span>) (s &gt;&gt; <span class="number">8</span>);<span class="comment">//取最高8位放到1下标</span></span><br><span class="line">     b[index + <span class="number">0</span>] = (<span class="keyword">byte</span>) (s &gt;&gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过byte数组取到short</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">short</span> <span class="title">getShort</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">short</span>) (((b[index + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | b[index + <span class="number">0</span>] &amp; <span class="number">0xff</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>int与byte数组的互转</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将32位的int值放到4字节的byte数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] intToByteArray(<span class="keyword">int</span> num) &#123;</span><br><span class="line">   <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">   result[<span class="number">0</span>] = (<span class="keyword">byte</span>)(num &gt;&gt;&gt; <span class="number">24</span>);<span class="comment">//取最高8位放到0下标</span></span><br><span class="line">   result[<span class="number">1</span>] = (<span class="keyword">byte</span>)(num &gt;&gt;&gt; <span class="number">16</span>);<span class="comment">//取次高8为放到1下标</span></span><br><span class="line">   result[<span class="number">2</span>] = (<span class="keyword">byte</span>)(num &gt;&gt;&gt; <span class="number">8</span>); <span class="comment">//取次低8位放到2下标</span></span><br><span class="line">   result[<span class="number">3</span>] = (<span class="keyword">byte</span>)(num );      <span class="comment">//取最低8位放到3下标</span></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将4字节的byte数组转成一个int值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">byteArrayToInt</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] a = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> i = a.length - <span class="number">1</span>,j = b.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &gt;= <span class="number">0</span> ; i--,j--) &#123;<span class="comment">//从b的尾部(即int值的低位)开始copy数据</span></span><br><span class="line">        <span class="keyword">if</span>(j &gt;= <span class="number">0</span>)</span><br><span class="line">            a[i] = b[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[i] = <span class="number">0</span>;<span class="comment">//如果b.length不足4,则将高位补0</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">int</span> v0 = (a[<span class="number">0</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>;<span class="comment">//&amp;0xff将byte值无差异转成int,避免Java自动类型提升后,会保留高位的符号位</span></span><br><span class="line">    <span class="keyword">int</span> v1 = (a[<span class="number">1</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">int</span> v2 = (a[<span class="number">2</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> v3 = (a[<span class="number">3</span>] &amp; <span class="number">0xff</span>) ;</span><br><span class="line">    <span class="keyword">return</span> v0 + v1 + v2 + v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>long与byte数组的互转</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将64位的long值放到8字节的byte数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] longToByteArray(<span class="keyword">long</span> num) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">    result[<span class="number">0</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">56</span>);<span class="comment">// 取最高8位放到0下标</span></span><br><span class="line">    result[<span class="number">1</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">48</span>);<span class="comment">// 取最高8位放到0下标</span></span><br><span class="line">    result[<span class="number">2</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">40</span>);<span class="comment">// 取最高8位放到0下标</span></span><br><span class="line">    result[<span class="number">3</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">32</span>);<span class="comment">// 取最高8位放到0下标</span></span><br><span class="line">    result[<span class="number">4</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">24</span>);<span class="comment">// 取最高8位放到0下标</span></span><br><span class="line">    result[<span class="number">5</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">16</span>);<span class="comment">// 取次高8为放到1下标</span></span><br><span class="line">    result[<span class="number">6</span>] = (<span class="keyword">byte</span>) (num &gt;&gt;&gt; <span class="number">8</span>); <span class="comment">// 取次低8位放到2下标</span></span><br><span class="line">    result[<span class="number">7</span>] = (<span class="keyword">byte</span>) (num); <span class="comment">// 取最低8位放到3下标</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将8字节的byte数组转成一个long值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">byteArrayToInt</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] a = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> i = a.length - <span class="number">1</span>, j = byteArray.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--, j--) &#123;<span class="comment">// 从b的尾部(即int值的低位)开始copy数据</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span>)</span><br><span class="line">            a[i] = byteArray[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[i] = <span class="number">0</span>;<span class="comment">// 如果b.length不足4,则将高位补0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意此处和byte数组转换成int的区别在于，下面的转换中要将先将数组中的元素转换成long型再做移位操作，</span></span><br><span class="line">    <span class="comment">// 若直接做位移操作将得不到正确结果，因为Java默认操作数字时，若不加声明会将数字作为int型来对待，此处必须注意。</span></span><br><span class="line">    <span class="keyword">long</span> v0 = (<span class="keyword">long</span>) (a[<span class="number">0</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">56</span>;<span class="comment">// &amp;0xff将byte值无差异转成int,避免Java自动类型提升后,会保留高位的符号位</span></span><br><span class="line">    <span class="keyword">long</span> v1 = (<span class="keyword">long</span>) (a[<span class="number">1</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">long</span> v2 = (<span class="keyword">long</span>) (a[<span class="number">2</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">long</span> v3 = (<span class="keyword">long</span>) (a[<span class="number">3</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">long</span> v4 = (<span class="keyword">long</span>) (a[<span class="number">4</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">long</span> v5 = (<span class="keyword">long</span>) (a[<span class="number">5</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">long</span> v6 = (<span class="keyword">long</span>) (a[<span class="number">6</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">long</span> v7 = (<span class="keyword">long</span>) (a[<span class="number">7</span>] &amp; <span class="number">0xff</span>);</span><br><span class="line">    <span class="keyword">return</span> v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>float与byte数组的互转</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putFloat</span><span class="params">(<span class="keyword">byte</span>[] bb, <span class="keyword">float</span> x, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// byte[] b = new byte[4];</span></span><br><span class="line">    <span class="keyword">int</span> l = Float.floatToIntBits(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        bb[index + i] = <span class="keyword">new</span> Integer(l).byteValue();</span><br><span class="line">        l = l &gt;&gt; <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    l = b[index + <span class="number">0</span>];</span><br><span class="line">    l &amp;= <span class="number">0xff</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[index + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffff</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[index + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffffff</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[index + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    <span class="keyword">return</span> Float.intBitsToFloat(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>double与byte数组的互转</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putDouble</span><span class="params">(<span class="keyword">byte</span>[] bb, <span class="keyword">double</span> x, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// byte[] b = new byte[8];</span></span><br><span class="line">    <span class="keyword">long</span> l = Double.doubleToLongBits(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        bb[index + i] = <span class="keyword">new</span> Long(l).byteValue();</span><br><span class="line">        l = l &gt;&gt; <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> l;</span><br><span class="line">    l = b[<span class="number">0</span>];</span><br><span class="line">    l &amp;= <span class="number">0xff</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffff</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffffff</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffffffffl</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">4</span>] &lt;&lt; <span class="number">32</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffffffffffl</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">5</span>] &lt;&lt; <span class="number">40</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffffffffffffl</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">6</span>] &lt;&lt; <span class="number">48</span>);</span><br><span class="line">    l &amp;= <span class="number">0xffffffffffffffl</span>;</span><br><span class="line">    l |= ((<span class="keyword">long</span>) b[<span class="number">7</span>] &lt;&lt; <span class="number">56</span>);</span><br><span class="line">    <span class="keyword">return</span> Double.longBitsToDouble(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="int类型的转换"><a href="#int类型的转换" class="headerlink" title="int类型的转换"></a>int类型的转换</h5><p><strong>int转String</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">121121</span>;</span><br><span class="line">String num1 = Integer.toString(number);<span class="comment">//使用Integer的toString方法</span></span><br><span class="line">String num2 = String.valueOf(number);<span class="comment">//使用String的valueOf方法</span></span><br><span class="line">String num3 = <span class="string">""</span> + number;<span class="comment">//也是强制转换吧</span></span><br></pre></td></tr></table></figure><p><strong>int转long</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">123111</span>;</span><br><span class="line"><span class="keyword">long</span> num1 = (<span class="keyword">long</span>) number;<span class="comment">//强制</span></span><br><span class="line"><span class="keyword">long</span> num2 = Long.parseLong(<span class="keyword">new</span> Integer(number).toString());<span class="comment">//先转String再进行转换</span></span><br><span class="line"><span class="keyword">long</span> num3 = Long.valueOf(number);</span><br></pre></td></tr></table></figure><p><strong>int转Interger</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">123456</span>;</span><br><span class="line">Integer num1 = Integer.valueOf(number);</span><br><span class="line">Integer num2 = <span class="keyword">new</span> Integer(number);</span><br></pre></td></tr></table></figure><h5 id="int-进制转换"><a href="#int-进制转换" class="headerlink" title="int 进制转换"></a>int 进制转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"十进制转换到其它进制："</span>);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">123</span> ;</span><br><span class="line">        String str1 = Integer.toHexString(x) ;      <span class="comment">///10进制转换成16进制的字符串</span></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        String str2 = Integer.toOctalString(x) ;     <span class="comment">///10进制转换成8进制的字符串</span></span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        String str3 = Integer.toBinaryString(x) ;    <span class="comment">///10进制转换成2进制的字符串</span></span><br><span class="line">        System.out.println(str3);</span><br><span class="line">        String str4 = Integer.toString(<span class="number">123456</span>,<span class="number">7</span>) ;  <span class="comment">///10进制转换成7进制的字符串</span></span><br><span class="line">        <span class="comment">///String str4 = Integer.toString(i,x) ;  ///10进制的数字i转换成x进制的字符串</span></span><br><span class="line">        System.out.println(<span class="string">"其它制转换到十进制："</span>);</span><br><span class="line">        <span class="keyword">int</span> y1= Integer.valueOf(<span class="string">"FFFF"</span>,<span class="number">16</span>);     <span class="comment">///16进制转换成10进制</span></span><br><span class="line">        System.out.println(y1);</span><br><span class="line">        <span class="keyword">int</span> y2=Integer.valueOf(<span class="string">"776"</span>,<span class="number">8</span>);        <span class="comment">///8进制转换成10进制</span></span><br><span class="line">        System.out.println(y2);</span><br><span class="line">        <span class="keyword">int</span> y3=Integer.valueOf(<span class="string">"0101"</span>,<span class="number">2</span>);       <span class="comment">//2进制转换成10进制</span></span><br><span class="line">        System.out.println(y3);</span><br><span class="line">        <span class="keyword">int</span> y4=Integer.valueOf(<span class="string">"101"</span>,<span class="number">7</span>);        <span class="comment">//7进制转换成10进制</span></span><br><span class="line">        System.out.println(y4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///Integer.valueOf("str",x); ///可以为任意进制的字符串str转换成x进制的10进制数</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"其它的可能用到的函数："</span>);</span><br><span class="line">        <span class="comment">//static int parseInt(String s, int radix) //使用第二个参数指定的基数，将字符串参数解析为有符号的整数。</span></span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(<span class="string">"776"</span>, <span class="number">8</span>) ; <span class="comment">///8进制转换成10进制</span></span><br><span class="line">        System.out.println(n);</span><br><span class="line">        <span class="comment">///Integer.valueOf()返回一个“integer对象”和Integer.parseInt()返回一个“int值”的区别在于，返回值不同</span></span><br><span class="line">        <span class="comment">///基本常识，其他的非10进制的数的保存，基本都是以字符串的形式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">///例子：7进制到8进制的转换</span></span><br><span class="line">        String q = <span class="string">"6523"</span> ; <span class="comment">///7进制的字符串</span></span><br><span class="line">        String b = Integer.toString(Integer.valueOf(q,<span class="number">7</span>),<span class="number">8</span>) ;<span class="comment">///这样7进制就变成8进制了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE = <span class="number">0x7fffffff</span> 最大值 (<span class="number">2</span>^<span class="number">31</span>-<span class="number">1</span>)</span><br><span class="line">Integer.MIN_VALUE = <span class="number">0x80000000</span> 最小值 (-<span class="number">2</span>^<span class="number">31</span>)</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207172124800.png" alt="image-20200207172124800"></p><p>++a：变量a自己加1，将加1后的结果赋值给b；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b=<span class="number">2</span>;</span><br><span class="line">b+=<span class="number">1</span>;<span class="comment">//s = (short)(s + 1) </span></span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><p>b3 = 1 + 2 ， 1 和  2 是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了 1+2 的结果并没有超过byte类型的取值范围，可以赋值给变量 b3 ，因此 b3=1 + 2 是正确的。但b3=1+200报错。b4=byte1+byte2报错</p><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①; 布尔表达式②; 步进表达式④)&#123;</span><br><span class="line">循环体③        </span><br><span class="line">&#125;</span><br><span class="line">执行顺序：①②③④ &gt;②③④&gt;②③④…②不满足为止。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①; 循环条件②; 步进表达式⑦) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化表达式③; 循环条件④; 步进表达式⑥) &#123;</span><br><span class="line">       执行语句⑤;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行顺序：①②③④⑤⑥ &gt;④⑤⑥&gt;⑦②③④⑤⑥&gt;④⑤⑥</span><br></pre></td></tr></table></figure><h5 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h5><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207174244711.png" alt="image-20200207174244711"></p><p><strong>IDEA设置jdk为1.8</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Project Structure-&gt;Project里Project sdk以及project language level</span><br><span class="line">Project Structure-&gt;Modules里Sources里的Language level</span><br><span class="line">打开【File】—【Settings】，找到【Java Compiler】将下边的5或者1.5修改为8或者1.8</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Idea控制台中文乱码解决：-Dfile.encoding=gb2312</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200307132648313.png" alt="image-20200307132648313"></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    change(a, b);</span><br><span class="line">    System.out.println(a);<span class="comment">//1</span></span><br><span class="line">    System.out.println(b);<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = b + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    change(arr);</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);<span class="comment">//&#123;200,3,5&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">   arr[<span class="number">0</span>] = <span class="number">200</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><p>递归一定要有条件限定，保证递归能够停止下来，次数不要太多，否则会发生栈内存溢出。</p><p>01_递归导致栈内存溢出的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_%E9%80%92%E5%BD%92%E5%AF%BC%E8%87%B4%E6%A0%88%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="01_递归导致栈内存溢出的原理"></p><p>02_递归求和的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_%E9%80%92%E5%BD%92%E6%B1%82%E5%92%8C%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="02_递归求和的原理"></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207182054243.png" alt="image-20200207182054243"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207175456082.png" alt="image-20200207175456082"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200207175648736.png" alt="image-20200207175648736"></p><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>继承后构造子类顺序:先初始化父类，再初始化子类，先初始化属性在调用构造函数；static在涉及到继承的时候，会先初始化父类的static变量，然后是子类的。</p><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p><img src="../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200210161241969.png" alt="image-20200210161241969"></p><h5 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h5><p>01-只有一个对象的内存图</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01-%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="01-只有一个对象的内存图"></p><p>02-两个对象使用同一个方法的内存图</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02-%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="02-两个对象使用同一个方法的内存图"></p><p>03-两个引用指向同一个对象的内存图</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03-%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-两个引用指向同一个对象的内存图"></p><p>04-使用对象类型作为方法的参数</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="04-使用对象类型作为方法的参数"></p><p>05-使用对象类型作为方法的返回值</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/05-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="05-使用对象类型作为方法的返回值"></p><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>类似于this，子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰父类成员变量</p><p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。</p><p>03-super与this的内存图</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03-super%E4%B8%8Ethis%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-super与this的内存图"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04-Java%E7%BB%A7%E6%89%BF%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E7%82%B9.png" alt="04-Java继承的三个特点"></p><h5 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h5><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/05-%E6%8A%BD%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt="05-抽象的概念"></p><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>接口的定义，与定义类方式相似，但是使用  interface 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。（引用数据类型：数组，类，接口）</p><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。<strong>如果父接口中的默认方法有重名的，那么子接口需要重写一次。</strong>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DDDDDDDDDDDD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 未重写methodA方法  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">DDDDDDDDDDDD</span><br><span class="line"><span class="comment">// **如果父接口中的默认方法有重名的，那么子接口需要重写一次。**</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BBBBBBBBBBBBBBBBBBB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DDDDDDDDDDDDDD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口作为成员变量时，对它进行赋值的操作，实际上，是赋给它该接口的一个子类对象。</p><p>接口作为参数时，传递它的子类对象。<br>接口作为返回值类型时，返回它的子类对象。</p><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写<br>后方法。</p><p>04-使用多态的好处</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04-%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%80%81%E7%9A%84%E5%A5%BD%E5%A4%84.png" alt="04-使用多态的好处"></p><p>05-对象的上下转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型</span><br><span class="line">如果变量属于该数据类型，返回<span class="keyword">true</span>。</span><br><span class="line">如果变量不属于该数据类型，返回<span class="keyword">false</span>。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/05-%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8A%E4%B8%8B%E8%BD%AC%E5%9E%8B.png" alt="05-对象的上下转型"></p><h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><p>final ： 不可改变。可以用于修饰类、方法和变量。<br>类：被修饰的类，不能被继承。<br>方法：被修饰的方法，不能被重写。<br>变量：被修饰的变量，不能被重新赋值。引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的修改</p><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><p>内部类可以直接访问外部类的成员，包括私有成员。<br>外部类要访问内部类的成员，必须要建立内部类的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = new 外部类型().new 内部类型()；</span><br></pre></td></tr></table></figure><p>内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的 .class文件，但是前面冠以外部类的类名<br>和$符号 。比如，Person$Heart.class</p><h5 id="类加载器初始化"><a href="#类加载器初始化" class="headerlink" title="类加载器初始化"></a>类加载器初始化</h5><p>类加载（先父后子,静态代码块（执行一次）—-&gt;非静态代码块(执行多次）—-&gt;成员变量—-&gt;构造函数)</p><p>static在涉及到继承的时候，会先初始化父类的static变量，然后是子类的，依次类推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>块可以出现类中的任何地方（只要不是方法内部，记住，任何方法内部都不行），并且执行是按照<span class="keyword">static</span>块的顺序执行的。</span><br><span class="line">静态代码块，当第一次用到本类时,代码块执行唯一的一次,第二次使用的时候就不在执行了 </span><br><span class="line">非静态代码块，每次调用类都执行</span><br><span class="line">静态内容总是优先于非静态,所以静态代码块比构造方法优先执行</span><br><span class="line">常量在编译阶段会存入调用类的常量池，本质上并没有直接引用到定义常量的类，不会触发定义常量的类的初始化</span><br><span class="line">对类的主动使用：</span><br><span class="line">    <span class="number">1</span>. 创建类的实例</span><br><span class="line">    <span class="number">2</span>. 访问某个类或者接口的静态变量，或者对该静态变量赋值。</span><br><span class="line">    <span class="number">3</span>. 调用类的静态方法。</span><br><span class="line">    <span class="number">4</span>. 反射（Class.forName）</span><br><span class="line">    <span class="number">5</span>. 初始化类的子类</span><br><span class="line">    <span class="number">6</span>. java虚拟机启动时被标明为启动类的类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"Test"</span>);</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person "</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"MyClass"</span>);</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"myclass static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"myclass constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果为：</span><br><span class="line">test <span class="keyword">static</span></span><br><span class="line">myclass <span class="keyword">static</span></span><br><span class="line">person <span class="keyword">static</span></span><br><span class="line">person Test</span><br><span class="line">test constructor</span><br><span class="line">person MyClass</span><br><span class="line">myclass constructor</span><br><span class="line"></span><br><span class="line">为什么输出结果是这样的？我们来分析下这段代码的执行过程：</span><br><span class="line">找到main方法入口，main方法是程序入口，但在执行main方法之前，要先加载Test类</span><br><span class="line">加载Test类的时候，发现Test类有<span class="keyword">static</span>块，而是先执行<span class="keyword">static</span>块，输出test <span class="keyword">static</span>结果</span><br><span class="line">然后执行<span class="keyword">new</span> MyClass(),执行此代码之前，先加载MyClass类，发现MyClass类继承Test类，而是要先加载Test类，Test类之前已加载</span><br><span class="line">加载MyClass类，发现MyClass类有<span class="keyword">static</span>块，而是先执行<span class="keyword">static</span>块，输出myclass <span class="keyword">static</span>结果</span><br><span class="line">然后调用MyClass类的构造器生成对象，在生成对象前，需要先初始化父类Test的成员变量，而是执行Person person = <span class="keyword">new</span> Person(<span class="string">"Test"</span>)代码，发现Person类没有加载</span><br><span class="line">加载Person类，发现Person类有<span class="keyword">static</span>块，而是先执行<span class="keyword">static</span>块，输出person <span class="keyword">static</span>结果</span><br><span class="line">接着执行Person构造器，输出person Test结果</span><br><span class="line">然后调用父类Test构造器，输出test constructor结果，这样就完成了父类Test的初始化了</span><br><span class="line">再初始化MyClass类成员变量，执行Person构造器，输出person MyClass结果</span><br><span class="line">最后调用MyClass类构造器，输出myclass constructor结果，这样就完成了MyClass类的初始化了</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问以下程序运行后输出什么</span></span><br><span class="line"><span class="comment">//答案: 0, p, 5</span></span><br><span class="line"><span class="comment">//解析见以下注释，按序号顺序查看</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    A() &#123;<span class="keyword">this</span>.init(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">// 3.该函数被覆盖</span></span><br><span class="line">        System.out.println(<span class="string">"q"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">4</span>;</span><br><span class="line">    B(<span class="keyword">int</span> i) &#123; <span class="comment">// 2.A构造函数先于B构造函数运行</span></span><br><span class="line">        System.out.println(<span class="string">"p"</span>);<span class="comment">// 6.输出p</span></span><br><span class="line">        <span class="keyword">this</span>.i = i; <span class="comment">// 7. i被赋值为5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">// 4.实际执行的函数</span></span><br><span class="line">        <span class="comment">// 5.此时 i 尚未初始化，为0</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.程序开始运行</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> B(<span class="number">5</span>).i);</span><br><span class="line">        <span class="comment">// 8.输出</span></span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java常见坑"><a href="#Java常见坑" class="headerlink" title="Java常见坑"></a>Java常见坑</h4><h5 id="中间缓存变量机制"><a href="#中间缓存变量机制" class="headerlink" title="中间缓存变量机制"></a>中间缓存变量机制</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=j++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(j);<span class="comment">//j=0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原因</span></span><br><span class="line"><span class="comment">temp=j;</span></span><br><span class="line"><span class="comment">j=j+1;</span></span><br><span class="line"><span class="comment">j=temp;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="else问题"><a href="#else问题" class="headerlink" title="else问题"></a>else问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    A</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    B</span><br><span class="line">&#125;</span><br><span class="line">B不会执行，因为有<span class="keyword">else</span></span><br></pre></td></tr></table></figure><h5 id="应注意的问题"><a href="#应注意的问题" class="headerlink" title="应注意的问题"></a>应注意的问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaSE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span>   <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> Singleton s=<span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">reStudy</span></span>&#123;</span><br><span class="line"><span class="comment">//可变参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canParameterChange</span><span class="params">(<span class="keyword">int</span>... n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:n)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法参数传递的是引用</span></span><br><span class="line"><span class="comment">//static 隶属于类，只会生成一份，其他都是引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java随机数，以当前时间毫秒数做种子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRandom</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Random rand=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> j=rand.nextInt(<span class="number">100</span>)+<span class="number">1</span>;<span class="comment">//1~100</span></span><br><span class="line">System.out.println(rand.nextFloat());<span class="comment">//0~1</span></span><br><span class="line">        System.out.println(rand.nextBoolean());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==比较的是地址是否一样，equals比较的是值是否一样，需要在新类中重写equals方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果定义了构造器，则默认构造器无效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//垃圾清理，自适应的，分代的，停止复制，标记清扫的垃圾回收器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序，先基类后子类，是static在有类就初始化了，之后不会再初始化，其他非static块每次构造都运行，先static后变量后构造器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Arrays.toString(),返回数组的可打印版本，"12323".toCharArray(),返回字符数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认同包，private自己，protected自己和继承类，public都能访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以有多个main()方法，运行那个就是哪个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//finally 总会被执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@override可以确保被重载而不是覆写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//is-a用继承 has-a用组合 慎用继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常量的定义，final数据表示不可改变，对引用，表示引用的地址不可改变，值可能改变，final做参数表示无法更改,final方法和类也表示无法继承</span></span><br><span class="line"><span class="comment">//private无法继承，如果子类有一样的函数，看做新的函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUEONE=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态方法没有多态行</span></span><br><span class="line"><span class="comment">//向上转型（向基类转型）不会出现错误，乡向下转型，会出现异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象方法，如果有抽象方法，则类一定为抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">exampleAbstact</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span> <span class="params">(Object anObject)</span> ：将此字符串与指定对象进行比较。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span> <span class="params">(String anotherString)</span> ：将此字符串与指定对象进行比较，忽略大小写。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span> <span class="params">()</span> ：返回此字符串的长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span> <span class="params">(String str)</span> ：将指定的字符串连接到该字符串的末尾。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span> <span class="params">(<span class="keyword">int</span> index)</span> ：返回指定索引处的 <span class="keyword">char</span>值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span> <span class="params">(String str)</span> ：返回指定子字符串第一次出现在该字符串内的索引。如果没有检索到字符串s，该方法返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span> <span class="params">(<span class="keyword">int</span> beginIndex)</span> ：返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span> <span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> ：返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span>[] <span class="title">toCharArray</span> <span class="params">()</span> ：将此字符串转换为新的字符数组。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">getBytes</span> <span class="params">()</span> ：使用平台的默认字符集将该 String编码转换为新的字节数组。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span> <span class="params">(CharSequence target, CharSequence replacement)</span> ：将与target匹配的字符串使用replacement字符串替换。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex)</span> ：将此字符串按照给定的regex（规则）拆分为字符串数组。“,|</span>=”表示分割符分别为“，”和“=”</span><br><span class="line">trim()方法返回字符串的副本，忽略前导空格和尾部空格。</span><br><span class="line">startsWith()方法与endsWith()方法分别用于判断字符串是否以指定的内容开始或结束。这两个方法的返回值都为<span class="keyword">boolean</span>类型。</span><br><span class="line">toLowerCase()方法可将字符串中的所有字符从大写字母改写为小写字母，而tuUpperCase()方法可将字符串中的小写字母改写为大写字母。</span><br></pre></td></tr></table></figure><p>1 字符串不变：字符串的值在创建后不能被更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">s1 += <span class="string">"d"</span>;</span><br><span class="line">System.out.println(s1); <span class="comment">// "abcd"</span></span><br><span class="line"><span class="comment">// 内存中有"abc"，"abcd"两个对象，s1从指向"abc"，改变指向，指向了"abcd"。</span></span><br></pre></td></tr></table></figure><p>2 因为String对象是不可变的，所以它们可以被共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">// 内存中只有一个"abc"对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure><p>3  “abc” 等效于  char[] data={ ‘a’ , ‘b’ , ‘c’ } 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">相当于：</span><br><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;    </span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br><span class="line"><span class="comment">// String底层是靠字符数组实现的。</span></span><br></pre></td></tr></table></figure><p>4  String对象做参数，s先拷贝一份，再把拷贝的地址作为参数，s一直没有动过,String只读，不可改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String q=<span class="string">"abc"</span>;</span><br><span class="line">String qq=upcase(q);</span><br><span class="line">print(q);<span class="comment">//abc</span></span><br></pre></td></tr></table></figure><p>01-字符串的常量池</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200210141015058.png" alt="01-字符串的常量池"></p><h5 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h5><p>静态方法只能访问静态成员,不能直接访问普通成员变量或成员方法,不能使用 this关键字。</p><p>02-静态static关键字概述</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02-%E9%9D%99%E6%80%81static%E5%85%B3%E9%94%AE%E5%AD%97%E6%A6%82%E8%BF%B0.png" alt="02-静态static关键字概述"></p><p>03-静态的内存图</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03-%E9%9D%99%E6%80%81%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="03-静态的内存图"></p><h5 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h5><p>java.util.Arrays 此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来<br>非常简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static String toString(int[] a) ：返回指定数组内容的字符串表示形式。</span><br><span class="line">public static void sort(int[] a) ：对指定的 int 型数组按数字升序进行排序。</span><br></pre></td></tr></table></figure><h5 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h5><ul><li><code>java.utils.Collections</code>是集合工具类，用来对集合进行操作。部分方法如下：</li></ul><ul><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)</code>:往集合中添加一些元素。</li><li><code>public static void shuffle(List&lt;?&gt; list) 打乱顺序</code>:打乱集合顺序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</li></ul><p>在JAVA中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵活的当我需要做排序的时候在去选择的<code>java.util.Comparator</code>接口完成。</p><p><code>public int compare(String o1, String o2)</code>：比较其两个参数的顺序。大于0，并按照o1在后面，来看升降顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;<span class="comment">//o是第一个参数(Student this,Student o)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age‐o.age;<span class="comment">//升序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Comparable和Comparator两个接口的区别</strong></p><p><strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法被称为它的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p><p><strong>Comparator</strong>强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或有序映射）的顺序，或者为那些没有自然顺序的对象collection提供排序。</p><h5 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h5><p>java.lang.Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具<br>类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static double abs(double a) ：返回 double 值的绝对值。</span><br><span class="line">public static double ceil(double a) ：返回大于等于参数的最小的整数。</span><br><span class="line">public static double floor(double a) ：返回小于等于参数最大的整数。</span><br><span class="line">public static long round(double a) ：返回最接近参数的 long。(相当于四舍五入方法)</span><br></pre></td></tr></table></figure><h5 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h5><ul><li><code>public String toString()</code>：返回该对象的字符串表示。对象的类型+@+内存地址值。</li><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul><h5 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> Date()); <span class="comment">// Tue Jan 16 14:37:35 CST 2018</span></span><br><span class="line"><span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> Date(<span class="number">0L</span>)); <span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> 把日期对象转换成对应的时间毫秒值。</span></span><br></pre></td></tr></table></figure><h5 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h5><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p><ul><li><p><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。参数pattern是一个字符串，代表日期时间的自定义格式。”yyyy-MM-dd HH:mm:ss”</p></li><li><p><strong>格式化</strong>：<code>public String format(Date date)</code>：将Date对象格式化为字符串。</p></li><li><strong>解析</strong>：<code>public Date parse(String source)</code>：将字符串解析为Date对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span></span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String str = df.format(date);</span><br><span class="line">System.out.println(str); <span class="comment">// 2008年1月23日</span></span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String str = <span class="string">"2018年12月11日"</span>;</span><br><span class="line">Date date = df.parse(str);</span><br><span class="line">System.out.println(date); <span class="comment">// Tue Dec 11 00:00:00 CST 2018</span></span><br></pre></td></tr></table></figure><h5 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h5><p>Calendar为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建，返回子类对象，如下：</p><ul><li><code>public static Calendar getInstance()</code>：使用默认时区和语言环境获得一个日历</li></ul><ul><li><code>public int get(int field)</code>：返回给定日历字段的值。</li><li><code>public void set(int field, int value)</code>：将给定的日历字段设置为给定值。</li><li><code>public abstract void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li><code>public Date getTime()</code>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</li></ul><table><thead><tr><th>字段值</th><th>含义</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td></tr><tr><td>MONTH</td><td>月（从0开始，可以+1使用）</td></tr><tr><td>DAY_OF_MONTH</td><td>月中的天（几号）</td></tr><tr><td>HOUR</td><td>时（12小时制）</td></tr><tr><td>HOUR_OF_DAY</td><td>时（24小时制）</td></tr><tr><td>MINUTE</td><td>分</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>DAY_OF_WEEK</td><td>周中的天（周几，周日为1，可以-1使用）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">System.out.println(cal.get(Calendar.YEAR));</span><br><span class="line">cal.add(Calendar.YEAR,-<span class="number">3</span>);</span><br><span class="line">Date d=cal.getTime();</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">西方星期的开始为周日，中国为周一。</span><br><span class="line">在Calendar类中，月份的表示是以0-11代表1-12月。</span><br><span class="line">日期是有大小关系的，时间靠后，时间越大。</span><br></pre></td></tr></table></figure><h5 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h5><p><code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作，在System类的API文档中，常用的方法有：</p><ul><li><code>public static long currentTimeMillis()</code>：返回以毫秒为单位的当前时间。</li><li><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] src = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.arraycopy( src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">/*代码运行后：两个数组中的元素发生了变化</span></span><br><span class="line"><span class="comment">src数组元素[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">dest数组元素[1,2,3,9,10]*/</span></span><br></pre></td></tr></table></figure><h5 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h5><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_StringBuilder%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="01_StringBuilder的原理"></p><ul><li><code>public StringBuilder()</code>：构造一个空的StringBuilder容器。</li><li><code>public StringBuilder(String str)</code>：构造一个StringBuilder容器，并将字符串添加进去。</li><li><code>public StringBuilder append(...)</code>：添加任意类型数据的字符串形式，并返回当前对象自身。</li><li><code>public String toString()</code>：将当前StringBuilder对象转换为String对象。</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><p>普通的二叉查找树在极端情况下可退化成链表，红黑树是一种自平衡的二叉查找树，可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。最长路径不会超过最短路径的两倍。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%A2%E9%BB%91%E6%A0%91.bmp" alt="04_数据结构_红黑树"></p><p><img src="../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213123052561.png" alt="image-20200213123052561"></p><p><strong>插入</strong></p><p><strong>左旋</strong>：逆时针旋转红黑树的两个节点，使得父节点被自己的右孩子取代，而自己成为自己的左孩子</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213131450813.png" alt="image-20200213131450813"></p><p><strong>右旋：</strong>顺时针旋转红黑树的两个节点，使得父节点被自己的左孩子取代，而自己成为自己的右孩子。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213131539447.png" alt="image-20200213131539447"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213132517236.png" alt="image-20200213132517236"></p><p>4.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213132828641.png" alt="image-20200213132828641"></p><p>4.2.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213133223440.png" alt="image-20200213133223440"></p><p>4.2.2</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213133342513.png" alt="image-20200213133342513"></p><p>4.3.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213133454769.png" alt="image-20200213133454769"></p><p>4.3.2</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213133529880.png" alt="image-20200213133529880"></p><p><strong>删除</strong></p><ul><li>情景1：若删除结点无子结点，直接删除</li><li>情景2：若删除结点只有一个子结点，用子结点替换删除结点</li><li>情景3：若删除结点有两个子结点，用后继结点（大于删除结点的最小结点）替换删除结点</li></ul><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200213134115431.png" alt="image-20200213134115431"></p><p>上面所说的3种二叉树的删除情景可以相互转换并且最终都是转换为情景1！</p><ul><li>情景2：删除结点用其唯一的子结点替换，子结点替换为删除结点后，可以认为删除的是子结点，若子结点又有两个子结点，那么相当于转换为情景3，一直自顶向下转换，总是能转换为情景1。（对于红黑树来说，根据性质5.1，只存在一个子结点的结点肯定在树末了）</li><li>情景3：删除结点用后继结点（肯定不存在左结点），如果后继结点有右子结点，那么相当于转换为情景2，否则转为为情景1。</li></ul><p>综上所述，<strong>删除操作删除的结点可以看作删除替代结点，而替代结点最后总是在树末。</strong>有了这结论，我们讨论的删除红黑树的情景就少了很多，因为我们只考虑删除树末结点的情景了。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-edaf96e55f08c198.webp" alt="img"></p><p>2.1.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-1e4c3388491b588f.webp" alt="img"></p><p>2.1.2.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-7eea721cbb855876.webp" alt="img"></p><p>2.1.2.2</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-dc29605ce9889973.webp" alt="img"></p><p>2.1.2.3</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-75293515d8d87024.webp" alt="img"></p><p>2.2.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-387664c771b21f1b.webp" alt="img"></p><p>2.2.2.1</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-b1ea52c823ce0b0b.webp" alt="img"></p><p>2.2.2.2</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-edcb4ea6ac87e342.webp" alt="img"></p><p>2.2.2.3</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-6559c4cccf3df81c.webp" alt="img"></p><p>例题：</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-f4c0891c264a2243.webp" alt="img"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2392382-b037e4c29cbffc4d.webp" alt="img"></p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>简介：</p><p>arraylist数组实现，随机访问快；linklist链表实现，插入删除快</p><p>hashset使用hash散列,获取元素很快，Treeset使用红黑树，按照比较结果升序保存，linkedhashset用来链表按照被添加的顺序保存，用hash保留查找速度(set中元素不可重复)</p><p>hashmap没有顺序，查找快，Treemap按照比较结果升序保存key ,LinkedHashMap按照插入结果保存Key，保留查找速度</p><p>Vector ,Hashtable,Stack弃用</p><p>点框表示接口，实框表示具体类，空心箭头表示特定类实现接口，实心箭头表示某类可以生成箭头所指类的对象</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200210163111068.png" alt="image-20200210163111068"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200210163136659.png" alt="image-20200210163136659"></p><h5 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h5><p>集合本身是一个工具，它存放在java.util包中。在<code>Collection</code>接口定义着单列集合框架中最最共性的内容。</p><ul><li><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> :清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li><li><code>public int size()</code>: 返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li></ul><h5 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h5><p>迭代器统一了对容器的访问方式iterater()   next()  hasNext()  remove()，<strong>listIterator 可双向移动</strong></p><p>02_迭代器的实现原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86(1" alt="02_迭代器的实现原理(1)">.bmp)</p><h5 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h5><p>增强for循环(也称foreach循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，<strong>不能对集合中的元素进行增删操作。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型  变量 : Collection集合or数组)&#123; </span><br><span class="line">  <span class="comment">//写操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>泛型：可以在类或方法中预支地使用未知的类型。当没有指定泛型时，默认类型为Object类型。</p><ul><li>将运行时期的ClassCastException，转移到了编译时期变成了编译失败。</li><li>避免了类型强转的麻烦。</li></ul><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? extends 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其子类</code></li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其父类型</code></li></ul><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法</p><p>常用：contains() , remove() , indexOf() , subList() , cantainsAll() ,Collections.sort() , Collections.shuffle()//打乱,retainAll()</p><ul><li><code>public void add(int index, E element)</code>: 将指定的元素，添加到该集合中的指定位置上。</li><li><code>public E get(int index)</code>:返回集合中指定位置的元素。</li><li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li><li><code>public E set(int index, E element)</code>:用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li></ul><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) ：将指定的元素添加到此集合的尾部。</span><br><span class="line">public E remove(int index) ：移除此集合中指定位置上的元素。返回被删除的元素。</span><br><span class="line">public E get(int index) ：返回此集合中指定位置上的元素。返回获取的元素。</span><br><span class="line">public int size() ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</span><br></pre></td></tr></table></figure><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><p>LinkedList是List的子类，List中的方法LinkedList都是可以使用,LinkedList添加了可以作为栈，队列和双端队列的方法</p><p>getfirst(),element()返回第一个元素，空时抛出nosuchElementException,peek()空时返回null；</p><p>removeFirst()与remove()移除返回列表头，若空，抛出NoSuchElementsException,poll()空时返回null。</p><p>addFirst(),add(),addLast(),removelast()</p><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h5><p>offer()插入队尾，peek（）和element（）返回队头，poll()和remove（）移除并返回队头</p><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>HashSet 是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于： hashCode 与 equals 方法。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/06_Set%E9%9B%86%E5%90%88%E5%AD%98%E5%82%A8%E5%85%83%E7%B4%A0%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="06_Set集合存储元素不重复的原理"></p><p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。</p><p>如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/05_HashSet%E9%9B%86%E5%90%88%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%93%E6%9E%84%EF%BC%88%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%89.bmp" alt="05_HashSet集合存储数据的结构（哈希表）"></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%93%88%E5%B8%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="哈希流程图"></p><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap的默认初始容量大小 16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashMap的最大容量 2的30次方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载因子，代表了table的填充度有多少，默认是0.75。当数组中的数据大于总长度的0.75倍时</span></span><br><span class="line"><span class="comment">     * HashMap会自动扩容，默认扩容到原长度的两倍。为什么是两倍，而不是1.5倍，或是3倍。这个</span></span><br><span class="line"><span class="comment">     * 2倍很睿智，后面会说到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认阈值，当桶(bucket)上的链表长度大于这个值时会转成红黑树，put方法的代码里有用到</span></span><br><span class="line"><span class="comment">     * 在jdk1.7中链表就是普通的单向链表，很多数据出现哈希碰撞导致这些数据集中在某一个哈希桶上，</span></span><br><span class="line"><span class="comment">     * 因而导致链表很长，会出现效率问题，jdk1.8对此做了优化，默认当链表长度大于8时转化为红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和上一个的阈值相对的阈值，当桶(bucket)上的链表长度小于这个值时红黑树退化成链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于快速失败，由于HashMap非线程安全，在对HashMap进行迭代时，如果期间其他线程的参与导致HashMap  * 的结构发生变化了（比如put，remove等操作），需要抛出异常ConcurrentModificationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算hash</p><blockquote><p>在使用HashMap时，我们希望这个HashMap里面的元素位置尽量的分布均匀些，<strong>最好使得每个位置上的元素数量只有一个</strong>，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，<strong>而不用再去遍历链表</strong>，这样就大大优化了查询的效率。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算索引位置：</p><blockquote><p>最普遍的想法是把hash值对数组长度进行取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，“模”运算的消耗还是比较大的，在HashMap中是这样做的：调用<code>indexFor(int h, int length)</code>方法来计算该对象应该保存在table数组的哪个索引处。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法很巧妙，它通过<code>h &amp; (table.length -1)</code>来得到该对象的保存位置，而HashMap底层数组的length总是 2 的n次方（<code>length-1</code>为2^n-1，全一），这是HashMap在速度上的优化。</p><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。能保证set有序。</p><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 形参名)&#123;  &#125;</span><br></pre></td></tr></table></figure><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p><code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。Map接口中的集合都有两个泛型变量&lt;K,V&gt;,在使用时，要为两个泛型变量赋予数据类型。</p><ul><li><strong>HashMap&lt;K,V&gt;</strong>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li><li><strong>LinkedHashMap&lt;K,V&gt;</strong>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li></ul><p>Map接口中定义了很多方法，常用的如下：</p><ul><li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li><li><code>boolean containsKey(Object key)</code> 判断集合中是否包含指定的键。</li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><p><strong>01_Map集合遍历键找值方式</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_Map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E9%94%AE%E6%89%BE%E5%80%BC%E6%96%B9%E5%BC%8F.bmp" alt="01_Map集合遍历键找值方式"></p><p><strong>02_Map集合遍历键值对方式</strong></p><p>Map集合不能直接使用迭代器或者foreach进行遍历。但是转成Set之后就可以使用了。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_Map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E9%94%AE%E5%80%BC%E5%AF%B9%E6%96%B9%E5%BC%8F.bmp" alt="02_Map集合遍历键值对方式"></p><h5 id="集合STL汇总"><a href="#集合STL汇总" class="headerlink" title="集合STL汇总"></a>集合STL汇总</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.syzhou.code.javaDataStructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">STLUse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================arraylist================"</span>);</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.contains(<span class="keyword">new</span> Integer(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.print(list.get(i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ACID</span></span><br><span class="line">        list.add(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(list.indexOf(<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">3</span>));</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        list.remove(<span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// o1排在o2后面,返回值大于0 ，来查看升序还是降序</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">linklist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================linklist================"</span>);</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.print(list.get(i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ACID</span></span><br><span class="line">        list.add(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(list.indexOf(<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">3</span>));</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        list.remove(<span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// o1排在o2后面,返回值大于0 ，来查看升序还是降序</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">        list.addFirst(<span class="number">1</span>);</span><br><span class="line">        list.addLast(<span class="number">9</span>);</span><br><span class="line">        list.getFirst();</span><br><span class="line">        list.getLast();</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================queue================"</span>);</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        q.offer(<span class="number">1</span>);</span><br><span class="line">        q.offer(<span class="number">2</span>);</span><br><span class="line">        q.offer(<span class="number">3</span>);</span><br><span class="line">        q.offer(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// q.element();//返回队头</span></span><br><span class="line">        System.out.println(q.peek());</span><br><span class="line">        <span class="comment">// q.remove();//移除并返回队头</span></span><br><span class="line">        System.out.println(q.poll());</span><br><span class="line">        System.out.println(q.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================stack================"</span>);</span><br><span class="line">        LinkedList&lt;Integer&gt; s = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            s.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.peek());</span><br><span class="line">        System.out.println(s.pop());</span><br><span class="line">        System.out.println(s.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无序不可重复,非线程安全的</span></span><br><span class="line">    <span class="comment">// 首先，hashCode()方法返回的是一个哈希值，这个哈希值是由对象在内存中的地址所形成的，</span></span><br><span class="line">    <span class="comment">// 如果两个对象的哈希值不一样，那么这两个对象肯定是不相同的，如果哈希值一样，那么这还不能肯定这两个对象是否一样，</span></span><br><span class="line">    <span class="comment">// 还需要通过equlas()方法比较一下两个对象是否一样，equals()返回true才能说明这两个对象是相同的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hashset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================hashset================"</span>);</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        set.add(<span class="string">"123"</span>);</span><br><span class="line">        set.add(<span class="string">"456"</span>);</span><br><span class="line">        set.add(<span class="string">"zsy"</span>);</span><br><span class="line">        set.add(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(set.size());</span><br><span class="line">        set.remove(<span class="string">"zsy"</span>);</span><br><span class="line">        set.remove(<span class="keyword">new</span> String(<span class="string">"456"</span>));</span><br><span class="line">        System.out.println(set.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非线程安全的，排序规则是默认使用元素的自然排序,重不重复也是通过compareTo()方法来完成的，当compareTo()方法返回值为0时，两个对象是相同的。</span></span><br><span class="line">    <span class="comment">// LinkedHashSet将会以元素的放入顺序来依次访问</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">treeset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================treeset================"</span>);</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">        set.add(<span class="string">"123"</span>);</span><br><span class="line">        set.add(<span class="string">"963"</span>);</span><br><span class="line">        set.add(<span class="string">"125"</span>);</span><br><span class="line">        set.add(<span class="string">"456"</span>);</span><br><span class="line">        set.add(<span class="string">"zsy"</span>);</span><br><span class="line">        set.add(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(set.size());</span><br><span class="line">        set.remove(<span class="string">"zsy"</span>);</span><br><span class="line">        set.remove(<span class="keyword">new</span> String(<span class="string">"456"</span>));</span><br><span class="line">        System.out.println(set.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hashmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================hashmap================"</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">"zsy"</span>, <span class="number">93</span>);</span><br><span class="line">        map.put(<span class="string">"syz"</span>, <span class="number">86</span>);</span><br><span class="line">        map.put(<span class="string">"ysz"</span>, <span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.通过遍历键的Set集合来遍历整个Map集合</span></span><br><span class="line">        System.out.println(<span class="string">"foreach遍历"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : map.keySet()) &#123;</span><br><span class="line">            System.out.println(str + <span class="string">":"</span> + map.get(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"迭代器遍历"</span>);</span><br><span class="line">        Iterator&lt;String&gt; intertor = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (intertor.hasNext()) &#123;</span><br><span class="line">            String key = intertor.next();</span><br><span class="line">            System.out.println(key + <span class="string">":"</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.使用Map集合的关系遍历</span></span><br><span class="line">        System.out.println(<span class="string">"Map关系遍历"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.remove(<span class="string">"zsy"</span>);</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">treemap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================treemap================"</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;String, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">"zsy"</span>, <span class="number">93</span>);</span><br><span class="line">        map.put(<span class="string">"syz"</span>, <span class="number">86</span>);</span><br><span class="line">        map.put(<span class="string">"ysz"</span>, <span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.通过遍历键的Set集合来遍历整个Map集合</span></span><br><span class="line">        System.out.println(<span class="string">"foreach遍历"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : map.keySet()) &#123;</span><br><span class="line">            System.out.println(str + <span class="string">":"</span> + map.get(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"迭代器遍历"</span>);</span><br><span class="line">        Iterator&lt;String&gt; intertor = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (intertor.hasNext()) &#123;</span><br><span class="line">            String key = intertor.next();</span><br><span class="line">            System.out.println(key + <span class="string">":"</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.使用Map集合的关系遍历</span></span><br><span class="line">        System.out.println(<span class="string">"Map关系遍历"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.remove(<span class="string">"zsy"</span>);</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        arrayList();</span><br><span class="line">        linklist();</span><br><span class="line">        queue();</span><br><span class="line">        stack();</span><br><span class="line">        hashset();</span><br><span class="line">        treeset();</span><br><span class="line">        hashmap();</span><br><span class="line">        treemap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优先队列PriorityQueue 默认最小值拥有最高的优先级，可以提供自己的comparator对象来改变排序如Collection.reverseOrder()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueueDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; priorityQueue =</span><br><span class="line">      <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;();</span><br><span class="line">    Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">      priorityQueue.offer(rand.nextInt(i + <span class="number">10</span>));</span><br><span class="line">    QueueDemo.printQ(priorityQueue);</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; ints = Arrays.asList(<span class="number">25</span>, <span class="number">22</span>, <span class="number">20</span>,</span><br><span class="line">      <span class="number">18</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>);</span><br><span class="line">    priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(ints);</span><br><span class="line">    QueueDemo.printQ(priorityQueue);</span><br><span class="line">    priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(</span><br><span class="line">        ints.size(), Collections.reverseOrder());</span><br><span class="line">    priorityQueue.addAll(ints);</span><br><span class="line">    QueueDemo.printQ(priorityQueue);</span><br><span class="line"></span><br><span class="line">    String fact = <span class="string">"EDUCATION SHOULD ESCHEW OBFUSCATION"</span>;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(fact.split(<span class="string">""</span>));</span><br><span class="line">    PriorityQueue&lt;String&gt; stringPQ =</span><br><span class="line">      <span class="keyword">new</span> PriorityQueue&lt;String&gt;(strings);</span><br><span class="line">    QueueDemo.printQ(stringPQ);</span><br><span class="line">    stringPQ = <span class="keyword">new</span> PriorityQueue&lt;String&gt;(</span><br><span class="line">      strings.size(), Collections.reverseOrder());</span><br><span class="line">    stringPQ.addAll(strings);</span><br><span class="line">    QueueDemo.printQ(stringPQ);</span><br><span class="line"></span><br><span class="line">    Set&lt;Character&gt; charSet = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : fact.toCharArray())</span><br><span class="line">      charSet.add(c); <span class="comment">// Autoboxing</span></span><br><span class="line">    PriorityQueue&lt;Character&gt; characterPQ =</span><br><span class="line">      <span class="keyword">new</span> PriorityQueue&lt;Character&gt;(charSet);</span><br><span class="line">    QueueDemo.printQ(characterPQ);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">0 1 1 1 1 1 3 5 8 14</span></span><br><span class="line"><span class="comment">1 1 2 3 3 9 9 14 14 18 18 20 21 22 23 25 25</span></span><br><span class="line"><span class="comment">25 25 23 22 21 20 18 18 14 14 9 9 3 3 2 1 1</span></span><br><span class="line"><span class="comment">       A A B C C C D D E E E F H H I I L N N O O O O S S S T T U U U W</span></span><br><span class="line"><span class="comment">W U U U T T S S S O O O O N N L I I H H F E E E D D C C C B A A</span></span><br><span class="line"><span class="comment">  A B C D E F H I L N O S T U W</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure><h5 id="JDK9对集合优化"><a href="#JDK9对集合优化" class="headerlink" title="JDK9对集合优化"></a>JDK9对集合优化</h5><p> Java 9，添加了几种集合工厂方法,更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方便地创建集合的<strong>不可变实例</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJDK9</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Set&lt;String&gt; str1=Set.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);  </span><br><span class="line">        <span class="comment">//str1.add("c");这里编译的时候不会错，但是执行的时候会报错，因为是不可变的集合  </span></span><br><span class="line">        System.out.println(str1);  </span><br><span class="line">        Map&lt;String,Integer&gt; str2=Map.of(<span class="string">"a"</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="number">2</span>);  </span><br><span class="line">        System.out.println(str2);  </span><br><span class="line">        List&lt;String&gt; str3=List.of(<span class="string">"a"</span>,<span class="string">"b"</span>);  </span><br><span class="line">        System.out.println(str3);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>of()方法只是Map，List，Set这三个接口的静态方法，其父类接口和子类实现并没有这类方法，比如    HashSet，ArrayList等等；</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p><ul><li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li><li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)</li></ul><p><strong>异常的分类</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB.png" alt="异常的分类"></p><p><strong>异常产生过程</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_%E5%BC%82%E5%B8%B8%E7%9A%84%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90.bmp" alt="01_异常的产生过程解析"></p><p>throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"要访问的arr数组不存在"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"该索引在数组中不存在，已超出范围"</span>);</span><br></pre></td></tr></table></figure><p>关键字<strong>throws</strong>运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) <span class="keyword">throws</span> 异常类名<span class="number">1</span>,异常类名<span class="number">2</span>…&#123;   &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span><span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p>自定义异常，在开发中根据自己业务的异常情况来定义异常类.</p><ol><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li></ol><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h5 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h5><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.bmp" alt="02_并发与并行"></p><h5 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h5><ul><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p></li></ul><p>简而言之：进程是资源分配的最小单位，线程是程序执行的最小单位（资源调度的最小单位）。一个程序运行后至少有一个进程，一个进程中可以包含多个线程 </p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04_%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5.bmp" alt="04_线程概念"></p><p><strong>区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、进程是资源分配的最小单位，线程是程序执行的最小单位（资源调度的最小单位）</span><br><span class="line">2、进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。</span><br><span class="line"> 而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</span><br><span class="line">3、线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</span><br><span class="line">4、但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</span><br><span class="line">5、同步方式不同：进程：无名管道、有名管道、信号、共享内存、消息队列、信号量</span><br><span class="line">线程：互斥量、读写锁、自旋锁、线程信号、条件变量</span><br><span class="line">6、进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；</span><br></pre></td></tr></table></figure><h5 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h5><p>堆：　是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。<br>栈：是个线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是　thread safe的。操作系统在切换线程的时候会自动的切换栈，就是切换ＳＳ／ＥＳＰ寄存器。栈空间不需要在高级语言里面显式的分配和释放</p><h5 id="多线程-1"><a href="#多线程-1" class="headerlink" title="多线程"></a>多线程</h5><p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进程。</p><p>01_多线程随机性打印结果</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%9A%8F%E6%9C%BA%E6%80%A7%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C.bmp" alt="01_多线程随机性打印结果"></p><p>多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。</p><p>02_多线程内存图解</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E5%9B%BE%E8%A7%A3.bmp" alt="02_多线程内存图解"></p><h5 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h5><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。程序启动运行 main时候，jvm启动一个进程，主线程main在main()调用时候被创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Thread() :分配一个新的线程对象。</span><br><span class="line">public Thread(String name) :分配一个指定名字的新的线程对象。</span><br><span class="line">public Thread(Runnable target) :分配一个带有指定目标新的线程对象。</span><br><span class="line">public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字</span><br><span class="line">public String getName() :获取当前线程名称。</span><br><span class="line">public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。</span><br><span class="line">public void run() :此线程要执行的任务在此处定义代码。</span><br><span class="line">public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</span><br><span class="line">public static Thread currentThread() :返回对当前正在执行的线程对象的引用</span><br></pre></td></tr></table></figure><p>创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式。</p><p><strong>继承Thread类方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</span><br><span class="line">2. 创建Thread子类的实例，即创建了线程对象</span><br><span class="line">3. 调用线程对象的start()方法来启动该线程</span><br></pre></td></tr></table></figure><p><strong>实现Runnable接口方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</span><br><span class="line">2. 创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正</span><br><span class="line">的线程对象。</span><br><span class="line">3. 调用线程对象的start()方法来启动线程。</span><br></pre></td></tr></table></figure><p>实现Runnable接口比继承Thread类所具有的优势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 适合多个相同的程序代码的线程去共享同一个资源。</span><br><span class="line">2. 可以避免java中的单继承的局限性。</span><br><span class="line">3. 增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</span><br><span class="line">4. 线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</span><br></pre></td></tr></table></figure><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样<br>的，而且其他的变量的值也和预期的是一样的，就是线程安全的。线程安全问题都是由全局变量及静态变量引起的。</p><p><strong>03_线程安全问题的概述</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03_%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%A6%82%E8%BF%B0.bmp" alt="03_线程安全问题的概述"></p><p><strong>04_线程安全问题产生的原理</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04_%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="04_线程安全问题产生的原理"></p><h5 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h5><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。为了保证每个线程都能正常执行原子操作,Java引入了线程同步机制。有三种方式完成同步操作：</p><p><strong>同步代码块</strong></p><p> synchronized 关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">     需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步锁：对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 锁对象 可以是任意类型。</span><br><span class="line">2. 多个线程对象 要使用同一把锁。</span><br></pre></td></tr></table></figure><p>05_同步的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/05_%E5%90%8C%E6%AD%A5%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="05_同步的原理"></p><p><strong>同步方法</strong></p><p>同步方法 :使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外<br>等着。同步锁是谁?对于非static方法,同步锁就是this。对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">   可能会产生线程安全问题的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lock 锁</strong></p><p>java.util.concurrent.locks.Lock 机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。<br>Lock锁也称同步锁，加锁与释放锁方法化了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> :加同步锁。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> :释放同步锁。</span></span><br></pre></td></tr></table></figure><h5 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h5><p><strong>线程的状态图</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%9B%BE.bmp" alt="线程的状态图"></p><h5 id="等待唤醒机制（生产消费者）"><a href="#等待唤醒机制（生产消费者）" class="headerlink" title="等待唤醒机制（生产消费者）"></a>等待唤醒机制（生产消费者）</h5><p><strong>线程间通信</strong>：多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90(1" alt="01_等待与唤醒案例分析">.bmp)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</span><br><span class="line">2. wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</span><br><span class="line">3. wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</span><br></pre></td></tr></table></figure><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86.bmp" alt="线程池原理"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</span><br><span class="line">2. 提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</span><br><span class="line">3. 提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象，真正的线程池接口是`java.util.concurrent.ExecutorService`。</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//包含2个线程对象</span></span><br><span class="line">        <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 再获取个线程对象，调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span></span><br><span class="line">        <span class="comment">// 将使用完的线程又归还到了线程池中</span></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        <span class="comment">//service.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件与IO"><a href="#文件与IO" class="headerlink" title="文件与IO"></a>文件与IO</h4><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20200220140633788.png" alt="image-20200220140633788"></p><p>1.Java IO是采用的是装饰模式，即采用<strong>处理流</strong>来包装<strong>节点流</strong>的方式，来达到代码通用性。</p><p>2.处理流和节点流的区分方法，<strong>节点流</strong>在新建时需要一个数据源（文件、网络）作为参数，而<strong>处理流</strong>需要一个节点流作为参数。</p><p>3.<strong>处理流</strong>的作用就是提高代码通用性，编写代码的便捷性，提高性能。</p><p>4.<strong>节点流</strong>都是对应抽象基类的实现类，它们都实现了抽象基类的基础读写方法。其中read（）方法如果返回-1，代表已经读到数据源末尾。</p><h5 id="标准输入输出重定向"><a href="#标准输入输出重定向" class="headerlink" title="标准输入输出重定向"></a>标准输入输出重定向</h5><p>​    在Java中输入输出数据一般（图形化界面例外）要用到标准输入输出流System.in，System.out，默认指向控制台，但有时程序从文件中输入数据并将结果输送到文件中，这是就需要用到流的重定向，若想重定向之后恢复流的原始指向，就需要保存下最原始的标准输入输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存最原始的输入输出流</span></span><br><span class="line">InputStream in = System.in;</span><br><span class="line">PrintStream out = System.out;</span><br><span class="line"><span class="comment">//将标准输入流重定向至 in.txt</span></span><br><span class="line">System.setIn(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>));</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//将标准输出流重定向至 out.txt</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> PrintStream(<span class="string">"out.txt"</span>));</span><br><span class="line"><span class="comment">//将 in.txt中的数据输出到 out.txt中</span></span><br><span class="line"><span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">    String str = scanner.nextLine();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将标准输出流重定向至控制台</span></span><br><span class="line">System.setIn(in);</span><br><span class="line"><span class="comment">//将标准输出流重定向至控制台</span></span><br><span class="line">System.setOut(out);</span><br><span class="line">scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String string = scanner.nextLine();</span><br><span class="line">System.out.println(<span class="string">"输入输出流已经恢复 "</span> + string);</span><br></pre></td></tr></table></figure><h5 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h5><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span>  ：返回此File的绝对路径名字符串。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span>  ：将此File转换为路径名字符串。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> ：返回由此File表示的文件或目录的名称。  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span> ：返回由此File表示的文件的长度。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span>`：此File表示的文件或目录是否实际存在。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span> ：此File表示的是否为目录。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span> ：此File表示的是否为文件。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span> ：删除由此File表示的文件或目录。目录必须为空才能删除。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span> ：创建由此File表示的目录。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">list</span><span class="params">()</span> ：返回一个String数组，表示该File目录中的所有子文件或目录。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File[] <span class="title">listFiles</span><span class="params">()</span> ：返回一个File数组，表示该File目录中的所有的子文件或目录。</span></span><br></pre></td></tr></table></figure><h5 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h5><p><code>java.io.FileFilter</code>是一个接口，是File的过滤器。 该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code> 作为参数， 接口中只有一个方法。</p><p><code>boolean accept(File pathname)</code> ：测试pathname是否应该包含在当前File目录中，符合则返回true。</p><p><strong>FileFilter过滤器的原理</strong></p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04_FileFilter%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="04_FileFilter过滤器的原理"></p><h5 id="OutputStream-抽象类"><a href="#OutputStream-抽象类" class="headerlink" title="OutputStream 抽象类"></a>OutputStream 抽象类</h5><p>流的关闭原则：先开后关，后开先关。</p><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。定义了字节输出流的基本共性功能方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> ：关闭此输出流并释放与此流相关联的任何系统资源。  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> ：将 b.length字节从指定的字节数组写入此输出流。  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> ：将指定的字节输出流</span></span><br></pre></td></tr></table></figure><h5 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h5><p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file)</span>：创建文件输出流以写入由指定的 File对象表示的文件。如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。后加参数 `<span class="keyword">true</span>` 表示追加数据，`<span class="keyword">false</span>` 表示清空原有数据。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(String name)</span>： 创建文件输出流以指定的名称写入文件。  </span></span><br><span class="line"><span class="function"><span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span>，<span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span>，<span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>写出数据</span></span><br></pre></td></tr></table></figure><p>系统中的换行：</p><ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一</li></ul><p>02_文件存储的原理和记事本打开文件的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%B0%E4%BA%8B%E6%9C%AC%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="02_文件存储的原理和记事本打开文件的原理"></p><h5 id="InputStream-抽象类"><a href="#InputStream-抽象类" class="headerlink" title="InputStream 抽象类"></a>InputStream 抽象类</h5><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> ：关闭此输入流并释放与此流相关联的任何系统资源。    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> ： 从输入流读取数据的下一个字节。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> ： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">available</span><span class="params">()</span>：返回值为流中尚未读取的字节的数量。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span>：读指针跳过n个字节不读，返回值为实际跳过的字节数量</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">markSupported</span><span class="params">()</span>：当前的流是否支持读指针的记录功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">int</span> readlimit)</span>：记录当前指针的所在位置。readlimit表示读指针读出的readlimit个字节后，所标记的指针位置才失效。使用这个函数前请用前一个函数判断流是否支持</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span>：把读指针重新指向用mark方法所记录的位置</span></span><br></pre></td></tr></table></figure><h5 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream(File file) ： 通过打开与实际文件的连接来创建一个 FileInputStream ，如果没有该文件,会抛出`FileNotFoundException`</span><br><span class="line">FileInputStream(String name) ： 通过打开与实际文件的连接来创建一个 FileInputStream </span><br><span class="line">read()方法，每次可以读取一个字节的数据，提升为<span class="keyword">int</span>类型，读取到文件末尾，返回-<span class="number">1</span></span><br><span class="line">read(<span class="keyword">byte</span>[] b)，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>03_字节流读取文件的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03_%E5%AD%97%E8%8A%82%E6%B5%81%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="03_字节流读取文件的原理"></p><h5 id="Reader抽象类"><a href="#Reader抽象类" class="headerlink" title="Reader抽象类"></a>Reader抽象类</h5><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> ：关闭此流并释放与此流相关联的任何系统资源。    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>： 从输入流读取一个字符。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</span></span><br></pre></td></tr></table></figure><h5 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h5><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileReader(File file)： 创建一个新的 FileReader ，给定要读取的File对象。   </span><br><span class="line">FileReader(String fileName)： 创建一个新的 FileReader ，给定要读取的文件的名称。 </span><br><span class="line">read():每次可以读取一个字符的数据，提升为<span class="keyword">int</span>类型，读取到文件末尾，返回`-<span class="number">1</span>`</span><br><span class="line">read(<span class="keyword">char</span>[] cbuf)，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回`-<span class="number">1</span>`</span><br></pre></td></tr></table></figure><h5 id="Writer-抽象类"><a href="#Writer-抽象类" class="headerlink" title="Writer 抽象类"></a>Writer 抽象类</h5><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- `<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span>` 写入单个字符。</span></span><br><span class="line"><span class="function">- `<span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span> `写入字符数组。 </span></span><br><span class="line"><span class="function">- `<span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> `写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </span></span><br><span class="line"><span class="function">- `<span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span> `写入字符串。 </span></span><br><span class="line"><span class="function">- `<span class="keyword">void</span> <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>` 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</span></span><br><span class="line"><span class="function">- `<span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> `刷新该流的缓冲。  </span></span><br><span class="line"><span class="function">- `<span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>` 关闭此流，但要先刷新它。</span></span><br></pre></td></tr></table></figure><h5 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- `FileWriter(File file)`： 创建一个新的 FileWriter，给定要读取的File对象。   </span><br><span class="line">- `FileWriter(String fileName)`： 创建一个新的 FileWriter，给定要读取的文件的名称。</span><br></pre></td></tr></table></figure><h5 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h5><p>java.util.Properties  继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- `<span class="function"><span class="keyword">public</span> <span class="title">Properties</span><span class="params">()</span>` :创建一个空的属性列表。</span></span><br><span class="line"><span class="function">- `<span class="keyword">public</span> Object <span class="title">setProperty</span><span class="params">(String key, String value)</span>` ： 保存一对属性。  </span></span><br><span class="line"><span class="function">- `<span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span> ` ：使用此属性列表中指定的键搜索属性值。</span></span><br><span class="line"><span class="function">- `<span class="keyword">public</span> Set&lt;String&gt; <span class="title">stringPropertyNames</span><span class="params">()</span> ` ：所有键的名称的集合。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(InputStream inStream)</span>`： 从字节输入流中读取键值对。可以使用空格、等号、冒号分割 </span></span><br><span class="line"><span class="function">   eg：Properties pro</span>=<span class="keyword">new</span> Properties().load(<span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>));</span><br></pre></td></tr></table></figure><h5 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h5><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。01_缓冲流的原理如下：</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_%E7%BC%93%E5%86%B2%E6%B5%81%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="01_缓冲流的原理"></p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader：`<span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span>`: 读一行文字。 </span></span><br><span class="line"><span class="function">BufferedWriter：`<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newLine</span><span class="params">()</span>`: 写一行行分隔符,由系统属性定义符号。</span></span><br></pre></td></tr></table></figure><h5 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h5><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><p>02_转换流的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_%E8%BD%AC%E6%8D%A2%E6%B5%81%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="02_转换流的原理"></p><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader(InputStream in): 创建一个使用默认字符集的字符流。 </span><br><span class="line">InputStreamReader(InputStream in, String charsetName): 创建一个指定字符集的字符流。</span><br></pre></td></tr></table></figure><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter(OutputStream in): 创建一个使用默认字符集的字符流。 </span><br><span class="line">OutputStreamWriter(OutputStream in, String charsetName): 创建一个指定字符集的字符流。</span><br></pre></td></tr></table></figure><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03_%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%A6%82%E8%BF%B0.bmp" alt="03_序列化和反序列化的概述"></p><p>04_序列号冲突异常的原理和解决方案</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04_%E5%BA%8F%E5%88%97%E5%8F%B7%E5%86%B2%E7%AA%81%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.bmp" alt="04_序列号冲突异常的原理和解决方案"></p><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。<code>writeObject (Object obj)</code> : 将指定的对象写出。</p><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。<code>readObject ()</code> : 读取一个对象</p><p>一个对象要想序列化，必须满足两个条件:</p><ul><li>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。若class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong></p><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><h4 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h4><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3_tcp_ip.jpg" alt="3_tcp_ip"></p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。</li></ul><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01_%E7%AB%AF%E5%8F%A3%E5%8F%B7.bmp" alt="01_端口号"></p><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02_TCP%E9%80%9A%E4%BF%A1%E7%9A%84%E6%A6%82%E8%BF%B0.bmp" alt="02_TCP通信的概述"></p><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>03_文件上传的原理</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/03_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8E%9F%E7%90%86.bmp" alt="03_文件上传的原理"></p><p>04_文件上传案例的阻塞问题</p><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%A1%88%E4%BE%8B%E7%9A%84%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98.bmp" alt="04_文件上传案例的阻塞问题"></p><h5 id="模拟B-S服务器"><a href="#模拟B-S服务器" class="headerlink" title="模拟B\S服务器"></a>模拟B\S服务器</h5><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/05_%E6%A8%A1%E6%8B%9FBS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%86%E6%9E%90.bmp" alt="05_模拟BS服务器分析"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Web(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Web</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket=socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">                BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">                        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String requst = readWb.readLine();</span><br><span class="line">                <span class="comment">//取出请求资源的路径</span></span><br><span class="line">                String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">                System.out.println(Arrays.toString(strArr));</span><br><span class="line">                String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                System.out.println(path);</span><br><span class="line"></span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">                System.out.println(fis);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">                <span class="comment">//向浏览器 回写数据</span></span><br><span class="line">                OutputStream out = socket.getOutputStream();</span><br><span class="line">                out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                out.close();</span><br><span class="line">                readWb.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* 测试分类：</span><br><span class="line">  <span class="number">1</span>. 黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</span><br><span class="line">  <span class="number">2</span>. 白盒测试：需要写代码的。关注程序具体的执行流程。</span><br><span class="line"></span><br><span class="line">* Junit使用：白盒测试</span><br><span class="line">  * 步骤：</span><br><span class="line">    <span class="number">1</span>. 定义一个测试类(测试用例)</span><br><span class="line">       * 建议：</span><br><span class="line">         * 测试类名：被测试的类名TestCalculatorTest</span><br><span class="line">         * 包名：xxx.xxx.xx.testcn.itcast.test</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>. 定义测试方法：可以独立运行</span><br><span class="line">       * 建议：</span><br><span class="line">         * 方法名：test测试的方法名testAdd()  </span><br><span class="line">         * 返回值：<span class="keyword">void</span></span><br><span class="line">         * 参数列表：空参</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>. 给方法加<span class="meta">@Test</span></span><br><span class="line">    <span class="number">4</span>. 导入junit依赖环境</span><br><span class="line"></span><br><span class="line">  * 判定结果：</span><br><span class="line">    * 红色：失败</span><br><span class="line">    * 绿色：成功</span><br><span class="line">    * 一般我们会使用断言操作来处理结果</span><br><span class="line">      * Assert.assertEquals(期望的结果,运算的结果);</span><br><span class="line"></span><br><span class="line">  * 补充：</span><br><span class="line">    * <span class="meta">@Before</span>:</span><br><span class="line">      * 修饰的方法会在测试方法之前被自动执行</span><br><span class="line">    * <span class="meta">@After</span>:</span><br><span class="line">      * 修饰的方法会在测试方法执行之后自动被执行</span><br></pre></td></tr></table></figure><h4 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h4><p><img src="/../assets/pic/2018-06-28-JavaSE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.bmp" alt="Java代码的三个阶段"></p><h5 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h5><ul><li>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</li><li><p>将类的各个组成部分封装为其他对象，这就是反射机制</p><ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li><li><p>获取Class对象的方式：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. Class.forName(<span class="string">"全类名"</span>)：将字节码文件加载进内存，返回Class对象</span><br><span class="line">* 多用于配置文件，将类名定义在配置文件中。读取文件，加载类</span><br><span class="line"><span class="number">2</span>. 类名.class：通过类名的属性<span class="class"><span class="keyword">class</span>获取</span></span><br><span class="line"><span class="class">* 多用于参数的传递</span></span><br><span class="line"><span class="class">3. 对象.<span class="title">getClass</span>()：<span class="title">getClass</span>()方法在<span class="title">Object</span>类中定义着。</span></span><br><span class="line"><span class="class">* 多用于对象的获取字节码的方式</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">* 结论：</span></span><br><span class="line"><span class="class">同一个字节码文件(*.<span class="title">class</span>)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的<span class="title">Class</span>对象都是同一个。</span></span><br></pre></td></tr></table></figure><ul><li>Class对象功能：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* 获取功能：</span><br><span class="line"><span class="number">1</span>. 获取成员变量们</span><br><span class="line">* Field[] getFields() ：获取所有<span class="keyword">public</span>修饰的成员变量</span><br><span class="line">* <span class="function">Field <span class="title">getField</span><span class="params">(String name)</span>   获取指定名称的 <span class="keyword">public</span>修饰的成员变量</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* Field[] <span class="title">getDeclaredFields</span><span class="params">()</span>  获取所有的成员变量，不考虑修饰符</span></span><br><span class="line"><span class="function">* Field <span class="title">getDeclaredField</span><span class="params">(String name)</span>  </span></span><br><span class="line"><span class="function">2. 获取构造方法们</span></span><br><span class="line"><span class="function">* Constructor&lt;?&gt;[] <span class="title">getConstructors</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">* Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function">* Constructor&lt;?&gt;[] <span class="title">getDeclaredConstructors</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">3. 获取成员方法们：</span></span><br><span class="line"><span class="function">* Method[] <span class="title">getMethods</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">* Method <span class="title">getMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">* Method <span class="title">getDeclaredMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. 获取全类名</span></span><br><span class="line"><span class="function">* String <span class="title">getName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li>Field：成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 设置值</span><br><span class="line">* <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span>  </span></span><br><span class="line"><span class="function">2. 获取值</span></span><br><span class="line"><span class="function">* <span class="title">get</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. 忽略访问权限修饰符的安全检查</span></span><br><span class="line"><span class="function">* <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span>:暴力反射</span></span><br></pre></td></tr></table></figure><ul><li>Field：成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 创建对象：</span><br><span class="line">* <span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</span></span><br></pre></td></tr></table></figure><ul><li>Method：方法对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 执行方法：</span><br><span class="line">* <span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 获取方法名称：</span></span><br><span class="line"><span class="function">* String getName:获取方法名</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">* 案例：</span><br><span class="line">* 需求：写一个<span class="string">"框架"</span>，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</span><br><span class="line">* 实现：<span class="number">1</span>. 配置文件 <span class="number">2</span>. 反射</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><pre><code>* 概念：说明程序的。给计算机看的* 注释：用文字描述程序的。给程序员看的* 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。* 概念描述：    * JDK1.5之后的新特性    * 说明程序的    * 使用注解：@注解名称* 作用分类：    ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】    ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】    ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">* JDK中预定义的一些注解</span><br><span class="line">* <span class="meta">@Override</span>：检测被该注解标注的方法是否是继承自父类(接口)的</span><br><span class="line">* <span class="meta">@Deprecated</span>：该注解标注的内容，表示已过时</span><br><span class="line">* <span class="meta">@SuppressWarnings</span>：压制警告</span><br><span class="line">* 一般传递参数all  <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"></span><br><span class="line">* 自定义注解</span><br><span class="line">* 格式：</span><br><span class="line">元注解</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">属性列表;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* 本质：注解本质上就是一个接口，该接口默认继承Annotation接口</span><br><span class="line">* <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnno</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">* 属性：接口中的抽象方法</span><br><span class="line">* 要求：</span><br><span class="line"><span class="number">1</span>. 属性的返回值类型有下列取值</span><br><span class="line">* 基本数据类型</span><br><span class="line">* String</span><br><span class="line">* 枚举</span><br><span class="line">* 注解</span><br><span class="line">* 以上类型的数组</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 定义了属性，在使用时需要给属性赋值</span><br><span class="line"><span class="number">1</span>. 如果定义属性时，使用<span class="keyword">default</span>关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</span><br><span class="line"><span class="number">2</span>. 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</span><br><span class="line"><span class="number">3</span>. 数组赋值时，值使用&#123;&#125;包裹。如果数组中只有一个值，则&#123;&#125;可以省略</span><br><span class="line"></span><br><span class="line">* 元注解：用于描述注解的注解</span><br><span class="line">* <span class="meta">@Target</span>：描述注解能够作用的位置</span><br><span class="line">* ElementType取值：</span><br><span class="line">* TYPE：可以作用于类上</span><br><span class="line">* METHOD：可以作用于方法上</span><br><span class="line">* FIELD：可以作用于成员变量上</span><br><span class="line">* <span class="meta">@Retention</span>：描述注解被保留的阶段</span><br><span class="line">* <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到<span class="class"><span class="keyword">class</span>字节码文件中，并被<span class="title">JVM</span>读取到</span></span><br><span class="line"><span class="class">* @<span class="title">Documented</span>：描述注解是否被抽取到<span class="title">api</span>文档中</span></span><br><span class="line"><span class="class">* @<span class="title">Inherited</span>：描述注解是否被子类继承</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* 在程序使用(解析)注解：获取注解中定义的属性值</span><br><span class="line"><span class="number">1</span>. 获取注解定义的位置的对象  （Class，Method,Field）</span><br><span class="line"><span class="number">2</span>. 获取指定的注解</span><br><span class="line">* getAnnotation(Class)</span><br><span class="line"><span class="comment">//其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line">            <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProImpl</span> <span class="keyword">implements</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">className</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"cn.itcast.annotation.Demo1"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">methodName</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"show"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="number">3</span>. 调用注解中的抽象方法获取配置的属性值</span><br></pre></td></tr></table></figure><pre><code>* 案例：简单的测试框架* 小结：    1. 以后大多数时候，我们会使用注解，而不是自定义注解    2. 注解给谁用？        1. 编译器        2. 给解析程序用    3. 注解不是程序的一部分，可以理解为注解就是一个标签</code></pre><h4 id="Java8优化"><a href="#Java8优化" class="headerlink" title="Java8优化"></a>Java8优化</h4><h5 id="函数式接口（Lamda"><a href="#函数式接口（Lamda" class="headerlink" title="函数式接口（Lamda)"></a>函数式接口（Lamda)</h5><p>函数式接口在Java中是指：有且仅有一个抽象方法的接口。Java 8中专门为函数式接口引入了一个新的注解： @FunctionalInterface，一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。函数式接口可以作为方法的参数和返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(参数类型 参数名称) -&gt; &#123; 代码语句 &#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"多线程任务执行！"</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line"></span><br><span class="line">Arrays.sort(array, (Person a, Person b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a.getAge() - b.getAge();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">函数式接口作为方法返回值</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">newComparator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//函数式接口作为返回值，等价于下面的代码</span></span><br><span class="line">    <span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line">    <span class="comment">//            @Override</span></span><br><span class="line">    <span class="comment">//            public int compare(String o1, String o2) &#123;</span></span><br><span class="line">    <span class="comment">//                return o1.length()-o2.length();</span></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line">    <span class="comment">//        &#125;;</span></span><br><span class="line">    <span class="keyword">return</span> (o1,o2)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.length()-o2.length();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 小括号内参数的类型可以省略；</span><br><span class="line">2. 如果小括号内有且仅有一个参，则小括号可以省略；</span><br><span class="line">3. 如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</span><br></pre></td></tr></table></figure><h5 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h5><p><strong>Supplier接口</strong></p><p>java.util.function.Supplier<t> 接口仅包含一个无参的方法： T get() 。用来获取一个泛型参数指定类型的对象数据。</t></p><p><strong>Consumer接口</strong></p><p>java.util.function.Consumer<t> 接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据，<br>其数据类型由泛型决定。Consumer 接口中包含抽象方法 void accept(T t) ，意为消费一个指定泛型的数据。消费数据的时候，首先做一个操作，然后再做一个操作，实现组合。而这个方法就是 Consumer 接口中的default方法 andThen。</t></p><p><strong>Predicate接口</strong></p><p>Predicate 接口中包含一个抽象方法： boolean test(T t) 。用于条件判断的场景.既然是条件判断，就会存在与、或、非三种常见的逻辑关系。分别使用and(),or(),negate()方法。</p><p><strong>Function接口</strong></p><p>java.util.function.Function&lt;T,R&gt; 接口用来根据一个类型的数据T得到另一个类型的数据R，前者称为前置条件，<br>后者称为后置条件。抽象方法为 <code>R apply(T t)</code>，根据类型T的参数获取类型R的结果。默认的 andThen 方法，用来进行组合操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">supplierTest</span><span class="params">(Supplier&lt;Integer&gt; sup)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sup.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumerTest</span><span class="params">(String name, Consumer&lt;String&gt; con)</span> </span>&#123;</span><br><span class="line">    con.accept(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumerTest</span><span class="params">(String str, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//        con1.accept(str);con2.accept(str);</span></span><br><span class="line">    con1.andThen(con2).accept(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">predicateTest</span><span class="params">(String s, Predicate&lt;String&gt; pre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.test(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个操作是将字符串解析成为int数字，第二个操作是+10</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">functionTest</span><span class="params">(String s, Function&lt;String, Integer&gt; fun1, Function&lt;Integer, Integer&gt; fun2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fun1.andThen(fun2).apply(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(supplierTest(() -&gt; <span class="number">123</span>));</span><br><span class="line">    consumerTest(<span class="string">"赵丽颖"</span>, (String name) -&gt; System.out.println(name));</span><br><span class="line">    consumerTest(<span class="string">"asdfg"</span>, (s) -&gt; System.out.println(s.toUpperCase()), (s) -&gt; System.out.println(s.toLowerCase()));</span><br><span class="line">    System.out.println(predicateTest(<span class="string">"123456"</span>, (s) -&gt; s.length() &gt; <span class="number">5</span>));</span><br><span class="line">    System.out.println(functionTest(<span class="string">"10"</span>, (s) -&gt; Integer.parseInt(s), (a) -&gt; a + <span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h5><p>在Java 8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream概念，用于解决已有集合类库既有的弊端。</p><p>Stream（流）是一个来自数据源的元素队列，流的来源。 可以是集合，数组 等。<br>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。<br> Stream操作还有<strong>两个基础的特征</strong>：<br><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluentstyle）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。<br><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者增强for的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式，流可以直接调用遍历方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"张无忌"</span>);list.add(<span class="string">"周芷若"</span>);list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">list.add(<span class="string">"张强"</span>);list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">list.stream().filter((s) -&gt; s.startsWith(<span class="string">"张"</span>)).filter((s) -&gt; s.length() == <span class="number">3</span>).forEach((s) -&gt; System.out.println(s));</span><br><span class="line">Stream&lt;String&gt; stream=Stream.of(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>);</span><br><span class="line">stream.map(s -&gt; Integer.parseInt(s)).forEach(s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><p>这里的 filter 都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法 forEach执行的时候，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。<br>备注：“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何<br>元素（或其地址值）</p><p>其次，stream只能<strong>使用一次</strong>，有后面的流后前面的就关闭了。</p><p><strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;  逐一处理</span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>; 将一个流按照条件转换成另一个子集流。</span><br><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>; 将流中的元素映射到另一个流中</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>; 统计个数</span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>; 对流进行截取，只取用前n个</span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>; 跳过前几个元素</span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span>; 两个流合并成为一个流</span><br></pre></td></tr></table></figure><h5 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h5><p>可以用方法引用来代替Lamda的调用。双冒号 :: 为引用运算符，而它所在的表达式被称为方法引用。如果Lambda要表达的函数方案已经存在于某个方法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable data)</span> </span>&#123;</span><br><span class="line">data.print(<span class="string">"Hello, World!"</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">printString(s ‐&gt; System.out.println(s));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类的构造器引用 </span><br><span class="line">printName(<span class="string">"赵丽颖"</span>, Person::<span class="keyword">new</span>); </span><br><span class="line">数组的构造器引用</span><br><span class="line"><span class="keyword">int</span>[] array = initArray(<span class="number">10</span>, <span class="keyword">int</span>[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;字节&lt;/strong&gt;是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储,8个bit（二进制位） 0000-0000表示为1个字节，写成1 byte或者1 B。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dos命令&lt;/strong&gt;((Microsoft Disk Operating System)):dir，cls,exit&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="Java" scheme="/tags/Java/"/>
    
      <category term="web" scheme="/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="/2018/2018-04-27-%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>/2018/2018-04-27-面试问题总结/</id>
    <published>2018-04-27T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="进程，线程"><a href="#进程，线程" class="headerlink" title="进程，线程"></a><strong>进程，线程</strong></h5><p>​    进程是资源分配的基本单位，线程是调度的基本单位<br>​    一个进程多个线程，多线程共享进程的资源，一个进程至少包含一个进程<br>​    进程销毁，它的线程不会销毁</p><a id="more"></a><p>​    线程执行开销小，但不利于资源的管理和保护；而进程正相反。<br>​    线程执行过程中要进行同步和互斥，因为他们共享现成的资源</p><p><strong>位运算优先级从高到低</strong>为：按位取法~、左移&lt;&lt;、右移&gt;&gt;、按位与&amp;、按位异或 ^ 、按位或 | </p><p><strong>B树特征：</strong><br>1.除根节点和叶子节点，每个节点子节点范围([m/2],m)<br>2.根节点至少两个节点<br>3.所有叶节点在同一层<br>4.有k个子节点的非根节点恰好包含k-1个关键码</p><p><strong>操作系统命令</strong></p><p>DIR 显示当前目录下文件<br>VOL 显示磁盘卷标<br>VER 显示Windows版本号</p><p><strong>文件权限只有9位，文件类型不是文件权限</strong><br>按出题人的意思：<br>文件类型（1位）+属主权限（3位）+属组权限（3位）+其他用户权限（3位）<br>文件类型：d（directory目录文件）、-（普通文件）、l（link符号链接文件）、b（block块设备文件）、c（char字符设备文件）、p（pipe管道文件）、s（socket管道文件）。<br>属主权限：文件所有者权限，可认为是文件创建者权限<br>属组权限：文件所有者所在组权限，可认为是同组用户权限<br>其他用户权限：非同组用户权限</p><p><strong>程序执行时，必须将地址空间变为绝对地址才能访问系统分配的内存</strong></p><p>地址重定位：操作系统把用户程序指令中的相对地址变换成为所在存储中的绝对地址的过程</p><p>地址重定位实现了：从逻辑地址到物理地址的转换</p><p>按照重定位时机分类：静态重定位、动态重定位</p><ol><li>地址的静态重定位<br>定义：在程序运行之前，为用户程序实行了地址重定位工作<br>一般由操作系统中的重定位装入程序完成<br>重定位装入程序的输入：用户把自己的作业链接装配成一个相对于 0 编址的目标程序<br>过程：<br>重定位装入程序根据当前内存的分配情况，按照分配区域的起始地址逐一调整目标程序指令中的地址部分。目标程序在经过重定位装入程序加工之后，不仅进入到分配给自己的绝对地址空间中，而且程序指令中的地址部分全部进行了修正，反映出了自己正确的存储位置，保证了程序的正确运行<br>特点：在装入前实现调整<br>地址要有标识<br>每次装入都要进行定位<br>装入后地址不再改变（静态）</li><li>地址的动态重定位<br>定义：在程序执行寻址时进行重定位，访问地址时，通过地址变换机构改变为内存地址<br>用户程序原封不动的装入内存，运行时再完成地址的定位工作<br>动态重定位需要硬件的支持，要求系统中配备定位寄存器和加法器<br>特点：<br>程序可装入任意内存区域（不要求占用连续的内存区）<br>只装入部分程序代码即可运行<br>改变系统时不需要改变程序（程序占用的内存空间动态可变，只需要改变定位寄存器中的值即可）程序可方便共享</li></ol><p><strong>HashMap 与HashTable</strong><br>都是Map接口的类，实现了key–value的映射<br>hashMap 无分类和排序，允许有NUll key 和多个null值，线程不安全<br>hashTable 慢，同步，不允许null 的key 和value</p><p><strong>手写memcpy函数</strong></p><p> 考察难点：指针的++、内存重叠问题。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">Memcpy</span><span class="params">(<span class="keyword">void</span>* dst,<span class="keyword">const</span> <span class="keyword">void</span>* src,<span class="keyword">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(dst != <span class="literal">NULL</span> &amp;&amp; src != <span class="literal">NULL</span> &amp;&amp; count &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span>* pDst = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(dst);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* pSrc = <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;(src);</span><br><span class="line"><span class="keyword">while</span> (count--)</span><br><span class="line">&#123;</span><br><span class="line">*pDst = *pSrc;</span><br><span class="line">pDst++;</span><br><span class="line">pSrc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>手写数据库建表，建索引，插入，查询语句</strong></p><p><strong>使用数据库要注意的问题</strong></p><p><strong>Linux命令，如开端口，开防火墙等</strong></p><h4 id="面试代码题"><a href="#面试代码题" class="headerlink" title="面试代码题"></a>面试代码题</h4><h5 id="给一个包含重复元素的数据，让数据从多到少从大到小排列"><a href="#给一个包含重复元素的数据，让数据从多到少从大到小排列" class="headerlink" title="给一个包含重复元素的数据，让数据从多到少从大到小排列"></a>给一个包含重复元素的数据，让数据从多到少从大到小排列</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] input=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        Map&lt;Integer,Integer&gt; <span class="built_in">map</span>=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.keySet().contains(input[i]))&#123;</span><br><span class="line">                <span class="built_in">map</span>.put(input[i],<span class="built_in">map</span>.get(input[i])+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">map</span>.put(input[i],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entryList=<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="built_in">map</span>.entrySet());</span><br><span class="line">        Collections.sort(entryList, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> compare(Map.Entry&lt;Integer, Integer&gt; o1, Map.Entry&lt;Integer, Integer&gt; o2) &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.getValue()!=o2.getValue())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> o2.getValue()-o1.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> o2.getKey()-o1.getKey();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="built_in">map</span>);</span><br><span class="line">        System.out.println(entryList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="蛇形打印二叉树"><a href="#蛇形打印二叉树" class="headerlink" title="蛇形打印二叉树"></a>蛇形打印二叉树</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//103 蛇形打印二叉树</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 使用两个栈。一个栈存储奇数层节点，另一个栈存储偶数层节点。</span></span><br><span class="line"><span class="comment">     * 当该层为奇数层时，叶子节点从右向左入栈。</span></span><br><span class="line"><span class="comment">     * 当该层为偶数层，叶子节点从左向右入栈。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//奇数栈</span></span><br><span class="line">    LinkedList&lt;TreeNode&gt; s1 = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    s1.push(root);</span><br><span class="line">    LinkedList&lt;TreeNode&gt; s2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">//当前层数</span></span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s1.isEmpty() || !s2.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (level % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (!s1.isEmpty()) &#123;</span><br><span class="line">                TreeNode node = s1.pop();</span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    l1.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span> || node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        s2.push(node.left);</span><br><span class="line">                        s2.push(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s1.isEmpty()) &#123;</span><br><span class="line">                level++;</span><br><span class="line">                ans.add(l1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (!s2.isEmpty()) &#123;</span><br><span class="line">                TreeNode node = s2.pop();</span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    l1.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span> || node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        s1.push(node.right);</span><br><span class="line">                        s1.push(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s2.isEmpty()) &#123;</span><br><span class="line">                level++;</span><br><span class="line">                ans.add(l1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错题集"><a href="#错题集" class="headerlink" title="错题集"></a>错题集</h4><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">目录/文件的满权限的形式：</span><br><span class="line">drwxrwxrwx</span><br><span class="line">-rwxrwxrwx</span><br><span class="line">其中：(r:读取，w:写，x:执行)</span><br><span class="line">数字对应：(r:4，w:2，x:1)， 命令行中的三个数字对应的授权角色为owner, group, others</span><br><span class="line">1. 通过数字修改权限</span><br><span class="line">chmod 777 [-R]</span><br><span class="line">2.符号类型修改</span><br><span class="line">    u: owner</span><br><span class="line">    g: group</span><br><span class="line">    o: others</span><br><span class="line">    a : all</span><br><span class="line">chmod a+x [-R] 所有人都拥有执行权限</span><br></pre></td></tr></table></figure><h5 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">integer 是引用传递，但是因为integer是<span class="keyword">final</span>的，每次对Integer的赋值操作，都是创建了一个新的对象，并且给变量赋上新的地址值</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer y = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateX</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        value = <span class="number">3</span> * value;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateY</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        value = <span class="number">3</span> * value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        updateX(x);</span><br><span class="line">        updateY(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行以上程序后，x和y的值分别是多少？<span class="number">10</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h5 id="类加载器初始化"><a href="#类加载器初始化" class="headerlink" title="类加载器初始化"></a>类加载器初始化</h5><p>类加载（先父后子,静态代码块（执行一次）—-&gt;非静态代码块(执行多次）—-&gt;成员变量—-&gt;构造函数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>块可以出现类中的任何地方（只要不是方法内部，记住，任何方法内部都不行），并且执行是按照<span class="keyword">static</span>块的顺序执行的。</span><br><span class="line">静态代码块，当第一次用到本类时,代码块执行唯一的一次,第二次使用的时候就不在执行了 </span><br><span class="line">非静态代码块，每次调用类都执行</span><br><span class="line">静态内容总是优先于非静态,所以静态代码块比构造方法优先执行</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"Test"</span>);</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//当第一次用到本类时,代码块执行唯一的一次,第二次使用的时候就不在执行了 </span></span><br><span class="line">    <span class="comment">//静态内容总是优先于非静态,所以静态代码块比构造方法优先执行</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person "</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"MyClass"</span>);</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"myclass static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"myclass constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果为：</span><br><span class="line">test <span class="keyword">static</span></span><br><span class="line">myclass <span class="keyword">static</span></span><br><span class="line">person <span class="keyword">static</span></span><br><span class="line">person Test</span><br><span class="line">test constructor</span><br><span class="line">person MyClass</span><br><span class="line">myclass constructor</span><br><span class="line"></span><br><span class="line">为什么输出结果是这样的？我们来分析下这段代码的执行过程：</span><br><span class="line">找到main方法入口，main方法是程序入口，但在执行main方法之前，要先加载Test类</span><br><span class="line">加载Test类的时候，发现Test类有<span class="keyword">static</span>块，而是先执行<span class="keyword">static</span>块，输出test <span class="keyword">static</span>结果</span><br><span class="line">然后执行<span class="keyword">new</span> MyClass(),执行此代码之前，先加载MyClass类，发现MyClass类继承Test类，而是要先加载Test类，Test类之前已加载</span><br><span class="line">加载MyClass类，发现MyClass类有<span class="keyword">static</span>块，而是先执行<span class="keyword">static</span>块，输出myclass <span class="keyword">static</span>结果</span><br><span class="line">然后调用MyClass类的构造器生成对象，在生成对象前，需要先初始化父类Test的成员变量，而是执行Person person = <span class="keyword">new</span> Person(<span class="string">"Test"</span>)代码，发现Person类没有加载</span><br><span class="line">加载Person类，发现Person类有<span class="keyword">static</span>块，而是先执行<span class="keyword">static</span>块，输出person <span class="keyword">static</span>结果</span><br><span class="line">接着执行Person构造器，输出person Test结果</span><br><span class="line">然后调用父类Test构造器，输出test constructor结果，这样就完成了父类Test的初始化了</span><br><span class="line">再初始化MyClass类成员变量，执行Person构造器，输出person MyClass结果</span><br><span class="line">最后调用MyClass类构造器，输出myclass constructor结果，这样就完成了MyClass类的初始化了</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">执行以上程序后，输出结果正确的是？ACBD</span><br><span class="line">如果有<span class="keyword">finally</span>和<span class="keyword">return</span>,那就在<span class="keyword">return</span>前进行<span class="keyword">finally</span>.无论是否异常，都会执行<span class="keyword">finally</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(fun1());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.print(<span class="string">"A"</span>);</span><br><span class="line">            <span class="keyword">return</span> fun2();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"C"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"D"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>static</strong></p><p>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。</p><p>最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。</p><p>静态代码块的执行顺序：静态代码块—–&gt;非静态代码块——–&gt;构造函数</p><p>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    <span class="keyword">new</span> Main();</span><br><span class="line">   <span class="keyword">new</span> Main();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"B"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">"C"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"D"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">以上程序输出的结果，正确的是？DACBCB</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">根据类加载器加载类的初始化原理，推断以下代码的输入结果为:TestA</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      ClassLoader classLoader=ClassLoader.getSystemClassLoader();</span><br><span class="line">      Class clazz=classLoader.loadClass(<span class="string">"A"</span>);</span><br><span class="line">      System.out.print(<span class="string">"Test"</span>);</span><br><span class="line">      clazz.forName(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class clazz=classLoader.loadClass(<span class="string">"A"</span>);</span><br><span class="line">是加载<span class="class"><span class="keyword">class</span>文件到内存中，并没有对类进行首次主动使用，所以没有初始化。</span></span><br><span class="line">clazz.forName("A");</span><br><span class="line">这个通过反射获取到A的内存中的数据结构对象，对类进行了首次使用，才会触发初始化；</span><br><span class="line">总结：</span><br><span class="line">对类的主动使用：</span><br><span class="line">    <span class="number">1</span>. 创建类的实例</span><br><span class="line">    <span class="number">2</span>. 访问某个类或者接口的静态变量，或者对该静态变量赋值。</span><br><span class="line">    <span class="number">3</span>. 调用类的静态方法。</span><br><span class="line">    <span class="number">4</span>. 反射（Class.forName）</span><br><span class="line">    <span class="number">5</span>. 初始化类的子类</span><br><span class="line">    <span class="number">6</span>. java虚拟机启动时被标明为启动类的类</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">通过子类引用父类的静态字段,不会导致子类初始化</span><br><span class="line">该段代码的输入结果?AC</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(B.c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String c = <span class="string">"C"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">常量在编译阶段会存入调用类常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量类的初始化。</span><br><span class="line">输出C</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(B.c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String c = <span class="string">"C"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">读取或设置一个类的静态字段（被<span class="keyword">final</span>修饰、已在编译期把结果放入常量池静态字段除外）时才初始化</span><br><span class="line">    输出 OKJD</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Test2.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String a=<span class="keyword">new</span> String(<span class="string">"JD"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">数组扩容，初始时为<span class="number">10</span>:<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);容量变化的规则是((旧容量 * <span class="number">3</span>) / <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">JDK1.8中，执行以上程序后，该list进行了几次扩容<span class="number">6</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="string">"a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;进程，线程&quot;&gt;&lt;a href=&quot;#进程，线程&quot; class=&quot;headerlink&quot; title=&quot;进程，线程&quot;&gt;&lt;/a&gt;&lt;strong&gt;进程，线程&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​    进程是资源分配的基本单位，线程是调度的基本单位&lt;br&gt;​    一个进程多个线程，多线程共享进程的资源，一个进程至少包含一个进程&lt;br&gt;​    进程销毁，它的线程不会销毁&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="面试" scheme="/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Java" scheme="/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C++相关知识</title>
    <link href="/2018/2018-01-19-C++%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>/2018/2018-01-19-C++相关知识/</id>
    <published>2018-01-19T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C-敲题技巧"><a href="#C-敲题技巧" class="headerlink" title="C++敲题技巧"></a>C++敲题技巧</h4><h5 id="C-导入万能头"><a href="#C-导入万能头" class="headerlink" title="C++导入万能头"></a>C++导入万能头</h5><p>include&lt;bits/stdc++.h&gt;这个头文件包含C++中包含的所有头文件</p><a id="more"></a><h5 id="输入输出问题"><a href="#输入输出问题" class="headerlink" title="输入输出问题"></a>输入输出问题</h5><p>一直输入，然后回车时，结束输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(getchar()==<span class="string">'\n'</span>) <span class="comment">//遇回车结束</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>输入输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>和<span class="built_in">cin</span>都是读到空白结束，尽量使用<span class="built_in">scanf</span>和gets代替<span class="built_in">cin</span>。</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)!=EOF) 代替 <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line"></span><br><span class="line">注意大小写，换行，尽量用<span class="built_in">printf</span>代替<span class="built_in">cout</span>。</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b) 代替 <span class="built_in">cout</span>&lt;&lt;a + b&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>用getline读取整行文本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> line:</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>,line))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;line&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C语法：</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">20</span>]; </span><br><span class="line">gets(buf);</span><br><span class="line">C++语法：</span><br><span class="line"><span class="keyword">char</span> buf[ <span class="number">255</span> ];</span><br><span class="line"><span class="built_in">cin</span>.getline( buf, <span class="number">255</span> );</span><br></pre></td></tr></table></figure><p>最后一个元素不再输出空格</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i!=n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免每次输入用例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">freopen(<span class="string">"fin.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);<span class="comment">//将要输入的数据存入文件</span></span><br></pre></td></tr></table></figure><h5 id="数组整体赋值"><a href="#数组整体赋值" class="headerlink" title="数组整体赋值"></a>数组整体赋值</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h5 id="INT-MAX-INT-MIN最大值和最小值"><a href="#INT-MAX-INT-MIN最大值和最小值" class="headerlink" title="INT_MAX,INT_MIN最大值和最小值"></a>INT_MAX,INT_MIN最大值和最小值</h5><p>int范围太小，才到2亿多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以用<span class="keyword">long</span> <span class="keyword">long</span>或__int64型。</span><br><span class="line">__int64值类型表示值介于 <span class="number">-2</span>^<span class="number">63</span> ( <span class="number">-9</span>,<span class="number">223</span>,<span class="number">372</span>,<span class="number">036</span>,<span class="number">854</span>,<span class="number">775</span>,<span class="number">808</span>) 到<span class="number">2</span>^<span class="number">63</span><span class="number">-1</span>(+<span class="number">9</span>,<span class="number">223</span>,<span class="number">372</span>,<span class="number">036</span>,<span class="number">854</span>,<span class="number">775</span>,<span class="number">807</span> )之间的整数</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d"</span>,a); <span class="comment">//__int64 一般VC编译器使用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,a); <span class="comment">//long long 一般g++编译器使用</span></span><br></pre></td></tr></table></figure><h4 id="C-总结"><a href="#C-总结" class="headerlink" title="C++总结"></a>C++总结</h4><h5 id="C-中指针"><a href="#C-中指针" class="headerlink" title="C++中指针"></a>C++中指针</h5><p>必须实例化new() ,且用-&gt;访问元素，对象用.访问元素</p><h5 id="C-求绝对值与取整"><a href="#C-求绝对值与取整" class="headerlink" title="C++求绝对值与取整"></a>C++求绝对值与取整</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">include   &lt;stdlib.h&gt;</span><br><span class="line">int abs(int   i) 返回整型参数i的绝对值        </span><br><span class="line">double cabs(struct   complex   znum) 返回复数znum的绝对值        </span><br><span class="line">double fabs(double   x) 返回双精度参数x的绝对值       </span><br><span class="line">long labs(long   n) 返回长整型参数n的绝对值 </span><br><span class="line"></span><br><span class="line">使用<span class="built_in">floor</span>函数。<span class="built_in">floor</span>(x)返回的是小于或等于x的最大整数。</span><br><span class="line"> 如：     <span class="built_in">floor</span>(<span class="number">10.5</span>) == <span class="number">10</span>    <span class="built_in">floor</span>(<span class="number">-10.5</span>) == <span class="number">-11</span></span><br><span class="line">使用<span class="built_in">ceil</span>函数。<span class="built_in">ceil</span>(x)返回的是大于x的最小整数。</span><br><span class="line"> 如：     <span class="built_in">ceil</span>(<span class="number">10.5</span>) == <span class="number">11</span>    <span class="built_in">ceil</span>(<span class="number">-10.5</span>) ==<span class="number">-10</span></span><br></pre></td></tr></table></figure><h5 id="C-中数组"><a href="#C-中数组" class="headerlink" title="C++中数组"></a>C++中数组</h5><p>C求数组长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用<span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]), </span><br><span class="line"></span><br><span class="line">在C语言中习惯上在使用时都把它定义成一个宏，比如<span class="meta">#<span class="meta-keyword">define</span> GET_ARRAY_LEN(array,len) &#123;len = (sizeof(array) / sizeof(array[0]));&#125; 。</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="keyword">char</span> <span class="built_in">array</span>[n];则可以使用<span class="built_in">strlen</span>(<span class="built_in">array</span>)获取数组的长度; </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>对于一个一维动态数组，可以使用.size()函数来获取数组的个数。 </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>指针指向的数组，不好求，可以尝试</span><br></pre></td></tr></table></figure><p>数组整体赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">4</span>)</span><br><span class="line">但    </span><br><span class="line"><span class="keyword">int</span> *q=<span class="keyword">new</span> <span class="keyword">int</span> [n];</span><br><span class="line"><span class="built_in">memset</span>(q,<span class="number">0</span>,n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">错误</span><br></pre></td></tr></table></figure><h5 id="C-中String"><a href="#C-中String" class="headerlink" title="C++中String"></a>C++中String</h5><p><strong>1.CString、string和string.h这几个区别：</strong></p><p><strong>CSting:</strong>CString是MFC或者ATL中的实现，是MFC里面封装的一个关于字符串处理的功能很强大的类,只有支持MFC的工程才可以使用。</p><p><strong>string：</strong>string类既是一个标准c++的类库，同时也是STL（Standard Template Library,标准模版库）中的类库，已经纳入C++标准之中。它和CString有本质的区别。</p><p><strong>string.h:</strong>C语言里面关于字符数组的函数定义的头文件，常用函数有strlen、strcmp、strcpy等等。</p><p><strong>2.string类型的读入:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;s;             <span class="comment">//不能读入空格，以空格、制表符、回车符作为结束标志</span></span><br><span class="line">getline(<span class="built_in">cin</span>,s);   <span class="comment">//可以读入空格和制表符，以回车符作为结束标志</span></span><br></pre></td></tr></table></figure><p><strong>3.求string类型的长度：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len=s.size();  或者  <span class="keyword">int</span> len=s.length();两种方法是等价的</span><br></pre></td></tr></table></figure><p><strong>4.求string类型下标为i的字符:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[i]   或   <span class="keyword">char</span> c=s.at(i)</span><br></pre></td></tr></table></figure><p><strong>5.查找t是否为s的子串:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.find(t);</span><br></pre></td></tr></table></figure><p>如果t是s的子串则返回首次匹配的位置，否则返回 string::npos 或 -1 //重点</p><p><strong>6.两个string比较大小：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s1&lt;s2);  或  s1.compare(s2); <span class="comment">//相等时返回0；s1&gt;s2时返回1，s1&lt;s2时返回-1</span></span><br></pre></td></tr></table></figure><p><strong>7.两个string连接：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1=s1+s2;        或       s1.append(s2);</span><br></pre></td></tr></table></figure><p><strong>8.对string类型数组排序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s[<span class="number">100</span>];</span><br><span class="line">sort(s,s+n,cmp);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b; <span class="comment">//升序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9.string类型与字符数组互转</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">char</span>*转<span class="built_in">string</span>：可以直接赋值。</span><br><span class="line"><span class="number">2</span>) <span class="keyword">char</span>[]转<span class="built_in">string</span>：可以直接赋值。</span><br><span class="line"><span class="number">3</span>) <span class="keyword">char</span>*转<span class="keyword">char</span>[]：不能直接赋值，可以循环<span class="keyword">char</span>*字符串逐个字符赋值,也可以使用strcpy_s等函数。</span><br><span class="line"><span class="number">4</span>) <span class="built_in">string</span>转<span class="keyword">char</span>[]:不能直接赋值，可以循环<span class="keyword">char</span>*字符串逐个字符赋值,也可以使用strcpy_s等函数</span><br><span class="line"><span class="number">5</span>) <span class="built_in">string</span>转<span class="keyword">char</span>*:调用<span class="built_in">string</span>对象的c_str函数或data函数或copy函数。</span><br><span class="line"><span class="number">6</span>) <span class="keyword">char</span>[]转<span class="keyword">char</span>*:直接赋值即可。</span><br></pre></td></tr></table></figure><p>char[]2str</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>向构造函数传入c字符串创建<span class="built_in">string</span>对象：</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(ch)</span></span>;</span><br><span class="line"><span class="number">2.</span>使用拷贝构造函数创建<span class="built_in">string</span>对象：</span><br><span class="line"><span class="built_in">string</span> str = ch;</span><br><span class="line"><span class="number">3.</span>对已有的<span class="built_in">string</span>对象调用<span class="built_in">string</span>类内部定义的赋值运算符：</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">str = ch;</span><br></pre></td></tr></table></figure><p>str2char[]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要引用<span class="built_in">string</span>.h头文件，str为<span class="keyword">char</span>数组，s为<span class="built_in">string</span>类型</span><br><span class="line"><span class="built_in">strcpy</span>(str,s.c_str());</span><br></pre></td></tr></table></figure><p>str2char*</p><p> data()除了返回字符串内容外，不附加结束符’\0’，而c_str()返回一个以‘\0’结尾的字符数组 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>data();</span><br><span class="line"><span class="built_in">string</span> str=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> *p=(<span class="keyword">char</span>*)str.data();</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>c_str();</span><br><span class="line"><span class="built_in">string</span> str=<span class="string">"adcd"</span>;</span><br><span class="line"><span class="keyword">char</span> *p=(<span class="keyword">char</span>*)str.c_str();</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>调用<span class="built_in">string</span>的copy()函数</span><br><span class="line"><span class="built_in">string</span> str=<span class="string">"hmmm"</span>;</span><br><span class="line"><span class="keyword">char</span> p[<span class="number">50</span>];</span><br><span class="line">str.copy(p, <span class="number">5</span>, <span class="number">0</span>);<span class="comment">//这里5代表复制几个字符，0代表复制的位置，</span></span><br><span class="line">*(p+<span class="number">5</span>)=‘\<span class="number">0</span>’;<span class="comment">//注意手动加结束符！！！</span></span><br></pre></td></tr></table></figure><p>char*2str</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">"hello"</span>;</span><br><span class="line">s = p;</span><br></pre></td></tr></table></figure><p> char*2char[] </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* c = <span class="string">"HelloWorld!"</span>;  <span class="comment">//初始化char* 类型，并具体赋值</span></span><br><span class="line"><span class="keyword">char</span> arrc[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;    <span class="comment">//初始化char[] 类型，并具体赋值</span></span><br><span class="line">strncpy_s(arrc,c,<span class="number">20</span>);     <span class="comment">//char*类型转char[] 类型</span></span><br></pre></td></tr></table></figure><p>char[] 2 char*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch[] = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">char</span>* p=ch</span><br></pre></td></tr></table></figure><p><strong>10.sting.h中函数用来操作以 null 结尾的字符串</strong></p><table><thead><tr><th>序号</th><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>strcpy(s1,s2)</td><td>复制字符串 s2 到字符串 s1</td></tr><tr><td>2</td><td>strcat(s1,s2)</td><td>连接字符串 s2 到字符串 s1 的末尾</td></tr><tr><td>3</td><td>strlen(s1)</td><td>返回字符串 s1 的长度</td></tr><tr><td>4</td><td>strcmp(s1,s2)</td><td>返回s1与s2的比较结果</td></tr><tr><td>5</td><td>strchr(s1,ch)</td><td>返回一个指针，指向字符串s1中字符ch的第一次出现的位置</td></tr><tr><td>6</td><td>strstr(s1,s2)</td><td>返回一个指针，指向字符串s1中s2的第一次出现的位置</td></tr></tbody></table><p><strong>11.string 类相关函数</strong></p><ul><li>append() – 在字符串的末尾添加字符</li><li>find() – 在字符串中查找字符串</li><li>insert() – 插入字符</li><li>length() – 返回字符串的长度</li><li>replace() – 替换字符串</li><li>substr() – 返回某个子字符串</li></ul><h4 id="C-STL操作"><a href="#C-STL操作" class="headerlink" title="C++STL操作"></a>C++STL操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;//时间相关</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> info &amp;a) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.score &lt; score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//定义结构体</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">des</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a &gt; b);</span><br><span class="line">&#125;<span class="comment">//由大到小排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//time(0)返回从1970年1月1日零时零分零秒到目前为止所经过的时间，单位为秒；      srand()设好随机数种子</span></span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">6</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stack 栈 push pop size top empty</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.push(<span class="number">7</span>);</span><br><span class="line">s.push(<span class="number">9</span>);</span><br><span class="line">s.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"is empty"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector 动态数组 </span></span><br><span class="line"><span class="comment">//初始化方法</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; v1; //空向量</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; v2(6);//大小为n的向量</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; v2(v1); //复制v1副本</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; v3(3,0); //大小为3 ，数值为0</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; myvec(array, array + len);//数组复制到myvec</span></span><br><span class="line"><span class="comment">// 方法 v[i] size empty push_back pop_back clear assign(beg,end)//[beg,end)的值</span></span><br><span class="line"><span class="comment">// 方法 back//最后一个数据 begin end erase(pos) erase(beg,end) insert(pos,elem) </span></span><br><span class="line"><span class="comment">// 方法 insert(pos,n,elem) insert(pos,begin,end) swap(c1,c2)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator vit;<span class="comment">//通过 ++ 操作和 * 操作对容器进行遍历。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(rand());</span><br><span class="line">&#125;</span><br><span class="line">v1.insert(v1.begin() + <span class="number">3</span>, <span class="number">7897</span>);<span class="comment">//插入</span></span><br><span class="line"><span class="keyword">for</span> (vit = v1.begin(); vit != v1.end(); vit++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *vit &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">v1.clear();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//map 映射 按key升序排序,不能对map用sort函数</span></span><br><span class="line"><span class="comment">//m1["wine"] insert(make_pair(key,value)) insert(iterator beg,end) erase(loc) find(key)返回iteractor</span></span><br><span class="line"><span class="comment">//begin end size count(key) empty clear</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">float</span>, less&lt;<span class="built_in">string</span>&gt; &gt; m1,m2;</span><br><span class="line">m1.insert(pair&lt;<span class="built_in">string</span>,<span class="keyword">float</span>&gt;(<span class="string">"apple"</span>, <span class="number">7.75</span>));</span><br><span class="line">m1.insert(make_pair(<span class="string">"cafe"</span>, <span class="number">7.75</span>)); </span><br><span class="line">m1[<span class="string">"wine"</span>] = (<span class="keyword">float</span>)<span class="number">3.65</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">float</span>&gt;::iterator mit;</span><br><span class="line"><span class="keyword">for</span> (mit = m1.begin(); mit != m1.end(); mit++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mit-&gt;first &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; mit-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">m1.swap(m2);</span><br><span class="line">m1.clear();</span><br><span class="line">m2.clear();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list 列表</span></span><br><span class="line"><span class="comment">//back front pop_back pop_front push_back push_front begin end clear empty size reverse sort unique</span></span><br><span class="line"><span class="comment">//erase(pos) erase(start,end) insert(pos,val) insert(pos,num,val) remove(val)所有</span></span><br><span class="line"><span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt; l1;<span class="comment">//list &lt;int&gt; l1(l2); list &lt;int&gt; l1(5); list &lt;int&gt; l1(5,100);</span></span><br><span class="line"><span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt; l2(arr, arr + <span class="number">6</span>);</span><br><span class="line">l1.push_back(<span class="number">-12</span>);</span><br><span class="line">l1.push_back(<span class="number">56</span>);</span><br><span class="line">l1.push_front(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator lit=l1.begin();</span><br><span class="line">l1.erase(lit);</span><br><span class="line"><span class="keyword">for</span> (lit = l1.begin(); lit != l1.end(); lit++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *lit &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l1.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">l1.clear(); l2.clear();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set 集合 值唯一</span></span><br><span class="line"><span class="comment">//insert(val) insert(pos,val) insert(beg,end) erase(pos) erase(val)所有 erase(beg,end)</span></span><br><span class="line"><span class="comment">//find(val) count(val) size begin end clear empty size</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="string">"apple"</span>);</span><br><span class="line">s1.insert(<span class="string">"apple"</span>);</span><br><span class="line">s1.insert(<span class="string">"banana"</span>);</span><br><span class="line">s1.insert(<span class="string">"orange"</span>);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator sit = s1.begin();</span><br><span class="line"><span class="keyword">for</span> (sit = s1.begin(); sit != s1.end(); sit++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *sit &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.clear();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//queue 队列 pop push(val) empty size back front</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q1;</span><br><span class="line">q1.push(<span class="number">1</span>); q1.push(<span class="number">2</span>); q1.push(<span class="number">3</span>); q1.push(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q1.size() &lt;&lt; <span class="string">" "</span> &lt;&lt; q1.empty() &lt;&lt; <span class="string">" "</span> &lt;&lt; q1.front() &lt;&lt; <span class="string">" "</span> &lt;&lt; q1.back() &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">priority_queue&lt;info&gt; pq;</span><br><span class="line">info in;</span><br><span class="line">in.name = <span class="string">"jack"</span>; in.score = <span class="number">65.3</span>;</span><br><span class="line">pq.push(in);</span><br><span class="line">in.name = <span class="string">"tom"</span>; in.score = <span class="number">19</span>;</span><br><span class="line">pq.push(in);</span><br><span class="line">in.name = <span class="string">"jone"</span>; in.score = <span class="number">90</span>;</span><br><span class="line">pq.push(in);</span><br><span class="line"><span class="keyword">while</span> (!pq.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pq.top().name &lt;&lt; <span class="string">":"</span> &lt;&lt; pq.top().score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">sort(v1.begin(), v1.end(), des);<span class="comment">//排序</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-各种排序"><a href="#C-各种排序" class="headerlink" title="C++各种排序"></a>C++各种排序</h4><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><p>快速排序是一种<strong>不稳定</strong>的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动<br>该方法的基本思想是：</p><p>1．先从数列中取出一个数作为<strong>基准数</strong>。</p><p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p><p>3．再对左右区间重复第二步，直到各区间只有一个数。</p><p>对挖坑填数进行总结</p><p>1．i =L; j = R; 将基准数挖出形成第一个坑a[i]。</p><p>2．j–由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</p><p>3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</p><p>4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</p><h5 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h5><p>思想：每一趟排序将会选择出最小的(或者最大的)值，顺序放在已排好序的数列的后面</p><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>思想：将一个记录插入到一个已排好序的有序表中，从而得到一个新的、记录增1的有序表。默认将第一个元素看为有序表，然后依次插入后边的元素</p><p>注意：<strong>这里插入元素的时候默认的策略是从后向前看，找第一个比自己小的；而不是从前向后看，找第一个比自己大的</strong></p><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>思路比较简单：</p><ol><li>将序列当中的左右元素，依次比较，保证右边的元素始终大于左边的元素；<br>（ 第一轮结束后，序列最后一个元素一定是当前序列的最大值；）</li><li>对序列当中剩下的n-1个元素再次执行步骤1。</li><li>对于长度为n的序列，一共需要执行n-1轮比较</li></ol><h5 id="各种排序实现如下："><a href="#各种排序实现如下：" class="headerlink" title="各种排序实现如下："></a>各种排序实现如下：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=*a;</span><br><span class="line">    *b=*a;</span><br><span class="line">    *a=temp;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速 比基数大的数全放到它的右边，小于或等于它的数全放到它的左边。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index=p[l],i=l,j=r;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;p[j]&gt;index)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                p[i]=p[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;p[i]&lt;index)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                p[j]=p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p[i]=index;</span><br><span class="line">        quicksort(p,l,i<span class="number">-1</span>);</span><br><span class="line">        quicksort(p,i+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡  一次比较两个元素，如果他们的顺序错误就将他们进行交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopaosort</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[j]&gt;p[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(p[j],p[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择  直接选择排序每一趟选择出最小的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectsort</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]&gt;p[j])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(p[i],p[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入 将一个记录插入到已排好序的有序表中，从而得到一个新的、记录数增1的有序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertsort</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span>  index =p[i];<span class="comment">//待插入元素</span></span><br><span class="line">        <span class="keyword">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&gt;=<span class="number">0</span>&amp;&amp;p[j]&gt;index;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//待插入元素小于已有的，就将已有往后挪，直到元素大于插入元素或已经到序列最首端了</span></span><br><span class="line">            p[j+<span class="number">1</span>]=p[j];</span><br><span class="line">        &#125;</span><br><span class="line">        p[j+<span class="number">1</span>]=index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[]=&#123;<span class="number">34</span>,<span class="number">65</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">67</span>,<span class="number">5</span>,<span class="number">78</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">70</span>&#125;,k;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"The orginal arrayare:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;len;k++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">array</span>[k]&lt;&lt;<span class="string">","</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//quicksort(array,0,len-1);</span></span><br><span class="line">    <span class="comment">//maopaosort(array,len);</span></span><br><span class="line">    <span class="comment">//selectsort(array,len);</span></span><br><span class="line">    insertsort(<span class="built_in">array</span>,len);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"The sorted arrayare:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;len;k++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">array</span>[k]&lt;&lt;<span class="string">","</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-二叉树常用操作"><a href="#C-二叉树常用操作" class="headerlink" title="C++二叉树常用操作"></a>C++二叉树常用操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode *left;</span><br><span class="line">TreeNode *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">TreeNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.指针访问节点，若有右孩子，右孩子入栈</span></span><br><span class="line"><span class="comment">2.指针指向左节点</span></span><br><span class="line"><span class="comment">3.若指针空，弹栈</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderNoRecursive</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TreeNode *p = root;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; s1;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> || !s1.empty())</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s1.push(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = s1.top();</span><br><span class="line">s1.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">preOrder(root-&gt;left);</span><br><span class="line">preOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">　　对于任一结点P，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​  　1)若其左孩子不为空，则将P入栈并将P的左孩子置为当前的P，然后对当前结点P再进行相同的处理；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​2)若其左孩子为空，则取栈顶元素并进行出栈操作，访问该栈顶结点，然后将当前的P置为栈顶结点的右孩子；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​3)直到P为NULL并且栈为空则遍历结束。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrderNoRecursive</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TreeNode *p = root;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; s1;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> || !s1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s1.push(p);</span><br><span class="line">p = p-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = s1.top();</span><br><span class="line">s1.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">p = p-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inOrder(root-&gt;left);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">inOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderNoRecursive</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TreeNode *p = root;</span><br><span class="line">TreeNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; s1;</span><br><span class="line">s1.push(root);</span><br><span class="line"><span class="keyword">while</span> (!s1.empty())</span><br><span class="line">&#123;</span><br><span class="line">p = s1.top();</span><br><span class="line"><span class="comment">////如果当前结点没有孩子结点或者孩子节点都已被访问过 </span></span><br><span class="line"><span class="keyword">if</span> ((p-&gt;left == <span class="literal">NULL</span>&amp;&amp;p-&gt;right == <span class="literal">NULL</span>) || (pre != <span class="literal">NULL</span> &amp;&amp; (pre == p-&gt;left || pre == p-&gt;right)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">s1.pop();</span><br><span class="line">pre = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s1.push(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s1.push(p-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法1:使用两个栈实现（把先序访问的顺序用第二个栈存起来，然后再出栈就成了）</span></span><br><span class="line"><span class="comment">具体过程如下：</span></span><br><span class="line"><span class="comment">1.申请两个栈，记为s1，s2，然后将头节点压入s1中</span></span><br><span class="line"><span class="comment">2.从s1中弹出栈顶节点，记为cur，然后先把cur的左孩子压入s1中，然后把cur的右孩子压入s1中</span></span><br><span class="line"><span class="comment">3.在整个过程中，每一个从s1中弹出的节点都放入第二个栈s2中。</span></span><br><span class="line"><span class="comment">4.不断重复步骤2和步骤3，直到s1为空，过程停止。</span></span><br><span class="line"><span class="comment">5.从s2中依次弹出节点并打印，打印的顺序就是后序遍历的顺序了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode *&gt; s1;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode *&gt; s2;</span><br><span class="line">TreeNode *p = root;</span><br><span class="line">s1.push(p);</span><br><span class="line"><span class="keyword">while</span> (!s1.empty()) &#123;</span><br><span class="line">p = s1.top();</span><br><span class="line">s1.pop();</span><br><span class="line">s2.push(p);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left)</span><br><span class="line">s1.push(p-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right)</span><br><span class="line">s1.push(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!s2.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.top()-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">s2.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">申请一个栈，记为s，将头节点压入s，同时设置两个变量cur和pre，在整个遍历过程中，cur代表当前s的栈顶节点，pre代表上一次访问的结点，初始时cur为NULL，pre为头节点</span></span><br><span class="line"><span class="comment">每次令cur等于当前s的栈顶节点，但不从栈中弹出节点，此时分以下三种情况：</span></span><br><span class="line"><span class="comment">1.如果cur的左孩子不为空，并且pre不等于cur的左孩子，也不等于cur的右孩子(代表左孩子存在，且左右孩子都没有访问过)，则把cur的左孩子压入栈s中。</span></span><br><span class="line"><span class="comment">2.如果情况1不成立，并且cur的右孩子不为空，并且pre不等于cur的右孩子(代表其左孩子为空或者其已经访问过，但其右孩子没有访问过)，则把cur的右孩子压入栈s中。</span></span><br><span class="line"><span class="comment">3.如果情况1和情况2都不成立，那么从s中弹出cur并打印，然后令pre等于cur。</span></span><br><span class="line"><span class="comment">一直重复步骤2，直到s为空，过程停止。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderTraversal</span><span class="params">(TreeNode *root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;post)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode *&gt; s;</span><br><span class="line">TreeNode *cur = <span class="literal">NULL</span>;</span><br><span class="line">TreeNode *pre = root;  <span class="comment">//注意这里的值</span></span><br><span class="line">s.push(root);</span><br><span class="line"><span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">cur = s.top();</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left &amp;&amp; pre != cur-&gt;left &amp;&amp; pre != cur-&gt;right)</span><br><span class="line">s.push(cur-&gt;left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;right &amp;&amp; pre != cur-&gt;right)</span><br><span class="line">s.push(cur-&gt;right);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">s.pop();</span><br><span class="line">post.push_back(cur-&gt;val);</span><br><span class="line">pre = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrder(root-&gt;left);</span><br><span class="line">postOrder(root-&gt;right);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cengOrder</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;TreeNode *&gt; q1;</span><br><span class="line">q1.push(root);</span><br><span class="line"><span class="keyword">while</span> (!q1.empty())</span><br><span class="line">&#123;</span><br><span class="line">TreeNode *p = q1.front();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">q1.push(p-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">q1.push(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">q1.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//层序遍历，不用队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cengOrderNoque</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>&lt;TreeNode*&gt; l1;</span><br><span class="line">l1.push_back(root);</span><br><span class="line"><span class="keyword">while</span> (!l1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;TreeNode*&gt;temp;</span><br><span class="line"><span class="keyword">for</span> (TreeNode *p : l1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp.push_back(p-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp.push_back(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">l1 = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自下而上，从右到左层序遍历，方法：与层序完全相反，层序遍历的结果入栈</span></span><br><span class="line"><span class="comment">//蛇形打印二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zigOrder</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> isLeftToRight = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">list</span>&lt;TreeNode*&gt; l1;</span><br><span class="line">l1.push_back(root);</span><br><span class="line"><span class="keyword">while</span> (!l1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="built_in">list</span>&lt;TreeNode*&gt;temp;</span><br><span class="line"><span class="keyword">for</span> (TreeNode *p : l1)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(p-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp.push_back(p-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp.push_back(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isLeftToRight)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">isLeftToRight = !isLeftToRight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!isLeftToRight)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = v1.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">isLeftToRight = !isLeftToRight;</span><br><span class="line">&#125;</span><br><span class="line">v1.clear();</span><br><span class="line">l1 = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*用先序遍历的方法递归构造一课二叉树*/</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">create_node</span><span class="params">(<span class="keyword">int</span> level, <span class="built_in">string</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">TreeNode *node = <span class="keyword">new</span> TreeNode();</span><br><span class="line"></span><br><span class="line">​<span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter data:level "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; level - <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">​<span class="comment">//若输入的数据为0，则把该结点的子结点置为空   </span></span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​node-&gt;val = data;</span><br><span class="line"></span><br><span class="line">​<span class="comment">/*create_node（）的    参数用于在给二叉树赋值时表明</span></span><br><span class="line"><span class="comment">现在赋值的是哪个结点*/</span></span><br><span class="line">node-&gt;left = create_node(level + <span class="number">1</span>, <span class="string">"left"</span>);</span><br><span class="line">node-&gt;right = create_node(level + <span class="number">1</span>, <span class="string">"right"</span>);</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode * <span class="title">getTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TreeNode *root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">root-&gt;right = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">root-&gt;left-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">root-&gt;right-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">root-&gt;right-&gt;right = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">root-&gt;right-&gt;left-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​TreeNode* root = getTree();</span><br><span class="line">Solution s1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.preOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"中序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.inOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"后序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.postOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"层序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.cengOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"无队列层序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.cengOrderNoque(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"蛇形打印"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.zigOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"前序非递归"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.preOrderNoRecursive(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"中序非递归"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.inOrderNoRecursive(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"后序非递归"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.postOrderNoRecursive(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"后序非递归2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.postOrderTraversal(root);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;C-敲题技巧&quot;&gt;&lt;a href=&quot;#C-敲题技巧&quot; class=&quot;headerlink&quot; title=&quot;C++敲题技巧&quot;&gt;&lt;/a&gt;C++敲题技巧&lt;/h4&gt;&lt;h5 id=&quot;C-导入万能头&quot;&gt;&lt;a href=&quot;#C-导入万能头&quot; class=&quot;headerlink&quot; title=&quot;C++导入万能头&quot;&gt;&lt;/a&gt;C++导入万能头&lt;/h5&gt;&lt;p&gt;include&amp;lt;bits/stdc++.h&amp;gt;这个头文件包含C++中包含的所有头文件&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="C" scheme="/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>项目介绍之论文格式的自动检测与修改系统</title>
    <link href="/2017/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
    <id>/2017/2017-11-02-项目之论文格式检测系统/</id>
    <published>2017-11-02T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目背景</strong>：此项目隶属于大连理工大学国家级创业训练项目，由三个人负责主要的模块的开发，并交由实验室网站组上线，主要解决高校毕业生论文格式不规范，而人工检查费时费力这一现实问题。</p><p><strong>项目内容</strong>：此项目的在于检测论文中所有格式错误，并加以修改。可以得到整篇论文的错误格式报告和修改格式后的论文。</p><p>通过运用OpenXMLSDK，比较和修改用户上传的论文的XML标签与标准模板XML标签，来达到检测和修改论文格式的目的。截止到目前，这个系统已经在校内网上线，大规模测试了三次，并且已经检测了<strong>超过6000</strong>篇论文。</p><a id="more"></a><p><strong>我的工作</strong>: 负责图，表，页眉页脚等模块的开发，负责字体字号格式检测与修改函数编写。</p><p><strong>用到的技术</strong>: C#, JavaEE , XML提取，字符串匹配</p><p><strong>成果</strong>： 自动检测系统、修改程序各一套，专利、软件著作权各一项</p><p><strong>Github:</strong> <a href="https://github.com/siyuanzhou/PaperFormatDetect" target="_blank" rel="noopener">https://github.com/siyuanzhou/PaperFormatDetect</a></p><p><strong>开发的过程分为了以下几个部分：</strong></p><p>（1） 研究word论文格式与对应的xml映射关系，利用OpenXML等工具研究word下.doc及.docx文件实现过程中用到的标签、类、库，为提取属性及属性对比打下基础。</p><p>（2） 如何从xml中提取格式特征,即利用C#语言提取出每个格式特征的XML标签，并运用到检测过程当中。</p><p>（3） 上传的的论文与指定的模板进行对比，须分别提取上传论文与给定模板的同种属性，依次完成所有属性的对比。</p><p>（4） 全面且准确的将word论文格式封装进库，拟建立一个新的架构层次，避免对比过程中出现耦合，利于系统后期维护与升级。</p><p><strong>主要功能运行</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B-1562844745589.gif" alt="格式检测"></p><p><strong>网站首页</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160128290.png" alt="image-20200113160128290"></p><p><strong>检测页面</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160153167.png" alt="image-20200113160153167"></p><p><strong>生成的报告页</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160212188.png" alt="image-20200113160212188"></p><p><strong>修改前后对比图</strong>（也有不完美的地方）</p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160231188.png" alt="image-20200113160231188"></p><p><strong>结果统计分析页</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160249685.png" alt="image-20200113160249685"></p><p><strong>项目证书</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160313772.png" alt="image-20200113160313772"></p><p><strong>申请专利</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160355068.png" alt="image-20200113160355068"></p><p><strong>软件著作权</strong></p><p><img src="/../assets/pic/2017-11-02-%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200113160413157.png" alt="image-20200113160413157"></p><p>附一些解释及原理：</p><h5 id="OpenXML-SDK-简介"><a href="#OpenXML-SDK-简介" class="headerlink" title="OpenXML SDK 简介"></a>OpenXML SDK 简介</h5><p>Open XML SDK 2.0 for Microsoft Office是微软公司发布的一个的类的集合，使用这些类，开发人员能够操作和新建基于Office Open XML格式标准的Open XML文档。由于SDK能够提供某些让用户可以直接去操作OpenXML文档的应用程序接口，因此在服务器和客户端的操作环境下，即使没有Office客户端产品，用户也能够实现此操作。</p><h5 id="docx文档简介"><a href="#docx文档简介" class="headerlink" title="docx文档简介"></a>docx文档简介</h5><p>docx是Microsoft Office 2007之后的版本所使用新格式，在过去的的文件扩展名之后增加了字母“x”成为新的后缀名，并使用新的基于XML的压缩文件的格式来代替了其目前特有的默认文件格式。docx格式的文件中的大部分内容是通过XML标准来保存的，但文件并不是保存于磁盘，而是通过一个zip压缩文件保存，并将扩展后缀名改为docx。通过修改docx文件的后缀名为zip并解压，或得到一个名为word的文件夹，其包含了一篇Word文档中的全部内容。Word文件夹下的document.xml文件则包含了文档之中绝大多数的文本内容。使用基于压缩的技术，能够将Word文档所占的内存减少很多。</p><p>在docx格式发布之前的doc格式文档是基于二进制存储的，是无法直接转化成为其他格式的，而Office OpenXML格式采用的是zip压缩技术以及XML文本技术。所以与doc格式文档不同之处就在于docx后缀格式的文档能通过修改后缀名为zip进行解压缩，并且可以通过解压缩后的文档看到Word中的各个组件。Word和Excel 07以及之后的版本的Office系统现在已经开始采用这种新的扩展技术了。比如说，后缀名为docx的文档是Word文档基于OpenXML格式生成的文档，把一个doc后缀名的文档升级为docx格式的文档后，通过修改后缀名为zip，然后解压缩，可以得到包含所有XML的文件夹。</p><p><strong>操作原理</strong></p><p>微软公司在OpenXml的公共开发接口中提出了一种专门用于Word文档的语言，被称为WordprocessingML语言。通过该语言生成的文档被叫做WordprocessingML文档。通过这种的语言所生成的文档通常会包含着两种元素，一个是&lt;.body&gt;，另一个是 document，这两种元素之后则通常会跟着一个或者多个的块级元素，比如&lt;.tab/&gt;，&lt;.p&gt;等，&lt;.p&gt;即表示的是一个段落，一个段落则会存在一个或多个&lt;.r&gt;元素，其表示的是一段连续的文字，这些文本会具有一些相同的属性，所以存在于一个&lt;.r&gt;中。而一段连续的文字则通过&lt;.t&gt;元素来保存其文本内容，一个段落中一般会有一个或多个&lt;.t&gt;元素 。</p><p><strong>WordprocessingML和命名空间中的类的对照表</strong></p><table><thead><tr><th>包部分</th><th>WordprocessingML元素</th><th>OpenXml SDK中的类</th><th>说明</th></tr></thead><tbody><tr><td>主文档</td><td>document</td><td>Document</td><td>表示主文档的元素</td></tr><tr><td>页脚</td><td>ftr</td><td>Footer</td><td>表示页脚部分的元素</td></tr><tr><td>页眉</td><td>hdr</td><td>Header</td><td>表示页眉部分的元素</td></tr><tr><td>文档样式</td><td>styles</td><td>Styles</td><td>表示样式定义的元素</td></tr></tbody></table><p>通过上述表中的内容分析，<br>Paragraph类表示在当前的XML格式文档之中的段落，并使用&lt;.p&gt;标签来表示，通过使用Paragrapgh类可以而已解析OpenXml文档之中的&lt;.p&gt;标签。在WordprocessingML中，使用段落属性&lt;.pPr&gt;元素来表示段落的属性。段落的属性包括字体、字号、颜色、行距、缩进等。而&lt;.rPr&gt;元素在WordprocessingML中表示的则是文档的运行属性，其与文档的段落属性基本一致。一篇有Word编写的文档在其段落之中通常都会傲寒这大量的文本内容，在WordprocessingML文档所使用的架构中，&lt;.r&gt;元素被用来划分文本块中的那些连续的文字。相对于&lt;.r&gt;元素，&lt;.t&gt;元素则相当于一个容器，代替其保存那些文本化的内容。一段连续的文儿内容通常会有相同的属性，这些属性被称为样式或者格式，使用&lt;.r&gt;元素能够保存这些属性的设置，并将其运用在一段连续文本的整体或者部分之中。每一段连续的文本和段落一样都会有自己的属性，&lt;.r&gt;元素的属性则是通过段落运行属性元素&lt;.rPr&gt;来设置，通过对&lt;.rPr&gt;元素的设置，可以对&lt;.t&gt;元素中保存的文本内容加上例如加粗、下划线、颜色、字体、字号等各种各样的属性。</p><p>除去上述的段落之外，WordprocessingML中还有一种同样重要的块级内容就是表，表是通过行和列来描述一个段落的内容块，其在WordprocessingML中通过&lt;.tbl&gt;元素来表示与定义一个表，从拼写上看其与HTML语言中的表格的拼写非常的相似。&lt;.tbl&gt;元素具有两个属性元素，&lt;.tblPr&gt;和&lt;.tblGrid&gt;，&lt;.tblPr&gt;用来表示表所在的范围内的一组属性，比如样式和宽度，&lt;.tblGrid&gt;则用来表示一个表的网格布局。一个&lt;.tbl&gt;元素可以包含一个或多个行，其中每行使用&lt;.tr&gt;元素来表示。每行则又能够包含一个或者多个的表格列，列使用&lt;.td&gt;元素表示。行和列的交汇被称之为单元格，单元格我们使用&lt;.tc&gt;表示。通过使用OpenXML SDK Tool 查看多篇文档之后，总结得到了如表5.3中所表示的对应关系。</p><p><strong>WordprocessingML表格元素和类的对应关系</strong></p><table><thead><tr><th>WordprocessingML元素</th><th>OpenXML SDK中的类</th></tr></thead><tbody><tr><td>tr   tblPr   gridCol</td><td>TableRow   TableProperties   GridColum</td></tr><tr><td>tblGrid</td><td>TableGrid</td></tr><tr><td>tc</td><td>TableCell</td></tr></tbody></table><p>WordprocessingML文档之中，使用&lt;.tbl &gt;元素来定义一个表格，通过视同Table事项，我们能够使用代码来完成对一个表格的操作。每一个表格都有几个部分组成：行、列、单元格、表格属性以及网格属性。在上表中我们能够看到&lt;.tr&gt;元素被用来表示一个表格的行，通过获取表格中TableRow成员，我们可得到一个表格中的各个行。而&lt;.tblPr&gt;元素在WordprocessingML中被定义表示一个表格的表格属性，其通常包含了一个表格的是否具有某个边框，边框的线粗，以及表格的位置板式等属性，在代码里通过获取表格的TableProperties成员，我们就能得到一个表格的上述属性。&lt;.gridCol&gt;元素在WordprocessingML中定义为表格行，其表示的是表格的行的通用设置属性。通过实例化获取一个表格中的GridColum成员，我们就能实现对一个表格行的操作。一个&lt;.tbl&gt;元素可以包含一个或多个行，其中每行使用&lt;.tr&gt;元素来表示。每行则又能够包含一个或者多个的表格列，列使用&lt;.td&gt;元素表示。行和列的交汇被称之为单元格，单元格我们使用&lt;.tc&gt;表示。</p><p><strong>页眉定位算法</strong></p><p>&lt;.hdr&gt;元素存储了标题的文本信息以及样式。需要注意的是OpenXML中的页眉不是和我们直接打开文档看到的各页的页眉一一对应的。OpenXML中根据文档设置的各个节【参考文献】的页眉属性如首页不同、奇偶页不同生成相应的页眉。这里的节由OpenXML中的&lt; sectPr&gt;属性体现:每一节的最后都会有一个&lt;.sectPr&gt;属性，这个属性存储此节的页眉的类型和ID、页脚的类型和ID、页的大小宽度、页边距、网格线信息等。根据&lt; sectPr&gt;的ID寻找到这一节对应的&lt; hdr&gt;元素，如首页页眉、奇数页页眉、偶数页页眉。</p><p><strong>目录定位算法</strong></p><p>目录共包含更新域处理过的目录和未经更新域处理的目录。更新域处理过的目录包含Hyperlinkd标签来标记更新域的位置，该更新域的位置即为目录。未经更新域处理的目录包含FieldChar标签，该标签标记了目录所在的位置。</p><p><strong>公式定位算法</strong></p><p><object>元素存储了word文档中一系列其他office软件引入的内容，如公式编辑器编辑的公式，visio编辑的视图等。定位公式首先要找出所有的<object>元素，然后根据公式的格式进行筛选。</object></object></p><p>(1) 段落属性提取</p><p>在OpenXML中，所有文本内容都保存在 &lt; p&gt;中，在表2.1中给出了段落中常见的元素及其说明。</p><p>表1  常见的段落元素和C#类明说明</p><table><thead><tr><th>段落元素</th><th>C#类</th><th>说明</th></tr></thead><tbody><tr><td>spacing</td><td>Document</td><td>表示段落间距的元素</td></tr><tr><td>ind</td><td>Indentation</td><td>表示段落缩进的元素</td></tr><tr><td>sz</td><td>FontSize</td><td>表示字体大小的元素</td></tr><tr><td>rFonts</td><td>RunFonts</td><td>表示字体样式的元素</td></tr><tr><td>t</td><td>Text</td><td>表示段落文本的元素</td></tr></tbody></table><p>为了提高编程效率，提高代码的复用率，将段落各个属性的提取封装在工具类函数中，可以方便其它模块使用。如下三点分别详细地描述了段落字体、字号等属性的提取方法。</p><p><strong>1.字体</strong></p><p>&lt; rFonts&gt;指出了&lt; r&gt;元素中的文本<t>的字体样式，该元素有ASCII、High ANSI、Complex Scipt、East Asian等属性，在本系统中仅检测ASCII及East Asian属性。</t></p><p>ASCII记录ASCII码值在0-127之间的字符字体，如26个大小写英文字母、常见的符号，详情见ASCII码表。East Asian记录UNICODE码值在东亚范围内的字符字体，如汉字、日本语等。论文对中英文字体有不同要求，例如要求中文为宋体，则East Asian应等于“宋体”，要求英文为Times New Roman，则ASCII应等于“Times New Roman”。</p><p>按照样式的层次结构依次提取字体样式，就可以获取到中英文的字体，但需要注意的是，有时段落中并没有英文字体，但是却提取到了英文字体的样式，此时应该增加一个判断，判断段落中实际的字符情况：是全英文、全中文还是中英文兼有。</p><p><strong>2.字号</strong></p><p>&lt; sz&gt;指出了&lt; r&gt;元素中的文本&lt; t&gt;的字号样式。&lt; sz&gt;的属性Val的值代表了字号的大小，如&lt;w:sz w:val=”24”/&gt;代表字号为24/2=12磅。查询字号对照表【参考文献】得到字号和磅数的对应关系，就可以得到实际的字号为“小四”。</p><p><strong>3.段前间距、段后间距和行距</strong></p><p>&lt; pPr&gt;的子元素&lt; spacing&gt;存储此段落的间隔样式，如段前距离before、beforeLines，段后距离after、afterLines，行间距lineRule、line。</p><p>段前距样式信息由before和beforeLines存储。如语句&lt;w:spacing w:after=”200” /&gt;说明段前距离为200/20=20磅。&lt;w:spacing w:afterLines=”300” /&gt;说明段前距离为300/100=3行。当两者同时出现时before属性应被忽略。</p><p>利用&lt; sectPr&gt;元素的子元素&lt; docGrid&gt;的linePitch属性可以获得一行的磅数，如：从&lt;w:docGrid w:linePitch=”326” w:charSpace=”-2048” /&gt;可知，一行为326/ 20=16.3磅。这样就可以解决单位不一致带来的麻烦，统一换算成以“磅”为单位的数据。段后间距和段前间距类似。</p><p>行距样式信息由lineRule和line提取。lineRule保存的是解析line的方法。若lineRule=auto或者省略，如：&lt;w:spacing w:line=”276” w:lineRule=”auto” /&gt;，则行间距为276/240=1.15倍行距。若lineRule= atLeast（最小值）或者exactly（固定值），如：&lt;w:spacing w:line=”200” w:lineRule=”exactly” /&gt;，则行间距为200/20=10磅。</p><p><strong>4.参考文献样式提取中正则表达式的应用</strong></p><p>常见的参考文献类型有专著[M]、论文集[C]、期刊文章[J]、学位论文[D]、专利[P]等，不同类型的参考文献规定格式不同，因此需要先确定每条参考文献属于哪种参考文献，然后才能进行具体的格式分析，在参考文献类型确定以及具体分析中正则表达式都有着很大的作用，在表2中列出了参考文献模块中应用的正则表达式并做出相应的说明：</p><p>表2  参考文献模块中正则表达式的应用</p><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>Match   letter = Regex.Match(paraText, @”[<a href="/OL">A-Z</a>?]“)</td><td>匹配字符串paraText中的字母标识，如“[M]”</td></tr><tr><td>Match   number = Regex.Match(paraText, @”[\d+]“)</td><td>匹配字符串paraText中的数字编号，如“[12]”，进而判定编号的正确性</td></tr><tr><td>string[]   textArr = Regex.Split(paraText, @”[\w*]“)</td><td>用中括号把参考文献条目paraText分割成几个小字符串，进而对各个小字符串进行处理</td></tr><tr><td>Bool   isChinese=Regex.IsMatch(paraText, @”[\u4e00-\u9fa5]”)</td><td>判断字符串paraText中是否有中文，进而判定是中文参考文献还是英文参考文献</td></tr><tr><td>Match   year = Regex.Match(textArr[1], @”[1-2][0-9][0-9][0-9]”)</td><td>匹配字符串textArr[1]中的期刊年份，如“2006”</td></tr></tbody></table><p><strong>参考文献编号连续性</strong></p><p>在OpenXML中有自动编号的功能，当某个编号为自动编号时，生成的标签如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w:pPr&gt;</span><br><span class="line">    &lt;w:numPr&gt;</span><br><span class="line">      &lt;w:ilvl w:val=&quot;0&quot; /&gt;</span><br><span class="line">      &lt;w:numId w:val=&quot;1&quot; /&gt;</span><br><span class="line">    &lt;/w:numPr&gt;</span><br><span class="line">&lt;/w:pPr</span><br></pre></td></tr></table></figure><p>其中&lt; ilvl&gt;指出了编号的层级为第0层，&lt; numId&gt;指出了编号的Id，根据Id倒着寻找中属性等于numId的&lt; num&gt;，在&lt; num&gt;元素中有子元素&lt; abstractNumId&gt;，接着寻找与&lt; abstractNumId&gt;的Val值相等的&lt; abstractNum&gt;就可以得到该编号的属性。如从&lt;w:start w:val=”1” /&gt;可以得到该编号是从1开始的，从&lt;w:lvlText w:val=”%1.” /&gt;可以看出该编号的样式。</p><p>由此可以分析&lt; numId&gt;一样的连续段落，编号一定是连续的。但是在实际的论文中，自动编号和手动编号可能是掺杂着的。因此需要确定每一条参考文献的正确序号，手动编号的参考文献直接比对。而自动编号的段落只需要检查第一个自动编号的段落的序号是否正确即可。</p><h5 id="简单操作代码-demo"><a href="#简单操作代码-demo" class="headerlink" title="简单操作代码 demo"></a>简单操作代码 demo</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Body body = doc.MainDocumentPart.Document.Body;</span><br><span class="line">MainDocumentPart mainPart = doc.MainDocumentPart;</span><br><span class="line">IEnumerable&lt;Paragraph&gt; paras = body.Elements&lt;Paragraph&gt;();</span><br><span class="line">StyleDefinitionsPart stylePart = mainPart.StyleDefinitionsPart;</span><br><span class="line">Styles styles = stylePart.Styles;</span><br><span class="line">var t = styles.ChildElements;</span><br><span class="line">RunProperties rPr = null;</span><br><span class="line">ParagraphProperties pPr = null;</span><br><span class="line">XmlDocument xmlDoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">xmlDoc.Load(xmlFullPath);</span><br><span class="line">XmlNode root = xmlDoc.SelectSingleNode(<span class="string">"CoverStyle/Title"</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">foreach (Paragraph p in paras)</span><br><span class="line">&#123;</span><br><span class="line">   Run r = p.GetFirstChild&lt;Run&gt;();</span><br><span class="line">   <span class="keyword">if</span> (r == null) <span class="keyword">continue</span>;</span><br><span class="line">   Text text = r.GetFirstChild&lt;Text&gt;();</span><br><span class="line">   <span class="keyword">if</span> (text.Text != null &amp;&amp; text.Text.Replace(<span class="string">" "</span>, <span class="string">""</span>) != <span class="string">""</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       count++;</span><br><span class="line">       <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">          rPr = r.GetFirstChild&lt;RunProperties&gt;();</span><br><span class="line">          pPr = p.GetFirstChild&lt;ParagraphProperties&gt;();</span><br><span class="line">          <span class="keyword">bool</span> rfflag = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">bool</span> fzflag = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">bool</span> bflag = <span class="literal">false</span>;</span><br><span class="line">          XmlElement xesub = xmlDoc.CreateElement(<span class="string">"Heading"</span>);</span><br><span class="line">          xesub.SetAttribute(<span class="string">"name"</span>, <span class="string">"论文大标题"</span>);</span><br><span class="line">          XmlElement xesub1 = xmlDoc.CreateElement(<span class="string">"Text"</span>);</span><br><span class="line">          xesub1.InnerText = tool.getFullText(p).Replace(<span class="string">" "</span>,<span class="string">""</span>);</span><br><span class="line">          xesub.AppendChild(xesub1);</span><br><span class="line">          <span class="keyword">if</span>(rPr != null)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//字体</span></span><br><span class="line">              <span class="keyword">if</span> (rPr.GetFirstChild&lt;RunFonts&gt;() != null)</span><br><span class="line">              &#123;</span><br><span class="line">                 <span class="keyword">if</span> (rPr.GetFirstChild&lt;RunFonts&gt;().Ascii != null)</span><br><span class="line">                 &#123;</span><br><span class="line">                  rfflag = <span class="literal">true</span>;</span><br><span class="line">                  XmlElement xe1 = xmlDoc.CreateElement(<span class="string">"Fonts"</span>);</span><br><span class="line">                  xe1.InnerText = rPr.GetFirstChild&lt;RunFonts&gt;().Ascii;</span><br><span class="line">                     xesub.AppendChild(xe1);</span><br><span class="line"></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//字号</span></span><br><span class="line">              <span class="keyword">if</span> (rPr.GetFirstChild&lt;FontSize&gt;() != null)</span><br><span class="line">                 &#123;</span><br><span class="line">                  <span class="keyword">if</span> (rPr.GetFirstChild&lt;FontSize&gt;().Val != null)</span><br><span class="line">                     &#123;</span><br><span class="line">                     fzflag = <span class="literal">true</span>;</span><br><span class="line">                        XmlElement xe1 = xmlDoc.CreateElement(<span class="string">"size"</span>);</span><br><span class="line">                        xe1.InnerText = rPr.GetFirstChild&lt;FontSize&gt;().Val.Value;</span><br><span class="line">                        xesub.AppendChild(xe1);</span><br><span class="line">                      &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(pPr != null)</span><br><span class="line">               &#123;</span><br><span class="line">                  <span class="comment">//对齐方式</span></span><br><span class="line">                  <span class="keyword">if</span> (pPr.GetFirstChild&lt;Justification&gt;() != null)</span><br><span class="line">                  &#123;</span><br><span class="line">                   XmlElement xe1 = xmlDoc.CreateElement(<span class="string">"jc"</span>);</span><br><span class="line">xe1.InnerText=pPr.GetFirstChild&lt;Justification&gt;().Val.</span><br><span class="line">Value.ToString().ToLower();</span><br><span class="line">                     xesub.AppendChild(xe1);</span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                root.AppendChild(xesub);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlDoc.Save(xmlFullPath);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;项目背景&lt;/strong&gt;：此项目隶属于大连理工大学国家级创业训练项目，由三个人负责主要的模块的开发，并交由实验室网站组上线，主要解决高校毕业生论文格式不规范，而人工检查费时费力这一现实问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目内容&lt;/strong&gt;：此项目的在于检测论文中所有格式错误，并加以修改。可以得到整篇论文的错误格式报告和修改格式后的论文。&lt;/p&gt;
&lt;p&gt;通过运用OpenXMLSDK，比较和修改用户上传的论文的XML标签与标准模板XML标签，来达到检测和修改论文格式的目的。截止到目前，这个系统已经在校内网上线，大规模测试了三次，并且已经检测了&lt;strong&gt;超过6000&lt;/strong&gt;篇论文。&lt;/p&gt;
    
    </summary>
    
      <category term="项目简介" scheme="/categories/project/"/>
    
    
      <category term="项目" scheme="/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git原理及用法简介</title>
    <link href="/2017/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>/2017/2017-05-16-Git原理及用法简介/</id>
    <published>2017-05-16T02:36:00.000Z</published>
    <updated>2020-08-09T03:17:00.450Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;siyuanzhou&quot;</span><br><span class="line">$ git config --global user.email &quot;siyuanzhou@163.com&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p><p>使用以下命令生成 SSH Key：key在用户/.ssh文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><h4 id="Git原理"><a href="#Git原理" class="headerlink" title="Git原理"></a>Git原理</h4><p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。 </p><p>Git 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化,Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。Git 的工作方式就如下图所示。<br><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566392419224.png" alt="1566392419224"></p><h4 id="工作区、暂存区、版本库、远程库"><a href="#工作区、暂存区、版本库、远程库" class="headerlink" title="工作区、暂存区、版本库、远程库"></a>工作区、暂存区、版本库、远程库</h4><p><strong>工作区(Working Directory)</strong></p><p>在电脑中能看到的目录，比如我建立的gittest就是一个工作区</p><p><strong>版本库(Repository)</strong></p><p>工作区中的隐藏目录<code>.git</code>，就是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566392620717.png" alt="1566392620717"></p><p>需要提交的文件经过add后先都放到暂存区index(或者叫stage)中，然后经过commit指令，<strong>一次性提交</strong>暂存区的所有修改到head。一旦提交后，同时若对工作区没有做任何修改，那么工作区就是干净的(working directory clean)</p><p>文件内容并没有真正存储在索引(<em>.git/index</em>)或者提交对象中，而是以blob的形式分别存储在数据库(<em>.git/objects</em>)，并用SHA-1值来校验。 索引文件用识别码列出相关的blob文件以及别的数据。对于提交来说，以树(<em>tree</em>)的形式存储，同样用对于的哈希值识别。树对应着工作目录中的文件夹，树中包含的 树或者blob对象对应着相应的子目录和文件。每次提交都存储下它的上一级树的识别码。</p><h5 id="重要的-git-目录"><a href="#重要的-git-目录" class="headerlink" title="重要的 .git 目录"></a>重要的 .git 目录</h5><p>当一个新目录或已有目录执行<code>git init</code>时，Git会创建一个<code>.git</code>目录。这个目录包含了几乎所有Git存储和操作的对象。若想备份或复制一个版本库，只需把这个目录拷贝至另一处即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">description文件：仅供GitWeb程序使用</span><br><span class="line">config文件：包含项目特有的配置选项</span><br><span class="line">info目录：包含一个全局性排除(global exclude)文件，用以放置那些不希望被记录在 .gitignore文件中的忽略模式(ignored patterns)</span><br><span class="line">hooks目录：包含客户端或服务端的钩子脚本(hook scripts)</span><br><span class="line">HEAD文件：指示目前被检出的分支</span><br><span class="line">index文件：保存暂存区信息</span><br><span class="line">objects目录：存储所有数据内容</span><br><span class="line">refs 目录：存储指向数据（分支）的提交对象的指针</span><br></pre></td></tr></table></figure><h5 id="Git相关命令"><a href="#Git相关命令" class="headerlink" title="Git相关命令"></a>Git相关命令</h5><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575186050515.png" alt="1575186050515"></p><ul><li>workspace: 本地的工作目录。（记作 工作区）</li><li>index：缓存区域，临时保存本地改动。（记作 暂存区）</li><li>local repository: 本地仓库，只想最后一次提交 HEAD。（记作 版本库）</li><li>remote repository：远程仓库。（记作 远程库）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">git init命令，初始化一个Git仓库</span><br><span class="line">git add &lt;file&gt;，注意，可反复多次使用，添加多个文件；</span><br><span class="line">git commit -m &lt;message&gt;，提交到工作区。</span><br><span class="line">git status 比较工作区和缓存区（index或者stage)之间的差别</span><br><span class="line">git diff来查看工作区和暂存区差异</span><br><span class="line">git diff --cached来查看暂存区和仓库的差异</span><br><span class="line">git clone，克隆一个仓库，Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快</span><br><span class="line"></span><br><span class="line">git checkout -- file 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用版本库里的版本替换工作区的版本</span><br><span class="line">git reset --hard commit_idHEAD指向的版本就是当前版本，Git允许在版本历史间穿梭</span><br><span class="line">git log可以查看提交历史，以便确定要回退到哪个版本</span><br><span class="line">git reflog查看命令历史，以便确定要回到未来的哪个版本</span><br><span class="line">git reset HEAD &lt;file&gt; 当你不但改乱了工作区某个文件还add后，可以把暂存区的修改撤销掉（unstage）</span><br><span class="line">git rm用于删除已经add但没commit（index区）的一个文件</span><br><span class="line"></span><br><span class="line">git remote add origin git@server-name:path/repo-name.git 要关联一个远程库</span><br><span class="line">git push -u origin master第一次推送master分支的所有内容 origin表示远程库</span><br><span class="line">git pull --rebase origin master 把远程库中的更新合并到本地库中，–rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中</span><br><span class="line">git remote -v 远程库信息</span><br><span class="line"></span><br><span class="line">命令git tag &lt;tagname&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id；</span><br><span class="line">命令git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息；</span><br><span class="line">命令git tag可以查看所有标签</span><br><span class="line">命令git push origin &lt;tagname&gt;可以推送一个本地标签；</span><br><span class="line">命令git push origin --tags可以推送全部未推送过的本地标签；</span><br><span class="line">命令git tag -d &lt;tagname&gt;可以删除一个本地标签；</span><br><span class="line">命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/7a29acce-f243-4914-9f00-f2988c528412.jpg" alt="img"></p><h4 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line">切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt;</span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;</span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br><span class="line">看分支合并图：git log --graph</span><br><span class="line">合并分支时，加上--no-ff参数就可以用普通模式合并，这样进行了一次新的 git commit 操作</span><br><span class="line">git stash把当前工作现场“储藏”起来，等以后git stash pop恢复现场后继续工作</span><br><span class="line">在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick &lt;commit&gt;命令，把bug提交的修改“复制”到当前分支，避免重复劳动</span><br><span class="line"></span><br><span class="line">git branch --set-upstream branch-name origin/branch-name建立本地分支和远程分支的关联</span><br><span class="line">git push origin branch-name从本地推送分支，若失败，先用`git pull`抓取远程的新提交；</span><br><span class="line">git checkout -b branch-name origin/branch-name在本地创建和远程分支对应的分支（分支名最好一致）</span><br><span class="line">开发一个新feature，最好新建一个分支</span><br><span class="line">如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除。</span><br><span class="line">本地新建的分支如果不推送到远程，对其他人就是不可见的</span><br></pre></td></tr></table></figure><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。<code>HEAD</code>指向的就是当前分支。  一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点： </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575195502001.png" alt="1575195502001"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长， 当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上： </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575195523680.png" alt="1575195523680"></p><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575195588494.png" alt="1575195588494"></p><p> 假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并： </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575195635628.png" alt="1575195635628"></p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支。</p><p>合并操作（ merge ）只对对当前所在分支产生影响；无论是否存在冲突，合并之后，feature分支都不会发生变化。 </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575197829688.png" alt="1575197829688"></p><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575198790552.png" alt="1575198790552"></p><h5 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h5><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin</code>推送就能成功</li></ol><p>开源做贡献</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在GitHub上，可以任意Fork开源仓库；</span><br><span class="line"></span><br><span class="line">自己拥有Fork后的仓库的读写权限；</span><br><span class="line"></span><br><span class="line">可以推送pull request给官方仓库来贡献代码。</span><br></pre></td></tr></table></figure><h4 id="图解命令"><a href="#图解命令" class="headerlink" title="图解命令"></a>图解命令</h4><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393106460.png" alt="1566393106460"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add files 把当前文件放入暂存区域。</span><br><span class="line">git commit 给暂存区域生成快照并提交。</span><br><span class="line">git reset -- files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。</span><br><span class="line">git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。</span><br></pre></td></tr></table></figure><p>也可以跳过暂存区域直接从仓库取出文件或者直接提交代码。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393174813.png" alt="1566393174813"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -a 相当于运行 git add 把所有当前目录下的文件加入暂存区域再运行。git commit.</span><br><span class="line">git commit files 进行一次包含最后一次提交加上工作目录中文件快照的提交。并且文件被添加到暂存区域。</span><br><span class="line">git checkout HEAD -- files 回滚到复制最后一次提交。</span><br></pre></td></tr></table></figure><h5 id="git-pull-–rebase-origin-master"><a href="#git-pull-–rebase-origin-master" class="headerlink" title="git pull –rebase origin master"></a>git pull –rebase origin master</h5><p>error：failed to push some refs to问题</p><p>在github库中对某个文件进行了在线的编辑，并且没有同步到本地库，之后我在本地库添加了文件test.txt，并想提交到github，出现以下错误：error：failed to push some refs to </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575192375141.png" alt="1575192375141"></p><p>git pull –rebase origin master意为先取消commit记录，并且把它们临时 保存为补丁(patch)(这些补丁放到”.git/rebase”目录中)，之后同步远程库到本地，最后合并补丁到本地库之中。 </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1575192349102.png" alt="1575192349102"></p><h5 id="约定"><a href="#约定" class="headerlink" title="约定"></a><strong>约定</strong></h5><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393253327.png" alt="1566393253327"></p><p>绿色的5位字符表示提交的ID，分别指向父节点。分支用橘色显示，分别指向特定的提交。<strong>当前分支</strong>由附在其上的<em>HEAD</em>标识。 这张图片里显示最后5次提交，<em>ed489</em>是最新提交。 <em>master</em>分支指向此次提交，另一个<em>maint</em>分支指向祖父提交节点。</p><h5 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><strong>git diff</strong></h5><p> 有许多种方法查看两次提交之间的变动。下面是一些示例。 </p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393413993.png" alt="1566393413993"></p><h5 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h5><p>提交时，git用暂存区域的文件创建一个新的提交，并把此时的节点设为父节点。然后把当前分支指向新的提交节点。下图中，当前分支是<em>master</em>。 在运行命令之前，<em>master</em>指向<em>ed489</em>，提交后，<em>master</em>指向新的节点<em>f0cec</em>并以<em>ed489</em>作为父节点。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393538803.png" alt="1566393538803"></p><p>即便当前分支是某次提交的祖父节点，git会同样操作。下图中，在<em>master</em>分支的祖父节点<em>maint</em>分支进行一次提交，生成了<em>1800b</em>。 这样，<em>maint</em>分支就不再是<em>master</em>分支的祖父节点。此时，合并（merge）是必须的。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393682436.png" alt="1566393682436"></p><p>如果想更改一次提交，使用 <code>git commit --amend</code>。git会使用与当前提交相同的父节点进行一次新提交，旧的提交会被取消。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393747029.png" alt="1566393747029"></p><h5 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><strong>git checkout</strong></h5><p>checkout命令用于从历史提交（或者暂存区域）中拷贝文件到工作目录，也可用于切换分支。</p><p>当给定某个文件名（或者打开-p选项，或者文件名和-p选项同时打开）时，git会从指定的提交中拷贝文件到暂存区域和工作目录。比如，<code>git checkout HEAD~ foo.c</code>会将提交节点<em>HEAD~</em>(即当前提交节点的父节点)中的<code>foo.c</code>复制到工作目录并且加到暂存区域中。（如果命令中没有指定提交节点，则会从暂存区域中拷贝内容。）注意当前分支不会发生变化。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393856086.png" alt="1566393856086"></p><p>当不指定文件名，而是给出一个（本地）分支时，那么<em>HEAD</em>标识会移动到那个分支（也就是说，我们“切换”到那个分支了），然后暂存区域和工作目录中的内容会和<em>HEAD</em>对应的提交节点一致。新提交节点（下图中的a47c3）中的所有文件都会被复制（到暂存区域和工作目录中）；只存在于老的提交节点（ed489）中的文件会被删除；不属于上述两者的文件会被忽略，不受影响。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566393939674.png" alt="1566393939674"></p><p>如果既没有指定文件名，也没有指定分支名，而是一个标签、远程分支、SHA-1值或者是像<em>master~3</em>类似的东西，就得到一个匿名分支，称作<em>detached HEAD</em>（被分离的<em>HEAD</em>标识）。这样可以很方便地在历史版本之间互相切换。比如说你想要编译1.6.6.1版本的git，你可以运行<code>git checkout v1.6.6.1</code>（这是一个标签，而非分支名），编译，安装，然后切换回另一个分支，比如说<code>git checkout master</code>。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394047335.png" alt="1566394047335"></p><h5 id="HEAD标识处于分离状态时的提交操作"><a href="#HEAD标识处于分离状态时的提交操作" class="headerlink" title="HEAD标识处于分离状态时的提交操作"></a><strong>HEAD标识处于分离状态时的提交操作</strong></h5><p>当<em>HEAD</em>处于分离状态（不依附于任一分支）时，提交操作可以正常进行，但是不会更新任何已命名的分支。(你可以认为这是在更新一个匿名分支。)</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394229654.png" alt="1566394229654"></p><p>一旦此后你切换到别的分支，比如说<em>master</em>，那么这个提交节点（可能）再也不会被引用到，然后就会被丢弃掉了。注意这个命令之后就不会有东西引用<em>2eecb</em>。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394271857.png" alt="1566394271857"></p><p>但是，如果你想保存这个状态，可以用命令<code>git checkout -b *name*</code>来创建一个新的分支。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394306123.png" alt="1566394306123"></p><h5 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a><strong>Reset</strong></h5><p>reset命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史仓库中复制文件到索引，而不动工作目录。如果不给选项，那么当前分支指向到那个提交。如果用<code>--hard</code>选项，那么工作目录也更新，如果用<code>--soft</code>选项，那么都不变。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394428452.png" alt="1566394428452"></p><p>如果没有给出提交点的版本号，那么默认用<em>HEAD</em>。这样，分支指向不变，但是索引会回滚到最后一次提交，如果用<code>--hard</code>选项，工作目录也同样。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394505171.png" alt="1566394505171"></p><p>如果给了文件名(或者 <code>-p</code>选项), 那么工作效果和带文件名的<a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html#checkout" target="_blank" rel="noopener">checkout</a>差不多，除了索引被更新</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394539465.png" alt="1566394539465"></p><h5 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a><strong>Merge</strong></h5><p>merge 命令把不同分支合并起来。合并前，索引必须和当前提交相同。如果另一个分支是当前提交的祖父节点，那么合并命令将什么也不做。 另一种情况是如果当前提交是另一个分支的祖父节点，就导致<em>fast-forward</em>合并。指向只是简单的移动，并生成一个新的提交。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394594671.png" alt="1566394594671"></p><p>否则就是一次真正的合并。默认把当前提交(<em>ed489</em> 如下所示)和另一个提交(<em>33104</em>)以及他们的共同祖父节点(<em>b325c</em>)进行一次三方合并。结果是先保存当前目录和索引，然后和父节点<em>33104</em>一起做一次新提交。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394739752.png" alt="1566394739752"></p><p>如下图，<strong>1bdd3be5</strong>修改自<strong>ba8beb31</strong>，<strong>d6c1b0e2</strong>也修改自<strong>ba8beb31</strong>。 三方合并如下图， 只需要把差异项合并 ,得到最终12325为合并结果，下图中没有发生冲突</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566395445702.png" alt="1566395445702"></p><h5 id="Cherry-Pick"><a href="#Cherry-Pick" class="headerlink" title="Cherry Pick"></a><strong>Cherry Pick</strong></h5><p>cherry-pick命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394793682.png" alt="1566394793682"></p><h5 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a><strong>Rebase</strong></h5><p>衍合是合并命令的另一种选择。合并把两个父分支合并进行一次提交，提交历史不是线性的。衍合在当前分支上重演另一个分支的历史，提交历史是线性的。 本质上，这是线性化的自动的 <a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html#cherry-pick" target="_blank" rel="noopener">cherry-pick</a></p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394956978.png" alt="1566394956978"></p><p>上面的命令都在<em>topic</em>分支中进行，而不是<em>master</em>分支，在<em>master</em>分支上重演，并且把分支指向新的节点。注意旧提交没有被引用，将被回收。要限制回滚范围，使用<code>--onto</code>选项。下面的命令在<em>master</em>分支上重演当前分支从<em>169a6</em>以来的最近几个提交，即<em>2c33a</em>。</p><p><img src="/../assets/pic/2017-05-16-Git%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/1566394991196.png" alt="1566394991196"></p><p>同样有<code>git rebase --interactive</code>让你更方便的完成一些复杂操作，比如丢弃、重排、修改、合并提交。</p><h4 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h4><p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line">*.a   # 忽略所有 .a 结尾的文件</span><br><span class="line">!lib.a# 但 lib.a 除外</span><br><span class="line">/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">build/# 忽略 build/ 目录下的所有文件，可以为子目录</span><br><span class="line">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 1234567</span><br></pre></td></tr></table></figure><p>规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;update .gitignore</span><br></pre></td></tr></table></figure><p>参考来源：</p><p>本文部分节选自<a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解算法</a></p><p>本文部分节选自<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰Git教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h4&gt;&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.name &amp;quot;siyuanzhou&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.email &amp;quot;siyuanzhou@163.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理复习</title>
    <link href="/2017/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/"/>
    <id>/2017/2017-02-13-计算机组成原理复习/</id>
    <published>2017-02-13T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章——概述"><a href="#第一章——概述" class="headerlink" title="第一章——概述"></a>第一章——概述</h4><a id="more"></a><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229190825357.png" alt="image-20191229190825357"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229190905776.png" alt="image-20191229190905776"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229190950025.png" alt="image-20191229190950025"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191023543.png" alt="image-20191229191023543"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191039962.png" alt="image-20191229191039962"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191238510.png" alt="image-20191229191238510"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191306019.png" alt="image-20191229191306019"></p><h4 id="第二章——总线"><a href="#第二章——总线" class="headerlink" title="第二章——总线"></a>第二章——总线</h4><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229192115143.png" alt="image-20191229192115143"></p><p>主存总线用于CPU和主存交换信息，I/O总线用于CPU和I/O设备间传送信息，DMA总线负责在主存和I/O设备间直接传递信息。</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229192206455.png" alt="image-20191229192206455"></p><h5 id="总线分类"><a href="#总线分类" class="headerlink" title="总线分类"></a>总线分类</h5><p>Ø片内总线</p><p> 芯片内部总线，例如运算器和cache之间的总线。</p><p>Ø系统总线（板级总线）</p><p> 处理器与主存、I/O等部件之间的信息传输线。</p><p> <strong>三总线结构：数据总线、地址总线、控制总线</strong></p><p>Ø通信总线</p><p>计算机系统之间，或计算机与其他设备之间的信息传输线，串行、并行</p><h5 id="总线判优"><a href="#总线判优" class="headerlink" title="总线判优"></a>总线判优</h5><p>Ø<strong>主设备</strong>：对总线有控制权，可以发起信息传送。</p><p>Ø<strong>从设备</strong>：只能响应总线上的命令</p><p>Ø<strong>判优逻辑</strong>：当多个主设备同时申请使用总线时，总线判优逻辑电路按照一定的优先级顺序来确定哪个主设备可以使用总线。</p><p>Ø<strong>判优逻辑分类</strong>： </p><p> 分布式、集中式（链式查询、计算器定时查询、独立请求方式）</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229194541670.png" alt="image-20191229194541670"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229194631851.png" alt="image-20191229194631851"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229194704320.png" alt="image-20191229194704320"></p><h5 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h5><p>Ø目的：解决通信方法协调配合的问题</p><p>Ø总线周期分为四个阶段：</p><p>–申请分配阶段：各主模块提出<strong>申请</strong>，总线仲裁器选中合适的模块。</p><p>–寻址阶段：主模块发出<strong>地址和命令</strong></p><p>–传数阶段：主模块和从模块<strong>交换数据</strong></p><p>–结束阶段：主模块<strong>撤销</strong>有关信息</p><h5 id="总线通信四种方式"><a href="#总线通信四种方式" class="headerlink" title="总线通信四种方式"></a>总线通信四种方式</h5><p>Ø同步通信：发送<strong>时钟信号</strong>来同步数据传送</p><p>Ø异步通信：没有时钟，采用<strong>握手信号</strong>同步</p><p>Ø半同步通信：同步、异步<strong>结合，</strong>插入<strong>等待周期。</strong></p><p>Ø分离式通信：传输周期<strong>划分</strong>为功能独立的子周期</p><p><strong>同步通信</strong></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229195115222.png" alt="image-20191229195115222"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229190905776.png" alt="image-20191229190905776"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229190950025.png" alt="image-20191229190950025"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191023543.png" alt="image-20191229191023543"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191039962.png" alt="image-20191229191039962"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191238510.png" alt="image-20191229191238510"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229191306019.png" alt="image-20191229191306019"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229192115143.png" alt="image-20191229192115143"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229192206455.png" alt="image-20191229192206455"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229194541670.png" alt="image-20191229194541670"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229194631851.png" alt="image-20191229194631851"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229194704320.png" alt="image-20191229194704320"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229195115222.png" alt="image-20191229195115222"><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229195142027.png" alt="image-20191229195142027"></p><p><strong>异步通信</strong></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229195005160.png" alt="image-20191229195005160"></p><p><strong>半同步通信</strong></p><p>Ø发送方仍然发送时钟。</p><p>Ø接收方根据自身情况反馈信息给发送方，使发送方进行相应调整。增加一条<strong>等待</strong>响应信号线（<strong>wait</strong>）</p><p>Ø“主体同步，细节异步”</p><p>Ø允许不同速率的设备和谐工作</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229195254865.png" alt="image-20191229195254865"></p><p><strong>分离式通信</strong></p><p>Ø<strong>充分挖掘系统总线每个瞬间的潜力</strong>，每个总线传输周期分为两个子周期</p><p>–子周期1：主模块申请占用总线，使用完后即放弃总线的使用权。</p><p>–子周期2：从模块申请占用总线，将各种信息送到总线上。</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229195449630.png" alt="image-20191229195449630"></p><h4 id="第三章——存储器"><a href="#第三章——存储器" class="headerlink" title="第三章——存储器"></a>第三章——存储器</h4><h5 id="存储器概述"><a href="#存储器概述" class="headerlink" title="存储器概述"></a>存储器概述</h5><p>存储器的地位不断上升</p><p>1、存储器的运行速度对计算机运行速度有很大影响。</p><p>2、DMA方式提高了存储器的地位。</p><p>3、存储器是多处理机系统信息交换的重要渠道</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229201042866.png" alt="image-20191229201042866"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229201149208.png" alt="image-20191229201149208"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229201213977.png" alt="image-20191229201213977"></p><h5 id="技术指标"><a href="#技术指标" class="headerlink" title="技术指标"></a>技术指标</h5><p>存储容量：主存能存放的二进制数的总位数</p><p>存储器容量＝存储单元个数×存储字长</p><p>p存储速度：</p><p>Ø存取时间：启动一次存储器操作到完成操作的时间。也叫做访问时间。分为读出时间和写入时间。</p><p>Ø存取周期：进行两次连续存储器操作间的最小间隔。MOS型为100ns，TTL型为10ns。</p><p>p存储器带宽：单位时间内存储器存取的信息量（字节/秒、字/秒、位/秒）。</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229205332334.png" alt="image-20191229205332334"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229201928684.png" alt="image-20191229201928684"></p><p><strong>1、按存储介质分类</strong></p><p>Ø半导体存储器：TTL、MOS</p><p> <strong>体积小、功耗低、存取时间短、易失性。</strong></p><p>Ø磁表面存储器：磁盘、磁带、磁鼓</p><p>Ø磁芯存储器：硬磁材料的环状元件</p><p>Ø光盘存储器：激光、磁光</p><p><strong>2、按数据保存方式分类</strong></p><p><strong>随机存储器（Random Access Memory）</strong></p><p>易失性</p><p>静态随机存储器、动态随机存储器</p><p><strong>只读存储器（**</strong>Read Only Memory<strong>**）</strong></p><p>非易失性</p><p>掩膜型只读存储器（ROM）、可编程只读存储器（PROM）、可擦除可编程只读存储器（EPROM）、电可擦除可编程只读存储器（EEPROM）、闪速存储器（Flash Memory）</p><p>注：</p><p>​    ROM指的是“只读存储器”，即Read-Only Memory。这是一种线路最简单半导体电路，通过掩模工艺， 一次性制造，其中的代码与数据将永久保存(除非坏掉)，不能进行修改。这玩意一般在大批量生产时才会被用的，优点是成本低、非常低，但是其风险比较大，在产品设计时，如果调试不彻底，很容易造成几千片的费片，行内话叫“掩砸了”！<br> 　PROM指的是“可编程只读存储器”既Programmable Red-Only Memory。这样的产品只允许写入一次，所以也被称为“一次可编程只读存储器”(One Time Progarmming ROM，OTP-ROM)。PROM在出厂时，存储的内容全为1，用户可以根据需要将其中的某些单元写入数据0(部分的PROM在出厂时数据全为0，则用户可以将其中的部分单元写入1)， 以实现对其“编程”的目的。PROM的典型产品是“双极性熔丝结构”，如果我们想改写某些单元，则可以给这些单元通以足够大的电流，并维持一定的时间，原先的熔丝即可熔断，这样就达到了改写某些位的效果。另外一类经典的PROM为使用“肖特基二极管”的PROM，出厂时，其中的二极管处于反向截止状态，还是用大电流的方法将反相电压加在“肖特基二极管”，造成其永久性击穿即可。 </p><p> 　EPROM指的是“可擦写可编程只读存储器”，即Erasable Programmable Read-Only Memory。 它的特点是具有可擦除功能，擦除后即可进行再编程，但是缺点是擦除需要使用紫外线照射一定的时间。这一类芯片特别容易识别，其封装中包含有“石英玻璃窗”，一个编程后的EPROM芯片的“石英玻璃窗”一般使用黑色不干胶纸盖住， 以防止遭到阳光直射。 </p><p> 　EEPROM指的是“电可擦除可编程只读存储器”，即Electrically Erasable Programmable Read-Only Memory。它的最大优点是可直接用电信号擦除，也可用电信号写入。EEPROM不能取代RAM的原应是其工艺复杂， 耗费的门电路过多，且重编程时间比较长，同时其有效重编程次数也比较低。 </p><p> 　Flash memory指的是“闪存”，所谓“闪存”，它也是一种非易失性的内存，属于EEPROM的改进产品。它的最大特点是必须按块(Block)擦除(每个区块的大小不定，不同厂家的产品有不同的规格)， 而EEPROM则可以一次只擦除一个字节(Byte)。目前“闪存”被广泛用在PC机的主板上，用来保存BIOS程序，便于进行程序的升级。其另外一大应用领域是用来作为硬盘的替代品，具有抗震、速度快、无噪声、耗电低的优点，但是将其用来取代RAM就显得不合适，因为RAM需要能够按字节改写，而Flash ROM做不到。</p><h5 id="静态RAM"><a href="#静态RAM" class="headerlink" title="静态RAM"></a>静态RAM</h5><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229223439185.png" alt="image-20191229223439185"></p><p>2114</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229204720983.png" alt="image-20191229204720983"></p><h5 id="动态RAM"><a href="#动态RAM" class="headerlink" title="动态RAM"></a>动态RAM</h5><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229223324467.png" alt="image-20191229223324467"></p><p>刷新</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229223646035.png" alt="image-20191229223646035"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229223701149.png" alt="image-20191229223701149"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191229223735678.png" alt="image-20191229223735678"></p><h5 id="存储器扩展方式"><a href="#存储器扩展方式" class="headerlink" title="存储器扩展方式"></a>存储器扩展方式</h5><p>存储器与CPU的连接：数据线、地址线、片选线、读写控制</p><p>Ø字扩展</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230130116564.png" alt="image-20191230130116564"></p><p>Ø位扩展</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230130039600.png" alt="image-20191230130039600"></p><p>Ø字、位扩展</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230130209883.png" alt="image-20191230130209883"></p><h5 id="高速缓冲存储器cache"><a href="#高速缓冲存储器cache" class="headerlink" title="高速缓冲存储器cache"></a>高速缓冲存储器cache</h5><p><strong>问题的提出</strong></p><p>Ø解决CPU访存优先级低于I/O的问题</p><p>Ø解决CPU和存储器速度差异的矛盾</p><p> <strong>理论基础：局部性原理</strong></p><p>Ø时间局部性原理</p><p>Ø空间局部性原理</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230132156216.png" alt="image-20191230132156216"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230132510997.png" alt="image-20191230132510997"></p><h5 id="cache替换算法"><a href="#cache替换算法" class="headerlink" title="cache替换算法"></a>cache替换算法</h5><p>先进先出（FIFO）算法</p><p>最近最少使用算法</p><p>随机算法</p><h5 id="cache一致性"><a href="#cache一致性" class="headerlink" title="cache一致性"></a>cache一致性</h5><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230132947421.png" alt="image-20191230132947421"></p><h5 id="cache的地址映像"><a href="#cache的地址映像" class="headerlink" title="cache的地址映像"></a>cache的地址映像</h5><p><strong>直接映像：某一主存块只能映像到唯一缓存块。映像方式简单，但是不够灵活，容易导致块冲突。</strong></p><p><strong>全相联映像：某一主存块可映射到任一缓存块，最灵活，不易冲突，但成本高。</strong></p><p><strong>组相联映像：某一主存块可映射到某一组中的任一块，兼顾了灵活性和成本。</strong></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230132648542.png" alt="image-20191230132648542"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230132721925.png" alt="image-20191230132721925"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230132738267.png" alt="image-20191230132738267"></p><h5 id="提高访存速度的措施"><a href="#提高访存速度的措施" class="headerlink" title="提高访存速度的措施"></a>提高访存速度的措施</h5><p><strong>调整主存结构</strong></p><p>Ø单体多字</p><p>Ø多体并行</p><p><strong>采用高速存储器部件</strong></p><p><strong>采用高速缓冲存储器构成</strong> <strong>cache－主存 层次</strong></p><h5 id="调整主存结构"><a href="#调整主存结构" class="headerlink" title="调整主存结构"></a>调整主存结构</h5><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230140648708.png" alt="image-20191230140648708"></p><p>2.多体并行系统：</p><p>存储器由多个存储器构成，各存储体有相同的容量和存取速度，独立的地址寄存器、数据寄存器、地址译码、驱动电路、读写电路等。</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230141007612.png" alt="image-20191230141007612"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230141048878.png" alt="image-20191230141048878"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230141207034.png" alt="image-20191230141207034"></p><h5 id="数据校验码"><a href="#数据校验码" class="headerlink" title="数据校验码"></a>数据校验码</h5><p>码距：一种编码体系中，任意两组合法编码之间不同的二进制位数的最小值，叫做这种编码的码距。</p><p>码距决定了编码的纠错和检错能力</p><p><strong>奇偶校验码、循环冗余校验码、海明码</strong></p><p>校验码用于数据传输、存储的过程中，确保信息正确。</p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230204220619.png" alt="image-20191230204220619"></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230203754025.png" alt="image-20191230203754025"></p><p><strong>循环冗余校验CRC(Cyclic Redundancy Check)码的工作原理</strong></p><p>Ø在K位信息码后再拼接r位的校验码，整个编码长度为N位，这种编码又叫（N，K）码。</p><p>Ø对于一个给定的码，可以证明存在一个最高次幂为N-K=R的多项式G(x)。根据G(x)可以生成r位校验码，而G(x)叫做这个CRC码的生成多项式。</p><p><strong>用途：发现并纠正信息存储或传送过程中出现的错误</strong></p><p><img src="/../assets/pic/2017-02-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/image-20191230204045135.png" alt="image-20191230204045135"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章——概述&quot;&gt;&lt;a href=&quot;#第一章——概述&quot; class=&quot;headerlink&quot; title=&quot;第一章——概述&quot;&gt;&lt;/a&gt;第一章——概述&lt;/h4&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="复习" scheme="/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>网络信息安全复习</title>
    <link href="/2017/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/"/>
    <id>/2017/2017-01-03-网络信息安全复习/</id>
    <published>2017-01-03T02:36:00.000Z</published>
    <updated>2020-01-14T04:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>整个课就三个部分：对称密码，非对称密码，和几种安全服务(消息认证，数字签名，认证，证书等等都是为了安全服务)</p><a id="more"></a><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h5 id="安全服务"><a href="#安全服务" class="headerlink" title="安全服务"></a>安全服务</h5><blockquote><p>RFC2828中定义的，是一种由系统提供的对系统资源进行特殊保护的处理或通信服务，安全服务通过安全机制来实现安全策略。</p><p>ITU-T（即X.800）定义了五种服务：【身份认证】、【访问控制】、【数据保密】、【数据完整性】、【不可否认】</p></blockquote><ul><li>【身份认证】：认证发送方和接收方的身份（对等实体身份认证）确保通信实体是合法和真实的</li><li>【访问控制】：保护信息免于被未经授权的实体访问</li><li>【数据机密性】：保护数据免于非授权泄露，并防止流量分析</li><li>【数据完整性】：确保接收到的数据是由授权用户发出的或者是未被修改过的</li><li>【不可否认性】：防止通信方对通信行为的否认，包括源不可否认性和宿不可否认性</li><li>Availiable Service: 系统或系统资源能够按照要求根据系统性能规范被授权访问和使用</li></ul><h5 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h5><blockquote><p>安全机制是用来检测、防止安全攻击，或从安全攻击中恢复的机制。单一的安全机制不能保证所需的所有安全服务。最重要的安全机制之一就是密码编码规则（重点）</p></blockquote><ul><li>加密：隐藏或覆盖信息以使其具有机密性。</li><li>完整性：消息后面附加于一个短的键值。接收方接收信息和键值，再从接收的信息中创建一个新的键值，并把新创建的键值和原来的进行比较，如果两个键值相同，则说明数据的完整性被保全。==举个栗子==比如我发个消息，除了消息本身以外还发了一个消息的总长度，然后发出去了。接收方先收到消息，然后计算一下消息的总长度，和他收到的总长度对比，如果一样，就说明信息完整性被破坏的可能性不高。</li><li>数字签名：信息发送方可以对信息进行电子签名，信息接收方可以对签名进行电子校验。</li><li>身份认证交换：两个实体交换信息以互相证明身份，比如一方可以证明只有另一方才知道的小秘密。</li><li>流量填充：指在数据流中嵌入一些虚假信息，阻止对手企图使用流量分析。</li><li>路由控制：指在发送方和接收方之间选择并【不断改变有效路由】，以避免对手在特定的路由上偷听。</li><li>公证：找一个可靠的第三方控制双方通信。</li><li>访问控制：用各种方法，证明某个用户具有访问该信息或该系统所拥有的资源的权力。</li></ul><p>安全服务可以由一些安全机制去实现，例如：</p><table><thead><tr><th>安全服务</th><th>安全机制</th></tr></thead><tbody><tr><td>信息机密性</td><td>加密和路由控制</td></tr><tr><td>信息完整性</td><td>加密、数字签名、信息完整性</td></tr><tr><td>身份认证</td><td>加密、数字签名</td></tr><tr><td>不可否认性</td><td>数字签名、信息完整性和公证</td></tr><tr><td>访问控制</td><td>访问控制机制</td></tr></tbody></table><h5 id="对安全的攻击"><a href="#对安全的攻击" class="headerlink" title="对安全的攻击"></a>对安全的攻击</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Interruption: 对availability的攻击</span><br><span class="line">Interception: 对confidentiality的攻击</span><br><span class="line">Modification: 对integrity的攻击</span><br><span class="line">Fabrication: 对authenticity的攻击</span><br></pre></td></tr></table></figure><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574576554598.png" alt="1574576554598"></p><h5 id="主动攻击和被动攻击"><a href="#主动攻击和被动攻击" class="headerlink" title="主动攻击和被动攻击"></a>主动攻击和被动攻击</h5><p>被动攻击：对传输进行窃听和监测，通信和信息不受影响，用户感觉不到攻击存在，攻击通常是窃听或流量分析，判断通信性质</p><p>主动攻击：攻击者破坏通信过程，拦截、修改、伪造、丢弃信息、拒绝服务或假冒合法用户</p><h5 id="简单加密系统模型"><a href="#简单加密系统模型" class="headerlink" title="简单加密系统模型"></a>简单加密系统模型</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574576797543.png" alt="1574576797543"></p><h5 id="理论安全和实际安全"><a href="#理论安全和实际安全" class="headerlink" title="理论安全和实际安全"></a>理论安全和实际安全</h5><p>理论安全，或无条件安全Theoretical Secure (or Perfect Secure)：攻击者无论截获多少密文，都无法得到足够的信息来唯一地决定明文。Shannon用理论证明：欲达理论安全，加密密钥长度必须大于等于明文长度，密钥只用一次，用完即丢，即一次一密，One-time Pad，不实用。</p><p>实际安全，或计算上安全Practical Secure (or Computationally Secure)：如果攻击者拥有无限资源，任何密码系统都是可以被破译的；但是，在有限的资源范围内，攻击者都不能通过系统的分析方法来破解系统，则称这个系统是计算上安全的或破译这个系统是计算上不可行(Computationally Infeasible)。 </p><h5 id="对称密码体制和非对称密码体制"><a href="#对称密码体制和非对称密码体制" class="headerlink" title="对称密码体制和非对称密码体制"></a>对称密码体制和非对称密码体制</h5><p>对称密码体制(Symmetric System, One-key System, Secret-key System)：加密密钥和解密密钥相同，或者一个密钥可以从另一个导出，能加密就能解密，加密能力和解密能力是结合在一起的，开放性差。</p><p>非对称密码体制(Asymmetric System, Two-key System, Public-key System)： 加密密钥和解密密钥不相同，从一个密钥导出另一个密钥是计算上不可行的，加密能力和解密能力是分开的，开放性好。</p><h5 id="序列密码体制和分组密码体制"><a href="#序列密码体制和分组密码体制" class="headerlink" title="序列密码体制和分组密码体制"></a>序列密码体制和分组密码体制</h5><p>序列密码：如果密文不仅与最初给定的算法和密钥有关，同时也与明文位置有关(是所处位置的函数)，则称为序列密码体制。加密以明文比特为单位，以伪随机序列与明文序列模2加后，作为密文序列。</p><p>分组密码：如果经过加密所得到的密文仅与给定的密码算法和密钥有关，与被处理的明文数据在整个明文中的位置无关，则称为分组密码体制。通常以大于等于64位的数据块为单位，加密得相同长度的密文。</p><h5 id="确定型密码体制和概率密码体制"><a href="#确定型密码体制和概率密码体制" class="headerlink" title="确定型密码体制和概率密码体制"></a>确定型密码体制和概率密码体制</h5><p>确定型：当明文和密钥确定后，密文也就唯一地确定了。</p><p>概率型：当明文和密钥确定后，密文通过客观随机因素从一个密文集合中产生，密文形式不确定，称为概率型密码体制。</p><h5 id="单向函数型密码体制和双向变换型密码体制"><a href="#单向函数型密码体制和双向变换型密码体制" class="headerlink" title="单向函数型密码体制和双向变换型密码体制"></a>单向函数型密码体制和双向变换型密码体制</h5><p>单向函数型密码体制适用于不需要解密的场合，容易将明文加密成密文，如哈希函数；</p><p>双向变换型密码体制可以进行可逆的加密、解密变换。</p><h5 id="confusion和diffusion-混淆和扩散"><a href="#confusion和diffusion-混淆和扩散" class="headerlink" title="confusion和diffusion(混淆和扩散)"></a>confusion和diffusion(混淆和扩散)</h5><p>Shannon认为，为了对付基于统计分析的密码破译，必须对明文作confusion(混淆)和diffusion(扩散)处理，以减少密文的统计特性，为统计分析制造障碍。</p><p>diffusion ——明文统计结构扩散消失到大批密文统计特性中，使明文和密文之间统计关系尽量复杂；</p><p>confusion ——混淆，使密文和加密密钥之间的关系尽量复杂。</p><h5 id="现代密码学基本原则及理论"><a href="#现代密码学基本原则及理论" class="headerlink" title="现代密码学基本原则及理论"></a>现代密码学基本原则及理论</h5><p>设计加密系统时，总是假定密码算法是可以 公开的，需要保密的是密钥。一个密码系统的安全性不在算法的保密，而在于密钥。</p><p>对称加密系统的五个组成部分：明文、加密算法、密钥、密文、解密算法</p><p>所有加密算法都基于两个原理： 代替和置换。代替是将明文中的每个元素映射成另一个元素，置换是将明文元素重新排列。</p><p>密码攻击的两种方式：密码分析学攻击(差分分析和线性分析)和穷举攻击</p><p>另一种密码攻击的分类：唯密文攻击、已知明文攻击、选择明文攻击、选择密文攻击、选择文本攻击，一般的，加密算法起码要能经受得住已知明文攻击。</p><p>一次一密的两个限制：产生大规模随机密钥有实际困难、密钥的分配和保护无法保证。</p><p>隐写术不是加密技术。</p><p>多次加密的最简单形式是进行两次加密，每次使用不同的密钥，但存在中间相遇攻击。</p><p>使用两个密钥进行三次加密：E-D-E，即 C=E K1 [D K2 [E K1 [P]]；三个密钥加密，C = E K3 [D K2 [E K1 [P]]]</p><p>应用最广泛的公钥密码体制是 RSA，破解 RSA 的困难，是基于分解大合数的素因子的困难</p><p>公钥密码体制中， 穷举消息攻击是第三种攻击形式，攻击者用公钥对所有可能的消息加密，并与传送的密文匹配，从而解密任何消息；抵抗的方法是在要发送的消息后附加随机数(即对传送的明文进行穷举攻击)。</p><h4 id="离散复习-群、环、域-与模运算"><a href="#离散复习-群、环、域-与模运算" class="headerlink" title="离散复习(群、环、域)与模运算"></a>离散复习(群、环、域)与模运算</h4><h5 id="群G-记作-G-•"><a href="#群G-记作-G-•" class="headerlink" title="群G, 记作{G, •}"></a>群G, 记作{G, •}</h5><p>定义一个二元运算•的集合，G中每一个序偶(a, b)通过运算生成G中元素(a•b)，满足下列公理：</p><p>(A1) 封闭性Closure: 如果a和b都属于G, 则a•b也属于G.</p><p>(A2) 结合律Associative: 对于G中任意元素a, b, c，都有a•(b•c)=(a•b)•c成立</p><p>(A3) 单位元Identity element: G中存在一个元素e，对于G中任意元素a，都有a•e=e•a=a成立</p><p>(A4) 逆元Inverse element: 对于G中任意元素a, G中都存在一个元素a’，使得a•a’=a’•a=e成立</p><h5 id="交换群Abelian-Group："><a href="#交换群Abelian-Group：" class="headerlink" title="交换群Abelian Group："></a>交换群Abelian Group：</h5><p>还满足以下条件的群称为交换群(又称阿贝尔群)</p><p>(A5) 交换律Commutative ：对于G中任意的元素a, b，都有a•b=b•a成立</p><p>当群中的运算符是加法时，其单位元是0；a的逆元是-a, 并且减法用以下的规则定义: a – b = a + (-b)</p><h5 id="循环群Cyclic-Group"><a href="#循环群Cyclic-Group" class="headerlink" title="循环群Cyclic Group"></a>循环群Cyclic Group</h5><p>l如果群中的每一个元素都是一个固定的元素a (a ∈G)的幂ak(k为整数)，则称群G为循环群。元素a生成了群G，或者说a是群G的生成元。</p><h5 id="环R-由-R-x-表示"><a href="#环R-由-R-x-表示" class="headerlink" title="环R, 由{R, +, x}表示"></a>环R, 由{R, +, x}表示</h5><p>是具有加法和乘法两个二元运算的元素的集合，对于环中的所有a, b, c, 都服从以下公理：</p><p>(A1-A5), 单位元是0，a的逆是 -a.</p><p>(M1), 乘法封闭性, 如果a和b属于R, 则ab也属于R</p><p>(M2), 乘法结合律,对于R中任意a, b, c有a(bc)=(ab)c.</p><p>(M3), 乘法分配律, a(b+c)=ab+ac or (a+b)c=ac+bc</p><p>(M4), 乘法交换律, ab=ba，交换环 </p><p>(M5), 乘法单位元, R中存在元素1使得所有a有 a1=1a.</p><p>(M6), 无零因子, 如果R中有a, b且ab=0, 则 a=0 or b=0.</p><p>满足M4的是交换环；满足M5和M6的交换环是整环</p><h5 id="域F-可以记为-F-x"><a href="#域F-可以记为-F-x" class="headerlink" title="域F, 可以记为{F, +, x}"></a>域F, 可以记为{F, +, x}</h5><p>是有加法和乘法的两个二元运算的元素的集合，对于F中的任意元素a, b, c, 满足以下公理：</p><p>(A1-M6), F是一个整环</p><p>(M7), 乘法逆元, 对于F中的任意元素a(除0以外), F中都存在一个元素a-1, 使得aa-1=(a-1)a=1.</p><p>域就是一个集合，在其上进行加减乘除而不脱离该集合, 除法按以下规则定义: a/b=a(b-1).</p><p>有理数集合, 实数集合和复数集合都是域；整数集合不是域，因为除了1和-1有乘法逆元，其他元素都无乘法逆元</p><h5 id="模算术运算"><a href="#模算术运算" class="headerlink" title="模算术运算"></a>模算术运算</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a1 op a2) mod n =[(a1 mod n ) op (a2 mod n)] mod n</span><br></pre></td></tr></table></figure><h5 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h5><p>gcd(a, b) = gcd(b, a%b) .辗转相除直到第一个参数能够整除第二个参数即可</p><h5 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a mod n = b mod n，则a和b模n同余</span><br><span class="line">同余是一种等价关系，满足自反，对称，可传递</span><br></pre></td></tr></table></figure><h5 id="加法逆元和乘法逆元"><a href="#加法逆元和乘法逆元" class="headerlink" title="加法逆元和乘法逆元"></a>加法逆元和乘法逆元</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对每一个w，存在一个z能够让(w+z) mod n = 0，则z是加法逆元</span><br><span class="line">如果wz mod n = 1，注意不是0，则z是乘法逆元</span><br></pre></td></tr></table></figure><h5 id="计算乘法逆元，扩展欧几里得算法"><a href="#计算乘法逆元，扩展欧几里得算法" class="headerlink" title="计算乘法逆元，扩展欧几里得算法"></a>计算乘法逆元，扩展欧几里得算法</h5><p>计算乘法逆元表示为：ax mod n = 1, 已知a，求x</p><p>引理：如果gcd(a, n) = 1，对每个i, j, 有i &lt; j &lt; n，则ai mod n 不会等于 aj mod n</p><p>定理：如果gcd(a, n) = 1, 一定存在整数x，满足ax mod n = 1，可以用扩展欧几里得算法求逆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ax + by = d = gcd(a, b)</span><br><span class="line">如果gcd(a, b) = 1，则有ax + by = 1</span><br><span class="line">将 1 mod a = 1 mod a的1用上式进行替换</span><br><span class="line">    ( (ax mod a) + (by mod a) mod a) = 1 mod a</span><br><span class="line">ax mod a = 0，所以：</span><br><span class="line">    (by mod a) mod a = 1 mod a，所以：</span><br><span class="line">    by mod a = 1</span><br><span class="line">如果by mod a = 1，则y = b^-1</span><br></pre></td></tr></table></figure><p>线性O(n)内求逆元代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 2; i &lt; MAXN; ++i)&#123;</span><br><span class="line">    inv[i] = mul(inv[mod%i], mod - mod / i, mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数论三大定理的概念与证明"><a href="#数论三大定理的概念与证明" class="headerlink" title="数论三大定理的概念与证明"></a>数论三大定理的概念与证明</h4><h5 id="数论基本知识"><a href="#数论基本知识" class="headerlink" title="数论基本知识"></a>数论基本知识</h5><p><strong>单向函数(One-way Function)</strong></p><p> 一函数<em>f</em> 若满足下列条件, 则称<em>f</em> 为单向函数：</p><p> (1)对于所有属于<em>f</em> 域的任一<em>x</em>, 容易计算<em>y</em>= <em>f</em>(<em>x</em>)</p><p> (2)对于几乎所有属于<em>f</em> 域的任一<em>y</em>, 求得<em>x</em>, 使<em>y</em>= <em>f</em>(<em>x</em>), 在计算上不可行。</p><p><strong>单向陷井门函数(One-way Trapdoor Function)</strong></p><p> 一“可逆”函数<em>F</em>若满足下列二条件, 则称<em>F</em>为单向陷井门函数:</p><p>(1)对于所有属于<em>F</em>域的任一<em>x</em>, 容易计算<em>F</em>(<em>x</em>)=<em>y</em>；</p><p>(2)对于几乎所有属于<em>F</em>域的任一<em>y</em>, 除非获得暗门信息(trapdoor), 否则求出<em>x</em>, 使得 <em>x</em> = <em>F</em>-1(<em>y</em>)在计算上不可行, <em>F</em>-1为<em>F</em>之逆函数; 如有额外信息(暗门), 则容易求出    <em>x</em> = <em>F</em>-1(<em>y</em>)。</p><h5 id="费马定理"><a href="#费马定理" class="headerlink" title="费马定理"></a>费马定理</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113150943674.png" alt="image-20200113150943674"></p><h5 id="费马小定理和欧拉定理"><a href="#费马小定理和欧拉定理" class="headerlink" title="费马小定理和欧拉定理"></a>费马小定理和欧拉定理</h5><p>欧拉函数φ(n)是比n小且与n互素的正整数的个数，即模n的缩剩余系中元素之个数。</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151112824.png" alt="image-20200113151112824"></p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151138849.png" alt="image-20200113151138849"></p><h5 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151240618.png" alt="image-20200113151240618"></p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151310255.png" alt="image-20200113151310255"></p><h5 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h5><p>幂运算是相对容易的, 求解离散对数通常是难解问题。离散对数是包括Diffie-Hellman密钥交换和数字签名(DSA)在内的许多公钥算法的基础。</p><h4 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h4><p>对称密码又称传统加密算法，加密密钥能够从解密密钥中推算出来。反过来也成立。在大多数对称算法中，加密和解密的密钥是一样的。 </p><p>要求：要求发送者和接受者在安全通信之前，商定一个密钥，对称算法的安全性依赖于密钥，泄露密钥意味着所有的人都能够对消息进行了加密解密，这个密码也就没有用了。 </p><p>对称密码可以分成两类：</p><blockquote><p>序列算法（流算法）：逐字的读入明文，一个字一个字的进行单独的加密。比如将a替换成z，b替换成y，这种只针对一个字一个字的替换密码，所以又称流密码。</p></blockquote><blockquote><p>分组密码：对明文的一组进行加密，比如64个字一组，一起进行加密，这个计算机中经常用到，因为64大到足够防止破译，又小到可以方便使用。</p></blockquote><h5 id="DES（数据加密标准）"><a href="#DES（数据加密标准）" class="headerlink" title="DES（数据加密标准）"></a>DES（数据加密标准）</h5><p>分组密码是一种加密解密算法，将输入明文分组当做一个整体处理，输出一个等长的密文分组。</p><p>许多分组密码都采用Feistel结构，这样的结构由许多相同的轮函数组成。每一轮里，对输入数据的一半进行代换，接着用一个置换来交换数据的两个部分，扩展初始的密钥使得每一轮使用不同的子密钥。</p><p>DES是应用最为广泛的分组密码，它扩展了经典的Feistel结构。DES 的 分组和 密钥分别是 64  位和 56  位，整个加密包含 16  轮迭代。</p><p>S 盒：8  个，将 6  位数据映射成 4  位数据(即 6 位输入，4 位输出) 。</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151343976.png" alt="image-20200113151343976"></p><h5 id="DES加解密过程"><a href="#DES加解密过程" class="headerlink" title="DES加解密过程"></a>DES加解密过程</h5><p>先直接看一遍加密性质：</p><ul><li>分组密码：明文密文都是64位</li><li>字符都变成二进制，即每一位都是一个二进制，0或者1</li><li>密钥长度56位(64-8)，生命周期短，运算速度慢</li></ul><p>然后是加密的过程，分为两步，第一步是密钥生成，第二步才是加密。</p><p>总概述过程如下：</p><ul><li><p>密钥生成</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151626771.png" alt="image-20200113151626771"></p><p>加密</p><ul><li>Step1：输入64位数据块，进行初始置换，输出32位R0和L0</li><li>Step2：将L0和R0进行16次f函数运算，每一次要用到相应的密钥K_i(f函数在下面会详细说道)，输出最后的32位R0和32位L0</li><li>Step3：将最后的R0和L0进行逆置换，输出64位密文，结束，总过程如下图<img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151432697.png" alt="image-20200113151432697"></li></ul></li></ul><p>加密过程详细</p><p>密钥生成不再叙述，这里从头详细说一遍加密过程</p><blockquote><p>开始之前：我们有64位明文数据块，16个子密钥K0-K15</p></blockquote><p>Step1、初始置换</p><p>将64位数据块按照下面的表打乱顺序</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151456894.png" alt="image-20200113151456894"></p><p>打乱后从中切开，左32位提出叫做L0，后32位提出叫做R0，【只输入R0】进入下个步骤</p><p>Step2、f函数</p><p>f函数分为三个步骤</p><p>第一步、扩展32位R0数据块</p><p>按照下面的表进行扩展，将32位R0扩展成48位</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151705500.png" alt="image-20200113151705500"></p><p>第二步、与子密钥模二相加</p><p>将这个48位和对应的子密钥(第一次运算f函数就是K0，第十六次就是K15)模二相加，得到新的48位。</p><p>第三步、S盒替代</p><p>将这个新的48位按照每6位分成8个块，每个块是6位。</p><p>对每个块来说，将第一位和第六位合在一起的两位，计算出一个0-3的数字，叫做行，再将剩余的四位合在一起计算出一个0-15的数字，叫做列，一共得到8对行和列，然后在下面8个表S1-S8中，分别按照行列，找出8个十进制数字。这个过程叫做S盒替代。</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151731406.png" alt="image-20200113151731406"></p><p>将得到的8个十进制数字全部转成四位二进制合成，得到32位。</p><p>第四步、P盒置换</p><p>将这个32位再按照下面的表打乱顺序</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113151754935.png" alt="image-20200113151754935"></p><p>第五步、得到R1</p><p>这样得到了最终的32位，现在，我们将这个32位叫做新的R0，即R1，将R1与之前一直没有改动的L0模二相加，得到新的R1。</p><p>第六步、得到新的L1和R1，回到第一步，重复f函数</p><p>将之前的没有变动的32位R0改成L1，现在我们有了新的L1和R1，可以重复这六步，得到L2和R2，重复16次，得到L15和R15</p><p>Step3、合并L15和R15，逆置换</p><p>合并L15和R15，得到64位数据，按照下表进行逆置换打乱顺序</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152002327.png" alt="image-20200113152002327"></p><p>结束，得到64位密文</p><h5 id="多重DES"><a href="#多重DES" class="headerlink" title="多重DES"></a>多重DES</h5><p>多重加密是将一个加密算法多次使用的技术，明文通过加密算法转化为密文，然后将该密文作为输入重新执行加密算法，该过程可以重复多次。</p><p>三重DES(3DES)在三个阶段使用DES算法，共用到两组或三组密钥。</p><h5 id="分组密码的五种工作模式："><a href="#分组密码的五种工作模式：" class="headerlink" title="分组密码的五种工作模式："></a>分组密码的五种工作模式：</h5><p>选择工作模式是一项增强密码算法或者使算法适应具体应用的技术。就是把明文分组后如何进行加密，有五种方法</p><p>·电子密码本模式（ECB）：明文分成 64 的分组进行加密，必要时填充，每个分组用同一密钥加密，同样明文分组加密得相同密文。<br>·密文分组链接模式（CBC）：加密输入是当前明文分组和前一密文分组的异或，形成一条链，使用相同的密钥，这样每个明文分组的加密函数输入与明文分组之间不再有固定的关系<br>·密文反馈模式（CFB）：是一种将 DES 转化成流密码的技术。加密函数高端 j 位与明文 P1 的第一单元异或，产生 j 位密文 C1 进入移位寄存器低端，继续加密，与 P2 输入异或，如此重复直到所有明文单元都完成加密。<br>·输出反馈模式（OFB）：结构上类似 CFB，但是 OFB 中加密函数输出被反馈回移位寄存器。<br>·计数器模式（CRT）：每一个明文分组都必须使用一个不同的密钥和计数器值，决不要重复使用</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152021877.png" alt="image-20200113152021877"></p><h4 id="公钥密码学-也叫非对称密码"><a href="#公钥密码学-也叫非对称密码" class="headerlink" title="公钥密码学(也叫非对称密码)"></a>公钥密码学(也叫非对称密码)</h4><p>非对称密码是一种密码体制，其加密算法和解密算法使用不同的密钥，一个是公钥，一个是私钥。</p><h5 id="公钥密码应用"><a href="#公钥密码应用" class="headerlink" title="公钥密码应用"></a>公钥密码应用</h5><ul><li>加密/解密：发送方用接收方的公钥对消息加密</li><li>数字签名：发送方用其私钥对消息签名，可以对整体消息签名或对消息的摘要签名</li><li>密码交换：通信双方交换会话密钥</li></ul><h5 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574580137669.png" alt="1574580137669"></p><h5 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574580173589.png" alt="1574580173589"></p><h5 id="非对称相关概念"><a href="#非对称相关概念" class="headerlink" title="非对称相关概念"></a>非对称相关概念</h5><p><strong>对称密码的局限：</strong></p><ul><li>密钥管理困难：两两用户分别用一对密钥，需要n∗(n−1)/2个密钥，复杂度是n2</li><li>数字签名无法实现：无法实现抗抵赖</li><li>密钥必须经过安全的信道分配（密钥只用于DES加密的密钥，有时也叫会话秘钥）</li></ul><p><strong>公钥密码体制的组成</strong></p><p>​    明文：算法的输入，可读信息或数据</p><p>​    加密算法：对明文进行各种转换</p><p>​    公钥和私钥：算法的输入，分别用于加密和解密</p><p>​    密文：算法的输出，依赖于明文和密钥</p><p>​    解密算法：根据密文和密钥，还原明文</p><p><strong>公钥密码：</strong></p><ul><li>算法是非对称算法，密钥分为公钥和私钥</li><li>公钥可以公开</li><li>基于数学函数（单向陷阱门函数）而不是替代置换</li></ul><p><strong>公钥算法的条件</strong></p><ul><li>产生一对密钥计算可行</li><li>已知公钥和明文，产生密文是计算可行的</li><li>接收方用私钥来解密密文是计算可行的</li><li>通过公钥判断私钥是计算不可行的</li><li>只知道公钥和密文是无法恢复明文的</li></ul><p><strong>单向陷阱门函数f</strong></p><ul><li>已知x，求y=f(x)容易</li><li>给定y，计算y=f(x)的x是困难的</li><li>存在z，当z已知的时候，已知y，计算y=f(x)的x是容易的</li></ul><p>寻找单向陷阱门函数是公钥密码体制应用的关键。也是那些经典算法的源头。</p><h5 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h5><p>理论基础：两个大素数相乘容易，分解成两个大素数很难</p><p><strong>获得密钥</strong></p><p>待获得的密钥：公钥(n, e1), 私钥(n, e2)</p><p><strong>算法流程</strong></p><p>随机选择两个秘密大素数p和q；</p><p>计算公开模数n=p*q；</p><p>计算秘密的欧拉指数函数φ(n)=(p-1)(q-1)；</p><p>选择一个与φ(n)互素的数，作为e或d；</p><p>用Euclid算法计算模φ(n)的乘法逆元素，即根据</p><p>​              ed mod φ(n)=1, 求d或e；</p><p>加密：C = Me mod n</p><p>解密：M= Cd mod n = (Me mod n)d mod n = M</p><p>这里，φ(n)为欧拉函数,  即集合(1, 2, …, n-1)中与n互素的数的个数。</p><h5 id="RSA证明"><a href="#RSA证明" class="headerlink" title="RSA证明"></a>RSA证明</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152053260.png" alt="image-20200113152053260"></p><h5 id="RSA计算"><a href="#RSA计算" class="headerlink" title="RSA计算"></a>RSA计算</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152110799.png" alt="image-20200113152110799"></p><h5 id="RSA的缺点"><a href="#RSA的缺点" class="headerlink" title="RSA的缺点"></a>RSA的缺点</h5><ul><li>速度慢，比DES慢了至少100倍</li><li>产生密钥太麻烦</li><li>分组长度太大</li></ul><h5 id="对RSA的攻击方法"><a href="#对RSA的攻击方法" class="headerlink" title="对RSA的攻击方法"></a>对RSA的攻击方法</h5><p>强行攻击：尝试所有可能的密钥</p><p>数学攻击：对两个素数乘积的因子分解(FAC问题)</p><p>计时攻击：依赖于解密算法的运行时间</p><h4 id="公钥密码学之密钥管理"><a href="#公钥密码学之密钥管理" class="headerlink" title="公钥密码学之密钥管理"></a>公钥密码学之密钥管理</h4><p>为了保证公钥的正确性，即A确实能得到B的公钥，也就是当公钥的真实性能够得到保证。</p><h5 id="几种公钥分配方法："><a href="#几种公钥分配方法：" class="headerlink" title="几种公钥分配方法："></a>几种公钥分配方法：</h5><p>公开发布（随便发，任何人都可以伪造这种公钥的发布）、公开可访问的目录（一个管理员管理所有的公钥，但攻击者获得目录管理员私钥，就可以随意更改记录）、公钥授权、公钥证书</p><h5 id="公钥授权"><a href="#公钥授权" class="headerlink" title="公钥授权"></a>公钥授权</h5><p>A发送带有时间戳的消息给公钥管理员, 请求B的当前公钥</p><p>管理员给A发送用其私钥KRauth加密的消息, A用管理员的公钥解密，可以确信该消息来自管理员：</p><p>​    B的公钥KUb，用来加密；</p><p>​    原始请求，A可以验证其请求未被修改；</p><p>​    原始时间戳, A可以确定收到的不是来自管理员的旧消息。</p><p>A保存B的公钥, 并用它对包含A的标识IDA和Nonce1的消息加密, 然后发送给B</p><p>B以同样方式从管理员处得到A的公钥</p><p>B用KUa对A的N1和B的N2加密, 发送给A</p><p>A用B的公钥对N2加密并发送给B, 使B相信其通信伙伴是A</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152141654.png" alt="image-20200113152141654"></p><h5 id="公钥证书"><a href="#公钥证书" class="headerlink" title="公钥证书"></a>公钥证书</h5><p>有了公钥证书使得不通过实时访问公钥授权部门而实现公钥交换成为可能</p><p>公钥证书将一个通信方的身份与他的公开密钥绑定在一起，通常还包括有效期和使用方法等</p><p>证书的所有内容必须经由可信公钥授权方或者证书授权方签名后方可生效</p><p>知道公钥授权当局公开密钥的任何人都可以验证一个用户的公开密钥证书的有效性 </p><p>对于申请者A，管理员提供的证书为：</p><p>​    CA = EKRauth [T, IDA, KUa]</p><p>其他人读取并验证：</p><p>​    DKUauth[CA]=DKUauth [EKRauth [T, IDA, KUa]]=(T, IDA, KUa)</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152201887.png" alt="image-20200113152201887"></p><h4 id="利用公钥密码分配对称加密的密钥"><a href="#利用公钥密码分配对称加密的密钥" class="headerlink" title="利用公钥密码分配对称加密的密钥"></a>利用公钥密码分配对称加密的密钥</h4><h5 id="具有保密性和真实性的密钥分配"><a href="#具有保密性和真实性的密钥分配" class="headerlink" title="具有保密性和真实性的密钥分配"></a>具有保密性和真实性的密钥分配</h5><p>为了准确得到会话密钥， 利用公钥密码分配传统密码体制的密钥  </p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152224937.png" alt="image-20200113152224937"></p><h5 id="Diffie-Hellman算法"><a href="#Diffie-Hellman算法" class="headerlink" title="Diffie-Hellman算法"></a>Diffie-Hellman算法</h5><p>作用：允许两个用户可以安全交换【一个秘密信息】，用于后续的通讯工程</p><p>Diffie-Hellman密钥交换算法是一种公钥分发机制，它不是用来加密消息的，所生成的是通信双方共享的会话密钥，必须保密，其值取决于通信双方的私钥和公钥信息</p><p>安全性依赖：计算离散对数的难度</p><p><strong>素数的原始根</strong></p><p>假设原始根为a，则：</p><p>a mod p, a^2 mod p, …., a^(p - 1) mod p 是1, 2, 3, …., p - 1的一个置换</p><p>对于所有素数，其原根必定存在，即对于一个整数b和素数p的一个原根，可以找到唯一的指数i, 使得 b = a^i mod p, 其中 0&lt;= i &lt;= p-1指数i称为b的以a为基数的模p的离散对数或者指数。</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152252058.png" alt="image-20200113152252058"></p><h5 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h5><p>A选取x_0, 计算出来了X，发给B</p><p>X被我截获，我选取x_00，计算出来了X_改，发给B</p><p>B把我当成了A，接收到了X改，选取x_1，得到X_b，发给我</p><p>我再发给A，至此完成攻击</p><p>ps：我必须一直伪装，不然就会被发现 ps：我永远不知道真正的K，即a^x0∗x1</p><h5 id="防范中间人攻击"><a href="#防范中间人攻击" class="headerlink" title="防范中间人攻击"></a>防范中间人攻击</h5><ul><li>使用共享的对称密钥加密DH交换</li><li>使用公钥加密DH交换</li><li>使用私钥签名DH交换</li></ul><h5 id="ElGamal加密方案"><a href="#ElGamal加密方案" class="headerlink" title="ElGamal加密方案"></a>ElGamal加密方案</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152318077.png" alt="image-20200113152318077"></p><h5 id="ElGamal加密方案计算"><a href="#ElGamal加密方案计算" class="headerlink" title="ElGamal加密方案计算"></a>ElGamal加密方案计算</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152339546.png" alt="image-20200113152339546"></p><h4 id="消息认证"><a href="#消息认证" class="headerlink" title="消息认证"></a>消息认证</h4><p>【消息认证】：验证消息完整性的一种机制/服务，确保收到的数据和发送的时候是一样的，不被篡改，而且发送方的身份是真实有效的。主要关注保护消息完整性，验证发送人身份与消息源的不可否认。</p><h5 id="可能受到的攻击"><a href="#可能受到的攻击" class="headerlink" title="可能受到的攻击"></a>可能受到的攻击</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">泄密Disclosure，将消息透露给没有合法身份的第三方</span><br><span class="line">传输分析Traffic analysis，分析双方通信模式</span><br><span class="line">伪装Masquerade，欺诈源向网络中插入一条消息</span><br><span class="line">内容篡改Content modification，对消息内容的修改</span><br><span class="line">顺序篡改Sequence modification，对消息顺序的修改</span><br><span class="line">计时篡改Timing modification，对消息的延时和重放</span><br><span class="line">信源抵赖Source repudiation,发送方否认发送过某消息</span><br><span class="line">信宿抵赖Destination repudiation，接收方否认接收过某消息</span><br></pre></td></tr></table></figure><h5 id="消息认证方法"><a href="#消息认证方法" class="headerlink" title="消息认证方法"></a>消息认证方法</h5><p>三种消息认证的方法：消息加密，消息认证码(MAC)，哈希函数</p><p>消息加密：比如使用对称加密，默认只有发送方拥有密钥，才能产生可以解密的密文。</p><p>消息认证码MAC：使用密钥产生短小的定长数据分组，附加在报文里。例如AB共享密钥K，A发送B报文M，A计算MAC=C(K)，夹在报文里发给B。B收到这个MAC后根据报文重新计算比并且对比一下就好了。要注意报文认证不提供保密，而且MAC不提供数字签名，所以双方必须共享密钥。</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574586237896.png" alt="1574586237896"></p><p>哈希函数：输入任意长度的消息M，输出一个固定长度的散列值，这个值称为消息摘要。它对所有的M的位都进行了错误检验，任何一位发送变化都会导致散列值的变化。</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574586317884.png" alt="1574586317884"></p><p>散列函数的要求：H能用于任何大小的分组，能产生定长的输出，能方便的计算，具有单向性，弱抗冲突性，强抗冲突性。</p><p>弱无碰撞：给定消息x属于X中，在计算上无法找到一个x’使得H(x) = H(x’)</p><p>强无碰撞：任何情况下，在计算上都无法找到一个x’使得H(x) = H(x’)，其中包含了弱无碰撞的所有情况</p><p>分类：带密钥的Hash函数散列值有且仅有双方知道的密钥K来控制，生成的散列值叫MAC。不带密钥的Hash函数散列值叫MDC</p><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>作用：数字签名是一种认证机制，它使得消息的产生者可以添加一个起签名作用的码字。通过计算消息的散列值并用产生者的私钥加密散列值来生成签名。使明文信息的接收者能够验证信息确实来自合法用户，以及确认信息发送者身份。签名保证了消息的来源和完整性。相互认证协议使得通信的各方对相互的身份感到放心，并交换会话密钥。</p><p>与消息认证的区别：消息认证主要是看消息有没有被修改过，但是无法解决双方有利害冲突中的纷争，需要更严格的手段，也就是数字签名</p><h5 id="ElGamal签名方案"><a href="#ElGamal签名方案" class="headerlink" title="ElGamal签名方案"></a>ElGamal签名方案</h5><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574586969793.png" alt="1574586969793"></p><p>基本形式：1、对消息整体签字，也就是对消息整个处理后得到签字。2、对消息摘要签字，附在被签消息后面，嵌在消息后面或者某个特定地方</p><p>类别：1、确定性数字签名，明文和签名一一对应。2、概率性数字签名，一个明文能有多个合法签名，每次都不一样。</p><h5 id="直接数字签名DDS"><a href="#直接数字签名DDS" class="headerlink" title="直接数字签名DDS"></a>直接数字签名DDS</h5><p>要求：仅涉及两个通信方，通常先签名，再对消息和签名一起进行加密，安全性依赖私有密钥的安全性。</p><h5 id="仲裁数字签名"><a href="#仲裁数字签名" class="headerlink" title="仲裁数字签名"></a>仲裁数字签名</h5><p>涉及到一个仲裁方(arbiter A)</p><p>签名方的签名报文首先送给仲裁者</p><p>仲裁者对报文和签名进行测试以检验出处和内容，然后注上日期和仲裁说明后发给接收方</p><p>要求仲裁方在一定程度上是可以信任的</p><p>可以用对称密码或公开密钥密码实现</p><p>仲裁方可以知道消息，也可以不知道消息</p><h4 id="CA认证"><a href="#CA认证" class="headerlink" title="CA认证"></a>CA认证</h4><h5 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h5><p>Kerberos是一种设计用于分布式环境下的认证服务，Kerberos利用一个可信的第三方认证服务来完成客户端和服务器端的认证</p><p>l通过提供一个集中的授权服务器来负责用户对服务器的认证和服务器对用户的认证，而不是对每个服务器提供详细的认证协议</p><p>l允许用户通过网络访问分布的服务器</p><p>l不需要信任所有的工作站和服务器</p><p>l只要信任集中式的认证服务器即可</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574587855600.png" alt="1574587855600"></p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/1574587986789.png" alt="1574587986789"></p><h5 id="认证过程-1"><a href="#认证过程-1" class="headerlink" title="认证过程"></a>认证过程</h5><p>简单的认证会话过程可以类比于以下过程：</p><ul><li>学生(C)要借教室(S)，于是要先把自己的ID和证明自己是学生的密码(PS)和要借的教室号(IDS)告诉保安(AS)</li><li>保安给了学生一个一次性的钥匙(Ticket)</li><li>学生通过一次性钥匙去打开了教室门(S)</li></ul><p>所以如果证明自己是学生的密码被偷，或者保安不在的话，就会出问题</p><p>更安全的认证可以类比以下过程:</p><ul><li>学生(C)要借教室(S), 于是要先把自己的ID和老师(TGS)的ID，和现在的时间告诉保安(AS)</li><li>保安给了学生一袋东西，里面有票据和这个学生和老师都知道的一个共享的钥匙(Ticket_tgs)，学生是不能打开这袋东西的</li><li>然后学生要把这袋东西给老师(TGS)，老师就能验证一下，用保安很久之前就给他的钥匙打开了这袋东西，得到了共享的密钥，验证了这个学生确实就是他派出去的学生，就可以把这袋东西里面换成真正的钥匙和一个票据，这个票据是老师和这个教室的锁共享的，别人不知道</li><li>学生来到教室把这袋东西给教室的锁，锁就把真正的钥匙拿了出来开了门，并且把时间+1，表示正常的开门了。时间+1的目的是这个真正的钥匙可能会有有效期，用过多少次就会失效</li></ul><h5 id="证书的层次结构"><a href="#证书的层次结构" class="headerlink" title="证书的层次结构"></a>证书的层次结构</h5><p>每一个用户信任他的父节点的证书 ，通过层次化的结构，可以使一个CA下的用户验证任何其他CA下的用户的公钥证书</p><p><img src="/../assets/pic/2017-01-03-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/image-20200113152433550.png" alt="image-20200113152433550"></p><p>说白了就是里面的节点既可以当公证也可以当申请的人，A要查看B的话要走一条到B的路径，经过一系列的公证，写下来即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整个课就三个部分：对称密码，非对称密码，和几种安全服务(消息认证，数字签名，认证，证书等等都是为了安全服务)&lt;/p&gt;
    
    </summary>
    
      <category term="技术学习" scheme="/categories/learning/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="复习" scheme="/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
</feed>
